Module(
    body=[
        ImportFrom(
            lineno=3,
            col_offset=0,
            end_lineno=3,
            end_col_offset=23,
            module='odoo',
            names=[alias(name='fields', asname=None)],
            level=0,
        ),
        ImportFrom(
            lineno=4,
            col_offset=0,
            end_lineno=4,
            end_col_offset=29,
            module='odoo.http',
            names=[alias(name='request', asname=None)],
            level=0,
        ),
        ImportFrom(
            lineno=5,
            col_offset=0,
            end_lineno=5,
            end_col_offset=49,
            module='odoo.tools',
            names=[
                alias(name='consteq', asname=None),
                alias(name='float_round', asname=None),
                alias(name='ustr', asname=None),
            ],
            level=0,
        ),
        ImportFrom(
            lineno=6,
            col_offset=0,
            end_lineno=6,
            end_col_offset=45,
            module='odoo.tools.misc',
            names=[alias(name='hmac', asname='hmac_tool')],
            level=0,
        ),
        FunctionDef(
            lineno=11,
            col_offset=0,
            end_lineno=25,
            end_col_offset=23,
            name='generate_access_token',
            args=arguments(
                posonlyargs=[],
                args=[],
                vararg=arg(lineno=11, col_offset=27, end_lineno=11, end_col_offset=33, arg='values', annotation=None, type_comment=None),
                kwonlyargs=[],
                kw_defaults=[],
                kwarg=None,
                defaults=[],
            ),
            body=[
                Expr(
                    lineno=12,
                    col_offset=4,
                    end_lineno=22,
                    end_col_offset=7,
                    value=Constant(lineno=12, col_offset=4, end_lineno=22, end_col_offset=7, value=' Generate an access token based on the provided values.\n\n    The token allows to later verify the validity of a request, based on a given set of values.\n    These will generally include the partner id, amount, currency id, transaction id or transaction\n    reference.\n    All values must be convertible to a string.\n\n    :param list values: The values to use for the generation of the token\n    :return: The generated access token\n    :rtype: str\n    ', kind=None),
                ),
                Assign(
                    lineno=23,
                    col_offset=4,
                    end_lineno=23,
                    end_col_offset=52,
                    targets=[Name(lineno=23, col_offset=4, end_lineno=23, end_col_offset=13, id='token_str', ctx=Store())],
                    value=Call(
                        lineno=23,
                        col_offset=16,
                        end_lineno=23,
                        end_col_offset=52,
                        func=Attribute(
                            lineno=23,
                            col_offset=16,
                            end_lineno=23,
                            end_col_offset=24,
                            value=Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=19, value='|', kind=None),
                            attr='join',
                            ctx=Load(),
                        ),
                        args=[
                            GeneratorExp(
                                lineno=23,
                                col_offset=24,
                                end_lineno=23,
                                end_col_offset=52,
                                elt=Call(
                                    lineno=23,
                                    col_offset=25,
                                    end_lineno=23,
                                    end_col_offset=33,
                                    func=Name(lineno=23, col_offset=25, end_lineno=23, end_col_offset=28, id='str', ctx=Load()),
                                    args=[Name(lineno=23, col_offset=29, end_lineno=23, end_col_offset=32, id='val', ctx=Load())],
                                    keywords=[],
                                ),
                                generators=[
                                    comprehension(
                                        target=Name(lineno=23, col_offset=38, end_lineno=23, end_col_offset=41, id='val', ctx=Store()),
                                        iter=Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=51, id='values', ctx=Load()),
                                        ifs=[],
                                        is_async=0,
                                    ),
                                ],
                            ),
                        ],
                        keywords=[],
                    ),
                    type_comment=None,
                ),
                Assign(
                    lineno=24,
                    col_offset=4,
                    end_lineno=24,
                    end_col_offset=86,
                    targets=[Name(lineno=24, col_offset=4, end_lineno=24, end_col_offset=16, id='access_token', ctx=Store())],
                    value=Call(
                        lineno=24,
                        col_offset=19,
                        end_lineno=24,
                        end_col_offset=86,
                        func=Name(lineno=24, col_offset=19, end_lineno=24, end_col_offset=28, id='hmac_tool', ctx=Load()),
                        args=[
                            Call(
                                lineno=24,
                                col_offset=29,
                                end_lineno=24,
                                end_col_offset=49,
                                func=Attribute(
                                    lineno=24,
                                    col_offset=29,
                                    end_lineno=24,
                                    end_col_offset=40,
                                    value=Name(lineno=24, col_offset=29, end_lineno=24, end_col_offset=36, id='request', ctx=Load()),
                                    attr='env',
                                    ctx=Load(),
                                ),
                                args=[],
                                keywords=[
                                    keyword(
                                        lineno=24,
                                        col_offset=41,
                                        end_lineno=24,
                                        end_col_offset=48,
                                        arg='su',
                                        value=Constant(lineno=24, col_offset=44, end_lineno=24, end_col_offset=48, value=True, kind=None),
                                    ),
                                ],
                            ),
                            Constant(lineno=24, col_offset=51, end_lineno=24, end_col_offset=74, value='generate_access_token', kind=None),
                            Name(lineno=24, col_offset=76, end_lineno=24, end_col_offset=85, id='token_str', ctx=Load()),
                        ],
                        keywords=[],
                    ),
                    type_comment=None,
                ),
                Return(
                    lineno=25,
                    col_offset=4,
                    end_lineno=25,
                    end_col_offset=23,
                    value=Name(lineno=25, col_offset=11, end_lineno=25, end_col_offset=23, id='access_token', ctx=Load()),
                ),
            ],
            decorator_list=[],
            returns=None,
            type_comment=None,
        ),
        FunctionDef(
            lineno=28,
            col_offset=0,
            end_lineno=40,
            end_col_offset=72,
            name='check_access_token',
            args=arguments(
                posonlyargs=[],
                args=[arg(lineno=28, col_offset=23, end_lineno=28, end_col_offset=35, arg='access_token', annotation=None, type_comment=None)],
                vararg=arg(lineno=28, col_offset=38, end_lineno=28, end_col_offset=44, arg='values', annotation=None, type_comment=None),
                kwonlyargs=[],
                kw_defaults=[],
                kwarg=None,
                defaults=[],
            ),
            body=[
                Expr(
                    lineno=29,
                    col_offset=4,
                    end_lineno=38,
                    end_col_offset=7,
                    value=Constant(lineno=29, col_offset=4, end_lineno=38, end_col_offset=7, value=' Check the validity of the access token for the provided values.\n\n    The values must be provided in the exact same order as they were to `generate_access_token`.\n    All values must be convertible to a string.\n\n    :param str access_token: The access token used to verify the provided values\n    :param list values: The values to verify against the token\n    :return: True if the check is successful\n    :rtype: bool\n    ', kind=None),
                ),
                Assign(
                    lineno=39,
                    col_offset=4,
                    end_lineno=39,
                    end_col_offset=52,
                    targets=[Name(lineno=39, col_offset=4, end_lineno=39, end_col_offset=19, id='authentic_token', ctx=Store())],
                    value=Call(
                        lineno=39,
                        col_offset=22,
                        end_lineno=39,
                        end_col_offset=52,
                        func=Name(lineno=39, col_offset=22, end_lineno=39, end_col_offset=43, id='generate_access_token', ctx=Load()),
                        args=[
                            Starred(
                                lineno=39,
                                col_offset=44,
                                end_lineno=39,
                                end_col_offset=51,
                                value=Name(lineno=39, col_offset=45, end_lineno=39, end_col_offset=51, id='values', ctx=Load()),
                                ctx=Load(),
                            ),
                        ],
                        keywords=[],
                    ),
                    type_comment=None,
                ),
                Return(
                    lineno=40,
                    col_offset=4,
                    end_lineno=40,
                    end_col_offset=72,
                    value=BoolOp(
                        lineno=40,
                        col_offset=11,
                        end_lineno=40,
                        end_col_offset=72,
                        op=And(),
                        values=[
                            Name(lineno=40, col_offset=11, end_lineno=40, end_col_offset=23, id='access_token', ctx=Load()),
                            Call(
                                lineno=40,
                                col_offset=28,
                                end_lineno=40,
                                end_col_offset=72,
                                func=Name(lineno=40, col_offset=28, end_lineno=40, end_col_offset=35, id='consteq', ctx=Load()),
                                args=[
                                    Call(
                                        lineno=40,
                                        col_offset=36,
                                        end_lineno=40,
                                        end_col_offset=54,
                                        func=Name(lineno=40, col_offset=36, end_lineno=40, end_col_offset=40, id='ustr', ctx=Load()),
                                        args=[Name(lineno=40, col_offset=41, end_lineno=40, end_col_offset=53, id='access_token', ctx=Load())],
                                        keywords=[],
                                    ),
                                    Name(lineno=40, col_offset=56, end_lineno=40, end_col_offset=71, id='authentic_token', ctx=Load()),
                                ],
                                keywords=[],
                            ),
                        ],
                    ),
                ),
            ],
            decorator_list=[],
            returns=None,
            type_comment=None,
        ),
        FunctionDef(
            lineno=45,
            col_offset=0,
            end_lineno=68,
            end_col_offset=81,
            name='singularize_reference_prefix',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(lineno=45, col_offset=33, end_lineno=45, end_col_offset=39, arg='prefix', annotation=None, type_comment=None),
                    arg(lineno=45, col_offset=46, end_lineno=45, end_col_offset=55, arg='separator', annotation=None, type_comment=None),
                    arg(lineno=45, col_offset=61, end_lineno=45, end_col_offset=71, arg='max_length', annotation=None, type_comment=None),
                ],
                vararg=None,
                kwonlyargs=[],
                kw_defaults=[],
                kwarg=None,
                defaults=[
                    Constant(lineno=45, col_offset=40, end_lineno=45, end_col_offset=44, value='tx', kind=None),
                    Constant(lineno=45, col_offset=56, end_lineno=45, end_col_offset=59, value='-', kind=None),
                    Constant(lineno=45, col_offset=72, end_lineno=45, end_col_offset=76, value=None, kind=None),
                ],
            ),
            body=[
                Expr(
                    lineno=46,
                    col_offset=4,
                    end_lineno=61,
                    end_col_offset=7,
                    value=Constant(lineno=46, col_offset=4, end_lineno=61, end_col_offset=7, value=' Make the prefix more unique by suffixing it with the current datetime.\n\n    When the prefix is a placeholder that would be part of a large sequence of references sharing\n    the same prefix, such as "tx" or "validation", singularizing it allows to make it part of a\n    single-element sequence of transactions. The computation of the full reference will then execute\n    faster by failing to find existing references with a matching prefix.\n\n    If the `max_length` argument is passed, the end of the prefix can be stripped before\n    singularizing to ensure that the result accounts for no more than `max_length` characters.\n\n    :param str prefix: The custom prefix to singularize\n    :param str separator: The custom separator used to separate the prefix from the suffix\n    :param int max_length: The maximum length of the singularized prefix\n    :return: The singularized prefix\n    :rtype: str\n    ', kind=None),
                ),
                If(
                    lineno=62,
                    col_offset=4,
                    end_lineno=63,
                    end_col_offset=21,
                    test=Compare(
                        lineno=62,
                        col_offset=7,
                        end_lineno=62,
                        end_col_offset=21,
                        left=Name(lineno=62, col_offset=7, end_lineno=62, end_col_offset=13, id='prefix', ctx=Load()),
                        ops=[Is()],
                        comparators=[Constant(lineno=62, col_offset=17, end_lineno=62, end_col_offset=21, value=None, kind=None)],
                    ),
                    body=[
                        Assign(
                            lineno=63,
                            col_offset=8,
                            end_lineno=63,
                            end_col_offset=21,
                            targets=[Name(lineno=63, col_offset=8, end_lineno=63, end_col_offset=14, id='prefix', ctx=Store())],
                            value=Constant(lineno=63, col_offset=17, end_lineno=63, end_col_offset=21, value='tx', kind=None),
                            type_comment=None,
                        ),
                    ],
                    orelse=[],
                ),
                If(
                    lineno=64,
                    col_offset=4,
                    end_lineno=67,
                    end_col_offset=67,
                    test=Name(lineno=64, col_offset=7, end_lineno=64, end_col_offset=17, id='max_length', ctx=Load()),
                    body=[
                        Assign(
                            lineno=65,
                            col_offset=8,
                            end_lineno=65,
                            end_col_offset=28,
                            targets=[Name(lineno=65, col_offset=8, end_lineno=65, end_col_offset=23, id='DATETIME_LENGTH', ctx=Store())],
                            value=Constant(lineno=65, col_offset=26, end_lineno=65, end_col_offset=28, value=14, kind=None),
                            type_comment=None,
                        ),
                        Assert(
                            lineno=66,
                            col_offset=8,
                            end_lineno=66,
                            end_col_offset=65,
                            test=Compare(
                                lineno=66,
                                col_offset=15,
                                end_lineno=66,
                                end_col_offset=65,
                                left=Name(lineno=66, col_offset=15, end_lineno=66, end_col_offset=25, id='max_length', ctx=Load()),
                                ops=[GtE()],
                                comparators=[
                                    BinOp(
                                        lineno=66,
                                        col_offset=29,
                                        end_lineno=66,
                                        end_col_offset=65,
                                        left=BinOp(
                                            lineno=66,
                                            col_offset=29,
                                            end_lineno=66,
                                            end_col_offset=47,
                                            left=Constant(lineno=66, col_offset=29, end_lineno=66, end_col_offset=30, value=1, kind=None),
                                            op=Add(),
                                            right=Call(
                                                lineno=66,
                                                col_offset=33,
                                                end_lineno=66,
                                                end_col_offset=47,
                                                func=Name(lineno=66, col_offset=33, end_lineno=66, end_col_offset=36, id='len', ctx=Load()),
                                                args=[Name(lineno=66, col_offset=37, end_lineno=66, end_col_offset=46, id='separator', ctx=Load())],
                                                keywords=[],
                                            ),
                                        ),
                                        op=Add(),
                                        right=Name(lineno=66, col_offset=50, end_lineno=66, end_col_offset=65, id='DATETIME_LENGTH', ctx=Load()),
                                    ),
                                ],
                            ),
                            msg=None,
                        ),
                        Assign(
                            lineno=67,
                            col_offset=8,
                            end_lineno=67,
                            end_col_offset=67,
                            targets=[Name(lineno=67, col_offset=8, end_lineno=67, end_col_offset=14, id='prefix', ctx=Store())],
                            value=Subscript(
                                lineno=67,
                                col_offset=17,
                                end_lineno=67,
                                end_col_offset=67,
                                value=Name(lineno=67, col_offset=17, end_lineno=67, end_col_offset=23, id='prefix', ctx=Load()),
                                slice=Slice(
                                    lineno=67,
                                    col_offset=24,
                                    end_lineno=67,
                                    end_col_offset=66,
                                    lower=None,
                                    upper=BinOp(
                                        lineno=67,
                                        col_offset=25,
                                        end_lineno=67,
                                        end_col_offset=66,
                                        left=BinOp(
                                            lineno=67,
                                            col_offset=25,
                                            end_lineno=67,
                                            end_col_offset=50,
                                            left=Name(lineno=67, col_offset=25, end_lineno=67, end_col_offset=35, id='max_length', ctx=Load()),
                                            op=Sub(),
                                            right=Call(
                                                lineno=67,
                                                col_offset=36,
                                                end_lineno=67,
                                                end_col_offset=50,
                                                func=Name(lineno=67, col_offset=36, end_lineno=67, end_col_offset=39, id='len', ctx=Load()),
                                                args=[Name(lineno=67, col_offset=40, end_lineno=67, end_col_offset=49, id='separator', ctx=Load())],
                                                keywords=[],
                                            ),
                                        ),
                                        op=Sub(),
                                        right=Name(lineno=67, col_offset=51, end_lineno=67, end_col_offset=66, id='DATETIME_LENGTH', ctx=Load()),
                                    ),
                                    step=None,
                                ),
                                ctx=Load(),
                            ),
                            type_comment=None,
                        ),
                    ],
                    orelse=[],
                ),
                Return(
                    lineno=68,
                    col_offset=4,
                    end_lineno=68,
                    end_col_offset=81,
                    value=JoinedStr(
                        lineno=68,
                        col_offset=11,
                        end_lineno=68,
                        end_col_offset=81,
                        values=[
                            FormattedValue(
                                lineno=68,
                                col_offset=11,
                                end_lineno=68,
                                end_col_offset=81,
                                value=Name(lineno=68, col_offset=14, end_lineno=68, end_col_offset=20, id='prefix', ctx=Load()),
                                conversion=-1,
                                format_spec=None,
                            ),
                            FormattedValue(
                                lineno=68,
                                col_offset=11,
                                end_lineno=68,
                                end_col_offset=81,
                                value=Name(lineno=68, col_offset=22, end_lineno=68, end_col_offset=31, id='separator', ctx=Load()),
                                conversion=-1,
                                format_spec=None,
                            ),
                            FormattedValue(
                                lineno=68,
                                col_offset=11,
                                end_lineno=68,
                                end_col_offset=81,
                                value=Call(
                                    lineno=68,
                                    col_offset=33,
                                    end_lineno=68,
                                    end_col_offset=79,
                                    func=Attribute(
                                        lineno=68,
                                        col_offset=33,
                                        end_lineno=68,
                                        end_col_offset=63,
                                        value=Call(
                                            lineno=68,
                                            col_offset=33,
                                            end_lineno=68,
                                            end_col_offset=54,
                                            func=Attribute(
                                                lineno=68,
                                                col_offset=33,
                                                end_lineno=68,
                                                end_col_offset=52,
                                                value=Attribute(
                                                    lineno=68,
                                                    col_offset=33,
                                                    end_lineno=68,
                                                    end_col_offset=48,
                                                    value=Name(lineno=68, col_offset=33, end_lineno=68, end_col_offset=39, id='fields', ctx=Load()),
                                                    attr='Datetime',
                                                    ctx=Load(),
                                                ),
                                                attr='now',
                                                ctx=Load(),
                                            ),
                                            args=[],
                                            keywords=[],
                                        ),
                                        attr='strftime',
                                        ctx=Load(),
                                    ),
                                    args=[Constant(lineno=68, col_offset=64, end_lineno=68, end_col_offset=78, value='%Y%m%d%H%M%S', kind=None)],
                                    keywords=[],
                                ),
                                conversion=-1,
                                format_spec=None,
                            ),
                        ],
                    ),
                ),
            ],
            decorator_list=[],
            returns=None,
            type_comment=None,
        ),
        FunctionDef(
            lineno=71,
            col_offset=0,
            end_lineno=90,
            end_col_offset=62,
            name='to_major_currency_units',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(lineno=71, col_offset=28, end_lineno=71, end_col_offset=40, arg='minor_amount', annotation=None, type_comment=None),
                    arg(lineno=71, col_offset=42, end_lineno=71, end_col_offset=50, arg='currency', annotation=None, type_comment=None),
                    arg(lineno=71, col_offset=52, end_lineno=71, end_col_offset=76, arg='arbitrary_decimal_number', annotation=None, type_comment=None),
                ],
                vararg=None,
                kwonlyargs=[],
                kw_defaults=[],
                kwarg=None,
                defaults=[Constant(lineno=71, col_offset=77, end_lineno=71, end_col_offset=81, value=None, kind=None)],
            ),
            body=[
                Expr(
                    lineno=72,
                    col_offset=4,
                    end_lineno=83,
                    end_col_offset=7,
                    value=Constant(lineno=72, col_offset=4, end_lineno=83, end_col_offset=7, value=' Return the amount converted to the major units of its currency.\n\n    The conversion is done by dividing the amount by 10^k where k is the number of decimals of the\n    currency as per the ISO 4217 norm.\n    To force a different number of decimals, set it as the value of the `decimal_number` argument.\n\n    :param float minor_amount: The amount in minor units, to convert in major units\n    :param recordset currency: The currency of the amount, as a `res.currency` record\n    :param int arbitrary_decimal_number: The number of decimals to use instead of that of ISO 4217\n    :return: The amount in major units of its currency\n    :rtype: int\n    ', kind=None),
                ),
                Expr(
                    lineno=84,
                    col_offset=4,
                    end_lineno=84,
                    end_col_offset=25,
                    value=Call(
                        lineno=84,
                        col_offset=4,
                        end_lineno=84,
                        end_col_offset=25,
                        func=Attribute(
                            lineno=84,
                            col_offset=4,
                            end_lineno=84,
                            end_col_offset=23,
                            value=Name(lineno=84, col_offset=4, end_lineno=84, end_col_offset=12, id='currency', ctx=Load()),
                            attr='ensure_one',
                            ctx=Load(),
                        ),
                        args=[],
                        keywords=[],
                    ),
                ),
                If(
                    lineno=86,
                    col_offset=4,
                    end_lineno=89,
                    end_col_offset=49,
                    test=Compare(
                        lineno=86,
                        col_offset=7,
                        end_lineno=86,
                        end_col_offset=39,
                        left=Name(lineno=86, col_offset=7, end_lineno=86, end_col_offset=31, id='arbitrary_decimal_number', ctx=Load()),
                        ops=[Is()],
                        comparators=[Constant(lineno=86, col_offset=35, end_lineno=86, end_col_offset=39, value=None, kind=None)],
                    ),
                    body=[
                        Assign(
                            lineno=87,
                            col_offset=8,
                            end_lineno=87,
                            end_col_offset=48,
                            targets=[Name(lineno=87, col_offset=8, end_lineno=87, end_col_offset=22, id='decimal_number', ctx=Store())],
                            value=Attribute(
                                lineno=87,
                                col_offset=25,
                                end_lineno=87,
                                end_col_offset=48,
                                value=Name(lineno=87, col_offset=25, end_lineno=87, end_col_offset=33, id='currency', ctx=Load()),
                                attr='decimal_places',
                                ctx=Load(),
                            ),
                            type_comment=None,
                        ),
                    ],
                    orelse=[
                        Assign(
                            lineno=89,
                            col_offset=8,
                            end_lineno=89,
                            end_col_offset=49,
                            targets=[Name(lineno=89, col_offset=8, end_lineno=89, end_col_offset=22, id='decimal_number', ctx=Store())],
                            value=Name(lineno=89, col_offset=25, end_lineno=89, end_col_offset=49, id='arbitrary_decimal_number', ctx=Load()),
                            type_comment=None,
                        ),
                    ],
                ),
                Return(
                    lineno=90,
                    col_offset=4,
                    end_lineno=90,
                    end_col_offset=62,
                    value=BinOp(
                        lineno=90,
                        col_offset=11,
                        end_lineno=90,
                        end_col_offset=62,
                        left=Call(
                            lineno=90,
                            col_offset=11,
                            end_lineno=90,
                            end_col_offset=39,
                            func=Name(lineno=90, col_offset=11, end_lineno=90, end_col_offset=22, id='float_round', ctx=Load()),
                            args=[
                                Name(lineno=90, col_offset=23, end_lineno=90, end_col_offset=35, id='minor_amount', ctx=Load()),
                                Constant(lineno=90, col_offset=37, end_lineno=90, end_col_offset=38, value=0, kind=None),
                            ],
                            keywords=[],
                        ),
                        op=Div(),
                        right=BinOp(
                            lineno=90,
                            col_offset=43,
                            end_lineno=90,
                            end_col_offset=61,
                            left=Constant(lineno=90, col_offset=43, end_lineno=90, end_col_offset=45, value=10, kind=None),
                            op=Pow(),
                            right=Name(lineno=90, col_offset=47, end_lineno=90, end_col_offset=61, id='decimal_number', ctx=Load()),
                        ),
                    ),
                ),
            ],
            decorator_list=[],
            returns=None,
            type_comment=None,
        ),
        FunctionDef(
            lineno=93,
            col_offset=0,
            end_lineno=113,
            end_col_offset=80,
            name='to_minor_currency_units',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(lineno=93, col_offset=28, end_lineno=93, end_col_offset=40, arg='major_amount', annotation=None, type_comment=None),
                    arg(lineno=93, col_offset=42, end_lineno=93, end_col_offset=50, arg='currency', annotation=None, type_comment=None),
                    arg(lineno=93, col_offset=52, end_lineno=93, end_col_offset=76, arg='arbitrary_decimal_number', annotation=None, type_comment=None),
                ],
                vararg=None,
                kwonlyargs=[],
                kw_defaults=[],
                kwarg=None,
                defaults=[Constant(lineno=93, col_offset=77, end_lineno=93, end_col_offset=81, value=None, kind=None)],
            ),
            body=[
                Expr(
                    lineno=94,
                    col_offset=4,
                    end_lineno=107,
                    end_col_offset=7,
                    value=Constant(lineno=94, col_offset=4, end_lineno=107, end_col_offset=7, value=' Return the amount converted to the minor units of its currency.\n\n    The conversion is done by multiplying the amount by 10^k where k is the number of decimals of\n    the currency as per the ISO 4217 norm.\n    To force a different number of decimals, set it as the value of the `decimal_number` argument.\n\n    Note: currency.ensure_one() if arbitrary_decimal_number is not provided\n\n    :param float major_amount: The amount in major units, to convert in minor units\n    :param recordset currency: The currency of the amount, as a `res.currency` record\n    :param int arbitrary_decimal_number: The number of decimals to use instead of that of ISO 4217\n    :return: The amount in minor units of its currency\n    :rtype: int\n    ', kind=None),
                ),
                If(
                    lineno=108,
                    col_offset=4,
                    end_lineno=112,
                    end_col_offset=48,
                    test=Compare(
                        lineno=108,
                        col_offset=7,
                        end_lineno=108,
                        end_col_offset=43,
                        left=Name(lineno=108, col_offset=7, end_lineno=108, end_col_offset=31, id='arbitrary_decimal_number', ctx=Load()),
                        ops=[IsNot()],
                        comparators=[Constant(lineno=108, col_offset=39, end_lineno=108, end_col_offset=43, value=None, kind=None)],
                    ),
                    body=[
                        Assign(
                            lineno=109,
                            col_offset=8,
                            end_lineno=109,
                            end_col_offset=49,
                            targets=[Name(lineno=109, col_offset=8, end_lineno=109, end_col_offset=22, id='decimal_number', ctx=Store())],
                            value=Name(lineno=109, col_offset=25, end_lineno=109, end_col_offset=49, id='arbitrary_decimal_number', ctx=Load()),
                            type_comment=None,
                        ),
                    ],
                    orelse=[
                        Expr(
                            lineno=111,
                            col_offset=8,
                            end_lineno=111,
                            end_col_offset=29,
                            value=Call(
                                lineno=111,
                                col_offset=8,
                                end_lineno=111,
                                end_col_offset=29,
                                func=Attribute(
                                    lineno=111,
                                    col_offset=8,
                                    end_lineno=111,
                                    end_col_offset=27,
                                    value=Name(lineno=111, col_offset=8, end_lineno=111, end_col_offset=16, id='currency', ctx=Load()),
                                    attr='ensure_one',
                                    ctx=Load(),
                                ),
                                args=[],
                                keywords=[],
                            ),
                        ),
                        Assign(
                            lineno=112,
                            col_offset=8,
                            end_lineno=112,
                            end_col_offset=48,
                            targets=[Name(lineno=112, col_offset=8, end_lineno=112, end_col_offset=22, id='decimal_number', ctx=Store())],
                            value=Attribute(
                                lineno=112,
                                col_offset=25,
                                end_lineno=112,
                                end_col_offset=48,
                                value=Name(lineno=112, col_offset=25, end_lineno=112, end_col_offset=33, id='currency', ctx=Load()),
                                attr='decimal_places',
                                ctx=Load(),
                            ),
                            type_comment=None,
                        ),
                    ],
                ),
                Return(
                    lineno=113,
                    col_offset=4,
                    end_lineno=113,
                    end_col_offset=80,
                    value=Call(
                        lineno=113,
                        col_offset=11,
                        end_lineno=113,
                        end_col_offset=80,
                        func=Name(lineno=113, col_offset=11, end_lineno=113, end_col_offset=14, id='int', ctx=Load()),
                        args=[
                            BinOp(
                                lineno=113,
                                col_offset=15,
                                end_lineno=113,
                                end_col_offset=79,
                                left=Call(
                                    lineno=113,
                                    col_offset=15,
                                    end_lineno=113,
                                    end_col_offset=56,
                                    func=Name(lineno=113, col_offset=15, end_lineno=113, end_col_offset=26, id='float_round', ctx=Load()),
                                    args=[
                                        Name(lineno=113, col_offset=27, end_lineno=113, end_col_offset=39, id='major_amount', ctx=Load()),
                                        Name(lineno=113, col_offset=41, end_lineno=113, end_col_offset=55, id='decimal_number', ctx=Load()),
                                    ],
                                    keywords=[],
                                ),
                                op=Mult(),
                                right=BinOp(
                                    lineno=113,
                                    col_offset=60,
                                    end_lineno=113,
                                    end_col_offset=78,
                                    left=Constant(lineno=113, col_offset=60, end_lineno=113, end_col_offset=62, value=10, kind=None),
                                    op=Pow(),
                                    right=Name(lineno=113, col_offset=64, end_lineno=113, end_col_offset=78, id='decimal_number', ctx=Load()),
                                ),
                            ),
                        ],
                        keywords=[],
                    ),
                ),
            ],
            decorator_list=[],
            returns=None,
            type_comment=None,
        ),
        FunctionDef(
            lineno=118,
            col_offset=0,
            end_lineno=127,
            end_col_offset=88,
            name='build_token_name',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(lineno=118, col_offset=21, end_lineno=118, end_col_offset=42, arg='payment_details_short', annotation=None, type_comment=None),
                    arg(lineno=118, col_offset=49, end_lineno=118, end_col_offset=61, arg='final_length', annotation=None, type_comment=None),
                ],
                vararg=None,
                kwonlyargs=[],
                kw_defaults=[],
                kwarg=None,
                defaults=[
                    Constant(lineno=118, col_offset=43, end_lineno=118, end_col_offset=47, value=None, kind=None),
                    Constant(lineno=118, col_offset=62, end_lineno=118, end_col_offset=64, value=16, kind=None),
                ],
            ),
            body=[
                Expr(
                    lineno=119,
                    col_offset=4,
                    end_lineno=125,
                    end_col_offset=7,
                    value=Constant(lineno=119, col_offset=4, end_lineno=125, end_col_offset=7, value=" Pad plain payment details with leading X's to build a token name of the desired length.\n\n    :param str payment_details_short: The plain part of the payment details (usually last 4 digits)\n    :param int final_length: The desired final length of the token name (16 for a bank card)\n    :return: The padded token name\n    :rtype: str\n    ", kind=None),
                ),
                Assign(
                    lineno=126,
                    col_offset=4,
                    end_lineno=126,
                    end_col_offset=59,
                    targets=[Name(lineno=126, col_offset=4, end_lineno=126, end_col_offset=25, id='payment_details_short', ctx=Store())],
                    value=BoolOp(
                        lineno=126,
                        col_offset=28,
                        end_lineno=126,
                        end_col_offset=59,
                        op=Or(),
                        values=[
                            Name(lineno=126, col_offset=28, end_lineno=126, end_col_offset=49, id='payment_details_short', ctx=Load()),
                            Constant(lineno=126, col_offset=53, end_lineno=126, end_col_offset=59, value='????', kind=None),
                        ],
                    ),
                    type_comment=None,
                ),
                Return(
                    lineno=127,
                    col_offset=4,
                    end_lineno=127,
                    end_col_offset=88,
                    value=JoinedStr(
                        lineno=127,
                        col_offset=11,
                        end_lineno=127,
                        end_col_offset=88,
                        values=[
                            FormattedValue(
                                lineno=127,
                                col_offset=11,
                                end_lineno=127,
                                end_col_offset=88,
                                value=BinOp(
                                    lineno=127,
                                    col_offset=14,
                                    end_lineno=127,
                                    end_col_offset=63,
                                    left=Constant(lineno=127, col_offset=14, end_lineno=127, end_col_offset=17, value='X', kind=None),
                                    op=Mult(),
                                    right=BinOp(
                                        lineno=127,
                                        col_offset=21,
                                        end_lineno=127,
                                        end_col_offset=62,
                                        left=Name(lineno=127, col_offset=21, end_lineno=127, end_col_offset=33, id='final_length', ctx=Load()),
                                        op=Sub(),
                                        right=Call(
                                            lineno=127,
                                            col_offset=36,
                                            end_lineno=127,
                                            end_col_offset=62,
                                            func=Name(lineno=127, col_offset=36, end_lineno=127, end_col_offset=39, id='len', ctx=Load()),
                                            args=[Name(lineno=127, col_offset=40, end_lineno=127, end_col_offset=61, id='payment_details_short', ctx=Load())],
                                            keywords=[],
                                        ),
                                    ),
                                ),
                                conversion=-1,
                                format_spec=None,
                            ),
                            FormattedValue(
                                lineno=127,
                                col_offset=11,
                                end_lineno=127,
                                end_col_offset=88,
                                value=Name(lineno=127, col_offset=65, end_lineno=127, end_col_offset=86, id='payment_details_short', ctx=Load()),
                                conversion=-1,
                                format_spec=None,
                            ),
                        ],
                    ),
                ),
            ],
            decorator_list=[],
            returns=None,
            type_comment=None,
        ),
        FunctionDef(
            lineno=132,
            col_offset=0,
            end_lineno=142,
            end_col_offset=43,
            name='format_partner_address',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(lineno=132, col_offset=27, end_lineno=132, end_col_offset=35, arg='address1', annotation=None, type_comment=None),
                    arg(lineno=132, col_offset=40, end_lineno=132, end_col_offset=48, arg='address2', annotation=None, type_comment=None),
                ],
                vararg=None,
                kwonlyargs=[],
                kw_defaults=[],
                kwarg=None,
                defaults=[
                    Constant(lineno=132, col_offset=36, end_lineno=132, end_col_offset=38, value='', kind=None),
                    Constant(lineno=132, col_offset=49, end_lineno=132, end_col_offset=51, value='', kind=None),
                ],
            ),
            body=[
                Expr(
                    lineno=133,
                    col_offset=4,
                    end_lineno=139,
                    end_col_offset=7,
                    value=Constant(lineno=133, col_offset=4, end_lineno=139, end_col_offset=7, value=' Format a two-parts partner address into a one-line address string.\n\n    :param str address1: The first part of the address, usually the `street1` field\n    :param str address2: The second part of the address, usually the `street2` field\n    :return: The formatted one-line address\n    :rtype: str\n    ', kind=None),
                ),
                Assign(
                    lineno=140,
                    col_offset=4,
                    end_lineno=140,
                    end_col_offset=29,
                    targets=[Name(lineno=140, col_offset=4, end_lineno=140, end_col_offset=12, id='address1', ctx=Store())],
                    value=BoolOp(
                        lineno=140,
                        col_offset=15,
                        end_lineno=140,
                        end_col_offset=29,
                        op=Or(),
                        values=[
                            Name(lineno=140, col_offset=15, end_lineno=140, end_col_offset=23, id='address1', ctx=Load()),
                            Constant(lineno=140, col_offset=27, end_lineno=140, end_col_offset=29, value='', kind=None),
                        ],
                    ),
                    type_comment=None,
                ),
                Assign(
                    lineno=141,
                    col_offset=4,
                    end_lineno=141,
                    end_col_offset=29,
                    targets=[Name(lineno=141, col_offset=4, end_lineno=141, end_col_offset=12, id='address2', ctx=Store())],
                    value=BoolOp(
                        lineno=141,
                        col_offset=15,
                        end_lineno=141,
                        end_col_offset=29,
                        op=Or(),
                        values=[
                            Name(lineno=141, col_offset=15, end_lineno=141, end_col_offset=23, id='address2', ctx=Load()),
                            Constant(lineno=141, col_offset=27, end_lineno=141, end_col_offset=29, value='', kind=None),
                        ],
                    ),
                    type_comment=None,
                ),
                Return(
                    lineno=142,
                    col_offset=4,
                    end_lineno=142,
                    end_col_offset=43,
                    value=Call(
                        lineno=142,
                        col_offset=11,
                        end_lineno=142,
                        end_col_offset=43,
                        func=Attribute(
                            lineno=142,
                            col_offset=11,
                            end_lineno=142,
                            end_col_offset=41,
                            value=JoinedStr(
                                lineno=142,
                                col_offset=11,
                                end_lineno=142,
                                end_col_offset=35,
                                values=[
                                    FormattedValue(
                                        lineno=142,
                                        col_offset=11,
                                        end_lineno=142,
                                        end_col_offset=35,
                                        value=Name(lineno=142, col_offset=14, end_lineno=142, end_col_offset=22, id='address1', ctx=Load()),
                                        conversion=-1,
                                        format_spec=None,
                                    ),
                                    Constant(lineno=142, col_offset=11, end_lineno=142, end_col_offset=35, value=' ', kind=None),
                                    FormattedValue(
                                        lineno=142,
                                        col_offset=11,
                                        end_lineno=142,
                                        end_col_offset=35,
                                        value=Name(lineno=142, col_offset=25, end_lineno=142, end_col_offset=33, id='address2', ctx=Load()),
                                        conversion=-1,
                                        format_spec=None,
                                    ),
                                ],
                            ),
                            attr='strip',
                            ctx=Load(),
                        ),
                        args=[],
                        keywords=[],
                    ),
                ),
            ],
            decorator_list=[],
            returns=None,
            type_comment=None,
        ),
        FunctionDef(
            lineno=145,
            col_offset=0,
            end_lineno=152,
            end_col_offset=72,
            name='split_partner_name',
            args=arguments(
                posonlyargs=[],
                args=[arg(lineno=145, col_offset=23, end_lineno=145, end_col_offset=35, arg='partner_name', annotation=None, type_comment=None)],
                vararg=None,
                kwonlyargs=[],
                kw_defaults=[],
                kwarg=None,
                defaults=[],
            ),
            body=[
                Expr(
                    lineno=146,
                    col_offset=4,
                    end_lineno=151,
                    end_col_offset=7,
                    value=Constant(lineno=146, col_offset=4, end_lineno=151, end_col_offset=7, value=' Split a single-line partner name in a tuple of first name, last name.\n\n    :param str partner_name: The partner name\n    :return: The splitted first name and last name\n    :rtype: tuple\n    ', kind=None),
                ),
                Return(
                    lineno=152,
                    col_offset=4,
                    end_lineno=152,
                    end_col_offset=72,
                    value=Tuple(
                        lineno=152,
                        col_offset=11,
                        end_lineno=152,
                        end_col_offset=72,
                        elts=[
                            Call(
                                lineno=152,
                                col_offset=11,
                                end_lineno=152,
                                end_col_offset=46,
                                func=Attribute(
                                    lineno=152,
                                    col_offset=11,
                                    end_lineno=152,
                                    end_col_offset=19,
                                    value=Constant(lineno=152, col_offset=11, end_lineno=152, end_col_offset=14, value=' ', kind=None),
                                    attr='join',
                                    ctx=Load(),
                                ),
                                args=[
                                    Subscript(
                                        lineno=152,
                                        col_offset=20,
                                        end_lineno=152,
                                        end_col_offset=45,
                                        value=Call(
                                            lineno=152,
                                            col_offset=20,
                                            end_lineno=152,
                                            end_col_offset=40,
                                            func=Attribute(
                                                lineno=152,
                                                col_offset=20,
                                                end_lineno=152,
                                                end_col_offset=38,
                                                value=Name(lineno=152, col_offset=20, end_lineno=152, end_col_offset=32, id='partner_name', ctx=Load()),
                                                attr='split',
                                                ctx=Load(),
                                            ),
                                            args=[],
                                            keywords=[],
                                        ),
                                        slice=Slice(
                                            lineno=152,
                                            col_offset=41,
                                            end_lineno=152,
                                            end_col_offset=44,
                                            lower=None,
                                            upper=UnaryOp(
                                                lineno=152,
                                                col_offset=42,
                                                end_lineno=152,
                                                end_col_offset=44,
                                                op=USub(),
                                                operand=Constant(lineno=152, col_offset=43, end_lineno=152, end_col_offset=44, value=1, kind=None),
                                            ),
                                            step=None,
                                        ),
                                        ctx=Load(),
                                    ),
                                ],
                                keywords=[],
                            ),
                            Subscript(
                                lineno=152,
                                col_offset=48,
                                end_lineno=152,
                                end_col_offset=72,
                                value=Call(
                                    lineno=152,
                                    col_offset=48,
                                    end_lineno=152,
                                    end_col_offset=68,
                                    func=Attribute(
                                        lineno=152,
                                        col_offset=48,
                                        end_lineno=152,
                                        end_col_offset=66,
                                        value=Name(lineno=152, col_offset=48, end_lineno=152, end_col_offset=60, id='partner_name', ctx=Load()),
                                        attr='split',
                                        ctx=Load(),
                                    ),
                                    args=[],
                                    keywords=[],
                                ),
                                slice=UnaryOp(
                                    lineno=152,
                                    col_offset=69,
                                    end_lineno=152,
                                    end_col_offset=71,
                                    op=USub(),
                                    operand=Constant(lineno=152, col_offset=70, end_lineno=152, end_col_offset=71, value=1, kind=None),
                                ),
                                ctx=Load(),
                            ),
                        ],
                        ctx=Load(),
                    ),
                ),
            ],
            decorator_list=[],
            returns=None,
            type_comment=None,
        ),
        FunctionDef(
            lineno=157,
            col_offset=0,
            end_lineno=158,
            end_col_offset=60,
            name='get_customer_ip_address',
            args=arguments(posonlyargs=[], args=[], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]),
            body=[
                Return(
                    lineno=158,
                    col_offset=4,
                    end_lineno=158,
                    end_col_offset=60,
                    value=BoolOp(
                        lineno=158,
                        col_offset=11,
                        end_lineno=158,
                        end_col_offset=60,
                        op=Or(),
                        values=[
                            BoolOp(
                                lineno=158,
                                col_offset=11,
                                end_lineno=158,
                                end_col_offset=54,
                                op=And(),
                                values=[
                                    Name(lineno=158, col_offset=11, end_lineno=158, end_col_offset=18, id='request', ctx=Load()),
                                    Attribute(
                                        lineno=158,
                                        col_offset=23,
                                        end_lineno=158,
                                        end_col_offset=54,
                                        value=Attribute(
                                            lineno=158,
                                            col_offset=23,
                                            end_lineno=158,
                                            end_col_offset=42,
                                            value=Name(lineno=158, col_offset=23, end_lineno=158, end_col_offset=30, id='request', ctx=Load()),
                                            attr='httprequest',
                                            ctx=Load(),
                                        ),
                                        attr='remote_addr',
                                        ctx=Load(),
                                    ),
                                ],
                            ),
                            Constant(lineno=158, col_offset=58, end_lineno=158, end_col_offset=60, value='', kind=None),
                        ],
                    ),
                ),
            ],
            decorator_list=[],
            returns=None,
            type_comment=None,
        ),
    ],
    type_ignores=[],
)
