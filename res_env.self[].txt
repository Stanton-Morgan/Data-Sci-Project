                'journal_id': self.env['account.journal'].search([
            self.env['account.account'].browse(self.env['ir.model.data'].sudo().search([
            or self.env['account.account'].search([
            or self.env['account.account'].search([('company_id', '=', company.id)], limit=1)
        self.env['account.move.line'].flush(['account_id', 'journal_id'])
        self.env['account.account'].flush(['currency_id'])
        self.env['account.journal'].flush([
        self.env['account.payment.method'].flush(['payment_type'])
        self.env['account.payment.method.line'].flush(['payment_method_id', 'payment_account_id'])
            account = self.env['account.account'].browse(res[0])
            journal = self.env['account.journal'].browse(res[1])
        self.env['account.payment.method.line'].flush(['journal_id', 'payment_account_id'])
            journals = self.env['account.journal'].browse([r[0] for r in rows])
            self.env['account.group']._adapt_accounts_for_account_groups(self)
            for read in self.env['account.move.line'].read_group(
            record.related_taxes_amount = self.env['account.tax'].search_count([
            account_op_lines = self.env['account.move.line'].search([('account_id', '=', self.id),
                self.env['account.move.line'].with_context(check_move_validity=False).create({
            while self.env['account.account'].search([('code', '=', default['code']),
        partial_lines_count = self.env['account.move.line'].search_count([
            move_lines = self.env['account.move.line'].search([('account_id', 'in', self.ids)], limit=1)
                if self.env['account.move.line'].search_count([('account_id', '=', account.id), ('currency_id', 'not in', (False, vals['currency_id']))]):
        if self.env['account.move.line'].search([('account_id', 'in', self.ids)], limit=1):
        partner_prop_acc = self.env['ir.property'].sudo().search([('value_reference', 'in', values)], limit=1)
        related_taxes_ids = self.env['account.tax'].search([
        self.env['account.group'].flush()
            account_ids = self.env['account.account'].search([('group_id', '=', record.id)])
            children_ids = self.env['account.group'].search([('parent_id', '=', record.id)])
        self.env['account.group'].flush(self.env['account.group']._fields)
        self.env['account.account'].flush(self.env['account.account']._fields)
        self.env['account.account'].invalidate_cache(fnames=['group_id'])
        self.env['account.group'].flush(self.env['account.group']._fields)
        self.env['account.group'].invalidate_cache(fnames=['parent_id'])
        self.env['account.group'].search([('company_id', 'in', self.company_id.ids)])._parent_store_update()
        sale_types = self.env['account.move'].get_sale_types()
        groups = self.env['account.move.line'].read_group(domain, ['move_id:count_distinct'], ['analytic_account_id'])
        purchase_types = self.env['account.move'].get_purchase_types()
        groups = self.env['account.move.line'].read_group(domain, ['move_id:count_distinct'], ['analytic_account_id'])
            "domain": [('id', 'in', self.line_ids.move_id.move_id.ids), ('move_type', 'in', self.env['account.move'].get_sale_types())],
            "domain": [('id', 'in', self.line_ids.move_id.move_id.ids), ('move_type', 'in', self.env['account.move'].get_purchase_types())],
                account=self.env['account.analytic.account'].browse(self.env.context['account_id']).name
            self.env['account.bank.statement'].browse(bnk_stmt_id).button_validate()
        latest_statement = self.env['account.bank.statement'].search([('journal_id', '=', self[0].journal_id.id)], limit=1)
            return self.env['account.journal'].search([
                    self.env['account.bank.statement.line'].create(st_line_vals)
                self.env['ir.attachment'].create({
            return self.env['ir.actions.act_window']._for_xml_id('account.action_view_account_bnk_stmt_check')
            statement = self.env['account.bank.statement'].browse(vals['statement_id'])
        existing_lines = self.env['account.move.line'].browse(to_browse_ids)
        new_lines = self.env['account.move.line'].create(line_vals_list)
        bank_account = self.env['res.partner.bank'].search(
            bank_account = self.env['res.partner.bank'].create({
        method_information = self.env['account.payment.method']._get_payment_method_information()
        pay_methods = self.env['account.payment.method'].search([('code', 'in', list(method_information.keys()))])
        self.alias_domain = self.env["ir.config_parameter"].sudo().get_param("mail.catchall.domain")
        self.env['account.move.line'].flush(['account_id', 'journal_id'])
        self.env['account.move.line'].flush(['account_id', 'journal_id'])
        method_info = self.env['account.payment.method']._get_payment_method_information()
        self.env['account.payment.method.line'].flush(['payment_method_id', 'journal_id'])
        self.env['account.payment.method'].flush(['code'])
            methods = self.env['account.payment.method'].browse(method_ids)
            pending_moves = self.env['account.move'].search([
        bank_accounts = self.env['res.partner.bank'].browse()
        read_codes = self.env['account.journal'].with_context(active_test=False).search_read([('company_id', '=', self.company_id.id)], ['code'])
            alias_values['alias_model_id'] = self.env['ir.model']._get('account.move').id
            alias_values['alias_parent_model_id'] = self.env['ir.model']._get('account.journal').id
            self.alias_id = self.env['mail.alias'].sudo().create(alias_values)
                if self.env['account.move'].search([('journal_id', '=', journal.id)], limit=1):
                company = self.env['res.company'].browse(vals['company_id'])
                    bank_account = self.env['res.partner.bank'].browse(vals['bank_account_id'])
                journal_entry = self.env['account.move'].search([('journal_id', '=', self.id), ('state', '=', 'posted'), ('secure_sequence_number', '!=', 0)], limit=1)
        journals = self.env['account.journal'].search([('code', 'like', journal_code_base + '%'), ('company_id', '=', company.id)])
        company = self.env['res.company'].browse(vals['company_id']) if vals.get('company_id') else self.env.company
        random_account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)
                default_account_code = self.env['account.account']._search_new_account_code(company, digits, liquidity_account_prefix)
                vals['default_account_id'] = self.env['account.account'].create(default_account_vals).id
        res_partner_bank = self.env['res.partner.bank'].search([('sanitized_acc_number', '=', sanitize_account_number(acc_number)),
            self.bank_account_id = self.env['res.partner.bank'].create({
        return self.env['res.company'].setting_init_bank_account_action()
        attachments = self.env['ir.attachment'].browse(attachment_ids)
            decoders = self.env['account.move']._get_create_invoice_from_attachment_decoders()
                invoice = self.env['account.move'].create({})
                    seq = self.env['ir.sequence'].create(vals)
        self.env['account.move.line'].check_access_rights('read')
        query = self.env['account.move.line']._where_calc(domain)
        return self.env['account.account'].browse(account_ids)
        return self.env['account.account'].browse(account_ids)
        self.env['account.move.line'].check_access_rights('read')
        query = self.env['account.move.line']._where_calc(domain)
        last_st_line = self.env['account.bank.statement.line'].search(last_statement_domain, order='date desc, id desc', limit=1)
            for r in self.env['account.move'].read_group(
            'invoice_types': tuple(self.env['account.move'].get_invoice_types(True)),
            self.env['account.move'].flush(['amount_residual', 'currency_id', 'move_type', 'invoice_date', 'company_id', 'journal_id', 'date', 'state', 'payment_state'])
            read = self.env['account.move'].read_group([('journal_id', '=', self.id), ('to_check', '=', True)], ['amount_total'], 'journal_id', lazy=False)
            read = self.env['account.move'].read_group([('journal_id', '=', self.id), ('to_check', '=', True)], ['amount_total'], 'journal_id', lazy=False)
            cur = self.env['res.currency'].browse(result.get('currency'))
            company = self.env['res.company'].browse(result.get('company_id')) or self.env.company
                    curr_cache[key] = self.env['res.currency']._get_conversion_rate(*key)
        open_statements = self.env['account.bank.statement'].search([('journal_id', '=', self.id), ('state', '=', 'open')])
        new_wizard = self.env['account.tour.upload.bill'].create({})
        domain = self.env['account.move.line']._get_suspense_moves_domain()
        statement_line_ids = self.env['account.move.line'].search(domain).mapped('statement_line_id')
        action = self.env["ir.actions.act_window"]._for_xml_id(action_name)
        action = self.env['ir.actions.act_window']._for_xml_id(action_ref)
        action = self.env['ir.actions.act_window']._for_xml_id(f"account.{action_name}")
        action = self.env["ir.actions.actions"]._for_xml_id("account.action_bank_statement_tree")
            journal = self.env['account.journal'].search(currency_domain, limit=1)
            journal = self.env['account.journal'].search(domain, limit=1)
            company = self.env['res.company'].browse(company_id)
            journal = self.env['account.journal'].browse(self._context['default_journal_id'])
        selection=lambda self: self.env['res.partner.bank'].get_available_qr_methods_in_sequence(),
        self.fiscal_position_id = self.env['account.fiscal.position'].get_fiscal_position(
                new_line = self.env['account.move.line'].new(copied_vals)
        tax_repartition_line = self.env['account.tax.repartition.line'].browse(tax_vals['tax_repartition_line_id'])
                tax_repartition_line = self.env['account.tax.repartition.line'].browse(tax_vals['tax_repartition_line_id'])
            currency = self.env['res.currency'].browse(taxes_map_entry['grouping_dict']['currency_id'])
                create_method = in_draft_mode and self.env['account.move.line'].new or self.env['account.move.line'].create
                tax_repartition_line = self.env['account.tax.repartition.line'].browse(tax_repartition_line_id)
                create_method = in_draft_mode and self.env['account.move.line'].new or self.env['account.move.line'].create
                return self.env['account.account'].search(domain, limit=1)
                    create_method = in_draft_mode and self.env['account.move.line'].new or self.env['account.move.line'].create
            m.suitable_journal_ids = self.env['account.journal'].search(domain)
                    'records': self.env['account.move'],
                reverse_moves = self.env['account.move'].search([('reversed_entry_id', '=', move.id), ('state', '=', 'posted'), ('move_type', '=', reverse_type)])
        domain = self.env['account.move.line']._get_suspense_moves_domain()
                if (0 < self.env['account.move.line'].search_count(domain) < 5):
                    if self.env['account.move'].search_count(domain2) < 5:
            for line in self.env['account.move.line'].search(domain):
                current_tax = self.env['account.tax'].browse(tax_result['id'])
                    affected_taxes = self.env['account.tax'].browse(tax_result['tax_ids'])
        self.env["account.move"].flush([
        self.env["account.journal"].flush(["company_id"])
        self.env["res.partner"].flush(["commercial_partner_id"])
        self.env['account.move.line'].flush(self.env['account.move.line']._fields)
        self.env['account.move'].flush(['journal_id'])
                journal_company = self.env['account.journal'].browse(vals['journal_id']).company_id
                for tax in self.env['account.tax'].browse(tax_ids).flatten_taxes_hierarchy():
                invoice_repartition_line = self.env['account.tax.repartition.line'].browse(line_vals['tax_repartition_line_id'])
                account_id = self.env['account.move.line']._get_default_tax_account(refund_repartition_line).id
                    subsequent_taxes = self.env['account.tax'].browse(line_vals['tax_ids'][0][2])
                taxes = self.env['account.tax'].browse(line_vals['tax_ids'][0][2]).flatten_taxes_hierarchy()
        reverse_moves = self.env['account.move'].create(move_vals_list)
        action = self.env["ir.actions.actions"]._for_xml_id("account.action_view_account_move_reversal")
        lines = self.env['account.move.line'].browse(line_id)
        partial = self.env['account.partial.reconcile'].browse(partial_id)
        reverse_entries = self.env['account.move'].search([('reversed_entry_id', '=', self.id)])
        action = self.env["ir.actions.actions"]._for_xml_id("account.action_move_journal_line")
                line[2]['partner_id'] = self.env['res.partner'].browse(line[2]['partner_id']).sudo().display_name
            line[2]['account_id'] = self.env['account.account'].browse(line[2]['account_id']).display_name or _('Destination Account')
            for candidate_method, candidate_name in self.env['res.partner.bank'].get_available_qr_methods_in_sequence():
        decoders = self.env['account.move']._get_update_invoice_from_attachment_decoders(self)
        use_invoice_terms = self.env['ir.config_parameter'].sudo().get_param('account.use_invoice_terms')
                        tax = self.env['account.tax'].browse(tax_res['id'])
                rec = self.env['account.analytic.default'].account_get(
                rec = self.env['account.analytic.default'].account_get(
                tax = self.env['account.tax'].browse(tax_res['id'])
            move = self.env['account.move'].browse(vals['move_id'])
                partner = self.env['res.partner'].browse(vals.get('partner_id'))
                taxes = self.env['account.tax'].browse(tax_ids)
                        self.env['product.product'].browse(vals.get('product_id')),
                        self.env['product.product'].browse(vals.get('product_id')),
                        self.env['product.product'].browse(vals.get('product_id')),
        account_to_write = self.env['account.account'].browse(vals['account_id']) if 'account_id' in vals else None
            if any(self.env['account.move']._field_will_change(line, vals, field_name) for field_name in PROTECTED_FIELDS_LOCK_DATE):
            if any(self.env['account.move']._field_will_change(line, vals, field_name) for field_name in PROTECTED_FIELDS_TAX_LOCK_DATE):
            if any(self.env['account.move']._field_will_change(line, vals, field_name) for field_name in PROTECTED_FIELDS_RECONCILIATION):
            ref_fields = self.env['account.move.line'].fields_get(tracking_fields)
            journal = self.env['account.journal'].browse(self._context.get('default_journal_id') or self._context['journal_id'])
            move = self.env['account.move'].new({'line_ids': self._context['line_ids']})
            journal = self.env['account.journal'].browse(self._context.get('default_journal_id') or self._context['journal_id'])
                    field = self.env['ir.model.fields']._get(self._name, changed_field)
            journal = self.env['account.journal'].browse(exchange_diff_move_vals['journal_id'])
                        grouping_key = self.env['account.partial.reconcile']._get_cash_basis_tax_line_grouping_key_from_record(line)
                        grouping_key = self.env['account.partial.reconcile']._get_cash_basis_base_line_grouping_key_from_record(line, account=account_to_fix)
                cash_basis_moves = self.env['account.move'].search([('tax_cash_basis_origin_move_id', '=', move.id)])
                        grouping_key = self.env['account.partial.reconcile']._get_cash_basis_tax_line_grouping_key_from_record(
                        grouping_key = self.env['account.partial.reconcile']._get_cash_basis_base_line_grouping_key_from_record(
                        tax_repartition_line = self.env['account.tax.repartition.line'].browse(values['tax_repartition_line_id'])
                        account = tax_repartition_line.account_id or self.env['account.account'].browse(values['account_id'])
            exchange_move = self.env['account.move'].create(exchange_diff_move_vals)
        self.env['account.partial.reconcile'].create(partials_vals_list)
        partials = self.env['account.partial.reconcile'].create(sorted_lines._prepare_reconciliation_partials())
            results['full_reconcile'] = self.env['account.full.reconcile'].create({
        self.env['account.analytic.line'].create(analytic_line_vals)
        action = self.env['ir.actions.act_window']._for_xml_id('account.action_account_moves_all_a')
        action = self.env['ir.actions.act_window']._for_xml_id('account.account_automatic_entry_wizard_action')
                journals = self.env['account.journal'].search(method_domain)
                self.env['account.payment.method.line'].create([{
            payment_count = self.env['account.payment'].search_count([('payment_method_line_id', '=', line.id)])
            account = self.env['account.account'].browse(vals['payment_account_id'])
            account = self.env['account.account'].browse(vals_list['payment_account_id'])
            currency = self.env['res.currency'].browse(self.env.context['currency_id'])
        if self.env['account.move'].search([('invoice_payment_term_id', 'in', self.ids)]):
            self.env['ir.property'].sudo().search(
        default=lambda self: self.env['res.lang']._lang_get(self.env.user.lang).decimal_point,
        action = self.env["ir.actions.actions"]._for_xml_id("account.action_move_journal_line")
        data = self.env['account.move.line'].read_group([('reconcile_model_id', 'in', self.ids)], ['reconcile_model_id'], 'reconcile_model_id')
            tax = self.env['account.tax'].browse(tax_res['id'])
                detected_fiscal_position = self.env['account.fiscal.position'].get_fiscal_position(partner_id)
            self.env[model_name].flush(self.env[model_name]._fields)
            mapped_partner = (partner_map and partner_map.get(st_line.id) and self.env['res.partner'].browse(partner_map[st_line.id])) or st_line.partner_id
        return bool(self.env['account.tax'].search([
        company = self.env['res.company'].browse(company_id)
            journal = self.env['account.journal'].browse(context.get('journal_id'))
            currency_id = self.env['res.currency'].browse(currency_id)
            product_id = self.env['product.product'].browse(product_id)
            partner_id = self.env['res.partner'].browse(partner_id)
                            tags_cache[cache_key] = self.env['account.account.tag']._get_tax_tags(line.tag_name, vals['country_id'])
            report = self.env['account.tax.report'].browse(vals['report_id'])
            existing_tags = self.env['account.account.tag']._get_tax_tags(tag_name, country.id)
                records_by_country[record.report_id.country_id.id] = records_by_country.get(record.report_id.country_id.id, self.env['account.tax.report.line']) + record
                        existing_tags = self.env['account.account.tag']._get_tax_tags(tag_name_postponed, country_id)
        self.env['account.move.line'].invalidate_cache(fnames=['tax_tag_ids'])
        self.env['account.tax.repartition.line'].invalidate_cache(fnames=['tag_ids'])
        self.env['account.account.tag'].browse(tag_ids_to_delete).unlink()
        carryover_lines = self.env['account.tax.carryover.line'].search(domain)
            rec = self.env['account.account.template'].search(
        return self.env['account.account'].create({
            'code': self.env['account.account']._search_new_account_code(company, code_digits, company.bank_account_code_prefix or ''),
                company = self.env['res.company'].browse(request.allowed_company_ids[0])
                    created = self.env[model]._load_records([{
        existing_accounts = self.env['account.account'].search([('company_id', '=', company.id)])
            existing_journals = self.env['account.journal'].search([('company_id', '=', company.id)])
            self.env['ir.property'].sudo().search(
                res = self.env[model].sudo().search([('company_id', '=', company.id)])
            company.account_journal_payment_debit_account_id = self.env['account.account'].create({
                'code': self.env['account.account']._search_new_account_code(company, self.code_digits, company.bank_account_code_prefix or ''),
            company.account_journal_payment_credit_account_id = self.env['account.account'].create({
                'code': self.env['account.account']._search_new_account_code(company, self.code_digits, company.bank_account_code_prefix or ''),
            company.default_cash_difference_expense_account_id = self.env['account.account'].create({
                'code': self.env['account.account']._search_new_account_code(company, self.code_digits, '999'),
            company.default_cash_difference_income_account_id = self.env['account.account'].create({
                'code': self.env['account.account']._search_new_account_code(company, self.code_digits, '999'),
        company.transfer_account_id = self.env['account.account'].search([
        company.account_sale_tax_id = self.env['account.tax'].search([('type_tax_use', 'in', ('sale', 'all')), ('company_id', '=', company.id)], limit=1).id
        company.account_purchase_tax_id = self.env['account.tax'].search([('type_tax_use', 'in', ('purchase', 'all')), ('company_id', '=', company.id)], limit=1).id
            if self.env[model].sudo().search([('company_id', '=', company_id.id)], limit=1):
        if self.env['account.move'].sudo().search([('company_id', '=', company_id.id), ('state', '!=', 'draft')], limit=1):
            bank_journals += self.env['account.journal'].create({
                'currency_id': acc.get('currency_id', self.env['res.currency']).id,
            'code': self.env['account.account']._search_new_account_code(company, digits, prefix),
        return self.env[model]._load_records(data_list)
        self.env['account.account.template']._load_records(account_data_list, update)
        group_templates = self.env['account.group.template'].search([('chart_template_id', '=', self.id)])
        account_reconcile_model_lines = self.env['account.reconcile.model.line.template'].search([
        account_reconcile_models = self.env['account.reconcile.model.template'].search([
        self.env['account.reconcile.model'].sudo().create({
        self.env['account.reconcile.model'].sudo().create({
        positions = self.env['account.fiscal.position.template'].search([('chart_template_id', '=', self.id)])
            new_code = self.env['account.account']._search_new_account_code(existing_account.company_id, len(existing_account.code), existing_account.code[:-2])
            return self.env['account.account'].create({
            return self.env['account.tax.repartition.line'].search(search_domain, limit=1).account_id
        taxes_in_country = self.env['account.tax'].search([
        templates_to_instantiate = self.env['account.tax.template'].with_context(active_test=False).search([('chart_template_id.country_id', '=', country.id)])
        groups = self.env['account.tax.group'].search([('country_id', '=', country.id)])
        property_company = self.env['ir.property'].with_company(company)
        ChartTemplate = self.env['account.chart.template'].with_context(default_company_id=company.id)
                internal_group = self.env['account.account.template'].browse(vals.get('account_id')).user_type_id.internal_group
            foreign_vat_fpos = self.env['account.fiscal.position'].search([('company_id', '=', record.id), ('foreign_vat', '!=', False)])
        accounts = self.env['account.account'].search([('code', 'like', old_code), ('internal_type', '=', 'liquidity'),
            draft_entries = self.env['account.move'].search([
            unreconciled_statement_lines = self.env['account.bank.statement.line'].search([
                if self.env['account.move.line'].search([('company_id', '=', company.id)]):
        new_wizard = self.env['account.financial.year.op'].create({'company_id': company.id})
            default_journal = self.env['account.journal'].search([('type', '=', 'general'), ('company_id', '=', self.id)], limit=1)
            self.account_opening_move_id = self.env['account.move'].create({
        account = self.env['account.account'].search([('company_id', '=', self.id),
        while self.env['account.account'].search([('code', '=', str(code)), ('company_id', '=', self.id)]):
        return self.env['account.account'].create({
                    self.env['account.move.line'].create({
        action = self.env["ir.actions.actions"]._for_xml_id("account.action_open_account_onboarding_sale_tax")
        action = self.env["ir.actions.actions"]._for_xml_id("account.action_open_account_onboarding_create_invoice")
        account = self.env['account.account'].search([('company_id', '=', self.id)], limit=1)
        journals = self.env['account.journal'].search([('company_id', '=', self.id)])
            all_moves_count = self.env['account.move'].search_count([('state', '=', 'posted'), ('journal_id', '=', journal.id)])
            moves = self.env['account.move'].search([('state', '=', 'posted'), ('journal_id', '=', journal.id),
                moves = self.env['account.move'].browse(res_ids)
            filtered_attachment_ids = self.env['ir.attachment'].sudo().browse(att_ids).filtered(
            if self.env['account.tax'].search([('country_id', '=', record.country_id.id)], limit=1):
            elif self.env['account.tax.template'].search([('chart_template_id.country_id', '=', record.country_id.id)], limit=1):
                similar_fpos_count = self.env['account.fiscal.position'].search_count(similar_fpos_domain)
        self.env['account.tax.template']._try_instantiating_foreign_taxes(self.country_id, self.company_id)
        tables, where_clause, where_params = self.env['account.move.line'].with_context(state='posted', company_id=self.env.company.id)._query_get()
        price_totals = self.env['account.invoice.report'].read_group(domain, ['price_subtotal'], ['partner_id'])
        self.env['account.partial.reconcile'].check_access_rights('write')
        bank_data = self.env['res.partner.bank'].read_group([('partner_id', 'in', self.ids)], ['partner_id'], ['partner_id'])
        action = self.env["ir.actions.actions"]._for_xml_id("account.action_move_out_invoice_type")
        has_invoice = self.env['account.move'].search([
        self.has_accounting_entries = self.env['account.chart.template'].existing_accounting(self.company_id)
        tax = self.env['account.tax'].search([
        return bool(self.env['account.move.line'].search_count(['|', ('currency_id', '=', self.id), ('company_currency_id', '=', self.id)]))
        constraint_date = fields.Date.to_date(self.env['ir.config_parameter'].sudo().get_param(
                        model=self.env['ir.model']._get(record._name).display_name,
        company_ids = self.env['res.company'].search([
        journal_ids = self.env['account.journal'].search([
            return self.env['res.partner'].search([
            company_id = self.env['account.bank.statement'].browse(values['statement_id']).company_id.id
            statement_date = self.env['account.bank.statement'].browse(values['statement_id']).date
            journal = self.env['account.bank.statement'].browse(values['statement_id']).journal_id
            currency = random.choice(self.env['res.currency'].search([('active', '=', True)]).ids)
        company_ids = self.env['res.company'].search([
            ('currency_id', populate.randomize(self.env['res.currency'].search([
            return self.env['account.account'].search(domain)
            return self.env['account.journal'].search([
            return self.env['res.partner'].search([
                currency = self.env['res.currency'].browse(currency_id)
        company_ids = self.env['res.company'].search([
            ('currency_id', populate.randomize(self.env['res.currency'].search([
        #         payment_wizard = self.env['account.payment.register'].with_context(active_model='account.move', active_ids=invoice.ids).create({})
            return self.env['res.partner'].search([
            return self.env['account.journal'].search([
            return self.env['account.payment.method.line'].search([
        company_ids = self.env['res.company'].search([
        company_ids = self.env['res.company'].search([
            return self.env['account.account'].search(domain)
            company_id = self.env['account.reconcile.model'].browse(values['model_id']).company_id.id
            'doc_model' : self.env['res.company'],
            'docs' : self.env['res.company'].browse(self.env.company.id),
        return self.env['account.move.line'].browse(ids)
        for tax in self.env['account.tax'].browse(ids):
        return self.env['account.move.line'].with_context(data['form'].get('used_context', {}))._query_get()
            'doc_model': self.env['account.journal'],
            'docs': self.env['account.journal'].browse(data['form']['journal_ids']),
            'company_id': self.env['res.company'].browse(
        invoice = self.env['account.move'].message_new(message_parsed, {'move_type': 'in_invoice', 'journal_id': self.journal.id})
        invoice = self.env['account.move'].message_new(message_parsed, {'move_type': 'in_invoice', 'journal_id': self.journal.id})
        invoice = self.env['account.move'].message_new(message_parsed, {'move_type': 'in_invoice', 'journal_id': self.journal.id})
        invoice = self.env['account.move'].message_new(message_parsed, {'move_type': 'in_invoice', 'journal_id': self.journal.id})
        statement = self.env['account.bank.statement'].create({
        draft_moves = self.env['account.move'].create([
        company = self.env['res.company'].create({'name': 'Oopo'})
        existing_partners = self.env['res.partner'].create([{
        partner = self.env['res.partner'].create({'name': 'Belouga'})
        move_form = Form(self.env['account.move'])
        self.included_percent_tax = self.env['account.tax'].create({
        move_form = Form(self.env['account.move'].with_context(default_move_type='entry'))
        move = self.env['account.move'].create({
        invoice_form = Form(self.env['account.move'].with_context(default_move_type='in_invoice', account_predictive_bills_disable_prediction=True))
        tax_price_include = self.env['account.tax'].create({
        tax_price_exclude = self.env['account.tax'].create({
        fiscal_position = self.env['account.fiscal.position'].create({
        product = self.env['product.product'].create({
        move_form = Form(self.env['account.move'].with_context(default_move_type='in_invoice'))
        tax_price_include_1 = self.env['account.tax'].create({
        tax_price_include_2 = self.env['account.tax'].create({
        fiscal_position = self.env['account.fiscal.position'].create({
        product = self.env['product.product'].create({
        move_form = Form(self.env['account.move'].with_context(default_move_type='in_invoice'))
        move_reversal = self.env['account.move.reversal'].with_context(active_model="account.move", active_ids=self.invoice.ids).create({
        reverse_move = self.env['account.move'].browse(reversal['res_id'])
        move_reversal = self.env['account.move.reversal'].with_context(active_model="account.move", active_ids=self.invoice.ids).create({
        reverse_move = self.env['account.move'].browse(reversal['res_id'])
        move_reversal = self.env['account.move.reversal'].with_context(active_model="account.move", active_ids=self.invoice.ids).create({
        reverse_move = self.env['account.move'].browse(reversal['res_id'])
        move_reversal = self.env['account.move.reversal'].with_context(active_model="account.move", active_ids=self.invoice.ids).create({
        reverse_move = self.env['account.move'].browse(reversal['res_id'])
        move = self.env['account.move'].create({
        move = self.env['account.move'].create({
        move = self.env['account.move'].create({
        move = self.env['account.move'].create({
        move = self.env['account.move'].create({
        wizard = self.env['account.automatic.entry.wizard']\
            'expense_accrual_account': self.env['account.account'].create({
            'revenue_accrual_account': self.env['account.account'].create({
        accrual_lines = self.env['account.move'].browse(wizard_res['domain'][0][2]).line_ids.sorted('date')
        tax_details_query, tax_details_params = self.env['account.move.line']._get_query_tax_details_from_domain(domain, fallback=fallback)
        tax_20_affect = self.env['account.tax'].create({
        tax_10 = self.env['account.tax'].create({
        tax_5 = self.env['account.tax'].create({
        invoice = self.env['account.move'].create({
        tax_group = self.env['account.tax'].create({
        taxes_10_affect = self.env['account.tax'].create([{
        invoice = self.env['account.move'].create({
        eco_tax = self.env['account.tax'].create({
        tax_20 = self.env['account.tax'].create({
        invoice = self.env['account.move'].create({
        tax_10 = self.env['account.tax'].create({
        tax_20 = self.env['account.tax'].create({
        invoice = self.env['account.move'].create({
        affecting_tax = self.env['account.tax'].create({
        affected_tax = self.env['account.tax'].create({
        invoice = self.env['account.move'].create({
        tax_50 = self.env['account.tax'].create({
        invoice = self.env['account.move'].create({
        tax_20_affect = self.env['account.tax'].create({
        tax_10 = self.env['account.tax'].create({
        fixed_tax = self.env['account.tax'].create({
        invoice = self.env['account.move'].create({
        percent_tax = self.env['account.tax'].create({
        invoice = self.env['account.move'].create({
        fixed_tax = self.env['account.tax'].create({
        invoice = self.env['account.move'].create({
        percent_tax = self.env['account.tax'].create({
        move = self.env['account.move'].create({
        percent_tax = self.env['account.tax'].create({
        move = self.env['account.move'].create({
        percent_tax = self.env['account.tax'].create({
        tax_group = self.env['account.tax'].create({
        invoice = self.env['account.move'].create({
        percent_tax = self.env['account.tax'].create({
        invoice = self.env['account.move'].create({
        percent_tax = self.env['account.tax'].create({
        invoice = self.env['account.move'].create({
        tax_price_include = self.env['account.tax'].create({
        tax_price_exclude = self.env['account.tax'].create({
        fiscal_position = self.env['account.fiscal.position'].create({
        product = self.env['product.product'].create({
        move_form = Form(self.env['account.move'].with_context(default_move_type='out_invoice'))
        tax_price_include_1 = self.env['account.tax'].create({
        tax_price_include_2 = self.env['account.tax'].create({
        fiscal_position = self.env['account.fiscal.position'].create({
        product = self.env['product.product'].create({
        move_form = Form(self.env['account.move'].with_context(default_move_type='out_invoice'))
        decimal_precision_name = self.env['account.move.line']._fields['price_unit']._digits
        decimal_precision = self.env['decimal.precision'].search([('name', '=', decimal_precision_name)])
        invoice_1 = self.env['account.move'].create({
        invoice_2 = self.env['account.move'].create({
        tax = self.env['account.tax'].create({
        invoice_create = self.env['account.move'].create({
        move_form = Form(self.env['account.move'].with_context(default_move_type='out_invoice'))
        product = self.env['product.product'].create({
        move_form = Form(self.env['account.move'].with_context(default_move_type='out_invoice'))
        fiscal_position = self.env['account.fiscal.position'].create({'name': 'fiscal_position'})
        move_form = Form(self.env['account.move'].with_context(default_move_type='out_invoice'))
        tax_price_include = self.env['account.tax'].create({
        analytic_tag = self.env['account.analytic.tag'].create({
        analytic_account = self.env['account.analytic.account'].create({
        analytic_account = self.env['account.analytic.account'].create({
        move_reversal = self.env['account.move.reversal'].with_context(active_model="account.move", active_ids=self.invoice.ids).create({
        reverse_move = self.env['account.move'].browse(reversal['res_id'])
        move_reversal = self.env['account.move.reversal'].with_context(active_model="account.move", active_ids=self.invoice.ids).create({
        reverse_move = self.env['account.move'].browse(reversal['res_id'])
        move_reversal = self.env['account.move.reversal'].with_context(active_model="account.move", active_ids=self.invoice.ids).create({
        reverse_move = self.env['account.move'].browse(reversal['res_id'])
        move_reversal = self.env['account.move.reversal'].with_context(active_model="account.move", active_ids=self.invoice.ids).create({
        reverse_move = self.env['account.move'].browse(reversal['res_id'])
        move_reversal = self.env['account.move.reversal'].with_context(active_model="account.move", active_ids=self.invoice.ids).create({
        refund = self.env['account.move'].search([('move_type', '=', 'out_refund'), ('company_id', '=', self.invoice.company_id.id)])
        move = self.env['account.move'].create({
        partner_a_child = self.env['res.partner'].create({
        move = self.env['account.move'].create({
        move = self.env['account.move'].create({
        move = self.env['account.move'].create({
            move = self.env['account.move'].create({
        move = self.env['account.move'].create({
        move = self.env['account.move'].create({
        move = self.env['account.move'].create({
        tags = self.env['account.account.tag'].create([{
        taxes = self.env['account.tax'].create([{
        invoice = self.env['account.move'].create({
        move = self.env['account.move'].create({
        wizard = self.env['account.automatic.entry.wizard']\
            'expense_accrual_account': self.env['account.account'].create({
            'revenue_accrual_account': self.env['account.account'].create({
        accrual_lines = self.env['account.move'].browse(wizard_res['domain'][0][2]).line_ids.sorted('date')
        zero_balance_payment_term = self.env['account.payment.term'].create({
        zero_balance_tax = self.env['account.tax'].create({
        invoice = self.env['account.move'].create({
        self.env['decimal.precision'].search([
            ('name', '=', self.env['account.move.line']._fields['price_unit']._digits),
        self.env['res.currency.rate'].create({
        invoice = self.env['account.move'].create({
        self.env['decimal.precision'].search([
            ('name', '=', self.env['account.move.line']._fields['price_unit']._digits),
        self.env['res.currency.rate'].search([]).unlink()
        invoice = self.env['account.move'].create({
        product = self.env['product.product'].create({
        partner = self.env['res.partner'].create({
        journal = self.env['account.journal'].create({
        invoice_create = self.env['account.move'].create({
        move_form = Form(self.env['account.move'].with_context(default_move_type='out_invoice'))
        invoice = self.env['account.move'].create({
        return self.env['account.move'].create(vals)
        return self.env['account.account.tag'].create({
        account_1 = self.env['account.account'].create({'name': 'test1', 'code': 'test1', 'user_type_id': user_type.id})
        account_2 = self.env['account.account'].create({'name': 'test2', 'code': 'test2', 'user_type_id': user_type.id})
        tax = self.env['account.tax'].create({
        sale_tax = self.env['account.tax'].create({
        sale_tax = self.env['account.tax'].create({
        move_form = Form(self.env['account.move'], view='account.view_move_form')
        move_form = Form(self.env['account.move'], view='account.view_move_form')
        purch_tax = self.env['account.tax'].create({
        move_form = Form(self.env['account.move'])
        move_form = Form(self.env['account.move'])
            child1_sale_tax = self.env['account.tax'].create({
            child2_sale_tax = self.env['account.tax'].create({
            return self.env['account.tax'].create({
            with Form(self.env['account.move'], view='account.view_move_form') as move_form:
        self.env['res.currency.rate'].create({
        invoice = self.env['account.move'].create({
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        partner = self.env['res.partner'].create({'name': 'test'})
        move = self.env['account.move'].with_context(default_move_type='out_invoice').create({
        bank_stmt = self.env['account.bank.statement'].create({
        statement = self.env['account.bank.statement'].create({
            move = self.env['account.move'].create(vals)
        aml_recs = self.env['account.move.line'].search([('move_id', 'in', move_ids), ('account_id', '=', self.account_rcv.id), ('reconciled', '=', False)])
        dest_journal_id = self.env['account.journal'].create({
        self.env['res.currency.rate'].create({'name': time.strftime('%Y') + '-' + '07' + '-01',
        self.env['res.currency.rate'].create({'name': time.strftime('%Y') + '-' + '08' + '-01',
        self.env['res.currency.rate'].create({'name': time.strftime('%Y') + '-' + '09' + '-01',
        invoice_a = self.env['account.move'].with_context(default_move_type='in_invoice').create({
        invoice_b = self.env['account.move'].with_context(default_move_type='in_invoice').create({
        payment_a = self.env['account.payment'].create({'payment_type': 'outbound',
        payment_b = self.env['account.payment'].create({'payment_type': 'outbound',
        payment_c = self.env['account.payment'].create({'payment_type': 'outbound',
        payment = self.env['account.payment'].create({
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        payment = self.env['account.payment'].create({
        payment = self.env['account.payment'].create({
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        payment = self.env['account.payment'].create({
        reverted_exchange_move = self.env['account.move'].search([('journal_id', '=', exchange_move.journal_id.id), ('ref', 'ilike', exchange_move.name)], limit=1)
        dest_journal_id = self.env['account.journal'].create({
        self.env['res.currency.rate'].create({
        invoice_cust_1 = self.env['account.move'].with_context(default_move_type='out_invoice').create({
        self.env['res.currency.rate'].create({
        payment = self.env['account.payment.register']\
        payment_term = self.env['account.payment.term'].create({
        payment = self.env['account.payment'].create({
        aml_obj = self.env['account.move.line'].with_context(
        general_move1 = self.env['account.move'].create({
        general_move2 = self.env['account.move'].create({
        general_move3 = self.env['account.move'].create({
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        payment = self.env['account.payment'].create({
        move_balance = self.env['account.move'].create({
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        payment = self.env['account.payment'].create({
        move_balance = self.env['account.move'].create({
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        payment = self.env['account.payment'].create({
        move_balance = self.env['account.move'].create({
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        payment = self.env['account.payment.register']\
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        payment = self.env['account.payment.register']\
        foreign_0 = self.env['res.currency'].create({
        foreign_1 = self.env['res.currency'].browse(self.currency_usd_id)
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        payment = self.env['account.payment.register']\
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        payment = self.env['account.payment.register']\
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        move_balance = self.env['account.move'].create({
        test_category = self.env['res.partner.category'].create({'name': 'Consulting Services'})
        partner = self.env['res.partner'].create({'name': "The Only One"})
        self.env['account.fiscal.position'].create({
        partner = self.env['res.partner'].create({'name': 'Bernard Gagnant'})
        partner = self.env['res.partner'].create({'name': 'Bernard Perdant'})
        journal = self.env['account.journal'].create({
        matching_rule = self.env['account.reconcile.model'].create({
        statement = self.env['account.bank.statement'].create({
        move = self.env['account.move'].create({
            payment = self.env['account.payment'].create({
        payment_partner = self.env['res.partner'].create({
        journals = self.env['account.journal'].create([{
        account = self.env['account.account'].search([], limit=1)
        moves = self.env['account.move'].create([{
        moves = self.env['account.move'].create([{
        journal_same_code = self.env['account.journal'].create([{
        wizard = Form(self.env['account.resequence.wizard'].with_context(
        config = self.env['res.config.settings'].create({})
        company = self.env['res.company'].create({'name': 'oobO'})
        Settings = self.env['res.config.settings'].with_user(user.id)
        tax_1 = self.env['account.tax'].create({
        tax_2 = self.env['account.tax'].create({
        tax_3 = self.env['account.tax'].create({
        tax_4 = self.env['account.tax'].create({
        tax_5 = self.env['account.tax'].create({
        intracomm_tax = self.env['account.tax'].create({
        tax = self.env['account.tax'].create({
        tax = self.env['account.tax'].create({
        taxes = self.env['account.tax'].create([{
        tax_10_fix = self.env['account.tax'].create({
        tax_21 = self.env['account.tax'].create({
        return self.env['account.account.tag'].search(domain)
        test_tax = self.env['account.tax'].create({
        test_invoice = self.env['account.move'].create({
        surviving_tags = self.env['account.account.tag'].search([('id', 'in', previous_tag_ids)])
        account_with_taxes = self.env['account.account'].search([('tax_ids', '!=', False), ('company_id', '=', self.env.company.id)])
        all_moves = self.env['account.move'].search([('move_type', '!=', 'entry')])
        move_line_ids = self.env['account.move.line'].browse(self.env.context['active_ids'])
        grouped_source_lines = defaultdict(lambda: self.env['account.move.line'])
                preview_vals += [self.env['account.move']._move_dict_to_preview_vals(move, record.company_id.currency_id)]
        created_moves = self.env['account.move'].create(move_vals)
        new_move = self.env['account.move'].create(move_vals)
        grouped_lines = defaultdict(lambda: self.env['account.move.line'])
        invoices = self.env['account.move'].browse(res_ids).filtered(lambda move: move.is_invoice(include_receipts=True))
        composer = self.env['mail.compose.message'].create({
                moves = self.env['account.move'].browse(self.env.context.get('active_ids'))
                self.composer_id = self.env['mail.compose.message'].create({
                invoices = self.env['account.move'].search([
            active_records = self.env[self.model].browse(active_ids)
                record.available_journal_ids = self.env['account.journal'].search([
                record.available_journal_ids = self.env['account.journal'].search([('company_id', '=', record.company_id.id)])
        move_ids = self.env['account.move'].browse(self.env.context['active_ids']) if self.env.context.get('active_model') == 'account.move' else self.env['account.move']
            [self.env['account.move'], [], True],   # Moves to be cancelled by the reverses.
            [self.env['account.move'], [], False],  # Others.
                new_moves = self.env['account.move'].create(moves_vals_list)
    journal_ids = fields.Many2many('account.journal', string='Journals', required=True, default=lambda self: self.env['account.journal'].search([('company_id', '=', self.company_id.id)]))
            self.journal_ids = self.env['account.journal'].search(
            self.journal_ids = self.env['account.journal'].search([])
    journal_ids = fields.Many2many('account.journal', string='Journals', required=True, default=lambda self: self.env['account.journal'].search([('type', 'in', ['sale', 'purchase'])]))
            active_move_ids = self.env['account.move'].browse(self.env.context['active_ids'])
            format, format_values = self.env['account.move']._get_sequence_format_param(record.first_name)
        journal_alias = self.env['account.journal'] \
            purchase_journal = self.env['account.journal'].browse(self._context['active_ids'])
            purchase_journal = self.env['account.journal'].search([('type', '=', 'purchase')], limit=1)
            bodies = self.env['ir.actions.report']._prepare_html(self.preview_invoice)[0]
            sample_pdf = self.env['ir.actions.report']._run_wkhtmltopdf(bodies)
            attachment = self.env['ir.attachment'].create({
            partner = self.env['res.partner'].search([('name', '=', 'Deco Addict')], limit=1)
                partner = self.env['res.partner'].create({
            bill = self.env['account.move'].create({
            new_wizard = self.env['account.tour.upload.bill.email.confirm'].create({'email_alias': email_alias})
        purchase_journal = self.env['account.journal'].search([('type', '=', 'purchase')], limit=1)
        bill_ids = self.env['account.move'].search([('journal_id', '=', purchase_journal.id)]).ids
        return self.env['account.tour.upload.bill']._action_list_view_bill(bill_ids)
        orders = self.env[self._context['active_model']].browse(self._context['active_ids'])
        journal = self.env['account.journal'].search(
            preview_vals = [self.env['account.move']._move_dict_to_preview_vals(
        orders = self.env[self._context['active_model']].with_company(self.company_id).browse(self._context['active_ids'])
        move = self.env['account.move'].create(move_vals)
        return self.env['account.journal'].search([('type', '=', 'bank'), ('bank_account_id', '=', False),
            vals['bank_id'] = self.env['res.bank'].search([('bic', '=', vals['bank_bic'])], limit=1).id \
                              or self.env['res.bank'].create({'name': vals['bank_bic'], 'bic': vals['bank_bic']}).id
        default = self.env['account.journal'].search([('type', '=', 'bank'), ('bank_account_id', '=', False)], limit=1)
                new_journal_code = self.env['account.journal'].get_next_bank_cash_default_code('bank', self.env.company)
                selected_journal = self.env['account.journal'].create({
            journal.check_sequence_id = self.env['ir.sequence'].sudo().create({
            num_checks_to_print=self.env['account.payment'].search_count(domain_checks_to_print),
                    journal=self.env['account.journal'].browse(r['journal_id']).display_name,
        invoice_map = {invoice: self.env['account.partial.reconcile'] for invoice in invoices}
        payments = self.env['account.payment'].browse(self.env.context['payment_ids'])
        move_ids = self.env['account.move'].browse(self.env.context['active_ids']) if self.env.context.get('active_model') == 'account.move' else self.env['account.move']
            to_process.setdefault(key, self.env['account.edi.document'])
                invoices = self.env['account.move'].browse(list(invoice_ids_to_cancel))
        journals = self.env['account.journal'].search([])
        return self.env['res.partner'].search(domain, limit=1)
        return self.env['product.product'].search(domain, limit=1)
        return self.env['account.tax'].search(expression.AND(domains), order='sequence ASC', limit=1)
        return self.env['res.currency'].search([('name', '=', code.upper())], limit=1)
            tax = self.env['account.tax'].browse(row['tax_id'])
                'src_tax_id': self.env['account.tax'].browse(row['group_tax_id']) if row['group_tax_id'] else tax,
                        'tax_line_id': self.env['account.move.line'],
            edi_formats = self.env['account.edi.format'].browse(edi_formats.ids) # Avoid duplicates
        self.env['account.edi.document'].create(edi_document_vals_list)
        self.env['account.edi.document'].create(edi_document_vals_list)
        res.append((10, self.env['account.edi.format'].search([])._create_invoice_from_attachment))
        res.append((10, self.env['account.edi.format'].search([])._update_invoice_from_attachment))
        other_edi = self.env['account.edi.format'].sudo().create({
        invoices = self.env['account.move'].create([{
        return self.env['ir.attachment'].create({
            return self._import_facturx(tree, self.env['account.move'])
            journal = self.env['account.journal'].browse(self.env.context['default_journal_id'])
        elif invoice.move_type in self.env['account.move'].get_invoice_types(include_receipts=True):
        if self.env['ir.config_parameter'].get_param('account_edi_proxy_client.demo', False):
        if self.env['ir.config_parameter'].get_param('account_edi_proxy_client.demo', False):
                server_url = self.env['ir.config_parameter'].get_param('account_edi_proxy_client.edi_server_url', DEFAULT_SERVER_URL)
        server_url = self.env['ir.config_parameter'].get_param('account_edi_proxy_client.edi_server_url', DEFAULT_SERVER_URL)
                invoice_form.invoice_incoterm_id = self.env['account.incoterms'].search([('code', '=', elements[0].text)], limit=1)
                attachments |= self.env['ir.attachment'].create({
        return self.env['ir.attachment'].create({
        log_service_ids = self.env['fleet.vehicle.log.services'].create(val_list)
            vehicle.account_move_ids = self.env['account.move.line'].search([('vehicle_id', '=', vehicle.id), ('move_id.state', '!=', 'cancel')]).move_id
        result = self.env['ir.actions.act_window']._for_xml_id('account.action_move_in_invoice_type')
            return self.env['account.move'].search([('reconciled', '=', True)]).ids
        report = self.env['ir.actions.report']._get_report_from_name('account_test.report_accounttest')
        records = self.env['accounting.assert.test'].browse(self.ids)
            partner_ids = self.env['res.partner']._search([('name', operator, name)], limit=limit, access_rights_uid=name_get_uid)
            SudoUser = self.env['res.users'].sudo().with_context(no_reset_password=True)
        return "%s/auth_oauth/signin" % (self.env['ir.config_parameter'].get_param('web.base.url'))
        oauth_provider = self.env['auth.oauth.provider'].browse(provider)
        action = self.env["ir.actions.actions"]._for_xml_id("base.action_res_users")
        action['res_id'] = literal_eval(self.env['ir.config_parameter'].sudo().get_param('base.template_portal_user_id', 'False'))
                self.env['res.users'].check_access_rights('write')
        allow_signup = self.env['res.users']._get_signup_invitation_scope() == 'b2c'
            partner = self.env['res.partner']._signup_retrieve_partner(token, check_validity=True, raise_exception=True)
        return self.env['ir.config_parameter'].sudo().get_param('auth_signup.invitation_scope', 'b2b')
                self.env['bus.bus']._sendone(invite_partner, 'res.users/connection', {
        template_user_id = literal_eval(self.env['ir.config_parameter'].sudo().get_param('base.template_portal_user_id', 'False'))
        res_users_with_details = self.env['res.users'].search_read([
        w = self.env['auth_totp.wizard'].create({
        self.env['ir.http']._clear_routing_map()
            self.env['ir.http']._clear_routing_map()
                self.env['ir.config_parameter'].sudo().get_param('barcode.max_time_between_keys_in_ms', default='55'))
            company = self.env['res.company'].create(company_values)
            company = self.env['res.company'].create(company_values)
        company = self.env['res.company'].create({
            partner = self.env['res.partner'].create(partner_values)
            partner = self.env['res.partner'].create(partner_values)
        partner = self.env['res.partner'].create({
                actions = self.env['base.automation']._get_actions(self, ['on_create', 'on_create_or_write'])
                actions = self.env['base.automation']._get_actions(self, ['on_write', 'on_create_or_write'])
                actions = self.env['base.automation']._get_actions(self, ['on_write', 'on_create_or_write'])
                actions = self.env['base.automation']._get_actions(self, ['on_unlink'])
                action_rule = self.env['base.automation'].browse(action_rule_id)
            records = self.env[action.model_name].with_context(context).search(domain)
        self.env["base.automation"].create({
        bilbo = self.env["res.partner"].create({"name": "Bilbo Baggins"})
        action = self.env["base.automation"].create({
        self_portal = self.env["ir.filters"].with_user(self.env.ref("base.user_demo").id)
        action = self.env["base.automation"].create({
        self_portal = self.env["ir.filters"].with_user(self.env.ref("base.user_demo").id)
        self.env['mail.template'].create({
        test_user = self.env['res.users'].create({
        automated_action = self.env['base.automation'].create({
        self.env['ir.config_parameter'].set_param('base_geolocalize.geo_provider', google_map)
        user_date_format = self.env['res.lang']._lang_get(self.env.user.lang).date_format
        mapping_records = self.env['base_import.mapping'].search_read([('res_model', '=', self.res_model)], ['column_name', 'field_name'])
            currency = self.env['res.currency'].search([('symbol', '=', split_value[currency_index].strip())])
        all_fields = self.env[model].fields_get()
        model = self.env[self.res_model].with_context(
                        target_model = self.env[target_model][field]._name
                field_type = self.env[target_model].fields_get().get(target_field, {}).get('type', '')
            target_model = self.env[fallback_values[field_string]['field_model']]
        return self.env['base_import.import'].get_fields_tree('base_import.tests.models.' + field)
        return self.env['base_import.import'].get_fields_tree('base_import.tests.models.' + field)
        match = self.env['base_import.import']._get_mapping_suggestion('f0', [{'name': 'f0'}], [], {})
        match = self.env['base_import.import']._get_mapping_suggestion('some field', [{'name': 'bob', 'string': "Some Field"}], [], {})
        match = self.env['base_import.import']._get_mapping_suggestion('should not be', [{'name': 'bob', 'string': "wheee"}], [], {})
        match = self.env['base_import.import']._get_mapping_suggestion('bobe', [{'name': 'bob', 'type': 'char'}], ['char'], {})
        match = self.env['base_import.import']._get_mapping_suggestion('f0/f1', [f], [], {})
        match = self.env['base_import.import']._get_mapping_suggestion('f0/f2', [f], [], {})
            self.env['base_import.import']._get_mapping_suggestions([], {}, []), {}
            self.env['base_import.import']._get_mapping_suggestions(
            self.env['base_import.import']._get_mapping_suggestions(
        import_record = self.env['base_import.import'].create({
        fields = self.env['base_import.mapping'].search_read(
            match = self.env['base_import.import']._get_mapping_suggestion(value[1], model_fields_info, ['char'], {})
        import_wizard = self.env['base_import.import'].create({
        import_wizard = self.env['base_import.import'].create({
        import_wizard = self.env['base_import.import'].create({
        import_wizard = self.env['base_import.import'].create({
        import_wizard = self.env['base_import.import'].create({
        import_wizard = self.env['base_import.import'].create({
        import_wizard = self.env['base_import.import'].create({
        import_wizard = self.env['base_import.import'].create({
        import_wizard = self.env['base_import.import'].create({
        import_wizard = self.env['base_import.import'].create({
        import_wizard = self.env['base_import.import'].create({
        import_wizard = self.env['base_import.import'].create({
        import_wizard = self.env['base_import.import'].create({
        import_wizard = self.env['base_import.import'].create({
        partners_before = self.env['res.partner'].search([])
        import_wizard = self.env['base_import.import'].create({
        partners_now = self.env['res.partner'].search([]) - partners_before
        partners_before = self.env['res.partner'].search([])
        import_wizard = self.env['base_import.import'].create({
        partners_now = self.env['res.partner'].search([]) - partners_before
        import_wizard = self.env['base_import.import'].create({
        import_wizard = self.env['base_import.import'].create({
        partners_before = self.env['res.partner'].search([])
        import_wizard = self.env['base_import.import'].create({
        partners_1 = self.env['res.partner'].search([]) - partners_before
        partners_2 = self.env['res.partner'].search([]) - (partners_before | partners_1)
        partners_3 = self.env['res.partner'].search([]) - (partners_before | partners_1 | partners_2)
        import_wizard = self.env['base_import.import'].create({
        action = self.env["ir.actions.actions"]._for_xml_id("base.action_res_users")
        company_count = self.env['res.company'].sudo().search_count([])
        active_user_count = self.env['res.users'].sudo().search_count([('share', '=', False)])
        language_count = len(self.env['res.lang'].get_installed())
        self.company = self.env['res.company'].create({'name': 'oobO'})
        Settings = self.env['res.config.settings'].with_user(self.user.id)
        company = self.env['res.company'].create({'name': 'My Last Company'})
        partner = self.env['res.partner'].create({
        user = self.env['res.users'].create({
        new_partner = self.env['res.partner'].create({'name': 'New User'})
        new_user = self.env['res.users'].create({
        new_partner = self.env['res.partner'].create({'name': 'New User'})
        new_user = self.env['res.users'].create({
        record = self.env['sparse_fields.test'].create({})
        fields = self.env['ir.model.fields'].search(domain)
            return bool(self.env['res.country'].search([('code', '=ilike', country_code)]))
        country = self.env["res.country"].browse(country_id)
            europe = self.env["res.country.group"].search([('name', '=', 'Europe')], limit=1)
            company = self.env['res.company'].browse(self.env.context['company_id'])
        vat_has_legit_country_code = self.env['res.country'].search([('code', '=', vat_country_code.upper())])
            company = self.env['res.company'].browse(self.env.context['company_id'])
        code = self.env['res.country'].browse(country_id).code if country_id else False
        partner = self.env['res.partner'].create({'name': "Dummy partner", 'country_id': self.env.ref('base.pe').id})
        partner = self.env['res.partner'].create({
        company = self.env["res.partner"].create({
        contact = self.env["res.partner"].create({
        test_partner = self.env['res.partner'].create({'name': "John Dex"})
        custom_view = self.env['ir.ui.view.custom'].search([('user_id', '=', self.env.uid), ('ref_id', '=', view_id)], limit=1)
        self.env['ir.attachment'].search(domain).unlink()
        self.patch(type(self.env['bus.bus']), '_sendone', patched_sendone)
                alarm.mail_template_id = self.env['ir.model.data']._xmlid_to_res_id('calendar.calendar_template_meeting_reminder')
        events = self.env['calendar.event'].browse(result)
        events = self.env['calendar.event'].browse(event_ids)
        alarms = self.env['calendar.alarm'].browse(events_by_alarm.keys())
            meeting = self.env['calendar.event'].browse(event_id)
        alarm = self.env['calendar.alarm'].browse(alert['alarm_id'])
        meeting = self.env['calendar.event'].browse(alert['event_id'])
        users = self.env['res.users'].search([('partner_id', 'in', tuple(partner_ids))])
            self.env['bus.bus']._sendmany(notifications)
        mapped_followers = defaultdict(lambda: self.env['calendar.event'])
        if self.env['ir.config_parameter'].sudo().get_param('calendar.block_mail') or self._context.get("no_mail_to_attendees"):
                default_res_model_id=self.env['ir.model']._get_id(self.env.context['default_res_model'])
            defaults['res_model_id'] = self.env['ir.model']._get_id(self.env.context['active_model'])
                partners |= self.env['res.partner'].browse(active_id)
        defaults = self.env['calendar.recurrence'].default_get(recurrence_fields)
        meeting_activity_type = self.env['mail.activity.type'].search([('category', '=', 'meeting')], limit=1)
        valid_activity_model_ids = model_name and self.env[model_name].sudo().browse(model_ids).filtered(lambda m: 'activity_ids' in m).ids or []
        time_fields = self.env['calendar.event']._get_time_fields()
            self.env['bus.bus']._sendone(self.env.user.partner_id, 'mail.simple_notification', {
        self.env['calendar.alarm_manager']._notify_next_alarm(partner_ids)
            attendees_to_unlink = self.env['calendar.attendee'].search([
            return self.env[self.res_model].browse(self.res_id).get_formview_action()
        template_id = self.env['ir.model.data']._xmlid_to_res_id('calendar.calendar_template_meeting_update', raise_if_not_found=False)
        partner = self.env['res.partner'].browse(partner_id)
            self.env['calendar.alarm_manager']._notify_next_alarm(events_to_notify.partner_ids.ids)
        to_update |= self.env['calendar.recurrence'].create(recurrence_vals)
        event_checked_attendees = self.env['calendar.filters'].search([
        groups = self.env['calendar.event'].read_group([('recurrence_id', 'in', self.ids)], ['start:min'], ['recurrence_id'])
        self.env['calendar.event'].with_context(no_mail_to_attendees=True, mail_create_nolog=True).create(event_vals)
        lang = self.env['res.lang']._lang_get(self.env.user.lang)
        return self.env['calendar.event'].search([
        action = self.env["ir.actions.actions"]._for_xml_id("calendar.action_calendar_event")
            events = self.env['calendar.event'].search([('id', 'in', events)]).ids
        meetings = self.env['calendar.event'].browse(meeting_ids)
        partner = self.env['res.users'].browse(self.env.context.get('uid', self.env.uid)).partner_id
        action = self.env["ir.actions.actions"]._for_xml_id("calendar.action_calendar_event")
        meetings_lines = self.env['calendar.event'].search_read(
                'icon': modules.module.get_module_icon(self.env['calendar.event']._original_module),
        meeting_act_type = self.env['mail.activity.type'].search([('category', '=', 'meeting')], limit=1)
            meeting_act_type = self.env['mail.activity.type'].create({
        test_record = self.env['res.partner'].create({
        test_event = self.env['calendar.event'].with_user(test_user).with_context(
        self.assertEqual(self.env['calendar.event'], self.env['calendar.event'].search([('name', '=', test_name)]))
        test_event = self.env['calendar.event'].with_user(self.user_demo).with_context(
        activty_type = self.env['mail.activity.type'].create({
        activity_id = self.env['mail.activity'].create({
            'res_model_id': self.env['ir.model']._get_id('res.partner'),
            'res_id': self.env['res.partner'].create({'name': 'A Partner'}).id,
        calendar_event = self.env['calendar.event'].create({
        activty_type = self.env['mail.activity.type'].create({
        activity_id = self.env['mail.activity'].create({
            'res_model_id': self.env['ir.model']._get_id('res.partner'),
            'res_id': self.env['res.partner'].create({'name': 'A Partner'}).id,
        calendar_event = self.env['calendar.event'].create({
                mail = self.env['mail.message'].sudo().search([
            self.env['res.partner'].create({'name': 'testuser0', 'email': u'bob@example.com'}),
            self.env['res.partner'].create({'name': 'testuser1', 'email': u'alice@example.com'}),
            self.env['res.partner'].create({'name': 'testuser2', 'email': u'marc@example.com'}),
            self.env['res.partner'].create({'name': 'testuser3', 'email': u'carl@example.com'}),
            self.env['res.partner'].create({'name': 'testuser4', 'email': u'alain@example.com'}),
        web_company = self.env['res.company'].sudo().create({'name': "Website Company"})
        web_user = self.env['res.users'].with_company(web_company).sudo().create({
        event = self.env['calendar.event'].with_context(calendar_action['context']).create({
        alarm = self.env['calendar.alarm'].create({
            alarm = self.env['calendar.alarm'].create({
                self.env['calendar.alarm_manager'].with_context(lastcall=now - relativedelta(minutes=15))._send_reminder()
        recurrence = self.env['calendar.recurrence'].search([('base_event_id', '=', self.event.id)])
        recurrence = self.env['calendar.recurrence'].search([('base_event_id', '=', self.event.id)])
        lang = self.env['res.lang']._lang_get(self.env.user.lang)
        recurrence = self.env['calendar.recurrence'].search([('base_event_id', '=', self.event.id)])
        recurrence = self.env['calendar.recurrence'].search([('base_event_id', '=', self.event.id)])
        recurrence = self.env['calendar.recurrence'].search([('base_event_id', '=', self.event.id)])
        recurrence = self.env['calendar.recurrence'].search([('base_event_id', '=', self.event.id)])
        recurrence = self.env['calendar.recurrence'].search([('base_event_id', '=', self.event.id)])
        recurrence = self.env['calendar.recurrence'].search([('base_event_id', '=', self.event.id)])
        recurrence = self.env['calendar.recurrence'].search([('base_event_id', '=', self.event.id)])
        recurrence = self.env['calendar.recurrence'].search([])
        recurrence = self.env['calendar.recurrence'].search([])
        recurrence = self.env['calendar.event'].create({
        recurrence = self.env['calendar.recurrence'].search([])
        recurrence = self.env['calendar.recurrence'].search([])
        recurrence = self.env['calendar.recurrence'].search([])
        recurrence = self.env['calendar.recurrence'].search([('day', '=', 25)])
            return self.env['calendar.event'].create({
        group_partner_manager = self.env['ir.model.data']._xmlid_to_res_id('base.group_partner_manager')
            test_record = self.env['res.partner'].browse(self.test_record.id)
            self.assertEqual(test_record.activity_ids, self.env['mail.activity'])
        coupon_data = self.env['coupon.coupon'].read_group([('program_id', 'in', self.ids)], ['program_id'], ['program_id'])
            discount_line_product_id = self.env['product.product'].create(values)
            return bool(self.env['res.partner'].search_count(domain))
            generated_coupons |= self.env['coupon.coupon'].create({
        program = self.env['coupon.program'].browse(self.env.context.get('active_id'))
                self.env['coupon.coupon'].create(vals)
            for partner in self.env['res.partner'].search(ast.literal_eval(self.partners_domain)):
                coupon = self.env['coupon.coupon'].create(vals)
            record.has_partner_email = self.env['res.partner'].search_count(domain) == 0
        return res_model and res_model == 'crm.lead' or res_model_id and self.env['ir.model'].sudo().browse(res_model_id).model == 'crm.lead'
        default=lambda self: 'lead' if self.env['res.users'].has_group('crm.group_use_lead') else 'opportunity')
        all_companies = self.env['res.company'].search([])
            team = self.env['crm.team']._get_default_team_id(user_id=user.id, domain=team_domain)
            meeting_data = self.env['calendar.event'].sudo().read_group([
            model = self.env[model_name].sudo().with_context(active_test=False)
                vals['website'] = self.env['res.partner']._clean_website(vals['website'])
            vals['website'] = self.env['res.partner']._clean_website(vals['website'])
            stage_id = self.env['crm.stage'].browse(vals['stage_id'])
        my_lead_activities = self.env['mail.activity'].read_group(
        won_stage_ids = self.env['crm.stage'].search([('is_won', '=', True)]).ids
        return self.env['crm.stage'].search(search_domain, order=order, limit=limit)
        action = self.env["ir.actions.actions"]._for_xml_id("calendar.action_calendar_event")
        meeting_results = self.env["calendar.event"].search_read([('opportunity_id', '=', self.id)], ['start', 'stop', 'allday'])
            lang_week_start = self.env["res.lang"].search_read([('code', '=', self.env.user.lang)], ['week_start'])
        action = self.env["ir.actions.actions"]._for_xml_id("crm.crm_lead_opportunities")
        alias_record = self.env['mail.alias'].search([
            _fields = self.env['ir.model.fields'].sudo().search([
            team_stage_ids = self.env['crm.stage'].search(['|', ('team_id', '=', merged_data['team_id']), ('team_id', '=', False)], order='sequence')
        all_attachments = self.env['ir.attachment'].search([
        meetings = self.env['calendar.event'].search([('opportunity_id', 'in', opportunities.ids)])
            customer = self.env['res.partner'].browse(partner_id)
                self.env['crm.lead'].browse(subset_ids).write(update_vals)
            partner = self.env['res.partner'].search([('email', '=', self.email_from)], limit=1)
                partner = self.env['res.partner'].search([('name', 'ilike', '%' + customer_potential_name + '%')], limit=1)
            defaults['company_id'] = self.env['crm.team'].browse(defaults['team_id']).company_id.id
        won_stage_ids = self.env['crm.stage'].search([('is_won', '=', True)]).ids
        frequencies = self.env['crm.lead.scoring.frequency'].search([('variable', 'in', list(leads_fields))], order="team_id asc")
        leads_to_update = self.env['crm.lead'].search(pending_lead_domain)
            team_ids = self.env['crm.team'].with_context(active_test=False).search([]).ids + [0]  # If team_id is unset, consider it as team 0
            existing_frequencies = self.env['crm.lead.scoring.frequency'].search_read(
        LeadScoringFrequency = self.env['crm.lead.scoring.frequency'].sudo()
        str_date = self.env['ir.config_parameter'].sudo().get_param('crm.pls_start_date')
        pls_fields_config = self.env['ir.config_parameter'].sudo().get_param('crm.pls_fields')
        first_stage_id = self.env['crm.stage'].search([('team_id', '=', False)], order='sequence', limit=1)
        stage_ids = self.env['crm.stage'].search_read([], ['sequence', 'name', 'id'], order='sequence')
            from_clause, where_clause, where_params = self.env['crm.lead'].with_context(active_test=False)._where_calc(domain).get_sql()
        self.team_count = self.env['crm.team'].search_count([])
        assign_enabled = self.env['ir.config_parameter'].sudo().get_param('crm.lead.auto.assignment', False)
        leads_data = self.env['crm.lead'].read_group([
        opportunity_data = self.env['crm.lead'].read_group([
        opportunity_data = self.env['crm.lead'].read_group([
                    self.env['crm.lead'].search(domain, limit=1)
        frequencies = self.env['crm.lead.scoring.frequency'].search([('team_id', 'in', self.ids)])
            existing_noteam = self.env['crm.lead.scoring.frequency'].sudo().search([
                    existing_noteam += self.env['crm.lead.scoring.frequency'].sudo().create({
        values['alias_model_id'] = self.env['ir.model']._get('crm.lead').id
        self.env['crm.team'].search([
        BUNDLE_HOURS_DELAY = int(self.env['ir.config_parameter'].sudo().get_param('crm.assignment.delay', default=0))
        BUNDLE_COMMIT_SIZE = int(self.env['ir.config_parameter'].sudo().get_param('crm.assignment.commit.bundle', 100))
            leads = self.env["crm.lead"].search(lead_domain)
                self.env['crm.lead'].browse(lead_unlink_ids).unlink()
        self.env['crm.lead'].browse(lead_unlink_ids).unlink()
        leads_assigned = self.env['crm.lead']  # direct team assign
        action = self.env["ir.actions.actions"]._for_xml_id("crm.crm_lead_action_pipeline")
        action = self.env['ir.actions.actions']._for_xml_id('crm.crm_lead_action_forecast')
            action = self.env['ir.actions.actions']._for_xml_id('crm.crm_case_form_view_salesteams_opportunity')
            action['help'] = self.env['ir.ui.view']._render_template('crm.crm_action_helper', values=rcontext)
            record.kpi_crm_lead_created_value = self.env['crm.lead'].search_count([
            record.kpi_crm_opportunities_won_value = self.env['crm.lead'].search_count([
                fields = self.env['ir.model.fields'].search([('name', 'in', names), ('model', '=', 'crm.lead')])
                setting.predictive_lead_scoring_fields = self.env['crm.lead.scoring.frequency.field'].search([('field_id', 'in', fields.ids)])
            teams = self.env['crm.team'].search([])
        return self.env['crm.team'].search([('assignment_optout', '=', False)]).action_assign_leads(work_days=2, log=False)
            lead = self.env[active_model].browse(self.env.context.get('active_id')).exists()
        opportunity_data = self.env['crm.lead'].with_context(active_test=False).read_group(
        action = self.env['ir.actions.act_window']._for_xml_id('crm.crm_lead_opportunities')
        lead_data = self.env['crm.lead'].with_context(active_test=False).read_group([
        action = self.env['ir.actions.act_window']._for_xml_id(view)
        default_order = self.env['crm.lead']._order
        search_res = self.env['crm.lead'].search([('id', 'in', test_leads.ids)], limit=5, offset=0, order='id ASC')
        search_res = self.env['crm.lead'].search([('id', 'in', test_leads.ids)], limit=5, offset=5, order='id ASC')
        expected_leads_asc = self.env['crm.lead'].browse([test_leads[lid].id for lid in expected_ids_asc])
        expected_leads_desc = self.env['crm.lead'].browse([test_leads[lid].id for lid in expected_ids_desc])
        search_res = self.env['crm.lead'].search(_domain, limit=None, offset=0, order=_order)
        search_res = self.env['crm.lead'].search(_domain, limit=4, offset=0, order=_order)
        search_res = self.env['crm.lead'].search(_domain, limit=4, offset=3, order=_order)
        search_res = self.env['crm.lead'].search(_domain, limit=None, offset=3, order=_order)
        search_res = self.env['crm.lead'].search(_domain, limit=None, offset=0, order=_order)
        search_res = self.env['crm.lead'].search(_domain, limit=4, offset=0, order=_order)
        search_res = self.env['crm.lead'].search(_domain, limit=4, offset=3, order=_order)
        search_res = self.env['crm.lead'].search(_domain, limit=None, offset=3, order=_order)
        activity = self.env['mail.activity'].with_user(self.user_sales_leads).create({
        lead_model_id = self.env['ir.model']._get('crm.lead').id
        activity = self.env['mail.activity'].with_user(self.user_sales_manager).create({
        lead = self.env['crm.lead'].create(lead_data)
        self.assertLeadAddress(lead, False, False, False, False, self.env['res.country.state'], self.country_ref)
        self.assertLeadAddress(lead, 'Super Street', False, 'Super City', False, self.env['res.country.state'], self.country_ref)
        lead = self.env['crm.lead'].new(lead_data)
        lead = self.env['crm.lead'].create(lead_data)
        lead = self.env['crm.lead'].create({
        empty_partner = self.env['res.partner'].create({
            'state_id': self.env['res.country.state'].create({
        lead = self.env['crm.lead'].create(lead_data)
        lead = self.env['crm.lead'].create({
        lead = self.env['crm.lead'].create({
        empty_partner = self.env['res.partner'].create({
        lead = self.env['crm.lead'].create(lead_data)
        self.assertEqual(lead.state_id, self.env['res.country.state'], "State should remain since partner has no address field set")
        lead = self.env['crm.lead'].with_context(default_user_id=False).create({
        self.assertEqual(lead.user_id, self.env['res.users'])
        self.assertEqual(lead.team_id, self.env['crm.team'])
        lead = self.env['crm.lead'].create({
        contact = self.env['res.partner'].create({
        lead = self.env['crm.lead'].create({
        new_team = self.env['crm.team'].create({
        lead_1 = self.env['crm.lead'].create({
        lead_2 = self.env['crm.lead'].create({
        lead_3 = self.env['crm.lead'].create({
        lead_4 = self.env['crm.lead'].create({
            self.env['crm.lead'].search([('phone_mobile_search', 'like', '')])
        #     self.env['crm.lead'].search([('phone_mobile_search', 'like', '7   ')])
            self.env['crm.lead'].search([('phone_mobile_search', 'like', 'c')])
            self.env['crm.lead'].search([('phone_mobile_search', 'like', '+')])
            self.env['crm.lead'].search([('phone_mobile_search', 'like', '5')])
            self.env['crm.lead'].search([('phone_mobile_search', 'like', '42')])
        self.assertEqual(lead_1 + lead_2, self.env['crm.lead'].search([
        self.assertEqual(lead_1 + lead_2, self.env['crm.lead'].search([
        self.assertEqual(lead_1 + lead_2, self.env['crm.lead'].search([
        self.assertEqual(lead_1 + lead_2 + lead_4, self.env['crm.lead'].search([
            self.env['crm.lead'].search([('phone_mobile_search', 'like', 'hello')]),
            self.env['crm.lead'].search([('phone_mobile_search', 'like', 'Hello')]),
            self.env['crm.lead'].search([('phone_mobile_search', 'like', 'hello123')]),
            self.env['crm.lead'],
        leads = self.env['crm.lead'].create([
        self.assertEqual(leads, self.env['crm.lead'].search([
        self.assertEqual(leads, self.env['crm.lead'].search([
        self.assertEqual(leads, self.env['crm.lead'].search([
        self.assertEqual(leads, self.env['crm.lead'].search([
        self.assertEqual(leads, self.env['crm.lead'].search([
        lead = self.env['crm.lead'].create({
            config = self.env['res.config.settings'].create({
        leads = self.env['crm.lead'].search([('id', 'in', leads.ids)])  # ensure order
            self.env['crm.team'].browse(self.sales_team_1.ids)._action_assign_leads(work_days=4)
            self.env['crm.team'].browse(self.sales_team_1.ids)._action_assign_leads(work_days=4)
        leads = self.env['crm.lead'].search([('id', 'in', leads.ids)])  # ensure order
            self.env['crm.team'].browse(self.sales_teams.ids)._action_assign_leads(work_days=2)
        leads = self.env['crm.lead'].search([('id', 'in', leads.ids)])  # ensure order
        leads = self.env['crm.lead'].search([('id', 'in', leads.ids)])  # ensure order
        new_assigned_leads_wpartner = self.env['crm.lead'].search([
        leads = self.env['crm.lead'].search([('id', 'in', leads.ids)])  # ensure order
            self.env['crm.team'].browse(self.sales_teams.ids)._action_assign_leads(work_days=2)
        leads = self.env['crm.lead'].search([('id', 'in', leads.ids)])  # ensure order
        sales_team_3 = self.env['crm.team'].create({
        sales_team_3_m1 = self.env['crm.team.member'].create({
        sales_team_3_m2 = self.env['crm.team.member'].create({
        sales_team_3_m3 = self.env['crm.team.member'].create({
        leads = self.env['crm.lead'].search([('id', 'in', leads.ids)])  # ensure order
            self.env['crm.team'].browse(sales_teams.ids)._action_assign_leads(work_days=30)
        leads = self.env['crm.lead'].search([('id', 'in', leads.ids)])
            self.env['crm.team'].browse(self.sales_team_1.ids)._action_assign_leads(work_days=4)
        self.assertEqual(leads[0].team_id, self.env['crm.team'], 'Won lead should not be assigned')
        self.assertEqual(leads[0].user_id, self.env['res.users'], 'Won lead should not be assigned')
        self.assertEqual(leads[4].team_id, self.env['crm.team'], 'Lost lead should not be assigned')
        self.assertEqual(leads[4].user_id, self.env['res.users'], 'Lost lead should not be assigned')
        sales_team_dupe = self.env['crm.team'].create({
        self.env['crm.team.member'].create({
        master_opp = self.env['crm.lead'].create({
        dupe_lead = self.env['crm.lead'].create({
        lead = self.env['crm.lead'].browse(self.lead_1.ids)
        customer = self.env['res.partner'].create({
        wizard = Form(self.env['crm.lead2opportunity.partner'].with_context({
        lead = self.env['crm.lead'].browse(self.lead_1.ids)
        customer = self.env['res.partner'].create({
        wizard = Form(self.env['crm.lead2opportunity.partner'].with_context({
        test_lead = self.env['crm.lead'].browse(self.lead_1.ids)
        dup_leads += self.env['crm.lead'].create([
        self.assertEqual(lead.partner_id, self.env['res.partner'])
        self.assertEqual(lead.partner_id, self.env['res.partner'])
        convert = self.env['crm.lead2opportunity.partner'].with_context({
        convert = self.env['crm.lead2opportunity.partner'].with_context({
        customer = self.env['res.partner'].create({
        convert = self.env['crm.lead2opportunity.partner'].with_context({
        convert = self.env['crm.lead2opportunity.partner'].with_context({
        convert = self.env['crm.lead2opportunity.partner'].with_context({
        convert = self.env['crm.lead2opportunity.partner'].with_context({
        self.assertEqual(self.lead_1.partner_id, self.env['res.partner'])
        company_2 = self.env['res.company'].with_user(SUPERUSER_ID).create({'name': 'Company 2'})
        partner_company_2 = self.env['res.partner'].with_user(SUPERUSER_ID).create({
        lead = self.env['crm.lead'].create({
        convert = self.env['crm.lead2opportunity.partner'].with_context({
        partner = self.env['res.partner'].create({
        lead = self.env['crm.lead'].create({
            leads |= self.env['crm.lead'].create({
        convert = self.env['crm.lead2opportunity.partner'].with_context({
        convert = self.env['crm.lead2opportunity.partner'].with_context({
        convert = self.env['crm.lead2opportunity.partner'].with_context({
        convert = self.env['crm.lead2opportunity.partner'].with_context({
        self.assertEqual(self.lead_w_partner.stage_id, self.env['crm.stage'])
        convert = self.env['crm.lead2opportunity.partner'].with_context({
        self.assertEqual(lead_w_email_lost.partner_id, self.env['res.partner'])
        company = self.env['res.partner'].create({
        partner_1 = self.env['res.partner'].create({
        partner_2 = self.env['res.partner'].create({
        lead_1 = self.env['crm.lead'].create({
        lead_2 = self.env['crm.lead'].create({
        lead_3 = self.env['crm.lead'].create({
        lead_4 = self.env['crm.lead'].create({
        lead_5 = self.env['crm.lead'].create({
        lead_6 = self.env['crm.lead'].create({
        lead_7 = self.env['crm.lead'].create({
        lead_8 = self.env['crm.lead'].create({
        lead_9 = self.env['crm.lead'].create({
        lead_10 = self.env['crm.lead'].create({
        lead_11 = self.env['crm.lead'].create({
        lead_12 = self.env['crm.lead'].create({
        lead_13 = self.env['crm.lead'].create({
        lead_14 = self.env['crm.lead'].create({
        lead_1 = self.env['crm.lead'].create({
        lead_2 = self.env['crm.lead'].create({
        lead_3 = self.env['crm.lead'].create({
        lead_4 = self.env['crm.lead'].create({
        lead_5 = self.env['crm.lead'].create({
        lost_wizard = self.env['crm.lead.lost'].with_context({
            lost_reason = self.env['crm.lost.reason'].create({
            lost_reason = self.env['crm.lost.reason'].create({
        lost_wizard = self.env['crm.lead.lost'].with_context({
        lead_no_team = self.env['crm.lead'].create({
        lead_team_c2 = self.env['crm.lead'].create({
        lead_team_no_company = self.env['crm.lead'].create({
        crm_lead_form = Form(self.env['crm.lead'])
        self.assertEqual(crm_lead_form.user_id, self.env['res.users'])
        self.assertEqual(crm_lead_form.team_id, self.env['crm.team'])
        self.assertEqual(crm_lead_form.company_id, self.env['res.company'])
        self.assertEqual(crm_lead_form.user_id, self.env['res.users'])
        self.assertEqual(crm_lead_form.team_id, self.env['crm.team'])
        lead = self.env['crm.lead'].create({
        self.assertEqual(crm_lead_form.company_id, self.env['res.company'])
        self.assertEqual(crm_lead_form.company_id, self.env['res.company'])
        # self.assertEqual(crm_lead_form.company_id, self.env['res.company'])  # FIXME
        sales_team_1 = self.env['crm.team'].create({
        lead = self.env["crm.lead"].with_context(mail_create_nosubscribe=True).sudo().create({
        company1 = self.env['res.company'].create({'name': 'new_company'})
        crm_team_model = self.env['ir.model'].search([('model', '=', 'crm.team')])
        crm_lead_model = self.env['ir.model'].search([('model', '=', 'crm.lead')])
        self.env["ir.config_parameter"].sudo().set_param("mail.catchall.domain", 'aqualung.com')
        crm_team0 = self.env['crm.team'].create({
        crm_team1 = self.env['crm.team'].create({
        mail_alias0 = self.env['mail.alias'].create({
        mail_alias1 = self.env['mail.alias'].create({
        crm_lead0_id = self.env['mail.thread'].message_process('crm.lead', new_message0)
        crm_lead1_id = self.env['mail.thread'].message_process('crm.lead', new_message1)
        crm_lead0 = self.env['crm.lead'].browse(crm_lead0_id)
        crm_lead1 = self.env['crm.lead'].browse(crm_lead1_id)
        leads = self.env['crm.lead'].search([('id', 'in', leads.ids)])  # ensure order
                self.env['crm.team'].browse(self.sales_teams.ids)._action_assign_leads(work_days=2)
        leads = self.env['crm.lead'].search([('id', 'in', leads.ids)])  # ensure order
        leads = self.env['crm.lead'].search([('id', 'in', leads.ids)])  # ensure order
                self.env['crm.team'].browse(self.sales_teams.ids)._action_assign_leads(work_days=2)
        leads = self.env['crm.lead'].search([('id', 'in', leads.ids)])  # ensure order
        sales_team_3 = self.env['crm.team'].create({
        sales_team_3_m1 = self.env['crm.team.member'].create({
        sales_team_3_m2 = self.env['crm.team.member'].create({
        sales_team_3_m3 = self.env['crm.team.member'].create({
        leads = self.env['crm.lead'].search([('id', 'in', leads.ids)])  # ensure order
                self.env['crm.team'].browse(sales_teams.ids)._action_assign_leads(work_days=30)
        leads = self.env['crm.lead'].search([('id', 'in', leads.ids)])
        leads = self.env['crm.lead'].browse(self.env.context.get('active_ids'))
        pls_start_date_config = self.env['ir.config_parameter'].sudo().get_param('crm.pls_start_date')
        pls_fields_config = self.env['ir.config_parameter'].sudo().get_param('crm.pls_fields')
            fields = self.env['ir.model.fields'].search([('name', 'in', names), ('model', '=', 'crm.lead')])
            return self.env['crm.lead.scoring.frequency.field'].search([('field_id', 'in', fields.ids)])
            set_param = self.env['ir.config_parameter'].sudo().set_param
            self.env['crm.lead'].sudo()._cron_update_automated_probabilities()
            convert.duplicated_lead_ids = self.env['crm.lead']._get_lead_duplicates(
            team = self.env['crm.team']._get_default_team_id(user_id=user.id, domain=None)
        for lead in self.env['crm.lead'].browse(self._context.get('active_ids', [])):
        result_opportunities = self.env['crm.lead'].browse(self._context.get('active_ids', []))
            team = self.env['crm.team']._get_default_team_id(user_id=user.id, domain=None)
                duplicated_leads = self.env['crm.lead']._get_lead_duplicates(
                    duplicated_leads = self.env['crm.lead']._get_lead_duplicates(
        config = self.env['ir.config_parameter'].sudo().get_param('crm.iap.lead.enrich.setting', 'manual')
                            iap_response = self.env['iap.enrich.api']._request_enrich(lead_emails)
                                    'url': self.env['iap.account'].get_credits_url('reveal'),
                country = self.env['res.country'].search([('code', '=', iap_data['country_code'].upper())])
                state = self.env['res.country.state'].search([
        leads = self.env['crm.lead'].browse(self.leads.ids)
    #     leads = self.env['crm.lead'].browse(self.leads.ids)
        leads = self.env['crm.lead'].browse(self.leads.ids)
        already_notified = self.env['ir.config_parameter'].sudo().get_param(notification_parameter, False)
        iap_account = self.env['iap.account'].search([('service_name', '=', service_name)], limit=1)
        res = self.env[model_name].search_read([], ['create_uid'])
        res = self.env['res.users'].search_read([('id', 'in', list(uids))], ['email'])
        self.env['ir.config_parameter'].sudo().set_param(notification_parameter, True)
        country_id = self.env['res.country'].search([('code', '=', company_data['country_code'])]).id
        state_id = self.env['res.country.state'].search([('code', '=', state_code), ('country_id', '=', country_id)])
            leads_data = self.env['crm.lead'].read_group(
            team = self.env['crm.team']._get_default_team_id(user_id=user.id, domain=team_domain)
            lead_mining_request.available_state_ids = self.env['res.country.state'].search([
        reveal_account = self.env['iap.account'].get('reveal')
        dbuuid = self.env['ir.config_parameter'].sudo().get_param('database.uuid')
        endpoint = self.env['ir.config_parameter'].sudo().get_param('reveal.endpoint', DEFAULT_ENDPOINT) + '/iap/clearbit/1/lead_mining_request'
        leads = self.env['crm.lead'].create(lead_vals_list)
        lead_vals = self.env['crm.iap.lead.helpers'].lead_vals_from_response(self.lead_type, self.team_id.id, self.tag_ids.ids, self.user_id.id, company_data, people_data)
            self.name = self.env['ir.sequence'].next_by_code('crm.iap.lead.mining.request') or _('New')
        action = self.env["ir.actions.actions"]._for_xml_id("crm.crm_lead_all_leads")
        action = self.env["ir.actions.actions"]._for_xml_id("crm.crm_lead_opportunities")
            'url': self.env['iap.account'].get_credits_url(service_name='reveal'),
        return self.env['crm.lead'].create({
        channel = self.env['mail.channel'].create({
        self.assertEqual(lead.partner_id, self.env['res.partner'])
        channel = self.env['mail.channel'].create({
        self.assertEqual(lead.partner_id, self.env['res.partner'])
        self.assertEqual(lead.partner_id, self.env['res.partner'])
        channel = self.env['mail.channel'].create({
        lead = self.env['crm.lead'].create({
        delivery_lines = self.env['sale.order.line'].search([('order_id', 'in', self.ids), ('is_delivery', '=', True)])
                current_picking_move_line_ids = self.env['stock.move.line'].search([
        return self.env['product.template']._get_weight_uom_name_from_ir_config_parameter()
            package.weight_uom_name = self.env['product.template']._get_weight_uom_name_from_ir_config_parameter()
        return self.env['product.template']._get_weight_uom_name_from_ir_config_parameter()
            package.weight_uom_name = self.env['product.template']._get_weight_uom_name_from_ir_config_parameter()
                picking.return_label_ids = self.env['ir.attachment'].search([('res_model', '=', 'stock.picking'), ('res_id', '=', picking.id), ('name', 'like', '%s%%' % picking.carrier_id.get_return_label_prefix())])
            return self.env["ir.actions.actions"]._for_xml_id("delivery.act_delivery_trackers_url")
        picking = self.env['stock.picking'].browse(new_picking)
        self.partner_18 = self.env['res.partner'].create({'name': 'My Test Customer'})
        self.product_4 = self.env['product.product'].create({'name': 'A product to deliver'})
        self.product_delivery_normal = self.env['product.product'].create({
        self.normal_delivery = self.env['delivery.carrier'].create({
        self.partner_4 = self.env['res.partner'].create({'name': 'Another Customer'})
        self.partner_address_13 = self.env['res.partner'].create({
        self.product_2 = self.env['product.product'].create({'name': 'Zizizaproduct'})
        delivery_wizard = Form(self.env['choose.delivery.carrier'].with_context({
        delivery_wizard = Form(self.env['choose.delivery.carrier'].with_context({
            picking = self.env['stock.picking'].browse(defaults.get('picking_id'))
        weight_uom_id = self.env['product.template']._get_weight_uom_id_from_ir_config_parameter()
            user_connected = self.env['res.users'].search_count([('company_id', '=', company.id), ('login_date', '>=', start), ('login_date', '<', end)])
            total_messages = self.env['mail.message'].search_count([('create_date', '>=', start), ('create_date', '<', end), ('subtype_id', '=', discussion_subtype_id), ('message_type', 'in', ['comment', 'email'])])
        rendered_body = self.env['mail.render.mixin']._render_template(
        full_mail = self.env['mail.render.mixin']._render_encapsulate(
        mail = self.env['mail.mail'].sudo().create(mail_values)
                 kpi_fullname=self.env['ir.model.fields']._get(self._name, field_name).field_description,
        tips = self.env['digest.tip'].search([
            self.env['mail.render.mixin'].sudo()._render_template(tools.html_sanitize(tip.tip_description), 'digest.tip', tip.ids, post_process=True, engine="qweb")[tip.id]
            users_logs = self.env['res.users.log'].sudo().search_count([
        return self.env['event.stage'].search([], limit=1)
        return self.env['ir.ui.view']._render_template('event.event_default_descripton')
        return self.env['event.type']._default_event_mail_type_ids()
            self.env['event.registration'].flush(['event_id', 'state'])
        event_ids = self.env['event.event']._search(domain)
        event_ids = self.env['event.event']._search(domain)
                        for attribute_name in self.env['event.type.ticket']._get_event_ticket_fields_whitelist()
        return self.env['event.stage'].search([])
        first_ended_stage = self.env['event.stage'].search([('pipe_end', '=', True)], limit=1, order='sequence')
                self.env['mail.template'].browse(template_id).send_mail(attendee.id, force_send=force_send)
        ended_events = self.env['event.event'].search([
        mail_model = self.env['ir.model']._get('mail.template')
        mail_model = self.env['ir.model']._get('mail.template')
            return self.env['event.mail.registration'].create(new)
                email = self.env['ir.mail_server'].build_email(
                self.env['ir.mail_server'].send_email(email)
                contact = self.env['res.partner'].browse(contact_id)
        onsubscribe_schedulers = self.env['event.mail'].sudo().search([
        public_users = self.env['res.users'].sudo()
            self.env['event.registration'].flush(['event_id', 'event_ticket_id', 'state'])
        event_type = self.env['event.type'].browse(self.event_type_complex.id)
        event = self.env['event.event'].create({
        self.assertEqual(event.event_mail_ids, self.env['event.mail'])
        self.assertEqual(event.event_ticket_ids, self.env['event.event.ticket'])
                'template_ref': 'mail.template,%i' % self.env['ir.model.data']._xmlid_to_res_id('event.event_reminder')})
        self.assertEqual(event.event_type_id, self.env["event.type"])
        event_type_default = self.env['event.type'].create({
        event_type_mails = self.env['event.type'].create({
                    'template_ref': 'mail.template,%i' % self.env['ir.model.data']._xmlid_to_res_id('event.event_reminder'),
        event = self.env['event.event'].create({
                    'template_ref': 'mail.template,%i' % self.env['ir.model.data']._xmlid_to_res_id('event.event_subscription'),
        event_type = self.env['event.type'].browse(self.event_type_complex.id)
        event = self.env['event.event'].create({
        event_type_default = self.env['event.type'].create({
        event_type_tickets = self.env['event.type'].create({
        event = self.env['event.event'].create({
        event = self.env['event.event'].create({
        self.assertEqual(event.event_mail_ids, self.env['event.mail'])
        self.env['mail.template'].search([('model', '=', 'event.registration')]).unlink()
        self.env['mail.template'].create({'model_id': self.env['ir.model']._get('event.registration').id, 'name': 'test template'})
        self.env['mail.template'].create({'model_id': self.env['ir.model']._get('res.partner').id, 'name': 'test template'})
        templates = self.env['mail.template'].with_context(filter_template_on_event=True).name_search('test template')
        ticket = self.env['event.event.ticket'].create({
        registration = self.env['event.registration'].create({
        event_1 = self.env['event.event'].create({
        ongoing_event_ids = self.env['event.event']._search([('is_ongoing', '=', True)])
        ongoing_event_ids = self.env['event.event']._search([('is_ongoing', '=', True)])
        event_2 = self.env['event.event'].create({
        finished_or_upcoming_event_ids = self.env['event.event']._search([('is_ongoing', '=', False)])
        finished_or_upcoming_event_ids = self.env['event.event']._search([('is_ongoing', '=', False)])
        event = self.env['event.event'].create({
            reg = self.env['event.registration'].create({
        reg_draft = self.env['event.registration'].create({
        reg_done = self.env['event.registration'].create({
        event = self.env['event.event'].browse(self.event_0.ids)
        customer = self.env['res.partner'].browse(self.event_customer.id)
        event = self.env['event.event'].browse(self.event_0.ids)
        customer = self.env['res.partner'].browse(self.event_customer.id)
        company = self.env['res.partner'].sudo().create({
        contact = self.env['res.partner'].sudo().create({
        event_type = self.env['event.type'].create({
        self.env['event.mail'].search([]).unlink()
            test_event = self.env['event.event'].create({
                        'template_ref': 'mail.template,%i' % self.env['ir.model.data']._xmlid_to_res_id('event.event_subscription')}),
                        'template_ref': 'mail.template,%i' % self.env['ir.model.data']._xmlid_to_res_id('event.event_subscription')}),
                        'template_ref': 'mail.template,%i' % self.env['ir.model.data']._xmlid_to_res_id('event.event_reminder')}),
                        'template_ref': 'mail.template,%i' % self.env['ir.model.data']._xmlid_to_res_id('event.event_reminder')}),
        after_sub_scheduler = self.env['event.mail'].search([('event_id', '=', test_event.id), ('interval_type', '=', 'after_sub'), ('interval_unit', '=', 'now')])
        after_sub_scheduler_2 = self.env['event.mail'].search([('event_id', '=', test_event.id), ('interval_type', '=', 'after_sub'), ('interval_unit', '=', 'hours')])
        event_prev_scheduler = self.env['event.mail'].search([('event_id', '=', test_event.id), ('interval_type', '=', 'before_event')])
        event_next_scheduler = self.env['event.mail'].search([('event_id', '=', test_event.id), ('interval_type', '=', 'after_event')])
            reg1 = self.env['event.registration'].with_user(self.user_eventuser).create({
            reg2 = self.env['event.registration'].with_user(self.user_eventuser).create({
            reg3 = self.env['event.registration'].with_user(self.user_eventuser).create({
            product_id = self.env['product.product'].create({
            self.env['ir.model.data'].create({
            self.env['event.booth.registration'].create([{
        event_type_nobooth = self.env['event.type'].create({
        event_type_wbooths = self.env['event.type'].create({
        event = self.env['event.event'].create({
        self.assertEqual(event.event_booth_ids, self.env['event.booth'])
        self.assertEqual(event.event_booth_ids[1].message_partner_ids, self.env['res.partner'])
            self.env['event.lead.rule'].search([('lead_creation_trigger', '=', 'create')]).sudo()._run_on_registrations(registrations)
                self.env['event.lead.rule'].search([('lead_creation_trigger', '=', 'confirm')]).sudo()._run_on_registrations(open_registrations)
                self.env['event.lead.rule'].search([('lead_creation_trigger', '=', 'done')]).sudo()._run_on_registrations(done_registrations)
                self.env['event.lead.rule'].search([('lead_creation_trigger', '=', 'confirm')]).sudo()._run_on_registrations(self)
                self.env['event.lead.rule'].search([('lead_creation_trigger', '=', 'done')]).sudo()._run_on_registrations(self)
            contact_vals = self.env['crm.lead']._prepare_values_from_partner(valid_partner)
        event_to_reg_ids = defaultdict(lambda: self.env['event.registration'])
        action = self.env["ir.actions.actions"]._for_xml_id("sale.action_orders")
                    self.env['sale.order.line'].browse(vals['sale_order_line_id'])
                self.env['sale.order.line'].browse(vals['sale_order_line_id'])
            )._sale_order_ticket_type_change_notify(self.env['event.event.ticket'].browse(vals['event_ticket_id']))
            product_id = self.env['product.product'].create({
            self.env['ir.model.data'].create({
        event = self.env['event.event'].create({
        ticket = self.env['event.event.ticket'].create({
        event_product = self.env['product.product'].create({'name': 'Test Registration Product New',})
        new_ticket = self.env['event.event.ticket'].create({
        ticket1_reg1 = self.env['event.registration'].create({
        editor = self.env['registration.editor'].with_context({
        pricelist = self.env['product.pricelist'].search([], limit=1)
        tax = self.env['account.tax'].create({
        event_product = self.env['product.template'].create({
        event = self.env['event.event'].create({
        event_ticket = self.env['event.event.ticket'].create({
        pricelist.item_ids = self.env['product.pricelist.item'].create({
        so = self.env['sale.order'].create({
        sol = self.env['sale.order.line'].create({
        event = self.env['event.event'].browse(self.event_0.ids)
        event = self.env['event.event'].browse(self.event_0.ids)
        event = self.env['event.event'].browse(self.event_0.ids)
        event = self.env['event.event'].create({
        self.env['event.event.ticket'].create([{
                self.env['fleet.vehicle.odometer'].create(data)
            record.history_count = self.env['fleet.vehicle.assignation.log'].search_count([('vehicle_id', '=', record.id)])
        params = self.env['ir.config_parameter'].sudo()
                        log_contract = self.env['fleet.vehicle.log.contract'].search([
        params = self.env['ir.config_parameter'].sudo()
        res_ids = self.env['fleet.vehicle.log.contract'].search([
        res_ids = self.env['fleet.vehicle.log.contract'].search([
                future_driver = self.env['res.partner'].browse(vals['future_driver_id'])
                future_driver = self.env['res.partner'].browse(vals['future_driver_id'])
            self.env['fleet.vehicle.assignation.log'].create(
        self.env['fleet.vehicle.log.contract'].with_context(active_test=False).search([('vehicle_id', 'in', self.ids)]).toggle_active()
        self.env['fleet.vehicle.log.services'].with_context(active_test=False).search([('vehicle_id', 'in', self.ids)]).toggle_active()
        return self.env['fleet.vehicle.state'].search([], order=order)
            res = self.env['ir.actions.act_window']._for_xml_id('fleet.%s' % xml_id)
        res = self.env['ir.actions.act_window']._for_xml_id('fleet.fleet_vehicle_costs_action')
            future_contracts, running_contracts, expired_contracts = self.env[self._name], self.env[self._name], self.env[self._name]
        params = self.env['ir.config_parameter'].sudo()
            odometer = self.env['fleet.vehicle.odometer'].create({
            self.env['mail.thread'].message_post_with_template(
                # for which `badge_user.user_id.partner_id.ids` equals `[8]`, which is then passed to  `self.env['mail.compose.message'].create(...)`
            self.env['gamification.badge'].browse(vals['badge_id']).check_granting()
            all_user_badges = self.env['gamification.badge.user'].search([('user_id', '=', self.env.uid)]).mapped('badge_id')
            if self.env['gamification.goal'].search([('challenge_id', 'in', self.ids), ('state', '=', 'inprogress')], limit=1):
        return self.env['res.users'].search(user_domain)
        self.env['gamification.goal'].search([
                reached_goals = self.env['gamification.goal'].read_group([
                        user = self.env['res.users'].browse(reach_goals_user['user_id'][0])
                            badges = self.env['gamification.badge.user'].search_count([
        return self.env['gamification.badge.user'].create({
            self.env['gamification.karma.tracking'].sudo().create(karma_trackings)
            self.env['gamification.karma.tracking'].sudo().create(karma_trackings)
        where_query = self.env['res.users']._where_calc(user_domain)
        where_query = self.env['res.users']._where_calc(user_domain)
                 self.env['gamification.karma.rank'].search([], order="karma_min DESC")]
                 self.env['gamification.karma.rank'].search([], order="karma_min DESC")]
            users = self.env['res.users'].search(dom)
                users_to_notify = self.env['res.users'].search([
            nothing_to_do_users = self.env['res.users'].search([
            users = self.env['res.users'].search([
            return self.env['gamification.karma.rank'].search([], order="karma_min ASC", limit=1)
        self.robot = self.env['res.users'].with_context(no_reset_password=True).create({
        badge_ids = self.env['gamification.badge.user'].search([('badge_id', '=', badge_id), ('user_id', '=', demo.id)])
        wiz = self.env['gamification.badge.user.wizard'].create({
        results = self.env['res.users']._get_tracking_karma_gain_position([])
        self.env['gamification.karma.tracking']._consolidate_last_month()
        consolidated = self.env['gamification.karma.tracking'].search([
        unconsolidated = self.env['gamification.karma.tracking'].search([
        user = self.env['res.users'].with_user(self.test_user).create({
        trackings = self.env['gamification.karma.tracking'].sudo().search([('user_id', '=', user.id)])
        user = self.env['res.users'].with_user(self.test_user).create({
        self.env['gift.card'].search([
        Parameters = self.env['ir.config_parameter'].sudo()
            raise self.env['res.config.settings'].get_config_warning(error_msg)
        get_param = self.env['ir.config_parameter'].sudo().get_param
        get_param = self.env['ir.config_parameter'].sudo().get_param
        get_param = self.env['ir.config_parameter'].sudo().get_param
            raise self.env['res.config.settings'].get_config_warning(error_msg)
        self.env['calendar.event'].search(self._get_sync_domain()).write({
        ICP = self.env['ir.config_parameter'].sudo()
        partners = self.env['mail.thread']._mail_find_partner_from_emails(emails, records=self, force_create=True)
            alarm = self.env['calendar.alarm'].search([
            service = GoogleCalendarService(self.env['google.service'].with_user(user))
        google_service = GoogleCalendarService(self.env['google.service'])
        google_service = GoogleCalendarService(self.env['google.service'])
        self.env['calendar.event'].create(vals)
        self.env['calendar.recurrence'].search(self._get_sync_domain()).write({
        new_event_values = self.env["calendar.event"]._odoo_values(gevent)
        partners = self.env['mail.thread']._mail_find_partner_from_emails(emails, records=self, force_create=True)
                    self.env["calendar.event"]._get_time_fields()
                    | self.env["calendar.event"]._get_recurrent_fields()
                self.env['calendar.event']._odoo_values(gevent),  # FIXME default reminders
            base_event = self.env['calendar.event'].search([('google_id', '=', vals['google_id'])])
                base_event = self.env['calendar.event'].create(base_values)
        get_param = self.env['ir.config_parameter'].sudo().get_param
            _dummy, response, _dummy = self.env['google.service']._do_request(GOOGLE_TOKEN_ENDPOINT, params=data, headers=headers, method='POST', preuri='')
        synced_recurrences = self.env['calendar.recurrence']._sync_google2odoo(recurrences)
        synced_events = self.env['calendar.event']._sync_google2odoo(events - recurrences, default_reminders=default_reminders)
        recurrences = self.env['calendar.recurrence']._get_records_to_sync(full_sync=full_sync)
        events = self.env['calendar.event']._get_records_to_sync(full_sync=full_sync)
        google_service = GoogleCalendarService(self.env['google.service'])
        google_service = GoogleCalendarService(self.env['google.service'])
        synced_recurrences = self.env['calendar.recurrence']._sync_google2odoo(recurrences)
        synced_events = self.env['calendar.event']._sync_google2odoo(events - recurrences, default_reminders=default_reminders)
        recurrences = self.env['calendar.recurrence']._get_records_to_sync(full_sync=full_sync)
        events = self.env['calendar.event']._get_records_to_sync(full_sync=full_sync)
        users = self.env['res.users'].search([('google_calendar_rtoken', '!=', False), ('google_synchronization_stopped', '=', False)])
        google = GoogleCalendarService(self.env['google.service'])
            self.google_cal_account_id = self.env['google.calendar.credentials'].sudo().create([{'user_ids': [Command.set(self.ids)]}])
        self.env['calendar.recurrence']._restart_google_sync()
        self.env['calendar.event']._restart_google_sync()
        self.env['calendar.recurrence']._sync_google2odoo(google_recurrence)
        self.env['calendar.event']._sync_google2odoo(events - google_recurrence)
        self.env['calendar.event']._sync_google2odoo(GoogleEvent([values]))
        event = self.env['calendar.event'].search([('google_id', '=', values.get('id'))])
        self.env['calendar.event']._sync_google2odoo(GoogleEvent([values]))
        event = self.env['calendar.event'].search([('google_id', '=', values.get('id'))])
        self.env['calendar.event']._sync_google2odoo(GoogleEvent([values]))
        event = self.env['calendar.event'].search([('google_id', '=', values.get('id'))])
        event = self.env['calendar.event'].create({
        event = self.env['calendar.event'].create({
        self.env['calendar.event'].with_user(user)._sync_google2odoo(gevent)
        event = self.env['calendar.event'].create({
        event = self.env['calendar.event'].with_user(user).create({
        self.env['calendar.recurrence']._sync_google2odoo(GoogleEvent([values]))
        recurrence = self.env['calendar.recurrence'].search([('google_id', '=', values.get('id'))])
        self.env['calendar.recurrence']._sync_google2odoo(GoogleEvent([values]))
        recurrence = self.env['calendar.recurrence'].search([('google_id', '=', values.get('id'))])
        recurrence = self.env['calendar.recurrence'].search([('google_id', '=', recurrence_id)])
        recurrence = self.env['calendar.recurrence'].search([('google_id', '=', recurrence_id)])
        recurrence = self.env['calendar.recurrence'].search([('google_id', '=', recurrence_id)])
        base_event = self.env['calendar.event'].create({
        recurrence = self.env['calendar.recurrence'].create({
        self.env['calendar.event']._sync_google2odoo(GoogleEvent(values))
        recurrence = self.env['calendar.recurrence'].search([('google_id', '=', recurrence_id)])
        recurrence = self.env['calendar.recurrence'].search([('google_id', '=', recurrence_id)])
        base_event = self.env['calendar.event'].create({
        recurrence = self.env['calendar.recurrence'].create({
        self.env['calendar.recurrence']._sync_google2odoo(GoogleEvent([values]))
        base_event = self.env['calendar.event'].create({
        recurrence = self.env['calendar.recurrence'].create({
        self.env['calendar.recurrence']._sync_google2odoo(GoogleEvent([values]))
        base_event = self.env['calendar.event'].create({
        recurrence = self.env['calendar.recurrence'].create({
        self.env['calendar.recurrence']._sync_google2odoo(GoogleEvent([values]))
        base_event = self.env['calendar.event'].create({
        recurrence = self.env['calendar.recurrence'].create({
        self.env['calendar.recurrence']._sync_google2odoo(GoogleEvent([values]))
        base_event = self.env['calendar.event'].create({
        recurrence = self.env['calendar.recurrence'].create({
        self.env['calendar.recurrence']._sync_google2odoo(GoogleEvent([values]))
        recurrence = self.env['calendar.recurrence'].search([('google_id', '=', values.get('id'))])
        self.env['calendar.event']._sync_google2odoo(GoogleEvent([values]))
        recurrence = self.env['calendar.recurrence']._sync_google2odoo(GoogleEvent([values]))
        event = self.env['calendar.event'].search([('google_id', '=', values.get('id'))])
        triggers_before = self.env['ir.cron.trigger'].search([('cron_id', '=', cron_id)])
        self.env['calendar.event']._sync_google2odoo(GoogleEvent([values]))
        triggers_after = self.env['ir.cron.trigger'].search([('cron_id', '=', cron_id)])
        self.env['calendar.event']._sync_google2odoo(GoogleEvent([values]))
        triggers_after = self.env['ir.cron.trigger'].search([('cron_id', '=', cron_id)])
        event = self.env['calendar.event'].with_user(user).create({
        self.env['calendar.event']._sync_google2odoo(GoogleEvent([values]))
        event = self.env['calendar.event'].create({
        base_event = self.env['calendar.event'].create({
        recurrence = self.env['calendar.recurrence'].create({
        self.env['calendar.recurrence']._sync_google2odoo(GoogleEvent([values]))
        self.env['calendar.recurrence']._sync_google2odoo(GoogleEvent([values]))
        recurrence = self.env['calendar.recurrence'].search([('google_id', '=', google_id)])
        self.google_service = GoogleCalendarService(self.env['google.service'])
        self.env['ir.config_parameter'].set_param('google_calendar.sync.range_days', 10000)
        partner = self.env['res.partner'].create({'name': 'Jean-Luc', 'email': 'jean-luc@opoo.com'})
        alarm = self.env['calendar.alarm'].create({
        event = self.env['calendar.event'].create({
        partners = self.env['res.partner'].create([
        alarm = self.env['calendar.alarm'].create({
        partner = self.env['res.partner'].search([], limit=1)
            events = self.env['calendar.event'].create([{
        partner = self.env['res.partner'].create({'name': 'Jean-Luc', 'email': 'jean-luc@opoo.com'})
        alarm = self.env['calendar.alarm'].create({
        partner = self.env['res.partner'].search([], limit=1)
            event = self.env['calendar.event'].create({
        event = self.env['calendar.event'].create({
        event = self.env['calendar.event'].create({
        event = self.env['calendar.event'].create({
        event = self.env['calendar.event'].create({
        event = self.env['calendar.event'].create({
        recurrence = self.env['calendar.recurrence'].create({
        event = self.env['calendar.event'].create({
        to_delete = self.env['calendar.event'].with_context(active_test=False).search([('google_id', '=', google_id)])
        event_1 = self.env['calendar.event'].create({
        event_2 = self.env['calendar.event'].create({
        self.env['calendar.recurrence'].create({
        self.env['calendar.event'].create({
        partner = self.env['res.partner'].create({'name': 'Jean-Luc', 'email': 'jean-luc@opoo.com'})
        user = self.env['res.users'].create({
        event = self.env['calendar.event'].with_user(user).create({
        event = self.env['calendar.event'].create({
        recurrence = self.env['calendar.recurrence'].create({
        event = self.env['calendar.event'].create({
        recurrence = self.env['calendar.recurrence'].create({
        event_2 = self.env['calendar.event'].create({
        event = self.env['calendar.event'].create({
        recurrence = self.env['calendar.recurrence'].create({
        event = self.env['calendar.event'].create({
        recurrence = self.env['calendar.recurrence'].create({
        event_type = self.env['calendar.event.type'].create({'name': 'type'})
        partner = self.env['res.partner'].create({'name': 'Jean-Luc', 'email': 'jean-luc@opoo.com'})
        event = self.env['calendar.event'].create({
        event = self.env['calendar.event'].create({
        recurrence = self.env['calendar.recurrence'].create({
        record = self.env[model.model].browse(res_id).read()[0]
        attachments = self.env["ir.attachment"].search([('res_model', '=', model.model), ('name', '=', name_gdocs), ('res_id', '=', res_id)])
        Config = self.env['ir.config_parameter'].sudo()
                action_id = self.env['ir.model.data']._xmlid_lookup('base_setup.action_general_configuration')[2]
                action_id = self.env['ir.model.data']._xmlid_lookup('base_setup.action_general_configuration')[2]
        google_web_base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')
            res['id'] = self.env["ir.attachment"].create({
                raise self.env['res.config.settings'].get_config_warning(_("The permission 'reader' for 'anyone with the link' has not been written on the document"))
            res_model = self.env['ir.model']._get_id(res_model)
                google_doc_configs = self.env[config.filter_id.model_id].with_context(**additionnal_context).search(domain)
        google_drive_client_id = self.env['ir.config_parameter'].sudo().get_param('google_drive_client_id')
        google_drive_uri = self.env['google.service']._get_google_token_uri('drive', scope=self.env['google.drive.config'].get_google_scope())
        refresh_token = self.env['ir.config_parameter'].sudo().get_param('google_drive_refresh_token', False)
        params = self.env['ir.config_parameter'].sudo()
                self.env['google.service'].generate_refresh_token('drive', authorization_code)
        fields = self.env[model].fields_view_get(view_id=view_id, view_type='tree')
        url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')
        user = self.env['res.users'].browse(self.env.user.id).read(['login', 'password'])[0]
            self.env['ir.attachment'].browse(attachment_id).write({'description': description})
        emp_data = self.env['hr.employee'].read_group([('department_id', 'in', self.ids)], ['department_id'], ['department_id'])
        manager = self.env['hr.employee'].browse(vals.get("manager_id"))
                manager = self.env['hr.employee'].browse(manager_id)
            employees = employees | self.env['hr.employee'].search([
        return self.env['hr.employee.public'].browse(self.ids).name_get()
        res = self.env['hr.employee.public'].browse(self.ids).read(fields)
                lang = self.env['res.partner'].browse(responsible_user_id).lang
        private_fields = set(fields).difference(self.env['hr.employee.public']._fields.keys())
        return self.env['hr.employee.public'].browse(self.ids).read(fields, load=load)
        return self.env['hr.employee.public'].load_views(views, options=options)
        ids = self.env['hr.employee.public']._search(args, offset=offset, limit=limit, order=order, count=count, access_rights_uid=access_rights_uid)
            user = self.env['res.users'].browse(vals['user_id'])
            self.env['mail.channel'].sudo().search([
                self.env['res.partner.bank'].browse(account_id).partner_id = vals['address_home_id']
            vals.update(self._sync_user(self.env['res.users'].browse(vals['user_id']),
            self.env['mail.channel'].sudo().search([
            employees = self.env['hr.employee'].search(expression.OR(employee_domain + user_domain))
            employee.employee_id = self.env['hr.employee'].browse(employee.id)
        employee_data = self.env['hr.employee'].read_group([('job_id', 'in', self.ids)], ['job_id'], ['job_id'])
        can_edit = self.env['ir.config_parameter'].sudo().get_param('hr.hr_employee_self_edit') or self.env.user.has_group('hr.group_hr_user')
        can_edit_self = self.env['ir.config_parameter'].sudo().get_param('hr.hr_employee_self_edit') or self.env.user.has_group('hr.group_hr_user')
                without_image = self.env['hr.employee'].sudo().search([('user_id', 'in', self.ids), ('image_1920', '=', False)])
                with_image = self.env['hr.employee'].sudo().search([('user_id', 'in', self.ids), ('image_1920', '!=', False)])
                self.env['hr.employee'].sudo().search([('user_id', 'in', self.ids)]).write(employee_values)
            return self.env['ir.actions.act_window']._for_xml_id('hr.res_users_action_my')
            for employee in self.env['hr.employee'].search([('user_id', 'in', self.ids), ('company_id', '=', self.env.company.id)])
        self.env['hr.employee'].create(dict(
            **self.env['hr.employee']._sync_user(self)
        self.company_1 = self.env['res.company'].create({'name': 'Opoo'})
        self.company_2 = self.env['res.company'].create({'name': 'Otoo'})
        self.employees = self.env['hr.employee'].create([
        self.env['hr.employee'].create({
        self.env['ir.config_parameter'].sudo().set_param('hr.hr_employee_self_edit', False)
        self.env['hr.employee'].create({
            for field in self.env['res.users']._fields.values()
        view_infos = self.env['res.users'].with_user(user_all_groups).fields_view_get(view_id=view.id)
        view_infos = self.env['res.users'].with_user(user).fields_view_get(view_id=view.id)
        self.richard_emp = self.env['hr.employee'].create({
            'address_home_id': self.env['res.partner'].create({'name': 'Richard', 'phone': '21454', 'type': 'private'}).id,
        self.hubert_emp = self.env['hr.employee'].create({
            'address_home_id': self.env['res.partner'].create({'name': 'Hubert', 'type': 'private'}).id,
        self.protected_fields_emp = OrderedDict([(k, v) for k, v in self.env['hr.employee']._fields.items() if v.groups == 'hr.group_hr_user'])
        self.read_protected_fields_emp = OrderedDict([(k, v) for k, v in self.env['hr.employee']._fields.items() if not v.compute and k != 'id'])
            for k, v in self.env['res.users']._fields.items()
            if v.groups == 'hr.group_hr_user' and k in self.env['res.users'].SELF_READABLE_FIELDS
        self.env['ir.config_parameter'].set_param('hr.hr_employee_self_edit', True)
        self.env['ir.config_parameter'].set_param('hr.hr_employee_self_edit', False)
        self.env['ir.config_parameter'].set_param('hr.hr_employee_self_edit', False)
        self.env['ir.config_parameter'].set_param('hr.hr_employee_self_edit', False)
        self.env['res.users'].with_user(self.richard).search([('employee_id', 'ilike', 'Hubert')])
    departure_reason_id = fields.Many2one("hr.departure.reason", default=lambda self: self.env['hr.departure.reason'].search([], limit=1), required=True)
            if private_address and private_address.active and not self.env['res.users'].search([('partner_id', '=', private_address.id)]):
    plan_id = fields.Many2one('hr.plan', default=lambda self: self.env['hr.plan'].search([], limit=1))
            if self.env['hr.employee'].with_user(responsible).check_access_rights('read', raise_exception=False):
                date_deadline = self.env['mail.activity']._calculate_date_deadline(activity_type.activity_type_id)
            last_attendance_before_check_in = self.env['hr.attendance'].search([
                no_check_out_attendances = self.env['hr.attendance'].search([
                last_attendance_before_check_out = self.env['hr.attendance'].search([
            attendances_per_day = defaultdict(lambda: self.env['hr.attendance'])
            all_attendances = self.env['hr.attendance'].search(attendance_domain)
            overtimes = self.env['hr.attendance.overtime'].sudo().search([
        self.env['hr.attendance.overtime'].sudo().create(overtime_vals_list)
            attendances = self.env['hr.attendance'].search([
            attendances = self.env['hr.attendance'].search([
            employee.last_attendance_id = self.env['hr.attendance'].search([
        action_message = self.env["ir.actions.actions"]._for_xml_id("hr_attendance.hr_attendance_action_greeting_message")
            return self.env['hr.attendance'].create(vals)
        attendance = self.env['hr.attendance'].search([('employee_id', '=', self.id), ('check_out', '=', False)], limit=1)
            structure_types = self.env['hr.payroll.structure.type'].search([
        mapped_employee_contracts = defaultdict(lambda: self.env['hr.contract'])
        action = self.env['ir.actions.actions']._for_xml_id('hr_contract.action_hr_contract')
        action = self.env['ir.actions.act_window']._for_xml_id('hr_expense.action_hr_expense_sheet_all_all')
        return self.env['uom.uom'].search([], limit=1, order='id')
        return self.env['ir.property']._get('property_account_expense_categ_id', 'product.category')
        attachment_data = self.env['ir.attachment'].read_group([('res_model', '=', 'hr.expense'), ('res_id', 'in', self.ids)], ['res_id'], ['res_id'])
        rec = self.env['account.analytic.default'].sudo().account_get(
        attachments = self.env['ir.attachment'].browse(attachment_ids)
        product = self.env['product.product'].search([('can_be_expensed', '=', True)])
            expense = self.env['hr.expense'].create({
        use_mailgateway = self.env['ir.config_parameter'].sudo().get_param('hr_expense.use_mailgateway')
        res = self.env['ir.actions.act_window']._for_xml_id('base.action_attachment')
        root = self.env['ir.model.data']._xmlid_to_res_id("base.partner_root")
                move = self.env['account.move'].with_context(default_journal_id=move_vals['journal_id']).create(move_vals)
            account = self.env['ir.property'].with_company(self.company_id)._get('property_account_expense_categ_id', 'product.category')
                    rep_ln = self.env['account.tax.repartition.line'].browse(tax['tax_repartition_line_id'])
                    base_amount = self.env['account.move']._get_base_amount_to_display(tax['base'], rep_ln)
            currency = self.env['res.currency'].browse(expense['currency_id'][0]) if expense['currency_id'] else target_currency
        employee = self.env['hr.employee'].search([
        product = self.env['product.product'].search([('can_be_expensed', '=', True), ('default_code', '=ilike', product_code)], limit=1)
        body = self.env['mail.render.mixin']._replace_local_links(rendered_body)
            self.env['mail.mail'].sudo().create({
        journal = self.env['account.journal'].search([('type', '=', 'purchase'), ('company_id', '=', default_company_id)], limit=1)
        return self.env['account.journal'].search([('type', 'in', ['cash', 'bank']), ('company_id', '=', default_company_id)], limit=1)
    employee_id = fields.Many2one('hr.employee', string="Employee", required=True, readonly=True, tracking=True, states={'draft': [('readonly', False)]}, default=_default_employee_id, check_company=True, domain= lambda self: self.env['hr.expense']._get_employee_id_domain())
            employee = self.env['hr.employee'].browse(updated_values['employee_id'])
        res = self.env['ir.actions.act_window']._for_xml_id('base.action_attachment')
            action = self.env["ir.actions.act_window"]._for_xml_id('hr_expense.hr_expense_approve_duplicate_action')
            payment_register = self.env['account.payment.register'].with_context(**ctx).create({
        expense_sheet = self.env['hr.expense.sheet'].create({
        statement = self.env['account.bank.statement'].create({
        expense_sheet = self.env['hr.expense.sheet'].create({
        self.env['res.currency.rate'].search([]).unlink()
        self.env['res.currency.rate'].create({
        expense = self.env['hr.expense.sheet'].create({
        tax = self.env['account.tax'].create({
        self.env['hr.expense'].create({
        expense = self.env['hr.expense.sheet'].create({
            expense_line = self.env['hr.expense'].create({
        tax = self.env['account.tax'].create({
        tax.cash_basis_transition_account_id = self.env['account.account'].create({
        sheet = self.env['hr.expense.sheet'].create({
        wizard = Form(self.env['account.payment.register'].with_context(action_data['context'])).save()
        expense_employee_2 = self.env['hr.employee'].create({
            self.env['hr.expense'].with_user(self.expense_user_employee).create({
        expense_sheet = self.env['hr.expense.sheet'].with_user(self.expense_user_employee).create({
        expense_sheet = self.env['hr.expense.sheet'].with_user(self.expense_user_employee).create({
        expense = self.env['hr.expense'].message_new(message_parsed)
        expense = self.env['hr.expense'].message_new(message_parsed)
            product, amount, currency_id, description = self.env['hr.expense']\
            self.env['product.product'],
            self.env['product.product'],
            self.env['product.product'],
            self.env['product.product'],
            self.env['product.product'],
        expense_sheet = self.env['hr.expense.sheet']\
        expense_sheet = self.env['hr.expense.sheet']\
        return self.env['gamification.badge.user'].create(values)._send_badge()
        data = self.env['hr.leave.allocation'].read_group([
        holidays = self.env['hr.leave'].sudo().search([
        show_leaves = self.env['res.users'].has_group('hr_holidays.group_hr_holidays_user')
        holidays = self.env['hr.leave'].sudo().search([
            manager = self.env['hr.employee'].browse(values['parent_id']).user_id
            manager = self.env['hr.employee'].browse(values['parent_id']).user_id
                old_managers -= self.env['res.users'].browse(values['leave_manager_id'])
            holidays = self.env['hr.leave'].sudo().search(['|', ('state', 'in', ['draft', 'confirm']), ('date_from', '>', today_date), ('employee_id', 'in', self.ids)])
            allocations = self.env['hr.leave.allocation'].sudo().search([('state', 'in', ['draft', 'confirm']), ('employee_id', 'in', self.ids)])
        holidays = self.env['hr.leave'].sudo().search([
            lt = self.env['hr.leave.type'].search(['|', ('requires_allocation', '=', 'no'), ('has_valid_allocation', '=', True)], limit=1)
            lt = self.env['hr.leave.type'].browse(defaults.get('holiday_status_id'))
        allocations = self.env['hr.leave.allocation'].search_read(
                leave.holiday_allocation_id = self.env['hr.leave.allocation'].browse(found_allocation) if found_allocation else False
                attendances = self.env['resource.calendar.attendance'].read_group(domain, ['ids:array_agg(id)', 'hour_from:min(hour_from)', 'hour_to:max(hour_to)', 'week_type', 'dayofweek', 'day_period'], ['week_type', 'dayofweek', 'day_period'], lazy=False)
                    start_week_type = self.env['resource.calendar.attendance'].get_week_type(holiday.request_date_from)
                    end_week_type = self.env['resource.calendar.attendance'].get_week_type(holiday.request_date_to)
            employee = self.env['hr.employee'].browse(employee_id)
        employee = self.env['hr.employee'].browse(employee_id)
            leave_types = self.env['hr.leave.type'].browse([values.get('holiday_status_id') for values in vals_list if values.get('holiday_status_id')])
                    values.update({'department_id': self.env['hr.employee'].browse(employee_id).department_id.id})
                        employees = self.env['hr.employee'].browse(values.get('employee_id'))
        return self.env['resource.calendar.leaves'].sudo().create(vals_list)
        return self.env['resource.calendar.leaves'].search([('holiday_id', 'in', self.ids)]).unlink()
            meetings = self.env['calendar.event'].with_context(
                    employees = self.env['hr.employee'].search([('company_id', '=', leave.mode_company_id.id)])
                conflicting_leaves = self.env['hr.leave'].with_context(
                            before_leave = self.env['hr.leave'].new(before_leave_vals)
                            after_leave = self.env['hr.leave'].new(after_leave_vals)
                    split_leaves = self.env['hr.leave'].with_context(
                leaves = self.env['hr.leave'].with_context(
        to_clean, to_do = self.env['hr.leave'], self.env['hr.leave']
        return self.env['hr.leave.type'].search(domain, limit=1)
            accruals_read_group = self.env['hr.leave.accrual.plan'].read_group(
        employee = self.env['hr.employee'].browse(employee_id)
                values.update({'department_id': self.env['hr.employee'].browse(employee_id).department_id.id})
                employees = self.env['hr.employee'].search([('company_id', '=', self.mode_company_id.id)])
        to_clean, to_do = self.env['hr.leave.allocation'], self.env['hr.leave.allocation']
                allocation = self.env['hr.leave.allocation'].search([
            allocations = self.env['hr.leave.allocation'].search([
        leave_types = self.env['hr.leave.type'].search([])
        requests = self.env['hr.leave'].search([
        allocations = self.env['hr.leave.allocation'].search([
        grouped_res = self.env['hr.leave.allocation'].read_group(
        grouped_res = self.env['hr.leave'].read_group(
        accrual_allocations = self.env['hr.leave.accrual.plan'].read_group([('time_off_type_id', 'in', self.ids)], ['time_off_type_id'], ['time_off_type_id'])
        action = self.env["ir.actions.actions"]._for_xml_id("hr_holidays.hr_leave_allocation_action_all")
        action = self.env["ir.actions.actions"]._for_xml_id("hr_holidays.hr_leave_action_action_approve_department")
        action = self.env["ir.actions.actions"]._for_xml_id("hr_holidays.open_view_accrual_plans")
        self.env['res.users'].flush(fnames=['active'])
        self.env['hr.leave'].flush(fnames=['user_id', 'state', 'date_from', 'date_to'])
        res = self.env['hr.employee'].read_group(
        Department = self.env['hr.department'].with_context(tracking_disable=True)
        self.employee_emp = self.env['hr.employee'].create({
        self.employee_hruser = self.env['hr.employee'].create({
        self.employee_hrmanager = self.env['hr.employee'].create({
        self.leave_type = self.env['hr.leave.type'].create({
        accrual_plan = self.env['hr.leave.accrual.plan'].with_context(tracking_disable=True).create({
        allocation = self.env['hr.leave.allocation'].with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create({
        accrual_plan = self.env['hr.leave.accrual.plan'].with_context(tracking_disable=True).create({
        allocation = self.env['hr.leave.allocation'].with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create({
        accrual_plan = self.env['hr.leave.accrual.plan'].with_context(tracking_disable=True).create({
        allocation = self.env['hr.leave.allocation'].with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create({
        accrual_plan = self.env['hr.leave.accrual.plan'].with_context(tracking_disable=True).create({
        allocation = self.env['hr.leave.allocation'].with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create({
        accrual_plan = self.env['hr.leave.accrual.plan'].with_context(tracking_disable=True).create({
        allocation = self.env['hr.leave.allocation'].with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create({
        accrual_plan = self.env['hr.leave.accrual.plan'].with_context(tracking_disable=True).create({
        allocation = self.env['hr.leave.allocation'].with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create({
        calendar_emp = self.env['resource.calendar'].create({
        accrual_plan_not_based_on_worked_time = self.env['hr.leave.accrual.plan'].with_context(tracking_disable=True).create({
        accrual_plan_based_on_worked_time = self.env['hr.leave.accrual.plan'].with_context(tracking_disable=True).create({
        allocation_not_worked_time = self.env['hr.leave.allocation'].with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create({
        allocation_worked_time = self.env['hr.leave.allocation'].with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create({
        holiday_type = self.env['hr.leave.type'].create({
        leave = self.env['hr.leave'].create({
        self.env['hr.leave.allocation']._update_accrual()
        self.env['hr.leave.allocation']._update_accrual()
        accrual_plan = self.env['hr.leave.accrual.plan'].with_context(tracking_disable=True).create({
        allocation = self.env['hr.leave.allocation'].with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create({
        accrual_plan = self.env['hr.leave.accrual.plan'].with_context(tracking_disable=True).create({
        allocation = self.env['hr.leave.allocation'].with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create({
        second_level = self.env['hr.leave.accrual.level'].search([('accrual_plan_id', '=', accrual_plan.id), ('start_count', '=', 10)])
        accrual_plan = self.env['hr.leave.accrual.plan'].with_context(tracking_disable=True).create({
        allocation = self.env['hr.leave.allocation'].with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create({
        second_level = self.env['hr.leave.accrual.level'].search([('accrual_plan_id', '=', accrual_plan.id), ('start_count', '=', 10)])
        accrual_plan = self.env['hr.leave.accrual.plan'].with_context(tracking_disable=True).create({
        allocation = self.env['hr.leave.allocation'].with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create({
        accrual_plan = self.env['hr.leave.accrual.plan'].with_context(tracking_disable=True).create({
        allocation = self.env['hr.leave.allocation'].with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create({
        self.leave_type = self.env['hr.leave.type'].create({
        calendar = self.env['resource.calendar'].create({
        with Form(self.env['hr.leave'].with_context(default_employee_id=employee.id)) as leave_form:
        calendar = self.env['resource.calendar'].create({
        with Form(self.env['hr.leave'].with_context(default_employee_id=employee.id)) as leave_form:
        calendar = self.env['resource.calendar'].create({
        with Form(self.env['hr.leave'].with_context(default_employee_id=employee.id)) as leave_form:
        calendar = self.env['resource.calendar'].create({
        with Form(self.env['hr.leave'].with_context(default_employee_id=employee.id)) as leave_form:
        calendar = self.env['resource.calendar'].create({
        with Form(self.env['hr.leave'].with_context(default_employee_id=employee.id)) as leave_form:
        calendar = self.env['resource.calendar'].create({
        with Form(self.env['hr.leave'].with_context(default_employee_id=employee.id)) as leave_form:
        calendar = self.env['resource.calendar'].create({
        with Form(self.env['hr.leave'].with_context(default_employee_id=employee.id)) as leave_form:
        with Form(self.env['hr.leave'].with_context(default_employee_id=employee.id)) as leave_form:
        calendar = self.env['resource.calendar'].create({
        with Form(self.env['hr.leave'].with_context(default_employee_id=employee.id)) as leave_form:
        holiday_status_paid_time_off = self.env['hr.leave.type'].create({
        self.env['hr.leave.allocation'].create([
        holiday_status_paid_time_off = self.env['hr.leave.type'].create({
        self.env['hr.leave.allocation'].create({
                    self.env['hr.leave'].create(leave_vals)
        leave = self.env['hr.leave'].create(leave_vals)
        LeaveType = self.env['hr.leave.type'].with_user(self.user_hrmanager_id).with_context(tracking_disable=True)
        self.env['hr.leave'].with_user(self.user_employee_id).create({
            self.env['hr.leave'].with_user(self.user_employee_id).create({
            self.env['hr.leave'].with_user(self.user_employee_id).create({
        aloc1_user_group = self.env['hr.leave.allocation'].with_user(self.user_hruser_id).create({
        hol = self.env['hr.leave'].with_user(self.user_employee_id).create({
        self.env['hr.leave.allocation'].with_user(self.user_hrmanager_id).create({
        self.env['hr.leave'].with_user(self.user_employee_id).create({
            self.env['hr.leave'].with_user(self.user_employee).create({
        self.assertFalse(self.env['hr.leave'].search([('employee_id', 'in', self.hr_dept.member_ids.ids)]))
        leave_form = Form(self.env['hr.leave'].with_user(self.user_hrmanager), view='hr_holidays.hr_leave_view_form_manager')
        self.assertEqual(self.env['hr.leave'].search_count([('employee_id', 'in', member_ids)]), len(member_ids), "Leave should be created for members of department")
        allocation_form = Form(self.env['hr.leave.allocation'].with_user(self.user_employee))
        self.env['hr.leave'].with_user(self.user_employee_id).create({
        leave = self.env['hr.leave'].new({
        company = self.env['res.company'].create({'name': "Hergé"})
        leave = self.env['hr.leave'].new({
        company = self.env['res.company'].create({'name': "Hergé"})
        employee = self.env['hr.employee'].create({'name': "Remi", 'company_id': company.id})
        leave_form = Form(self.env['hr.leave'], view='hr_holidays.hr_leave_view_form_manager')
        employee_leave = self.env['hr.leave'].search([('employee_id', '=', employee.id)])
        company = self.env['res.company'].create({'name': "Hergé"})
        department = self.env['hr.department'].create({'name': "Museum", 'company_id': company.id})
        leave = self.env['hr.leave'].new({
        calendar = self.env['resource.calendar'].create({
        leave_type = self.env['hr.leave.type'].create({
        allocation = self.env['hr.leave.allocation'].create({
        leave1 = self.env['hr.leave'].create({
        leave2 = self.env['hr.leave'].create({
        calendar = self.env['resource.calendar'].create({
        leave_type = self.env['hr.leave.type'].create({
        leave1 = self.env['hr.leave'].create({
        values.update(self.env['hr.leave'].with_user(self.user_employee_id)._default_get_request_parameters(values))
        leave = self.env['hr.leave'].with_user(self.user_employee_id).new(values)
        allocation = self.env['hr.leave.allocation'].create({
            self.env['hr.leave'].with_user(self.user_employee_id).create({
        self.env['hr.leave'].with_user(self.user_employee_id).create({
        allocation1 = self.env['hr.leave.allocation'].create({
        allocation2 = self.env['hr.leave.allocation'].create({
            self.env['hr.leave'].with_user(self.user_employee_id).create({
        self.env['hr.leave'].with_user(self.user_employee_id).create({
        baseUser = self.env['res.users'].create({
        self.users = baseUser + self.env['res.users'].create({
        self.employees = self.env['hr.employee'].create([{
        self.leave_type = self.env['hr.leave.type'].create({
        self.leaves = self.env['hr.leave'].create([{
        employees = self.env['hr.employee'].browse(data['emp'])
                leave.sudo().overtime_id = self.env['hr.attendance.overtime'].sudo().create({
            overtime = self.env['hr.attendance.overtime'].sudo().create({
            leave_type = self.env['hr.leave.type'].search([
                    allocation.sudo().overtime_id = self.env['hr.attendance.overtime'].sudo().create({
            overtime = self.env['hr.attendance.overtime'].sudo().create({
        deductible_time_off_type_ids = self.env['hr.leave.type'].search([
                    res[employee_id][allocation_id]['virtual_remaining_leaves'] = self.env['hr.employee'].sudo().browse(employee_id).total_overtime
        all_companies = self.env['res.company'].sudo().search([])
        time_off_types = self.env['hr.leave.type'].search_count([
            user_id = self.env['hr.employee'].browse(vals['employee_id'])['user_id']
            department = self.env['hr.department'].browse(vals['department_id'])
            employee = self.env['hr.employee'].browse(vals['employee_id'])
        user = self.env['res.users'].search([('login', '=', email)], limit=1)
            self.env['hr.employee'].search([
        employees = self.env['hr.employee'].search([('company_id', '=', company.id)])
        if literal_eval(self.env['ir.config_parameter'].sudo().get_param('hr.hr_presence_control_ip', 'False')):
                employee_ips = self.env['res.users.log'].search([
        if literal_eval(self.env['ir.config_parameter'].sudo().get_param('hr.hr_presence_control_email', 'False')):
                sent_emails = self.env['mail.message'].search_count([
            if (res_model and res_model == 'hr.applicant') or (res_model_id and self.env['ir.model'].sudo().browse(res_model_id).model == 'hr.applicant'):
            new_colleagues = self.env['hr.employee'].search_count([
        employees = self.env['hr.employee'].search([
        attachments = self.env['ir.attachment'].search([
        result = dict.fromkeys(self.ids, self.env['ir.attachment'])
        read_group_result = self.env['hr.applicant'].with_context(active_test=False).read_group([('job_id', 'in', self.ids)], ['job_id'], ['job_id'])
        read_group_result = self.env['hr.applicant'].read_group([('job_id', 'in', self.ids)], ['job_id'], ['job_id'])
        return self.env['hr.recruitment.stage'].search([
            job.new_application_count = self.env["hr.applicant"].search_count(
        values['alias_model_id'] = self.env['ir.model']._get('hr.applicant').id
            self.env['hr.recruitment.source'].create(source_vals)
        action = self.env["ir.actions.actions"]._for_xml_id("base.action_attachment")
                'alias_model_id': self.env['ir.model']._get('hr.applicant').id,
                'alias_parent_model_id': self.env['ir.model']._get('hr.job').id,
            source.alias_id = self.env['mail.alias'].create(vals)
        applicant_data = self.env['hr.applicant'].read_group([('stage_id', 'in', self.ids)], ['stage_id'], 'stage_id')
        application_data = self.env['hr.applicant'].with_context(active_test=False).read_group([
        read_group_res = self.env['ir.attachment'].read_group(
                    stage_ids = self.env['hr.recruitment.stage'].search([
            alias_id = self.env['hr.job'].browse(self.env.context['active_id']).alias_id
        res = self.env['ir.actions.act_window']._for_xml_id('calendar.action_calendar_event')
        action = self.env['ir.actions.act_window']._for_xml_id('base.action_attachment')
                'subtype_id': self.env['ir.model.data']._xmlid_to_res_id('mail.mt_note'),
            stage = self.env['hr.job'].browse(custom_values['job_id'])._get_first_stage()
                new_partner_id = self.env['res.partner'].create({
        dict_act_window = self.env['ir.actions.act_window']._for_xml_id('hr.open_view_employee_list')
            default_stage[job_id.id] = self.env['hr.recruitment.stage'].search(
        self.dep_rd = self.env['hr.department'].create({
        self.job_developer = self.env['hr.job'].create({
        self.employee_niv = self.env['hr.employee'].create({
        self.res_users_hr_recruitment_officer = self.env['res.users'].create({
        self.env['mail.thread'].with_user(self.res_users_hr_recruitment_officer).message_process(
        applicant = self.env['hr.applicant'].search([('email_from', 'ilike', 'Richard_Anderson@yahoo.com')], limit=1)
        resume_ids = self.env['ir.attachment'].search([
            ('res_model', '=', self.env['hr.applicant']._name),
        user = self.env["res.users"].with_context(no_reset_password=True).create(
        job = self.env["hr.job"].create({"name": "Test Job for Notification"})
        self.env["mail.followers"].create(
        application = self.env["hr.applicant"].create(
        self.env['hr.resume.line'].create(resume_lines_values)
        employees = self.env['hr.employee'].sudo().search([('user_id.partner_id', 'in', list(partner_has_completed.keys()))])
            self.env['hr.resume.line'].create({
        employees = self.env['hr.employee'].sudo().search([('user_id.partner_id', 'in', certification_user_inputs.mapped('partner_id').ids)])
            self.env['hr.resume.line'].create({
            result['employee_id'] = self.env['hr.employee'].search([('user_id', '=', result['user_id'])], limit=1).id
        timesheets_read = self.env[self._name].search_read([('project_id', '!=', False), ('id', 'in', self.ids)], ['id', 'project_id', 'task_id'])
        employees = self.env['hr.employee'].search([('user_id', 'in', user_ids)])
            return self.env['ir.rule']._compute_domain(self._name)
            task = self.env['project.task'].browse(vals.get('task_id'))
            project = self.env['project.project'].browse(vals.get('project_id'))
            employee = self.env['hr.employee'].browse(vals['employee_id'])
                partner_id = self.env['project.task'].browse(vals['task_id']).partner_id.id
                partner_id = self.env['project.project'].browse(vals['project_id']).partner_id.id
            analytic_account = self.env['account.analytic.account'].sudo().browse(vals['account_id'])
        group_read = self.env['project.task'].read_group(
        timesheets_read_group = self.env['account.analytic.line'].read_group(
        uoms_dict = {uom.id: uom for uom in self.env['uom.uom'].browse(uom_ids)}
        action = self.env["ir.actions.actions"]._for_xml_id("hr_timesheet.timesheet_action_all")
            project = self.env['project.project'].browse(values.get('project_id'))
        result['arch'] = self.env['account.analytic.line'].sudo()._apply_timesheet_label(result['arch'])
            result['arch'] = self.env['account.analytic.line']._apply_time_label(result['arch'], related_model=self._name)
            uom = self.env['uom.uom'].search([('category_id', '=', wtime.id), ('uom_type', '=', 'reference')], limit=1)
            uom = self.env['uom.uom'].search([('category_id', '=', wtime.id)], limit=1)
            uom = self.env['uom.uom'].search([('category_id', '=', wtime.id), ('uom_type', '=', 'reference')], limit=1)
            uom = self.env['uom.uom'].search([('category_id', '=', wtime.id)], limit=1)
        project_ids = self.env['project.project'].create(results)
            result['arch'] = self.env['account.analytic.line']._apply_time_label(result['arch'], related_model=self._name)
        self.partner = self.env['res.partner'].create({
        self.analytic_account = self.env['account.analytic.account'].create({
        self.project_customer = self.env['project.project'].create({
        self.task1 = self.env['project.task'].create({
        self.task2 = self.env['project.task'].create({
        self.user_employee = self.env['res.users'].create({
        self.user_employee2 = self.env['res.users'].create({
        self.user_manager = self.env['res.users'].create({
        self.empl_employee = self.env['hr.employee'].create({
        self.empl_employee2 = self.env['hr.employee'].create({
        self.empl_manager = self.env['hr.employee'].create({
        non_tracked_project = self.env['project.project'].create({
        tracked_project = self.env['project.project'].create({
        analytic_project = self.env['project.project'].create({
        task = self.env['project.task'].create({
        self.project_customer2 = self.env['project.project'].create({
        partner2 = self.env['res.partner'].create({
        timesheet_entry = self.env['account.analytic.line'].create({
        return self.env['account.analytic.line'].create(values)
            resources_list = [self.env['resource.resource'], resource]
            for leave in self.env['resource.calendar.leaves'].search(leave_domain):
        intervals_to_generate = defaultdict(lambda: self.env['hr.contract'])
        return self.env['hr.work.entry'].create(vals_list)
                we_to_remove = self.env['hr.work.entry'].search([('date_stop', '<=', date_start), ('contract_id', '=', contract.id)])
                we_to_remove = self.env['hr.work.entry'].search([('date_start', '>=', date_end), ('contract_id', '=', contract.id)])
        work_entries = self.env['hr.work.entry'].search(domain)
        wizard = self.env['hr.work.entry.regeneration.wizard'].create({
            employee = self.env['hr.employee'].browse(vals.get('employee_id'))
        entries_by_calendar = defaultdict(lambda: self.env['hr.work.entry'])
        self.resource_calendar_id = self.env['resource.calendar'].create({'name': 'My Calendar'})
        contract = self.env['hr.contract'].create({
        pou1 = self.env['hr.work.entry'].search_count([])
        pou2 = self.env['hr.work.entry'].search_count([])
        work_entry_nb = self.env['hr.work.entry'].search_count([
        work_entry = self.env['hr.work.entry'].create({
        work_entries = self.env['hr.work.entry'].search([('employee_id', '=', self.richard_emp.id)])
        work_entry1 = self.env['hr.work.entry'].create({
        self.env['hr.work.entry'].create({
        work_entry1 = self.env['hr.work.entry'].create({
                validated_work_entry_ids = self.env['hr.work.entry'].search(search_domain, order="date_start")
        user_date_format = self.env['res.lang']._lang_get(self.env.user.lang).date_format
        work_entries = self.env['hr.work.entry'].search([
        action = self.env["ir.actions.actions"]._for_xml_id('hr_work_entry.hr_work_entry_action')
        return self.env['hr.leave'].search([
        return resource_leaves | self.env['resource.calendar.leaves'].create(resource_leave_values)
            nbr_contracts = self.env['hr.contract'].sudo().search_count(domain)
                contracts = self.env['hr.contract'].sudo().search(domain)
        new_leave_work_entries = self.env['hr.work.entry'].create(work_entries_vals_list)
            work_entry_groups = self.env['hr.work.entry'].read_group([
            work_entries_by_employee = defaultdict(lambda: self.env['hr.work.entry'])
                work_entries_by_employee[employee_id] |= self.env['hr.work.entry'].browse(group.get('work_entry_ids'))
                overlappping |= self.env['hr.work.entry']._from_intervals(outside_intervals)
        with self.env['hr.work.entry']._error_checking(start=start, stop=stop, skip=skip_check):
        with self.env['hr.work.entry']._error_checking(start=min(start_dates, default=False), stop=max(stop_dates, default=False)):
        with self.env['hr.work.entry']._error_checking(start=start, stop=stop):
        work_entries = self.env['hr.work.entry'].sudo().search([('leave_id', 'in', self.ids)])
        self.env['hr.work.entry'].create(vals_list)
            employee = self.env['hr.employee'].browse(employee_id)
        self.env['hr.leave'].flush(['date_from', 'date_to', 'state', 'employee_id'])
        self.leave_type = self.env['hr.leave.type'].create({
        return self.env['hr.leave'].create({
            self.env['hr.contract'].create({
        self.leave_type = self.env['hr.leave.type'].create({
        leave = self.env['hr.leave'].create({
        self.resource_calendar_id = self.env['resource.calendar'].create({'name': 'Zboub'})
        contract = self.env['hr.contract'].create({
        work_entry1 = self.env['hr.work.entry'].create({
        self.env['hr.leave'].create({
        leave = self.env['hr.leave'].create({
        work_entry = self.env['hr.work.entry'].create({
        leave = self.env['hr.leave'].create({
        company = self.env['res.company'].create({'name': 'Another Company'})
        employee = self.env['hr.employee'].create({
        self.env['hr.contract'].create({
        leave_type = self.env['hr.leave.type'].create({
        leave1 = self.env['hr.leave'].create({
        user = self.env['res.users'].create({
        self.env['hr.employee'].with_user(user).generate_work_entries('2019-12-01', '2019-12-31')
        employee = self.env['hr.employee'].create({'name': 'My employee'})
        calendar = self.env['resource.calendar'].create({
        contract = self.env['hr.contract'].create({
        leave_type = self.env['hr.leave.type'].create({
        leave = self.env['hr.leave'].create({
        dbuuid = self.env['ir.config_parameter'].sudo().get_param('database.uuid')
        d = {'dbuuid': self.env['ir.config_parameter'].sudo().get_param('database.uuid')}
        account = self.env['iap.account'].get('partner_autocomplete')
                'dbuuid': self.env['ir.config_parameter'].sudo().get_param('database.uuid'),
        channels = self.env['mail.channel'].search([('livechat_operator_id', '=', self.env.user.partner_id.id)])
            record.kpi_livechat_conversations_value = self.env['mail.channel'].search_count([
            response_time = self.env['im_livechat.report.operator'].sudo().read_group([
        data = self.env['mail.channel'].read_group([
        action = self.env['ir.actions.act_window']._for_xml_id('im_livechat.rating_rating_action_livechat')
            visitor_user = self.env['res.users'].browse(user_id)
        mail_channel = self.env["mail.channel"].with_context(mail_create_nosubscribe=False).sudo().create(mail_channel_vals)
        self.env['bus.bus']._sendone(self.uuid, 'im_livechat.history_command', {'id': self.id})
        self._send_transient_message(self.env['res.partner'].browse(pid), message_body)
        mail_body = self.env['mail.render.mixin']._replace_local_links(mail_body)
        mail = self.env['mail.mail'].sudo().create({
                current_object = self.env[rating.res_model].sudo().browse(rating.res_id)
            users_with_livechatname = self.env['res.users'].search([('partner_id', 'in', self.ids), ('livechat_username', '!=', False)])
        channels |= self.env['mail.channel'].search([
            ('channel_last_seen_partner_ids', 'in', self.env['mail.channel.partner'].sudo()._search([
        self.operators = self.env['res.users'].create([{
        self.visitor_user = self.env['res.users'].create({
        self.livechat_channel = self.env['im_livechat.channel'].create({
        self.patch(type(self.env['im_livechat.channel']), '_get_available_users', get_available_users)
        test_user = self.env['res.users'].create({'name': 'Roger', 'login': 'roger', 'country_id': belgium.id})
            self.env['mail.channel'].browse(mail_channel['id']).message_post(body='cc')
        operator_channel_partner = self.env['mail.channel.partner'].search([('channel_id', '=', channel_info['id']), ('partner_id', 'in', self.operators.partner_id.ids)])
        self.env['mail.channel'].browse(channel_info['id']).message_post(body='cc')
            ifrs_journal = self.env['account.journal'].search(
                ifrs_accounts = self.env['account.account'].browse([account_ref.get(id) for id in ifrs_account_ids])
                'country_id': self.env['res.country'].search([('code', '=', 'AR')]).id,
                ('l10n_ar_afip_responsibility_type_ids', '=', self.env['res.partner'].browse(
        invoices = self.env['account.move'].search([('journal_id', 'in', journals.ids), ('posted_before', '=', True)], limit=1)
            with Form(self.env['account.move'].with_context(default_move_type=values['move_type'])) as invoice_form:
        journal = self.env['account.journal'].create(values)
        with Form(self.env['account.move'].with_context(default_move_type=invoice_type)) as invoice_form:
        refund_wizard = self.env['account.move.reversal'].with_context({'active_ids': [invoice.id], 'active_model': 'account.move'}).create({
        refund = self.env['account.move'].browse(res['res_id'])
        debit_note_wizard = self.env['account.debit.note'].with_context(
        debit_note = self.env['account.move'].browse(res['res_id'])
        res = self.env['account.tax'].with_context(active_test=False).search([
        return self.env['account.fiscal.position'].search([('company_id', '=', self.env.company.id), ('name', '=', name)])
        return self.env['ir.attachment'].create({
            for record in self.env[self.model].browse(res_ids):
            partner_bank = self.env['res.partner.bank'].create({
        partner_bank = self.env['res.partner.bank'].create({
        isr_bank_account = self.env['res.partner.bank'].create({
        invoice_chf = self.env['account.move'].create({
        invoice_eur = self.env['account.move'].create({
        self.env['ir.config_parameter'].create(
        self.customer = self.env['res.partner'].create(
        self.product = self.env['product.product'].create({
        sale_journal = self.env['account.journal'].search([("type", "=", "sale")])
        account = self.env['account.account'].search(
        return self.env['res.partner.bank'].create(
        form = Form(self.env["account.move"].with_context(
        form = Form(self.env["account.move"].with_context(
        form = Form(self.env["account.move"].with_context(
        form = Form(self.env["account.move"].with_context(
        self.env['account.journal'].search([
        country = self.env["res.country"].browse(values.get('country_id'))
        identification_type = self.env['l10n_latam.identification.type'].browse(
                    result['income'] = self.env['account.account'].search([('internal_group', '=', 'income'), ('deprecated', '=', False),
                    result['expense'] = self.env['account.account'].search([('internal_group', '=', 'expense'), ('deprecated', '=', False),
                attachment = self.env['ir.attachment'].create({
        oss_tax_groups = self.env['ir.model.data'].search([
            taxes = self.env['account.tax'].search([
            multi_tax_reports_countries_fpos = self.env['account.fiscal.position'].search([
                fpos = self.env['account.fiscal.position'].search([
                    fpos = self.env['account.fiscal.position'].create({
                                self.env['ir.model.data'].create({
                                    'res_id': self.env['account.tax.group'].create({'name': 'OSS %s%%' % tax_amount}).id,
                            foreign_taxes[tax_amount] = self.env['account.tax'].create({
        defaults = self.env['account.tax'].with_company(self).default_get(['invoice_repartition_line_ids', 'refund_repartition_line_ids'])
            sales_tax_accounts = self.env['account.tax'].search([
            new_code = self.env['account.account']._search_new_account_code(self, len(sales_tax_accounts[0].code), sales_tax_accounts[0].code[:-2])
            oss_account = self.env['account.account'].create({
            self.env['ir.model.data'].create({
                account = self.env['account.account'].browse(account_id)
            unaffected_earnings_account = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_unaffected_earnings').id)], limit=1)
        orders = self.env['pos.order'].search(domain, order='date_order desc')
        res_company = self.env['res.company'].search([])
            orders = self.env['pos.order'].search([('state', 'in', ['paid', 'done', 'invoiced']), ('company_id', '=', self.id),
            'doc_model' : self.env['res.company'],
            'docs' : self.env['res.company'].browse(self.env.company.id),
                    efaktur = self.env['l10n_id_efaktur.efaktur.range'].pop_number(move.company_id.id)
            self.env['l10n_id_efaktur.efaktur.range'].push_number(move.company_id.id, move.l10n_id_tax_number[3:])
        dp_product_id = self.env['ir.config_parameter'].sudo().get_param('sale.default_deposit_product_id')
        attachment = self.env['ir.attachment'].create({
            max_available = int(self.env['l10n_id_efaktur.efaktur.range'].search([('company_id', '=', record.company_id.id)], order='max DESC', limit=1).max)
            tax_unit = self.env['account.tax.unit'].browse(options['tax_unit'])
        italian_report_id = self.env['ir.model.data']._xmlid_to_res_id('l10n_it.tax_report_vat')
            return self._import_fattura_pa(tree, self.env['account.move'])
                return self._import_fattura_pa(decoded_content, self.env['account.move'])
            company = elements and self.env['res.company'].search([('vat', 'ilike', elements[0].text)], limit=1)
                company = elements and self.env['res.company'].search([('l10n_it_codice_fiscale', 'ilike', elements[0].text)], limit=1)
                partner = elements and self.env['res.partner'].search(['&', ('vat', 'ilike', elements[0].text), '|', ('company_id', '=', company.id), ('company_id', '=', False)], limit=1)
                            domains.append([('l10n_it_codice_fiscale', '=', self.env['res.partner']._l10n_it_normalize_codice_fiscale(codice))])
                        partner = elements and self.env['res.partner'].search(
                    partner = elements and self.env['res.partner'].search(['&', '|', ('email', '=', elements[0].text), ('l10n_it_pec_email', '=', elements[0].text), '|', ('company_id', '=', company.id), ('company_id', '=', False)], limit=1)
                            bank = self.env['res.partner.bank'].search([
                            bank = self.env['res.partner.bank'].search([('acc_number', '=', elements[0].text)])
                                        product = self.env['product.product'].search([('barcode', '=', code.text)])
                                        product_supplier = self.env['product.supplierinfo'].search([('name', '=', partner.id), ('product_code', '=', code.text)])
                                        product = self.env['product.product'].search([('default_code', '=', code.text)])
                                    tax = self.env['account.tax'].search([
                                    tax = self.env['account.tax'].search([
                    attachment_64 = self.env['ir.attachment'].create({
        errors = self.env['account.edi.format']._l10n_it_edi_check_invoice_configuration(self)
            raise UserError(self.env['account.edi.format']._format_error_message(_("Invalid configuration:"), errors))
        report_name = self.env['account.edi.format']._l10n_it_edi_generate_electronic_invoice_filename(self)
        attachment = self.env['ir.attachment'].create({
        message = self.env['mail.message'].create({
        mail_fattura = self.env['mail.mail'].sudo().with_context(wo_bounce_return_path=True).create({
        return self.env['account.edi.document'].search(conditions, limit=1).move_id
                bypass_incoming_address_filter = self.env['ir.config_parameter'].get_param('l10n_it_edi.bypass_incoming_address_filter', False)
        parsed_values = self.env['mail.thread']._message_parse_extract_payload(msg_txt)
        existing = self.env['ir.attachment'].search([('name', '=', att_name), ('res_model', '=', 'account.move')])
        attachment = self.env['ir.attachment'].create({
                existing = self.env['ir.attachment'].search([('name', '=', att_name), ('res_model', '=', 'account.move')])
        company = self.env["res.company"].search([("l10n_it_mail_pec_server_id", "=", self.id)], limit=1)
        if self.env['ir.config_parameter'].get_param('account_edi_proxy_client.demo', False):
        server_url = self.env['ir.config_parameter'].get_param('account_edi_proxy_client.edi_server_url', DEFAULT_SERVER_URL)
        proxy_users = self.env['account_edi_proxy_client.user'].search([('edi_format_id', '=', self.env.ref('l10n_it_edi.edi_fatturaPA').id)])
                if self.env['ir.attachment'].search([('name', '=', fattura['filename']), ('res_model', '=', 'account.move')], limit=1):
                self.env['ir.attachment'].create({
            attachment = self.env['ir.attachment'].create({
        if self.env['ir.config_parameter'].get_param('account_edi_proxy_client.demo', False):
        server_url = self.env['ir.config_parameter'].get_param('account_edi_proxy_client.edi_server_url', DEFAULT_SERVER_URL)
        if self.env['ir.config_parameter'].get_param('account_edi_proxy_client.demo', False):
        return self.env['res.partner']._l10n_it_normalize_codice_fiscale(company.l10n_it_codice_fiscale)
        server_url = self.env['ir.config_parameter'].get_param('account_edi_proxy_client.edi_server_url', DEFAULT_SERVER_URL)
        self.env['account_edi_proxy_client.user']._register_proxy_user(self.company_id, fattura_pa, edi_identification)
            self.l10n_latam_identification_type_id = self.env['l10n_latam.identification.type'].search(
            rec.l10n_latam_available_document_type_ids = self.env['l10n_latam.document.type'].search(rec._get_l10n_latam_documents_domain())
            external_id = self.env['ir.model.data'].search([
        installed_langs = dict(self.env['res.lang'].get_installed())
        grouped_out_data = defaultdict(lambda: self.env['ir.model.data'])
        for imd in self.env['ir.model.data'].search([
            in_xml_ids = self.env['ir.model.data'].search([
                in_records += self.env[model + '.template'].browse(in_xml_ids[name].res_id)
                out_records += self.env[model].browse(xml_id.res_id)
        already_installed = self.lang in [code for code, _ in self.env['res.lang'].get_installed()]
        for coa in self.env['account.chart.template'].search([('spoken_languages', '!=', False)]):
                for company in self.env['res.company'].search([('chart_template_id', '=', coa.id)]):
        journal_basis = self.env['account.journal'].search([
            account = self.env['account.account'].search([('code', '=', '999999'), ('company_id', '=', self.env.company.id)])
        company = self.env['res.company'].browse(vals['company_id']) if vals.get('company_id') else self.env.company
        return self.env['ir.attachment'].create({
            return self._decode_bis3(tree, self.env['account.move'])
        return self.env['ir.attachment'].create({
            return self._decode_bis3(tree, self.env['account.move'])
            ifrs_journal_id = self.env['account.journal'].search([('company_id', '=', company.id), ('code', '=', 'IFRS')], limit=1)
                ifrs_accounts = self.env['account.account'].browse([account_ref.get(id) for id in ifrs_account_ids])
            zakat_journal_id = self.env['account.journal'].search([('company_id', '=', company.id), ('code', '=', 'ZAKAT')], limit=1)
                zakat_accounts = self.env['account.account'].browse([account_ref.get(id) for id in zakat_account_ids])
        crons = self.env['ir.cron'].sudo().create([
                'model_id': self.env['ir.model']._get_id(self._name),
        partners = self.env['lunch.order'].search(order_domain).user_id.partner_id
            self.env['mail.thread'].message_notify(body=self.message, partner_ids=partners.ids)
        result = float_round(sum(move['amount'] for move in self.env['lunch.cashmove.report'].search_read(
            if self.env['lunch.cashmove'].get_wallet_balance(line.user_id) < 0:
        action = self.env['ir.actions.act_window']._for_xml_id('lunch.lunch_order_action')
        all_orders = self.env['lunch.order'].search([
        mapped_orders = defaultdict(lambda: self.env['lunch.order'])
        crons = self.env['ir.cron'].sudo().create([
                'model_id': self.env['ir.model']._get_id(self._name),
            self.env['lunch.order'].search([('supplier_id', 'in', self.ids)]).write({'company_id': values['company_id']})
        Product = self.env['lunch.product'].with_context(active_test=False)
        orders = self.env['lunch.order'].search([
        category_records = self.env['lunch.product.category'].browse(category_ids)
        company_by_supplier = {rec.id: rec.company_id.id for rec in self.env['lunch.supplier'].browse(supplier_ids)}
        self.assertFalse(self.env['ir.cron'].sudo().search([('id', '=', cron_id)]))
            self.env['lunch.supplier'].invalidate_cache(['available_today'], [self.supplier_pizza_inn.id])
                    line = self.env['lunch.order'].create({
                    line = self.env['lunch.order'].create({
                    line2 = self.env['lunch.order'].create({
                    line_1 = self.env['lunch.order'].create({
                    line_2 = self.env['lunch.order'].create({
                    line_3 = self.env['lunch.order'].create({
        records = self.env[self.model_name].browse(
        records = self.env[self.model_name].browse(self._context.get('active_ids', self._context.get('active_id')))
                vals['value'] = self.env['mail.alias']._clean_and_check_unique([vals.get('value')])[0]
                vals['value'] = self.env['mail.alias']._clean_and_check_unique([vals.get('value')])[0]
            self.env['ir.attachment']._file_delete(fname)
            res['res_model_id'] = self.env['ir.model']._get(res['res_model']).id
        current_model = self.env["ir.model"].sudo().browse(current_model_id)
                self.env[activity.res_model].browse(activity.res_id).display_name
            if hasattr(self.env[doc_model], '_mail_post_access'):
                doc_operation = self.env[doc_model]._mail_post_access
            right = self.env[doc_model].check_access_rights(doc_operation, raise_exception=False)
                valid_doc_ids = getattr(self.env[doc_model].browse(doc_ids), filter_access_rules_method)(doc_operation)
            model = self.env[activity.res_model].with_user(activity.user_id).with_context(allowed_company_ids=activity.user_id.company_ids.ids)
                    target_record = self.env[activity.res_model].browse(activity.res_id)
            self.env[activity.res_model].browse(activity.res_id).message_subscribe(partner_ids=[partner_id])
                self.env['bus.bus']._sendone(activity.user_id.partner_id, 'mail.activity/updated', {'activity_created': True})
                self.env[activity.res_model].browse(activity.res_id).message_subscribe(partner_ids=[activity.user_id.partner_id.id])
                    self.env['bus.bus']._sendone(activity.user_id.partner_id, 'mail.activity/updated', {'activity_created': True})
                        self.env['bus.bus']._sendone(partner, 'mail.activity/updated', {'activity_deleted': True})
                self.env['bus.bus']._sendone(activity.user_id.partner_id, 'mail.activity/updated', {'activity_deleted': True})
            if hasattr(self.env[doc_model], '_mail_post_access'):
                doc_operation = self.env[doc_model]._mail_post_access
            DocumentModel = self.env[doc_model].with_user(access_rights_uid or self._uid)
            model_description = self.env['ir.model']._get(activity.res_model).display_name
                    access_link=self.env['mail.thread']._notify_get_action_link('view', model=activity.res_model, res_id=activity.res_id),
            record = self.env[activity.res_model].browse(activity.res_id)
        attachments = self.env['ir.attachment'].search_read([
            record = self.env[activity.res_model].browse(activity.res_id)
                subtype_id=self.env['ir.model.data']._xmlid_to_res_id('mail.mt_activities'),
            message_attachments = self.env['ir.attachment'].browse(activity_attachments[activity.id])
        next_activities = self.env['mail.activity'].create(next_activities_values)
        mail_template_info = self.env["mail.template"].browse(mail_template_ids).read(['id', 'name'])
            res = self.env[res_model].search(domain)
        grouped_activities = self.env['mail.activity'].read_group(
            res = self.env[res_model].search([('id', 'in', res_ids)])
        activity_type_ids = self.env['mail.activity.type'].search(
            'res_model_id': self.env['ir.model']._get(self.res_model).id,
            or self.env['mail.activity.type'].search([('res_model', '=', self._name)], limit=1) \
            or self.env['mail.activity.type'].search([('res_model', '=', False)], limit=1)
        activity_ids = self.env['mail.activity']._search([
            self.env['mail.activity'].sudo().search(
        self.env['mail.activity'].sudo().search(
        self.env['mail.activity'].flush(['res_model', 'res_id', 'user_id', 'date_deadline'])
            self.env['mail.activity'].sudo().search([
        template = self.env['mail.template'].browse(template_id).exists()
        Data = self.env['ir.model.data'].sudo()
        return self.env['mail.activity'].search(domain)
            activity_type = activity_type_id and self.env['mail.activity.type'].sudo().browse(activity_type_id)
        model_id = self.env['ir.model']._get(self._name).id
            activities |= self.env['mail.activity'].create(create_vals)
        Data = self.env['ir.model.data'].sudo()
        Data = self.env['ir.model.data'].sudo()
        Data = self.env['ir.model.data'].sudo()
            for model in self.env['ir.model'].sudo().search(
        self.alias_domain = self.env["ir.config_parameter"].sudo().get_param("mail.catchall.domain")
        catchall_alias = self.env['ir.config_parameter'].sudo().get_param('mail.catchall.alias')
        bounce_alias = self.env['ir.config_parameter'].sudo().get_param('mail.bounce.alias')
        alias_domain = self.env["ir.config_parameter"].sudo().get_param("mail.catchall.domain")
            document_name = self.env[matching_alias.alias_parent_model_id.model].sudo().browse(matching_alias.alias_parent_thread_id).display_name
                lang_author = self.env['res.partner'].browse(message_dict['author_id']).lang
            self.env['mail.channel.partner'].create(new_members)
            self.env['mail.channel.partner'].sudo()._search([
            self.env['bus.bus']._sendmany(notifications)
            self.env['mail.channel.partner'].sudo().create(to_create)
        self.env['bus.bus']._sendone(partner, 'mail.channel/leave', channel_info)
        self.env['bus.bus']._sendone(self, 'mail.channel/insert', {
        partners = self.env['res.partner'].browse(partner_ids or []).exists()
        guests = self.env['mail.guest'].browse(guest_ids or []).exists()
            existing_partners = self.env['res.partner'].search([('id', 'in', partners.ids), ('channel_ids', 'in', channel.id)])
            existing_guests = self.env['mail.guest'].search([('id', 'in', guests.ids), ('channel_ids', 'in', channel.id)])
            new_members = self.env['mail.channel.partner'].sudo().create(members_to_create)
                    self.env['bus.bus']._sendone(channel_partner.partner_id, 'mail.channel/joined', {
            self.env['bus.bus']._sendone(channel, 'mail.channel/insert', {
                current_channel_partner = self.env['mail.channel.partner'].sudo().search([('channel_id', '=', channel.id), ('partner_id', '=', partner.id), ('guest_id', '=', guest.id)])
        self.env['mail.channel.partner'].sudo().search([
        partner = self.env['res.partner'].browse(partner_id)
        for member in self.env['mail.channel.partner'].search(channel_partner_domain):
        self.env['bus.bus']._sendmany(invitation_notifications)
            self.env['bus.bus']._sendone(self, 'mail.channel/insert', channel_data)
        values['alias_model_id'] = self.env['ir.model']._get('mail.channel').id
            author = self.env['res.partner'].browse(message_dict.get('author_id', False))
            self.env['res.partner'].flush(fnames=['active', 'email', 'partner_share'])
            self.env['res.users'].flush(fnames=['notification_type', 'partner_id'])
        self.env['bus.bus'].sudo()._sendmany(bus_notifications)
            self.env['bus.bus']._sendmany(notifications)
        self.env['bus.bus']._sendone(self, 'mail.message/insert', {
        reactions = self.env['mail.message.reaction'].sudo().search([('message_id', '=', message.id), ('content', '=', content)])
        self.env['bus.bus']._sendone(self, 'mail.message/insert', {
        reactions = self.env['mail.message.reaction'].sudo().search([('message_id', '=', message.id), ('content', '=', content)])
        self.env['bus.bus']._sendone(self, 'mail.message/insert', {
        self.env['bus.bus']._sendmany(notifications)
        for partner in self.env['res.partner'].browse(partner_ids):
        return self.env['mail.message']._message_fetch(domain=domain, limit=limit)
                self.env['mail.channel.partner'].search([('partner_id', '=', self.env.user.partner_id.id), ('channel_id', '=', channel.id)]).write({
                'name': ', '.join(self.env['res.partner'].sudo().browse(partners_to).mapped('name')),
        for session_state in self.env['mail.channel.partner'].search(domain):
            self.env['bus.bus']._sendone(self.env.user.partner_id, 'mail.channel/insert', {
        channel_partners = self.env['mail.channel.partner'].search(
            self.env['bus.bus']._sendone(self.env.user.partner_id, 'mail.channel/unpin', {'id': self.id})
            self.env['bus.bus']._sendone(self.env.user.partner_id, 'mail.channel/legacy_insert', self.channel_info()[0])
        last_message = self.env['mail.message'].search(domain, order="id DESC", limit=1)
        self.env['bus.bus']._sendone(target, 'mail.channel.partner/seen', data)
        channel_partner = self.env['mail.channel.partner'].search(channel_partner_domain)
            channel_partner = self.env['mail.channel.partner'].search([('channel_id', '=', channel.id), ('partner_id', '=', self.env.user.partner_id.id)], limit=1)
            self.env['bus.bus']._sendone(channel, 'mail.channel.partner/fetched', {
        channel_partner = self.env['mail.channel.partner'].search([('partner_id', '=', self.env.user.partner_id.id), ('channel_id', '=', self.id)])
        self.env['bus.bus']._sendone(channel_partner.partner_id, 'mail.channel/insert', {
        self.env['bus.bus']._sendone(self, 'mail.channel/insert', {
        self.env['bus.bus']._sendone(self, 'mail.channel/insert', {
        self.env['bus.bus']._sendmany(notifications)
        self.env['bus.bus']._sendone(self.env.user.partner_id, 'mail.channel/legacy_insert', channel_info)
        last_messages = self.env['mail.message'].browse(channels_preview).message_format()
        partners = self.env['res.partner'].with_context(active_test=False).search_read(
        self.env['bus.bus']._sendone(partner_to, 'mail.channel/transient_message', {
            all_channel_partners = self.env['mail.channel.partner'].with_context(active_test=False)
                    channel_id = self.env['mail.channel'].browse(vals['channel_id'])
            return self.env['mail.channel.partner'].sudo().search([('channel_id', '=', channel_id), ('partner_id', '=', self.env.user.partner_id.id)], limit=1)
        guest = self.env['mail.guest']._get_guest_from_request(request)
        return self.env['mail.channel.partner'].sudo()
        rtc_session = self.env['mail.channel.rtc.session'].create({'channel_partner_id': self.id})
            'iceServers': self.env['mail.ice.server']._get_ice_servers() or False,
        check_rtc_sessions = self.env['mail.channel.rtc.session'].browse([int(check_rtc_session_id) for check_rtc_session_id in (check_rtc_session_ids or [])])
        for member in self.env['mail.channel.partner'].search(channel_partner_domain):
        self.env['bus.bus']._sendmany(invitation_notifications)
            self.env['bus.bus']._sendone(self.channel_id, 'mail.channel/insert', channel_data)
        self.env['mail.followers'].flush(['partner_id', 'subtype_ids'])
        self.env['mail.message.subtype'].flush(['internal'])
        self.env['res.users'].flush(['notification_type', 'active', 'partner_id', 'groups_id'])
        self.env['res.partner'].flush(['active', 'partner_share'])
        self.env['res.groups'].flush(['users'])
        default, _, external = self.env['mail.message.subtype'].default_subtypes(res_model)
            customer_ids = self.env['res.partner'].sudo().search([('id', 'in', partner_ids), ('partner_share', '=', True)]).ids
        return self.env['res.lang'].get_installed()
        guest = self.env['mail.guest'].browse(int(guest_id)).sudo().exists()
        self.env['bus.bus']._sendmany(bus_notifs)
            author_id, email_from = self.env['mail.thread']._message_compute_author(res.get('author_id'), res.get('email_from'), raise_exception=False)
        my_messages = self.env['mail.notification'].sudo().search([
        notification_ids = self.env['mail.notification']._search([('res_partner_id', '=', self.env.user.partner_id.id), ('is_read', '=', is_read)])
        error_from_notification = self.env['mail.notification'].sudo().search([
        if not self.env['res.users'].has_group('base.group_user'):
        self.env['mail.notification'].flush(['mail_message_id', 'res_partner_id'])
        allowed_doc_ids = self.env[doc_model].with_context(active_test=False).search([('id', 'in', doc_ids)]).ids
        if not self.env['res.users'].has_group('base.group_user'):
        self.env['mail.notification'].flush(['mail_message_id', 'res_partner_id'])
                check_operation = self.env['mail.thread']._get_mail_message_access(doc_ids, operation, model_name=model)
                followers = self.env['mail.followers'].sudo().search([
                author_id, email_from = self.env['mail.thread']._message_compute_author(values.get('author_id'), email_from=None, raise_exception=False)
                Attachments = self.env['ir.attachment'].with_context(clean_context(self._context))
            self.env['ir.attachment'].browse(check_attachment_access).check(mode='read')
                    self.env['mail.tracking.value'].sudo().create(vals_lst)
        thread = self.env[self.model].browse(self.res_id)
        notifications = self.env['mail.notification'].sudo().search(notif_domain)
        self.env['bus.bus']._sendone(self.env.user.partner_id, 'mail.message/mark_as_read', {
        notifications = self.env['mail.notification'].sudo().search([
        self.env['bus.bus']._sendone(partner_id, 'mail.message/mark_as_read', {
        self.env['bus.bus']._sendone(self.env.user.partner_id, 'mail.message/toggle_star', {
        self.env['bus.bus']._sendone(self.env.user.partner_id, 'mail.message/toggle_star', {
        reaction = self.env['mail.message.reaction'].sudo().search([('message_id', '=', self.id), ('partner_id', '=', partner.id), ('guest_id', '=', guest.id), ('content', '=', content)])
            reaction = self.env['mail.message.reaction'].sudo().create({
        self.env[self.model].browse(self.res_id)._message_add_reaction_after_hook(message=self, content=reaction.content)
        reaction = self.env['mail.message.reaction'].sudo().search([('message_id', '=', self.id), ('partner_id', '=', partner.id), ('guest_id', '=', guest.id), ('content', '=', content)])
        self.env[self.model].browse(self.res_id)._message_remove_reaction_after_hook(message=self, content=content)
                main_attachment = self.env[message_sudo.model].sudo().browse(message_sudo.res_id).message_main_attachment_id
                record_name = self.env[message_sudo.model] \
            reactions_per_content = defaultdict(lambda: self.env['mail.message.reaction'])
        com_id = self.env['ir.model.data']._xmlid_to_res_id('mail.mt_comment')
        note_id = self.env['ir.model.data']._xmlid_to_res_id('mail.mt_note')
            if vals['model'] and self.env[vals['model']]._original_module:
                vals['module_icon'] = modules.module.get_module_icon(self.env[vals['model']]._original_module)
                record = self.env[message.model].browse(message.res_id)
        messages_per_partner = defaultdict(lambda: self.env['mail.message'])
        self.env['bus.bus']._sendmany(updates)
        return self.env[model].sudo().browse(res_id).display_name
            records = self.env[model].browse([res_id])
            records = self.env[model] if model else self.env['mail.thread']
                self.env[model].invalidate_cache(fnames=[
        messages = self.env['mail.message'].browse(vals['mail_message_id'] for vals in vals_list)
                model = self.env['ir.model']._get(self.model_object_field.relation)
                _sub_relative2absolute.base_url = self.env["ir.config_parameter"].sudo().get_param("web.base.url")
            model_description = self.env['ir.model']._get(context_record._name).display_name if context_record else False
            html = self.env['mail.render.mixin']._replace_local_links(html)
        for record in self.env[model].browse(res_ids):
                render_result = self.env['ir.qweb']._render(html.fragment_fromstring(
        for record in self.env[model].browse(res_ids):
        for record in self.env[model].browse(res_ids):
            res['model_id'] = self.env['ir.model']._get(res.pop('model')).id
            records = self.env[self.model].browse(res_ids).sudo()
        if self._context.get('tpl_partners_only') and self.model and results and 'company_id' in self.env[self.model]._fields:
            records = self.env[self.model].browse(results.keys()).read(['company_id'])
                partner_ids += self.env['res.partner'].sudo().browse(tpl_partner_ids).exists().ids
        records = self.env[self.model].browse(res_ids)
        Attachment = self.env['ir.attachment']  # TDE FIXME: should remove default_type from context
                record = self.env[self.model].browse(res_id)
                model = self.env['ir.model']._get(record._name)
                    'message': self.env['mail.message'].sudo().new(dict(body=values['body_html'], record_name=record.display_name)),
                values['body_html'] = self.env['mail.render.mixin']._replace_local_links(body)
        mail = self.env['mail.mail'].sudo().create(values)
        followers = self.env['mail.followers'].sudo().search([
        followers = self.env['mail.followers'].sudo().search([
        followers = self.env['mail.followers'].sudo().search([
        message_ids = self.env['mail.message']._search([('has_error', operator, operand), ('author_id', '=', self.env.user.partner_id.id)])
        read_group_var = self.env['ir.attachment'].read_group([('res_id', 'in', self.ids), ('res_model', '=', self._name)],
                self.env['mail.followers']._insert_followers(
        self.env['mail.message'].search([('model', '=', self._name), ('res_id', 'in', self.ids)]).sudo().unlink()
        self.env['mail.followers'].sudo().search(
        catchall_domain = self.env['ir.config_parameter'].sudo().get_param("mail.catchall.domain")
            record = self.env[model].sudo().browse(res_id)
        doc_name = self.env['ir.model']._get(self._name).name
        DocModel = self.env[model_name] if model_name else self
        subtype_comment = self.env['ir.model.data']._xmlid_to_res_id('mail.mt_comment')
        bounce_from = self.env['ir.mail_server']._get_default_bounce_address()
        elif self.env['ir.config_parameter'].sudo().get_param("mail.catchall.alias") not in message['To']:
        self.env['mail.mail'].sudo().create(bounce_mail_values).send()
                bounced_record = self.env[bounced_model].sudo().browse(bounced_res_id).exists()
            bl_models = self.env['ir.model'].sudo().search(['&', ('is_mail_blacklist', '=', True), ('model', '!=', 'mail.thread.blacklist')])
                rec_bounce_w_email = self.env[model.model].sudo().search([('email_normalized', '=', bounced_email)])
                self.env['mail.notification'].sudo().search([
        record_set = self.env[model].browse(thread_id) if thread_id else self.env[model]
                records = self.env[alias.alias_parent_model_id.model].browse(alias.alias_parent_thread_id)
                obj = self.env[alias.alias_parent_model_id.model].browse(alias.alias_parent_thread_id)
            bl_models = self.env['ir.model'].sudo().search(['&', ('is_mail_blacklist', '=', True), ('model', '!=', 'mail.thread.blacklist')])
                self.env[model.model].sudo().search([('message_bounce', '>', 0), ('email_normalized', '=', valid_email)])._message_reset_bounce(valid_email)
        catchall_alias = self.env['ir.config_parameter'].sudo().get_param("mail.catchall.alias")
        bounce_alias = self.env['ir.config_parameter'].sudo().get_param("mail.bounce.alias")
        mail_messages = self.env['mail.message'].sudo().search([('message_id', 'in', msg_references)], limit=1, order='id desc, message_id')
            reply_model_id = self.env['ir.model']._get_id(reply_model)
            other_model_aliases = self.env['mail.alias'].search([
            reply_model_id = self.env['ir.model']._get_id(reply_model)
            dest_aliases = self.env['mail.alias'].search([
            dest_aliases = self.env['mail.alias'].search([('alias_name', 'in', rcpt_tos_valid_localparts)])
            related_user = self.env['res.users'].browse(user_id)
            Model = self.env[model].with_context(mail_create_nosubscribe=True, mail_create_nolog=True)
                parent_message = self.env['mail.message'].sudo().browse(message_dict['parent_id'])
                    subtype_id = self.env['ir.model.data']._xmlid_to_res_id('mail.mt_note')
                    subtype_id = self.env['ir.model.data']._xmlid_to_res_id('mail.mt_comment')
                partner_from_found = message_dict.get('author_id') and message_dict['author_id'] != self.env['ir.model.data']._xmlid_to_res_id('base.partner_root')
        existing_msg_ids = self.env['mail.message'].search([('message_id', '=', msg_dict['message_id'])], limit=1)
        bounced_partner = self.env['res.partner'].sudo()
                bounced_partner = self.env['res.partner'].sudo().search([('email_normalized', '=', bounced_email)])
        bounced_message = self.env['mail.message'].sudo()
                bounced_message = self.env['mail.message'].sudo().search([('message_id', 'in', bounced_msg_id)])
            parent_ids = self.env['mail.message'].search([('message_id', '=', msg_dict['in_reply_to'])], limit=1)
            parent_ids = self.env['mail.message'].search([('message_id', 'in', [x.strip() for x in references_msg_id_list])], limit=1)
                partner = self.env['res.partner'].sudo().browse([partner_info['partner_id']])[0]
        partners = self.env['res.users'].sudo().search(domain, order='name ASC').mapped('partner_id')
        return self.env['res.partner'].search([('id', 'in', partners.ids)])
        return self.env['res.partner'].search(domain)
        catchall_domain = self.env['ir.config_parameter'].sudo().get_param("mail.catchall.domain")
                if self.env['mail.alias'].sudo().search_count([('alias_name', '=', left_part)]):
            followers = self.env['mail.followers'].search([
        follower_users = self.env['res.users'].search([
            std_users = self.env['res.users'].sudo().search([('email_normalized', '=', normalized_email)], limit=1, order='name ASC')
        catchall_domain = self.env['ir.config_parameter'].sudo().get_param("mail.catchall.domain")
                found_alias_names = self.env['mail.alias'].sudo().search([('alias_name', 'in', domain_left_parts)]).mapped('alias_name')
            partner = next((partner for partner in done_partners if partner.email_normalized == normalized_email), self.env['res.partner'])
                partner = self.env['res.partner'].browse(self.env['res.partner'].name_create(contact)[0])
        MailMessage = self.env['mail.message'].sudo()
            filtered_attachment_ids = self.env['ir.attachment'].sudo().browse(attachment_ids).filtered(
                    attachement_values['access_token'] = self.env['ir.attachment']._generate_access_token()
            new_attachments = self.env['ir.attachment'].create(attachement_values_list)
        msg_kwargs = dict((key, val) for key, val in kwargs.items() if key in self.env['mail.message']._fields)
            subtype_id = self.env['ir.model.data']._xmlid_to_res_id(subtype_xmlid)
            subtype_id = self.env['ir.model.data']._xmlid_to_res_id('mail.mt_note')
            if self.env['res.partner'].browse(values['author_id']).active:  # we dont want to add odoobot/inactive as a follower
            all_attachments = self.env['ir.attachment'].browse([attachment_tuple[1] for attachment_tuple in attachment_ids])
        note_id = self.env['ir.model.data']._xmlid_to_res_id('mail.mt_note')
        composer = self.env['mail.compose.message'].with_context(
        msg_kwargs = dict((key, val) for key, val in kwargs.items() if key in self.env['mail.message']._fields)
            'subtype_id': self.env['ir.model.data']._xmlid_to_res_id('mail.mt_note'),
            'subtype_id': self.env['ir.model.data']._xmlid_to_res_id('mail.mt_note'),
            'reply_to': self.env['mail.thread']._notify_get_reply_to(default=email_from, records=None)[False],
            'subtype_id': self.env['ir.model.data']._xmlid_to_res_id('mail.mt_note'),
            'reply_to': self.env['mail.thread']._notify_get_reply_to(default=email_from, records=None)[False],
                author = self.env['res.partner'].browse(author_id)
        MailMessage_sudo = self.env['mail.message'].sudo()
        return self.env['mail.message'].create(create_values_list)
            self.env['mail.notification'].sudo().create(notif_create_values)
                bus_notifications.append((self.env['res.partner'].browse(partner_id), 'mail.message/inbox', dict(message_format_values)))
        self.env['bus.bus'].sudo()._sendmany(bus_notifications)
        SafeMail = self.env['mail.mail'].sudo().with_context(clean_context(self._context))
        SafeNotification = self.env['mail.notification'].sudo().with_context(clean_context(self._context))
        emails = self.env['mail.mail'].sudo()
            mail_body = self.env['mail.render.mixin']._replace_local_links(mail_body)
                        existing_notifications = self.env['mail.notification'].sudo().search([
            template = self.env['mail.template'].browse(self.env.context['default_template_id'])
            model_description = self.env['ir.model'].with_context(lang=lang)._get(model).display_name
            for tracking_value in self.env['mail.tracking.value'].sudo().search([('mail_message_id', '=', message.id)]):
        is_discussion = subtype_id == self.env['ir.model.data']._xmlid_to_res_id('mail.mt_comment')
        res = self.env['mail.followers']._get_recipient_data(self, message_type, subtype_id, pids)
        secret = self.env['ir.config_parameter'].sudo().get_param('database.secret')
            partner_ids = self.env['res.partner'].sudo().search([('id', 'in', partner_ids), ('active', '=', True), ('type', '!=', 'private')]).ids
            self.env['mail.followers']._insert_followers(
            self.env['mail.followers']._insert_followers(
        self.env['mail.followers'].sudo().search([
            user = self.env['res.users'].sudo().browse(user_id)
        view = self.env['ir.ui.view'].browse(self.env['ir.model.data']._xmlid_to_res_id(template))
            model_description = self.env['ir.model']._get(record._name).display_name
            assignation_msg = self.env['mail.render.mixin']._replace_local_links(assignation_msg)
        child_ids, def_ids, all_int_ids, parent, relation = self.env['mail.message.subtype']._get_auto_subscription_subtypes(self._name)
            res = self.env['mail.followers']._get_subscription_data(doc_data, None, include_pshare=True, include_active=True)
                partner = self.env['res.partner'].browse(partner_id)
        self.env['mail.followers']._insert_followers(
                tracking = self.env['mail.tracking.value'].create_tracking_values(initial_value, new_value, col_name, col_info, tracking_sequence, self._name)
        alias_domain = self.env['ir.config_parameter'].sudo().get_param("mail.catchall.domain")
                mail_aliases = self.env['mail.alias'].sudo().search([
                catchall = self.env['ir.config_parameter'].sudo().get_param("mail.catchall.alias")
        author = self.env['res.partner'].browse(message_dict.get('author_id', False))
        return self.env['mail.message.subtype'].search([
        odoobot_id = self.env['ir.model.data']._xmlid_to_res_id('base.partner_root')
        odoobot = self.env['res.partner'].browse(odoobot_id)
        self.env['mail.notification'].flush(['is_read', 'res_partner_id'])
        messages = self.env['mail.message'].search([
        channels |= self.env['mail.channel'].search([
        channels |= self.env['mail.channel'].search([
            ('channel_last_seen_partner_ids', 'in', self.env['mail.channel.partner'].sudo()._search([
            channel = self.env['mail.channel'].search([('id', '=', int(channel_id))])
        query = self.env['res.partner']._search(domain, order='name, id')
            'count': self.env['res.partner'].search_count(domain),
            'partners': list(self.env['res.partner'].browse(query).mail_partner_format().values()),
        if self.env['mail.channel'].check_access_rights('create', raise_exception=False):
            self.env['mail.channel'].search([('group_ids', 'in', users.groups_id.ids)])._subscribe_users_automatically()
            self.env['mail.channel'].search([('group_ids', 'in', user_group_ids)])._subscribe_users_automatically()
            self.env['mail.channel'].search([('group_ids', 'in', sel_groups)])._subscribe_users_automatically()
        current_cp = self.env['mail.channel.partner'].sudo().search([
            'current_user_settings': self.env['res.users.settings']._find_or_create_for_user(self)._res_users_settings_format(),
            'menu_id': self.env['ir.model.data']._xmlid_to_res_id('mail.menu_root_discuss'),
            'shortcodes': self.env['mail.shortcode'].sudo().search_read([], ['source', 'substitution', 'description']),
        model_names = {n[0]: n[1] for n in self.env['ir.model'].sudo().browse(model_ids).name_get()}
                module = self.env[activity['model']]._original_module
        IrParamSudo = self.env['ir.config_parameter'].sudo()
        apps = self.env['ir.module.module'].sudo().search_read(domain, ['name'])
            user = self.env['res.users'].sudo().browse(SUPERUSER_ID)
                set_param = self.env['ir.config_parameter'].sudo().set_param
        self._new_mails = self.env['mail.mail'].sudo()
        self.assertFalse(self.env[target_model].search([(target_field, '=', subject)]))
        self.env['mail.thread'].message_process(model, mail)
        return self.env[target_model].search([(target_field, '=', subject)])
        if isinstance(author, self.env['res.partner'].__class__):
            if isinstance(email_to, self.env['res.partner'].__class__):
        self.env['base'].flush()
        self._new_bus_notifs = self.env['bus.bus'].sudo()
        self.env['bus.bus'].sudo().search([]).unlink()
        self._new_msgs = self.env['mail.message'].sudo()
        self._new_notifs = self.env['mail.notification'].sudo()
        partners = self.env['res.partner'].sudo().concat(*list(p['partner'] for i in recipients_info for p in i['notif'] if p.get('partner')))
        notifications = self.env['mail.notification'].sudo().search(base_domain)
        done_msgs = self.env['mail.message'].sudo()
        done_notifs = self.env['mail.notification'].sudo()
                message = self.env['mail.message'].sudo().search([('body', 'ilike', mbody), ('message_type', '=', mtype), ('subtype_id', '=', msubtype.id)], limit=1, order='id DESC')
                partners = self.env['res.partner'].sudo().concat(*recipients)
        bus_notifs = self.env['bus.bus'].sudo().search([('channel', 'in', [json_dump(channel) for channel in channels])])
        self.env['mail.channel'].browse(self.group_public.id).read()
            self.env['mail.channel'].browse(self.group_groups.id).read()
            self.env['mail.channel'].browse(self.group_private.id).read()
        self.env['mail.channel'].browse(self.group_private.id).read()
            self.env['mail.channel'].create({'name': 'Test'})
            self.env['mail.channel'].browse(self.group_public.id).write({'name': 'Broutouschnouk'})
            self.env['mail.channel'].browse(self.group_public.id).unlink()
        group_groups = self.env['mail.channel'].browse(self.group_groups.id)
        new_channel = self.env['mail.channel'].create({'name': 'Test'})
            self.env['mail.channel'].browse(self.group_private.id).read()
            self.env['mail.channel'].browse(self.group_private.id).write({'name': 're-modified'})
            self.env['mail.channel'].browse(self.group_private.id).unlink()
            self.env['mail.channel'].browse(self.group_private.id).name
        group_private_portal = self.env['mail.channel'].browse(self.group_private.id)
        group_public = self.env['mail.channel'].browse(self.group_public.id)
        group_private = self.env['mail.channel'].browse(self.group_private.id)
            self.env['mail.channel.partner'].create({
        channel_form = Form(self.env['mail.channel'].with_user(self.user_employee))
        channel = self.env['mail.channel'].browse(self.test_channel.ids)
        self.assertEqual(channel.message_partner_ids, self.env['res.partner'])
        self.assertEqual(channel.channel_partner_ids, self.env['res.partner'])
        self.assertEqual(channel.message_partner_ids, self.env['res.partner'])
        self.assertEqual(channel.message_partner_ids, self.env['res.partner'])
        self.assertEqual(channel.channel_partner_ids, self.env['res.partner'])
        self.assertEqual(channel.message_partner_ids, self.env['res.partner'])
        self.assertEqual(channel.channel_partner_ids, self.env['res.partner'])
        channel_info = self.env['mail.channel'].with_user(self.user_admin).channel_get((self.partner_employee | self.user_admin.partner_id).ids)
        chat = self.env['mail.channel'].with_user(self.user_admin).browse(channel_info['id'])
        channel_partner_employee = self.env['mail.channel.partner'].search([
        channel_partner_admin = self.env['mail.channel.partner'].search([
        channel = self.env['mail.channel'].browse(self.test_channel.ids)
        self.assertEqual(new_msg.partner_ids, self.env['res.partner'])
        self.assertEqual(new_msg.notified_partner_ids, self.env['res.partner'])
                channel = self.env['mail.channel'].browse(self.test_channel.ids)
        self.assertEqual(new_msg.partner_ids, self.env['res.partner'])
        self.assertEqual(new_msg.notified_partner_ids, self.env['res.partner'])
        test_channel_private = self.env['mail.channel'].with_context(self._test_context).create({
        test_channel_group = self.env['mail.channel'].with_context(self._test_context).create({
        self.assertEqual(test_channel_private.channel_partner_ids, self.env['res.partner'])
        self.assertEqual(test_channel_group.channel_partner_ids, self.env['res.partner'])
        initial_channel_info = self.env['mail.channel'].channel_get(partners_to=self.test_partner.ids)
        same_channel_info = self.env['mail.channel'].channel_get(partners_to=self.test_partner.ids)
        together_channel_info = self.env['mail.channel'].channel_get(partners_to=(self.partner_employee_nomail + self.test_partner).ids)
        solo_channel_info = self.env['mail.channel'].channel_get(partners_to=self.partner_employee_nomail.ids)
        same_solo_channel_info = self.env['mail.channel'].channel_get(partners_to=self.partner_employee_nomail.ids)
        self.env['mail.channel'].channel_get(partners_to=self.partner_admin.ids)
            channel_info = self.env['mail.channel'].channel_get(partners_to=self.partner_admin.ids)
        channel = self.env['mail.channel'].browse(self.test_channel.id)
        test_user = self.env['res.users'].create({
        test_channel_private = self.env['mail.channel'].with_context(self._test_context).create({
        test_channel_group = self.env['mail.channel'].with_context(self._test_context).create({
        test_chat = self.env['mail.channel'].with_context(self._test_context).create({
        self.assertEqual(test_channel_private.channel_partner_ids, self.env['res.partner'])
        self.assertEqual(test_channel_group.channel_partner_ids, self.env['res.partner'])
        channel = self.env['mail.channel'].browse(self.test_channel.id)
        messages_0 = self.env['mail.message'].search([
        messages_1 = self.env['mail.message'].search([
        messages_2 = self.env['mail.message'].search([
        channel = self.env['mail.channel'].create({'name': '', 'uuid': 'test-uuid'})
        channel = self.env['mail.channel'].create({'name': '', 'uuid': 'test-uuid'})
        self.env['bus.bus'].search([]).unlink()
            initial_channel_info = self.env['mail.channel'].with_context(
        partner = self.env['res.partner'].browse(self.render_object.ids)
        template = self.env['mail.template'].browse(self.test_template.ids)
        partner = self.env['res.partner'].browse(self.render_object.ids)
        partner = self.env['res.partner'].browse(self.render_object_fr.ids)
        partner = self.env['res.partner'].browse(self.render_object.ids)
            rendered = self.env['mail.render.mixin']._render_template(
        partner = self.env['res.partner'].browse(self.render_object.ids)
            rendered = self.env['mail.render.mixin']._render_template(
        partner = self.env['res.partner'].browse(self.render_object.ids)
            rendered = self.env['mail.render.mixin']._render_template(
        partner = self.env['res.partner'].browse(self.render_object.ids)
        result = self.env['mail.render.mixin'].sudo()._render_template_inline_template(
        res_ids = self.env[model].search([], limit=1).ids
        partner = self.env[model].browse(res_ids)
        result = self.env['mail.render.mixin'].with_user(self.user_admin)._render_template_inline_template(
        res_ids = self.env[model].search([], limit=1).ids
        res_ids = self.env['res.partner'].search([], limit=1).ids
            self.env['mail.render.mixin']._render_template_inline_template(self.base_inline_template_bits[3], 'res.partner', res_ids)
        res_ids = self.env['res.partner'].search([], limit=1).ids
        result = self.env['mail.render.mixin']._render_template_inline_template(self.base_inline_template_bits[3], 'res.partner', res_ids)[res_ids[0]]
        partner = self.env['res.partner'].browse(self.render_object.ids)
        res_ids = self.env['res.partner'].search([], limit=1).ids
            self.env['mail.render.mixin']._render_template_inline_template(self.base_inline_template_bits[4], 'res.partner', res_ids)
        res_ids = self.env['res.partner'].search([], limit=1).ids
        result = self.env['mail.render.mixin']._render_template_inline_template(self.base_inline_template_bits[4], 'res.partner', res_ids)[res_ids[0]]
        res_ids = self.env['res.partner'].search([], limit=1).ids
            self.env['mail.render.mixin']._render_template_qweb(self.base_qweb_bits[1], 'res.partner', res_ids)
        res_ids = self.env['res.partner'].search([], limit=1).ids
        self.env['mail.render.mixin'].with_user(self.user_admin)._render_template_qweb(
            self.env['mail.render.mixin']._render_template_qweb(
        res_ids = self.env['res.partner'].search([], limit=1).ids
        result = self.env['mail.render.mixin']._render_template_qweb(self.base_qweb_bits[1], 'res.partner', res_ids)[res_ids[0]]
        res_ids = self.env[model].search([], limit=1).ids
        partner = self.env[model].browse(res_ids)
        result = self.env['mail.render.mixin']._render_template_inline_template(
        res_ids = self.env[model].search([], limit=1).ids
        partner = self.env[model].browse(res_ids)
        result = self.env['mail.render.mixin']._render_template_qweb(src, model, res_ids)[
        result = self.env['mail.render.mixin']._prepend_preview(Markup(body), preview)
        partner = self.env['res.partner'].find_or_create(test_string)
        self.assertEqual(p2.activity_ids, self.env['mail.activity'])
        MergeForm = Form(self.env['base.partner.merge.automatic.wizard'].with_context(
            author_id, email_from = self.env['mail.thread']._message_compute_author(result.get('author_id'), result.get('email_from'), raise_exception=False)
            if result['model'] not in self.env or not hasattr(self.env[result['model']], 'message_post'):
        default=lambda self: self.env['ir.model.data']._xmlid_to_res_id('mail.mt_comment'))
            parent = self.env['mail.message'].browse(values.get('parent_id'))
            doc_name_get = self.env[values.get('model')].browse(values.get('res_id')).name_get()
        self.env['ir.attachment'].search([
            ActiveModel = self.env[wizard.model] if wizard.model and hasattr(self.env[wizard.model], 'message_post') else self.env['mail.thread']
                res_ids = self.env[wizard.model].search(ast.literal_eval(wizard.active_domain)).ids
            batch_size = int(self.env['ir.config_parameter'].sudo().get_param('mail.batch_size')) or self._batch_size
                subtype_id = self.env['ir.model.data']._xmlid_to_res_id('mail.mt_comment')
                batch_mails_sudo = self.env['mail.mail'].sudo()
                        batch_mails_sudo |= self.env['mail.mail'].sudo().create(mail_values)
            model = self.env['ir.model']._get(record.model or 'mail.message')
            template = self.env['mail.template'].create(values)
            records = self.env[self.model].browse(res_ids)
                record = self.env[self.model].browse(res_id)
                    new_attach_id = self.env['ir.attachment'].browse(attach_id).copy({'res_model': self._name, 'res_id': self.id})
                mail_values['attachment_ids'] = self.env['mail.thread'].with_context(attached_to=record)._message_post_process_attachments(
            for p in self.env['res.partner'].browse(set(recipient_pids))
        if self.composition_mode == 'mass_mail' and issubclass(type(self.env[self.model]), self.pool['mail.thread.blacklist']):
            self.env['mail.blacklist'].flush(['email'])
                targets = self.env[self.model].browse(mail_values_dict.keys()).read(['email_normalized'])
            template = self.env['mail.template'].browse(template_id)
            records = self.env[self.model].browse(res_ids).sudo()
        template_values = self.env['mail.template'].with_context(tpl_partners_only=True).browse(template_id).generate_email(res_ids, fields)
                self.env["mail.notification"].browse(notif_ids).sudo().write({'notification_status': 'canceled'})
                self.env["mail.message"].browse(messages_ids)._notify_message_notification_update()
            document = self.env['ir.model']._get(model).display_name
            title = self.env[model].browse(res_id).display_name
            model_name = self.env['ir.model']._get(wizard.res_model).display_name
                message = self.env['mail.message'].create({
                recipient_data = self.env['mail.followers']._get_recipient_data(document, 'comment', False, pids=new_partners.ids)
                self.env['bus.bus']._sendone(self.env.user.partner_id, 'mail.message/delete', {'message_ids': message.ids})
        odoobot_id = self.env['ir.model.data']._xmlid_to_res_id("base.partner_root")
                subtype_id = values.get('subtype_id', self.env['ir.model.data']._xmlid_to_res_id('mail.mt_comment'))
        odoobot_id = self.env['ir.model.data']._xmlid_to_res_id("base.partner_root")
        odoobot_id = self.env['ir.model.data']._xmlid_to_res_id("base.partner_root")
        self.env['mail.bot']._apply_logic(self, kwargs, command="help")  # kwargs are not usefull but...
            odoobot_id = self.env['ir.model.data']._xmlid_to_res_id("base.partner_root")
        messages_data = self.env['mail.group.message'].read_group([
        results = self.env['mail.group.message'].read_group(
        results = self.env['mail.group.message'].read_group(
        members = self.env['mail.group.member'].sudo().search([
            self.env['mail.group.member'].sudo()._search([
        values['alias_model_id'] = self.env['ir.model']._get('mail.group').id
        values = dict((key, val) for key, val in kwargs.items() if key in self.env['mail.message']._fields)
        values['reply_to'] = self.env['mail.message']._get_reply_to(values)
            group_message_parent = self.env['mail.group.message'].search(
        group_message = self.env['mail.group.message'].create({
        moderation_rule = self.env['mail.group.moderation'].search([
            self.env['mail.mail'].sudo().create({
        banned_emails = self.env['mail.group.moderation'].sudo().search([
        body = self.env['mail.render.mixin']._replace_local_links(message.body)
                self.env['mail.mail'].sudo().create(mail_values)
        moderated_groups = self.env['mail.group'].search([('moderation', '=', True)])
        results = self.env['mail.group.message'].read_group(
            MailThread = self.env['mail.thread'].with_context(mail_notify_author=True)
            partner = self.env['res.partner'].browse(partner_id).exists()
        member = self.env['mail.group.member'].create({
            self.env['mail.group.member'].search([
        members_data = self.env['mail.group.member'].sudo().search(domain, order=order)
        moderations = self.env['mail.group.moderation'].search([
                vals['mail_message_id'] = self.env['mail.message'].sudo().create({
                    for field in self.env['mail.message']._fields
        existing_moderation = self.env['mail.group.moderation'].search(
        self.env['mail.group.moderation'].create([
            body_html = self.env['mail.render.mixin']._replace_local_links(body_html)
            self.env['mail.mail'].sudo().create({
        result = self.env['mail.group']._clean_email_body(body)
        mail_group = self.env['mail.group'].with_user(self.user_employee).browse(self.test_group.ids)
        member_2 = self.env['mail.group.member'].create({
        member_3 = self.env['mail.group.member'].create({
        mail_group = self.env['mail.group'].browse(self.test_group.ids)
        mail_group = self.env['mail.group'].browse(self.test_group.ids)
        mail_group = self.env['mail.group'].browse(self.test_group.ids)
        mail_group = self.env['mail.group'].browse(self.test_group.ids)
        member = self.env['mail.group.member'].browse(self.test_group_member_1.ids)
        message = self.env['mail.group.message'].search([('mail_message_id.message_id', '=', '<test.message.id@localhost>')])
        new_message = self.env['mail.group.message'].search([('mail_message_id.message_id', '=', '<test.message.id@localhost>')])
        mails = self.env['mail.mail'].search([('subject', '=', 'Test subject')])
        mail_group = self.env['mail.group'].browse(self.test_group.ids)
            moderation = self.env['mail.group.moderation'].create({
        mail_group = self.env['mail.group'].browse(self.test_group.ids)
        mail_group_2 = self.env['mail.group'].browse(self.test_group_2.ids)
        moderation_1, moderation_2, moderation_3 = self.env['mail.group.moderation'].create([{
        message_1, message_2, message_3 = self.env['mail.group.message'].create([{
        rule = self.env['mail.group.moderation'].create({
            self.env['mail.group.moderation'].with_user(self.user_portal).browse(self.moderation.ids).email
            self.env['mail.group.moderation'].with_user(self.user_employee).browse(self.moderation.ids).email
            self.env['mail.group.moderation'].with_user(self.user_admin).browse(self.moderation.ids).email,
        mail_group = self.env['mail.group'].browse(self.test_group.ids)
        mail_group_2_as2 = self.env['mail.group'].with_user(self.user_employee_2).browse(self.test_group_2.ids)
        new_rule = self.env['mail.group.moderation'].search([
        mail_group = self.env['mail.group'].browse(self.test_group.ids)
        new_rule = self.env['mail.group.moderation'].search([
        mail_group = self.env['mail.group'].browse(self.test_group.ids)
        mail_group = self.env['mail.group'].browse(self.test_group.ids)
        mail_group = self.env['mail.group'].browse(self.test_group.ids)
        equipment_data = self.env['maintenance.equipment'].read_group([('category_id', 'in', self.ids)], ['category_id'], ['category_id'])
        maintenance_data = self.env['maintenance.request'].read_group([('category_id', 'in', self.ids)], ['category_id'], ['category_id'])
        values['alias_model_id'] = self.env['ir.model']._get('maintenance.request').id
            next_maintenance_todo = self.env['maintenance.request'].search([
            last_maintenance_done = self.env['maintenance.request'].search([
            self.message_subscribe(partner_ids=self.env['res.users'].browse(vals['owner_user_id']).partner_id.ids)
        self.env['maintenance.request'].create({
            next_requests = self.env['maintenance.request'].search([('stage_id.done', '=', False),
        return self.env['maintenance.stage'].search([], limit=1)
        first_stage_obj = self.env['maintenance.stage'].search([], order="sequence asc", limit=1)
        self.equipment_monitor = self.env['maintenance.equipment.category'].create({
        self.env['maintenance.equipment']._cron_generate_requests()
        self.env['maintenance.equipment']._cron_generate_requests()
            self.env['maintenance.stage'].with_user(user).create({
        body = self.env['mail.render.mixin']._replace_local_links(body)
            if vals.get('mailing_model_id') == self.env['ir.model']._get('mailing.list').id:
                mailing_list = self.env['mailing.list'].search([], limit=2)
        server_id = self.env['ir.config_parameter'].sudo().get_param('mass_mailing.mail_server_id')
            return self.env['ir.mail_server'].search([('id', '=', server_id)]).id
        notification_email = self.env['ir.mail_server']._get_default_from_address()
            total = self.env[mass_mailing.mailing_model_real].search_count(mass_mailing._parse_mailing_domain())
        self.mail_server_available = self.env['ir.config_parameter'].sudo().get_param('mass_mailing.outgoing_mail_server')
            mailing.ab_testing_description = self.env['ir.qweb']._render(
        self.env['utm.campaign'].create(campaign_vals)
            values['campaign_id'] = self.env['utm.campaign'].create(self[0]._get_default_ab_testing_campaign_values(values)).id
            action = self.env["ir.actions.actions"]._for_xml_id("mass_mailing.mailing_mailing_schedule_date_action")
        failed_mails = self.env['mail.mail'].sudo().search([
        action = self.env["ir.actions.actions"]._for_xml_id("mass_mailing.mailing_trace_action")
        model_name = self.env['ir.model']._get('link.tracker').display_name
        model_name = self.env['ir.model']._get(self.mailing_model_real).display_name
            model = self.env['mailing.contact'].with_context(active_test=False)
            opt_out_records = self.env['mailing.contact.subscription'].search([
        action = self.env['ir.actions.act_window']._for_xml_id('mass_mailing.action_ab_testing_open_winner_mailing')
        if hasattr(self.env[self.mailing_model_name], '_mailing_get_opt_out_list'):
            opt_out = self.env[self.mailing_model_name]._mailing_get_opt_out_list(self)
        res_ids = self.env[self.mailing_model_real].search(mailing_domain).ids
            contact_nbr = self.env[self.mailing_model_real].search_count(mailing_domain)
        already_mailed = self.env['mailing.trace'].search_read(trace_domain, ['res_id'])
            composer = self.env['mail.compose.message'].with_context(active_ids=res_ids).create(composer_values)
        mailings = self.env['mailing.mailing'].search([
            link_trackers = self.env['link.tracker'].search(
            link_trackers_body = self.env['ir.qweb']._render(
            rendered_body = self.env['ir.qweb']._render(
            full_mail = self.env['mail.render.mixin']._render_encapsulate(
            mail = self.env['mail.mail'].sudo().create(mail_values)
        random_tip = self.env['digest.tip'].search(
        if hasattr(self.env[self.mailing_model_name], '_mailing_get_default_domain'):
            mailing_domain = self.env[self.mailing_model_name]._mailing_get_default_domain(self)
        if self.mailing_type == 'mail' and 'is_blacklisted' in self.env[self.mailing_model_name]._fields:
        secret = self.env["ir.config_parameter"].sudo().get_param("database.secret")
            attachment = self.env['ir.attachment'].create({
            contacts = self.env['mailing.contact.subscription'].search([('list_id', '=', active_list_id)])
        name, email = self.env['res.partner']._parse_partner_name(name)
        action = self.env["ir.actions.actions"]._for_xml_id("mass_mailing.mailing_contact_to_list_action")
            mass_mailings = self.env['mailing.mailing'].search_count([
        action = self.env["ir.actions.actions"]._for_xml_id("mass_mailing.action_view_mass_mailing_contacts")
        action = self.env["ir.actions.actions"]._for_xml_id('mass_mailing.mailing_mailing_action_mail')
        action = self.env["ir.actions.actions"]._for_xml_id('mass_mailing.action_view_mass_mailing_contacts')
        action = self.env["ir.actions.actions"]._for_xml_id('mass_mailing.action_view_mass_mailing_contacts')
        action = self.env["ir.actions.actions"]._for_xml_id('mass_mailing.action_view_mass_mailing_contacts')
        self.env['mailing.contact'].flush(['email', 'email_normalized'])
        self.env['mailing.contact.subscription'].flush(['contact_id', 'opt_out', 'list_id'])
            mailing_data = self.env['mailing.mailing'].read_group(
            res[campaign.id] = set(self.env['mailing.trace'].search(domain).mapped('res_id'))
        traces = self.env['mailing.trace'].search([
            partner = recipient_info.get('partner', self.env['res.partner'])
            'bounced_partner': self.env['res.partner'].sudo(),
            'bounced_message': self.env['mail.message'].sudo()
        self.env['mail.thread']._routing_handle_bounce(False, parsed_bounce_values)
                self.env['link.tracker.click'].sudo().add_click(
        self.ab_testing_mailing_1 = self.env['mailing.mailing'].create({
        ab_mailing = self.env['mailing.mailing'].create({
        recipient = self.env['res.partner'].create({
        mailing = self.env['mailing.mailing'].create({
            'mailing_model_id': self.env['ir.model']._get('res.partner').id,
        composer = self.env['mail.compose.message'].with_user(self.user_marketing).with_context({
        mailing = self.env['mailing.mailing'].create({
            'mailing_model_id': self.env['ir.model']._get('res.partner').id,
            'mailing_model_id': self.env['ir.model']._get('mailing.list').id,
            'mailing_model_id': self.env['ir.model']._get('mail.channel').id,
        mailing = self.env['mailing.mailing'].with_context(
            'mailing_model_id': self.env['ir.model']._get('res.partner').id,
        mailing_form = Form(self.env['mailing.mailing'].with_context(
            default_mailing_model_id=self.env['ir.model']._get('res.partner').id,
        partner = self.env['res.partner'].create({
            'mailing_model_id': self.env['ir.model']._get('res.partner').id,
                        mailing = self.env['mailing.mailing'].create({
        mailing = self.env['mailing.mailing'].create({
            'mailing_model_id': self.env['ir.model']._get('mailing.list').id,
        self.assertEqual(self.mailing_list_1.contact_ids.message_ids, self.env['mail.message'])
        self.assertEqual(self.mailing_list_1.contact_ids.message_ids, self.env['mail.message'])
        self.assertEqual(self.mailing_list_1.contact_ids.message_ids, self.env['mail.message'])
        self.assertEqual(self.mailing_list_1.contact_ids.message_ids, self.env['mail.message'])
        self.assertEqual(self.mailing_list_1.contact_ids.message_ids, self.env['mail.message'])
        partner_a = self.env['res.partner'].create({
        partner_b = self.env['res.partner'].create({
        self.env['mail.blacklist'].create({'email': 'Test2@example.com',})
        mailing = self.env['mailing.mailing'].create({
            'mailing_model_id': self.env['ir.model']._get('res.partner').id,
        mailing = self.env['mailing.mailing'].create({
            'mailing_model_id': self.env['ir.model']._get('mailing.list').id,
        mailing = self.env['mailing.mailing'].create({
            self.env['mailing.mailing.schedule.date'].with_context(default_mass_mailing_id=mailing.id))
        mail = self.env['mailing.mailing'].search([('subject', '=', 'Test')])[0]
                self.env['ir.model'].sudo().search_count([('model', '=', self.model), ('is_mail_thread', '=', True)]):
                mass_mailing = self.env['mailing.mailing'].create({
                    'mailing_model_id': self.env['ir.model']._get(self.model).id,
            self.dest_list_id = self.env['mailing.list'].create({
        mails_sudo = self.env['mail.mail'].sudo()
        record = self.env[mailing.mailing_model_real].search([], limit=1)
        full_body = self.env['mail.render.mixin']._replace_local_links(full_body)
            mail = self.env['mail.mail'].sudo().create(mail_values)
        lead_data = self.env['crm.lead'].with_context(active_test=False).read_group(
            action = self.env["ir.actions.actions"]._for_xml_id('mass_mailing_sms.mailing_mailing_action_sms')
            traces = self.env['mailing.trace'].sudo().read_group([
        failed_sms = self.env['sms.sms'].sudo().search([
        url = self.env['iap.account'].get_credits_url(service_name='sms')
        if hasattr(self.env[self.mailing_model_name], '_mailing_get_opt_out_list_sms'):
            opt_out = self.env[self.mailing_model_name]._mailing_get_opt_out_list_sms(self)
                composer = self.env['sms.composer'].with_context(active_id=False).create(mailing._send_sms_get_composer_values(res_ids))
        if self.mailing_type == 'sms' and 'phone_sanitized_blacklisted' in self.env[self.mailing_model_name]._fields:
        action = self.env["ir.actions.actions"]._for_xml_id("mass_mailing.action_create_mass_mailings_from_campaign")
        action = self.env["ir.actions.actions"]._for_xml_id("mass_mailing_sms.mailing_mailing_action_sms")
        mailing = self.env['mailing.mailing'].create({
            'mailing_model_id': self.env['ir.model']._get('res.partner').id,
            'mailing_model_id': self.env['ir.model']._get('mailing.list').id,
        record = self.env[self.mailing_id.mailing_model_real].search([], limit=1)
            body = self.env['mail.render.mixin']._render_template(body, self.mailing_id.mailing_model_real, record.ids)[record.id]
        sent_sms_list = self.env['sms.api']._send_sms_batch([{
            error_messages = self.env['sms.api']._get_sms_api_error_messages()
            partner.membership_start = self.env['membership.membership_line'].search([
            partner.membership_stop = self.env['membership.membership_line'].search([
            partner.membership_cancel = self.env['membership.membership_line'].search([
        return self.env['account.move'].create(invoice_vals_list)
        invoice = self.env['account.move'].search([('partner_id', '=', self.partner_1.id)], limit=1)
        payment = self.env['account.payment'].create({
        payment = self.env['account.payment.register']\
        invoice_list = self.env['res.partner'].browse(self._context.get('active_ids')).create_membership_invoice(self.product_id, self.member_price)
        return self.env["ir.config_parameter"].sudo().get_param('microsoft_account.auth_endpoint', DEFAULT_MICROSOFT_AUTH_ENDPOINT)
        return self.env["ir.config_parameter"].sudo().get_param('microsoft_account.token_endpoint', DEFAULT_MICROSOFT_TOKEN_ENDPOINT)
        Parameters = self.env['ir.config_parameter'].sudo()
            raise self.env['res.config.settings'].get_config_warning(error_msg)
        get_param = self.env['ir.config_parameter'].sudo().get_param
        get_param = self.env['ir.config_parameter'].sudo().get_param
            raise self.env['res.config.settings'].get_config_warning(error_msg)
        self.env['calendar.event'].search(self._get_microsoft_sync_domain()).write({
        ICP = self.env['ir.config_parameter'].sudo()
            existing_attendees = self.env['calendar.attendee'].search([
        partners = self.env['mail.thread']._mail_find_partner_from_emails(emails, records=self, force_create=True)
            alarm = self.env['calendar.alarm'].search([
        microsoft_guid = self.env['ir.config_parameter'].sudo().get_param('microsoft_calendar.microsoft_guid', False)
        invalid_event_ids = self.env['calendar.event'].search_read(
        microsoft_guid = self.env['ir.config_parameter'].sudo().get_param('microsoft_calendar.microsoft_guid', False)
        microsoft_service = MicrosoftCalendarService(self.env['microsoft.service'])
        microsoft_service = MicrosoftCalendarService(self.env['microsoft.service'])
        self.env['calendar.event'].create(vals)
        return {'rrule'} | self.env['calendar.event']._get_microsoft_synced_fields()
        self.env['calendar.recurrence'].search(self._get_microsoft_sync_domain()).write({
        new_event_values = self.env["calendar.event"]._microsoft_to_odoo_values(microsoft_event)
                    self.env["calendar.event"]._get_time_fields()
                    | self.env["calendar.event"]._get_recurrent_fields()
        microsoft_service = MicrosoftCalendarService(self.env['microsoft.service'])
        microsoft_service = MicrosoftCalendarService(self.env['microsoft.service'])
        microsoft_service = MicrosoftCalendarService(self.env['microsoft.service'])
            new_calendar_recurrence = dict(self.env['calendar.recurrence']._microsoft_to_odoo_values(recurrent_master, (), default_values), need_sync_m=False)
            base_values = dict(self.env['calendar.event']._microsoft_to_odoo_values(recurrent_master, (), default_values), need_sync_m=False)
                    value = self.env['calendar.event']._microsoft_to_odoo_recurrence_values(recurrent_event, (), base_values)
                    value = self.env['calendar.event']._microsoft_to_odoo_values(recurrent_event, (), default_values)
            new_recurrence_odoo = self.env['calendar.recurrence'].create(new_calendar_recurrence)
        recurrences = self.env['calendar.recurrence'].search([('microsoft_id', 'in', microsoft_ids)])
                    value = self.env['calendar.event']._microsoft_to_odoo_recurrence_values(recurrent_event, (), {'need_sync_m': False})
                    value = self.env['calendar.event']._microsoft_to_odoo_values(recurrent_event, (), default_values)
                value = self.env['calendar.event']._microsoft_to_odoo_recurrence_values(recurrent_event, (), default_values)
                value = self.env['calendar.event']._microsoft_to_odoo_values(recurrent_event, (), default_values)
                self.env['calendar.event'].browse(recurrent_event.odoo_id(self.env)).with_context(no_mail_to_attendees=True, mail_create_nolog=True).write(dict(value, need_sync_m=False))
        normal_event_ids = self.env['calendar.event'].browse(normal_events) - old_record
            (self.env['calendar.event'].browse(normal_events) - old_record).write(vals)
        recurrent_cancelled = self.env['calendar.recurrence'].search([
                odoo_record = self.env['calendar.recurrence'].browse(mevent.odoo_id(self.env))
        get_param = self.env['ir.config_parameter'].sudo().get_param
            endpoint = self.env['microsoft.service']._get_token_endpoint()
            dummy, response, dummy = self.env['microsoft.service']._do_request(endpoint, params=data, headers=headers, method='POST', preuri='')
        synced_events, synced_recurrences = self.env['calendar.event']._sync_microsoft2odoo(events, default_reminders=default_reminders) if events else (self.env['calendar.event'], self.env['calendar.recurrence'])
        recurrences = self.env['calendar.recurrence']._get_microsoft_records_to_sync(full_sync=full_sync)
        events = self.env['calendar.event']._get_microsoft_records_to_sync(full_sync=full_sync)
        users = self.env['res.users'].search([('microsoft_calendar_rtoken', '!=', False), ('microsoft_synchronization_stopped', '=', False)])
        microsoft = MicrosoftCalendarService(self.env['microsoft.service'])
        self.env['calendar.recurrence']._restart_microsoft_sync()
        self.env['calendar.event']._restart_microsoft_sync()
        self.env['calendar.event']._sync_microsoft2odoo(MicrosoftEvent(values))
        self.env['calendar.event']._sync_microsoft2odoo(events)
        recurrence = self.env['calendar.recurrence'].search([('microsoft_id', '=', self.recurrence_id)])
        self.env['calendar.event']._sync_microsoft2odoo(MicrosoftEvent(values))
        recurrence = self.env['calendar.recurrence'].search([('microsoft_id', '=', self.recurrence_id)])
        events = self.env['calendar.event'].search([('recurrence_id', '=', recurrence.id)], order='start asc')
        self.env['calendar.event']._sync_microsoft2odoo(MicrosoftEvent(values))
        recurrence = self.env['calendar.recurrence'].search([('microsoft_id', '=', self.recurrence_id)])
        events = self.env['calendar.event'].search([('recurrence_id', '=', recurrence.id)], order='start asc')
        self.env['calendar.event']._sync_microsoft2odoo(MicrosoftEvent(values))
        recurrence = self.env['calendar.recurrence'].search([('microsoft_id', '=', self.recurrence_id)])
        events = self.env['calendar.event'].search([('recurrence_id', '=', recurrence.id)], order='start asc')
        self.env['calendar.event']._sync_microsoft2odoo(MicrosoftEvent(values))
        recurrence = self.env['calendar.recurrence'].search([('microsoft_id', '=', self.recurrence_id)])
        events = self.env['calendar.event'].search([('recurrence_id', '=', recurrence.id)], order='start asc')
        special_event = self.env['calendar.event'].search([('microsoft_id', '=', 'AQ8PojGtrADQATM3ZmYAZS0yY2MAMC00MDg1LTAwAi0wMAoBUQAICADX774WtQAAAEYAAAJAcu19N72jSr9Rp1mE2xWABwBlLa4RUBXJToExnebpwea2AAACAQ0AAABlLa4RUBXJToExnebpwea2AAAACyy0xAAAABA=')])
        self.env['calendar.event']._sync_microsoft2odoo(MicrosoftEvent(values))
        recurrence = self.env['calendar.recurrence'].search([('microsoft_id', '=', self.recurrence_id)])
        events = self.env['calendar.event'].search([('recurrence_id', '=', recurrence.id)], order='start asc')
        self.env['calendar.event']._sync_microsoft2odoo(MicrosoftEvent(values))
        events = self.env['calendar.event'].search([('recurrence_id', '=', recurrence.id)], order='start asc')
        self.env['calendar.event']._sync_microsoft2odoo(MicrosoftEvent(values))
        events = self.env['calendar.event'].search([('recurrence_id', '=', recurrence.id)], order='start asc')
        self.env['calendar.event']._sync_microsoft2odoo(MicrosoftEvent(values))
        recurrence_1 = self.env['calendar.recurrence'].search([('microsoft_id', '=', self.recurrence_id)])
        recurrence_2 = self.env['calendar.recurrence'].search([('microsoft_id', '=', 'AQ8PojGtrADQATM3ZmYAZS0yY2MAMC00MDg1LTAwAi0wMAoARgAAA0By7X03vaNKv1GnWYTbFYAHAGUtrhFQFclOgTGd5unB5rYAAAIBDQAAAGUtrhFQFclOgTGd5unB5rYAAAAMkgQrAAAA')])
        events_1 = self.env['calendar.event'].search([('recurrence_id', '=', recurrence_1.id)], order='start asc')
        events_2 = self.env['calendar.event'].search([('recurrence_id', '=', recurrence_2.id)], order='start asc')
        recurrence_id = self.env['calendar.recurrence'].search([('microsoft_id', '=', self.recurrence_id)])
        event_ids = self.env['calendar.event'].search([('recurrence_id', '=', recurrence_id.id)], order='start asc').ids
        self.env['calendar.event']._sync_microsoft2odoo(MicrosoftEvent(values))
        recurrence = self.env['calendar.recurrence'].search([('microsoft_id', '=', self.recurrence_id)])
        events = self.env['calendar.event'].browse(event_ids).exists()
        MicrosoftCal = MicrosoftCalendarService(self.env['microsoft.service'])
        partner = self.env['res.partner'].create({
        event = self.env['calendar.event'].create({
        self.env['calendar.event']._sync_microsoft2odoo(MicrosoftEvent(first_sync_values))
        recurrent_event = self.env['calendar.recurrence'].search([('microsoft_id', '=', 'AQMkADAwATM3ZmYAZS0zZmMyLWYxYjQtMDACLTAwCgBGAAADZ59RIxdyh0Kt-MXfyCpfwAcApynKRnkCyUmnqILQHcLZEQAAAgENAAAApynKRnkCyUmnqILQHcLZEQAAAARKsSQAAAA=')])
        self.env['calendar.event']._sync_microsoft2odoo(MicrosoftEvent(second_sync_values))
        self.microsoft_service = MicrosoftCalendarService(self.env['microsoft.service'])
        self.env['calendar.event'].create({
        partner = self.env['res.partner'].create({'name': 'Jean-Luc', 'email': 'jean-luc@opoo.com'})
        user = self.env['res.users'].create({
        event = self.env['calendar.event'].with_user(user).create({
        microsoft_guid = self.env['ir.config_parameter'].sudo().get_param('microsoft_calendar.microsoft_guid', False)
        return self.env['uom.uom'].search([], limit=1, order='id').id
            number_of_bom_of_this_product = self.env['mrp.bom'].search_count(domain)
        if self.env['stock.warehouse.orderpoint'].search([('product_id', 'in', product_ids)], count=True):
        if self.env['mrp.production'].search([('bom_id', 'in', self.ids), ('state', 'not in', ['done', 'cancel'])], limit=1):
        :rtype: defaultdict(`lambda: self.env['mrp.bom']`)
        bom_by_product = defaultdict(lambda: self.env['mrp.bom'])
            products = self.env['product.product'].browse(product_ids)
                product_boms.setdefault(product, self.env['mrp.bom'])
        return self.env['uom.uom'].search([], limit=1, order='id').id
                line.child_bom_id = self.env['mrp.bom']._bom_find(line.product_id)[line.product_id]
            nbr_attach = self.env['mrp.document'].search_count([
                values['product_uom_id'] = self.env['product.product'].browse(values['product_id']).uom_id.id
        return self.env['stock.picking.type'].search([
            location = self.env['stock.picking.type'].browse(self.env.context['default_picking_type_id']).default_location_src_id
            location = self.env['stock.warehouse'].search([('company_id', '=', company_id)], limit=1).lot_stock_id
            location = self.env['stock.picking.type'].browse(self.env.context['default_picking_type_id']).default_location_dest_id
            location = self.env['stock.warehouse'].search([('company_id', '=', company_id)], limit=1).lot_stock_id
        delay_alert_date_data = self.env['stock.move'].read_group([('id', 'in', self.move_raw_ids.ids), ('delay_alert_date', '!=', False)], ['delay_alert_date:max'], 'raw_material_production_id')
        res = self.env['stock.move'].read_group(domain, ['state', 'production_id', 'raw_material_production_id'], ['production_id', 'raw_material_production_id'], lazy=False)
            order.picking_ids = self.env['stock.picking'].search([
        action = self.env["ir.actions.actions"]._for_xml_id("stock.action_picking_tree_all")
        location_by_company = self.env['stock.location'].read_group([
        data = self.env['stock.scrap'].read_group([('production_id', 'in', self.ids)], ['production_id'], ['production_id'])
        late_stock_moves = self.env['stock.move'].search([('delay_alert_date', operator, value)])
                self.picking_type_id = self.env['stock.picking.type'].search([
            bom = self.env['mrp.bom']._bom_find(self.product_id, picking_type=self.picking_type_id, company_id=self.company_id.id, bom_type='normal')[self.product_id]
            fallback_loc = self.env['stock.warehouse'].search([('company_id', '=', company_id)], limit=1).lot_stock_id
            message, dummy = self.env['stock.quant']._check_serial_number(self.product_id,
            picking_type_id = self.env['stock.picking.type'].browse(picking_type_id)
                values['name'] = self.env['ir.sequence'].next_by_code('mrp.production') or _('New')
            values['procurement_group_id'] = self.env["procurement.group"].create(procurement_group_vals).id
        self.lot_producing_id = self.env['stock.production.lot'].create({
            'name': self.env['stock.production.lot']._get_next_serial(self.company_id, self.product_id) or self.env['ir.sequence'].next_by_code('stock.lot.serial'),
            leave = self.env['resource.calendar.leaves'].create({
                move_product = self.env['product.product'].browse(move_values['product_id'])
                move_uom = self.env['uom.uom'].browse(move_values['product_uom'])
        action = self.env["ir.actions.actions"]._for_xml_id("mrp.action_mrp_consumption_warning")
        action = self.env["ir.actions.actions"]._for_xml_id("mrp.action_mrp_production_backorder")
                    document = self.env['stock.picking']._log_activity_get_documents({move_raw_id: (move_raw_id.product_uom_qty, 0)}, iterate_key, 'UP')
                self.env['stock.move'].create(new_moves_vals)
        action = self.env["ir.actions.actions"]._for_xml_id("stock.action_stock_scrap")
        documents = self.env['stock.picking']._log_activity_get_documents(moves_modification, 'move_dest_ids', 'DOWN', _keys_in_sorted, _keys_in_groupby)
        documents = self.env['stock.picking']._less_quantities_than_expected_add_documents(moves_modification, documents)
        self.env['stock.picking']._log_activity(_render_note_exception_quantity_mo, documents)
            visited_objects = self.env[visited_objects[0]._name].concat(*visited_objects)
        self.env['stock.picking']._log_activity(_render_note_exception_quantity_mo, documents)
        next_serial = self.env['stock.production.lot']._get_next_serial(self.company_id, self.product_id)
        action = self.env["ir.actions.actions"]._for_xml_id("mrp.act_assign_serial_numbers_production")
            sml = self.env['stock.move.line'].search_count([
                duplicates = self.env['stock.move.line'].search_count(domain + [
                    duplicates_unbuild = self.env['stock.move.line'].search_count(domain_unbuild + [
                    removed = self.env['stock.move.line'].search_count([
                duplicates = self.env['stock.move.line'].search_count(domain + [
                    duplicates_unbuild = self.env['stock.move.line'].search_count(domain_unbuild + [
                    removed = self.env['stock.move.line'].search_count([
        pd = self.env['decimal.precision'].precision_get('Product Unit of Measure')
                new_moves = self.env['stock.move'].create(new_moves_vals)
            production.lot_producing_id = self.env['stock.production.lot'].create({
            data = self.env['mrp.workorder'].search([
        data = self.env['mrp.workorder'].read_group([
            warehouse = self.env['stock.warehouse'].search([('company_id', '=', self.company_id.id)], limit=1)
            self.bom_id = self.env['mrp.bom']._bom_find(self.product_id, company_id=self.company_id.id)[self.product_id]
            vals['name'] = self.env['ir.sequence'].next_by_code('mrp.unbuild') or _('New')
                self.env['stock.move.line'].create({
                        self.env['stock.move.line'].create({
        return self.env['stock.move'].create({
        return self.env['stock.move'].create({
        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
        available_qty = self.env['stock.quant']._get_available_quantity(self.product_id, self.location_id, self.lot_id, strict=True)
            time_log = self.env['mrp.workcenter.productivity'].search([
        data = self.env['mrp.workcenter.productivity'].read_group([
        data = self.env['mrp.workcenter.productivity'].read_group([
        wo_data = self.env['mrp.workorder'].read_group([
        times = self.env['mrp.workcenter.productivity'].search([('workcenter_id', '=', self.id), ('date_end', '=', False)])
        action = self.env['ir.actions.actions']._for_xml_id('mrp.mrp_routing_action')
        action = self.env["ir.actions.actions"]._for_xml_id("mrp.action_work_orders")
            workorder = self.env['mrp.workorder'].browse(self.env.context['default_workorder_id'])
            workcenter = self.env['mrp.workcenter'].browse(self.env.context['default_workcenter_id'])
        previous_wo_data = self.env['mrp.workorder'].read_group(
                self.env['mrp.workcenter.productivity'].create(
        data = self.env['stock.scrap'].read_group([('workorder_id', 'in', self.ids)], ['workorder_id'], ['workorder_id'])
                    workorder.leave_id.resource_id = self.env['mrp.workcenter'].browse(values['workcenter_id']).resource_id
        workorders_by_production = defaultdict(lambda: self.env['mrp.workorder'])
            workorders_by_bom = defaultdict(lambda: self.env['mrp.workorder'])
        workcenters = self.env['mrp.workcenter'].browse(workcenter_ids)
        self.env['mrp.workcenter.productivity'].create(
            leave = self.env['resource.calendar.leaves'].create({
            loss_id = self.env['mrp.workcenter.productivity.loss'].search([('loss_type', '=', 'performance')], limit=1)
        action = self.env["ir.actions.actions"]._for_xml_id("stock.action_stock_scrap")
        action = self.env["ir.actions.actions"]._for_xml_id("mrp.mrp_workorder_mrp_production_form")
            loss_id = self.env['mrp.workcenter.productivity.loss'].search([('loss_type', '=', 'productive')], limit=1)
            loss_id = self.env['mrp.workcenter.productivity.loss'].search([('loss_type', '=', 'performance')], limit=1)
            sml = self.env['stock.move.line'].search_count([
            product.bom_count = self.env['mrp.bom'].search_count(['|', ('product_tmpl_id', '=', product.id), ('byproduct_ids.product_id.product_tmpl_id', '=', product.id)])
        bom_mapping = self.env['mrp.bom'].search_read(domain, ['product_tmpl_id'])
            template.used_in_bom_count = self.env['mrp.bom'].search_count(
        action = self.env["ir.actions.actions"]._for_xml_id("mrp.mrp_bom_form_action")
        action = self.env["ir.actions.actions"]._for_xml_id("mrp.mrp_production_report")
            product.bom_count = self.env['mrp.bom'].search_count(['|', '|', ('byproduct_ids.product_id', '=', product.id), ('product_id', '=', product.id), '&', ('product_id', '=', False), ('product_tmpl_id', '=', product.product_tmpl_id.id)])
        bom_mapping = self.env['mrp.bom'].search_read(domain, ['product_tmpl_id', 'product_id'])
            product.used_in_bom_count = self.env['mrp.bom'].search_count([('bom_line_ids.product_id', '=', product.id)])
        bom_kit = self.env['mrp.bom']._bom_find(self, bom_type='phantom')[self]
        action = self.env["ir.actions.actions"]._for_xml_id("mrp.mrp_bom_form_action")
        read_group_res = self.env['mrp.production'].read_group(domain, ['product_id', 'product_uom_qty'], ['product_id'])
        bom_kits = self.env['mrp.bom']._bom_find(self, bom_type='phantom')
        action = self.env["ir.actions.actions"]._for_xml_id("mrp.product_open_bom")
        bom_kits = self.env['mrp.bom']._bom_find(self, bom_type='phantom')
        components = self - self.env['product.product'].concat(*list(bom_kits.keys()))
            components |= self.env['product.product'].concat(*[l[0].product_id for l in bom_sub_lines])
            production_id = self.env['mrp.production'].browse(self.env.context.get('default_raw_material_production_id') or self.env.context.get('default_production_id'))
            bom = self.env['mrp.bom'].sudo()._bom_find(move.product_id, company_id=move.company_id.id, bom_type='phantom')[move.product_id]
        self.env['stock.move'].browse(moves_ids_to_unlink).sudo().unlink()
            phantom_moves = self.env['stock.move'].create(phantom_moves_vals_list)
        return self.env['stock.move'].browse(moves_ids_to_return)
        production = self.env['mrp.production'].search([
        for res in self.env['stock.rule'].search_read([('action', '=', 'manufacture')], ['route_id']):
        bom_kits = self.env['mrp.bom']._bom_find(self.product_id, bom_type='phantom')
            bom = self.env['mrp.bom']._bom_find(self.product_id, bom_type='normal')[self.product_id]
        route_id = self.env['stock.rule'].search([
        self.env['mrp.production'].sudo().search([
            active_mo = self.env['mrp.production'].browse(active_mo_id)
            productions = self.env['mrp.production'].with_user(SUPERUSER_ID).sudo().with_company(company_id).create(productions_values)
            self.env['stock.move'].sudo().create(productions._get_moves_raw_values())
            self.env['stock.move'].sudo().create(productions._get_moves_finished_values())
        return self.env['mrp.bom']._bom_find(product_id, picking_type=self.picking_type_id, bom_type='normal', company_id=company_id.id)[product_id]
            company: self.env['mrp.bom']._bom_find(self.env['product.product'].browse(product_ids), company_id=company.id, bom_type='phantom')
                    procurements_without_kit.append(self.env['procurement.group'].Procurement(
        product_tmpl_ids = self.env['product.product'].search([
            return random.choice(self.env['product.template'].browse(values['product_tmpl_id']).product_variant_ids.ids)
        boms = self.env['mrp.bom'].search([('id', 'in', self.env.registry.populated_models['mrp.bom'])], order='sequence, product_id, id')
        product_manu = self.env['product.product'].browse(product_manu_ids)
        product_no_manu = self.env['product.product'].browse(self.env.registry.populated_models['product.product']) - product_manu
            bom = self.env['mrp.bom'].browse(values['bom_id'])
            return self.env['product.product'].browse(values['product_id']).uom_id.id
        workcenters_by_company = {company_id: self.env['mrp.workcenter'].browse(workcenters) for company_id, workcenters in workcenters_by_company.items()}
            company_id: workcenters | workcenters_by_company.get(False, self.env['mrp.workcenter'])
            return self.env['res.company'].browse(values['company_id']).resource_calendar_id.id
        for workcenter in self.env['mrp.workcenter'].browse(self.env.registry.populated_models['mrp.workcenter']):
        workcenters_by_company = {company_id: self.env['mrp.workcenter'].browse(workcenters) for company_id, workcenters in workcenters_by_company.items()}
            company_id: workcenters | workcenters_by_company.get(False, self.env['mrp.workcenter'])
            bom = self.env['mrp.bom'].browse(values['bom_id'])
        boms = self.env['mrp.bom'].search([('id', 'in', self.env.registry.populated_models['mrp.bom'])], order='sequence, product_id, id')
        product_manu = self.env['product.product'].browse(product_manu_ids)
        product_no_manu = self.env['product.product'].browse(self.env.registry.populated_models['product.product']) - product_manu
            return self.env['product.product'].browse(values['product_id']).uom_id.id
            self.env['stock.move'].create(productions_with_bom._get_moves_raw_values())
            self.env['stock.move'].create(productions_with_bom._get_moves_finished_values())
            mo_to_confirm = self.env['mrp.production'].browse(random.sample(mo_ids, int(len(mo_ids) * 0.8)))
        products = self.env['product.product'].browse(self.env.registry.populated_models['product.product'])
        boms = self.env['mrp.bom'].browse(self.env.registry.populated_models['mrp.bom'])
        boms_by_company = {company_id: self.env['mrp.bom'].browse(boms) for company_id, boms in boms_by_company.items()}
            company_id: boms | boms_by_company.get(False, self.env['mrp.bom'])
            return self.env['mrp.bom'].browse(values['bom_id']).consumption
            bom = self.env['mrp.bom'].browse(values['bom_id'])
            product = self.env['product.product'].browse(values['product_id'])
        manu_picking_types = self.env['stock.picking.type'].search([('code', '=', 'mrp_operation')])
            picking_type = self.env['stock.picking.type'].browse(values['picking_type_id'])
            picking_type = self.env['stock.picking.type'].browse(values['picking_type_id'])
            mo_to_confirm = self.env['mrp.production'].browse(random.sample(mo_ids, int(len(mo_ids) * 0.8)))
        productions = self.env['mrp.production'].browse(self.env.registry.populated_models['mrp.production'])
                    production = self.env['mrp.production'].browse(values['raw_material_production_id'])
            bom = self.env['mrp.bom'].browse(bom_id)
            candidates = variant and self.env['product.product'].browse(variant) or bom.product_id or bom.product_tmpl_id.product_variant_ids
        bom = self.env['mrp.bom'].browse(bom_id)
        product = self.env['product.product'].browse(product_id)
        bom = self.env['mrp.bom'].browse(bom_id)
        bom = self.env['mrp.bom'].browse(bom_id)
        bom = self.env['mrp.bom'].browse(bom_id)
            current_line = self.env['mrp.bom.line'].browse(int(line_id))
            product = self.env['product.product'].browse(int(product_id))
            attachments = self.env['mrp.document'].search(['|', '&', ('res_model', '=', 'product.product'),
            attachments = self.env['mrp.document'].search([('res_model', '=', 'product.template'), ('res_id', '=', bom.product_tmpl_id.id)])
                'attachments': self.env['mrp.document'].search(['|', '&',
                line = self.env['mrp.bom.line'].browse(bom_line['line_id'])
        bom = self.env['mrp.bom'].browse(bom_id)
        warehouse_form = Form(self.env['stock.warehouse'])
            self.env['stock.quant'].with_context(inventory_mode=True).create({
        backorder = Form(self.env['mrp.production.backorder'].with_context(**action['context']))
        backorder = Form(self.env['mrp.production.backorder'].with_context(**action['context']))
        backorder = Form(self.env['mrp.production.backorder'].with_context(**action['context']))
        lot_final = self.env['stock.production.lot'].create({
        lot_1 = self.env['stock.production.lot'].create({
        lot_2 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location, nb_product_todo*4, lot_id=lot_1)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, nb_product_todo, lot_id=lot_2)
                backorder = Form(self.env['mrp.production.backorder'].with_context(**action['context']))
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location, lot_id=lot_final), nb_product_todo, f'You should have the {nb_product_todo} final product in stock')
            serials_final.append(self.env['stock.production.lot'].create({
            serials_p1.append(self.env['stock.production.lot'].create({
            serials_p2.append(self.env['stock.production.lot'].create({
            self.env['stock.quant']._update_available_quantity(p1, self.stock_location, 1, lot_id=serials_p1[-1])
            self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 1, lot_id=serials_p2[-1])
                backorder = Form(self.env['mrp.production.backorder'].with_context(**action['context']))
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location), nb_product_todo, f'You should have the {nb_product_todo} final product in stock')
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location_components, 2.0)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location_components, 2.0)
        immediate_wizard = Form(self.env[res_dict['res_model']].with_context(res_dict['context'])).save()
        backorder_wizard = Form(self.env[res_dict['res_model']].with_context(res_dict['context']))
        backorder_mo_form = Form(self.env[action['res_model']].with_context(action['context']).browse(action['res_id']))
        immediate_wizard = Form(self.env[res_dict['res_model']].with_context(res_dict['context'])).save()
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location), 2, "Incorrect number of final product produced.")
        self.assertEqual(len(self.env['stock.production.lot'].search([('product_id', '=', p_final.id)])), 2, "Serial Numbers were not correctly produced.")
            backorder = Form(self.env['mrp.production.backorder'].with_context(**action['context']))
        default_picking_type_id = self.env['mrp.production']._get_default_picking_type()
        default_picking_type = self.env['stock.picking.type'].browse(default_picking_type_id)
        backorder_form = Form(self.env['mrp.production.backorder'].with_context(**action['context']))
        test_bom = self.env['mrp.bom'].create({
        mrp_order_form = Form(self.env['mrp.production'])
        mrp_order_form = Form(self.env['mrp.production'])
        mrp_order_form.product_id = self.env['product.product']  # Check form
        mrp_order_form.bom_id = self.env['mrp.bom']  # Check form
        mrp_order_form = Form(self.env['mrp.production'])
        tmp_picking_type = self.env['stock.picking.type'].create({
            'sequence_id': self.env['ir.sequence'].create({
        test_bom_1 = self.env['mrp.bom'].create({
        test_bom_1_l1 = self.env['mrp.bom.line'].create({
        test_bom_2 = self.env['mrp.bom'].create({
        test_bom_2_l1 = self.env['mrp.bom.line'].create({
        test_bom_2_l2 = self.env['mrp.bom.line'].create({
        test_bom_2_l3 = self.env['mrp.bom.line'].create({
        test_bom_2_l4 = self.env['mrp.bom.line'].create({
        test_bom_3 = self.env['mrp.bom'].create({
        test_bom_4 = self.env['mrp.bom'].create({
        test_bom_3_l1 = self.env['mrp.bom.line'].create({
        test_bom_4_l1 = self.env['mrp.bom.line'].create({
        product_template = self.env['product.template'].create({
        self.env['mrp.bom'].create({
            mrp_order_form = Form(self.env['mrp.production'])
        self.env['mrp.bom'].create({
        self.env['stock.quant']._update_available_quantity(self.product_2, location, 4.0)
        self.env['stock.quant']._update_available_quantity(self.product_3, location, 8.0)
        product_unit = self.env['product.product'].create({
        product_dozens = self.env['product.product'].create({
        self.env['mrp.bom'].create({
        self.env['stock.quant']._update_available_quantity(product_dozens, location, 1.0)
        crumble = self.env['product.product'].create({
        butter = self.env['product.product'].create({
        biscuit = self.env['product.product'].create({
        bom_form_crumble = Form(self.env['mrp.bom'])
        workcenter = self.env['mrp.workcenter'].create({
        report_values = self.env['report.mrp.report_bom_structure']._get_report_data(bom_id=bom_crumble.id, searchQty=11, searchVariant=False)
        report_values = self.env['report.mrp.report_bom_structure']._get_report_data(bom_id=bom_crumble.id, searchQty=1, searchVariant=False)
        report_values_12 = self.env['report.mrp.report_bom_structure']._get_report_data(bom_id=bom_crumble.id, searchQty=12, searchVariant=False)
        report_values_22 = self.env['report.mrp.report_bom_structure']._get_report_data(bom_id=bom_crumble.id, searchQty=22, searchVariant=False)
        report_values_23 = self.env['report.mrp.report_bom_structure']._get_report_data(bom_id=bom_crumble.id, searchQty=23, searchVariant=False)
        cheese_cake = self.env['product.product'].create({
        cream = self.env['product.product'].create({
        bom_form_cheese_cake = Form(self.env['mrp.bom'])
        workcenter_2 = self.env['mrp.workcenter'].create({
        report_values = self.env['report.mrp.report_bom_structure']._get_report_data(bom_id=bom_cheese_cake.id, searchQty=60, searchVariant=False)
                crumble_cost = self.env['report.mrp.report_bom_structure']._get_report_data(bom_id=bom_crumble.id, searchQty=5.4, searchVariant=False)['lines']['total']
        self.car = self.env['product.template'].create({
        self.gps_attribute = self.env['product.attribute'].create({'name': 'GPS', 'sequence': 1})
        self.gps_yes = self.env['product.attribute.value'].create({
        self.gps_no = self.env['product.attribute.value'].create({
        self.car_gps_attribute_line = self.env['product.template.attribute.line'].create({
        self.color_attribute = self.env['product.attribute'].create({'name': 'Color', 'sequence': 1})
        self.color_red = self.env['product.attribute.value'].create({
        self.color_blue = self.env['product.attribute.value'].create({
        self.car_color_attribute_line = self.env['product.template.attribute.line'].create({
        self.paint = self.env['product.template'].create({
        self.paint_color_attribute_line = self.env['product.template.attribute.line'].create({
        self.dashboard = self.env['product.template'].create({
        self.dashboard_gps_attribute_line = self.env['product.template.attribute.line'].create({
        self.dashboard_color_attribute_line = self.env['product.template.attribute.line'].create({
        self.gps = self.env['product.product'].create({
        bom_form_car = Form(self.env['mrp.bom'])
        bom_dashboard = Form(self.env['mrp.bom'])
        report_values = self.env['report.mrp.report_bom_structure']._get_report_data(bom_id=bom_car.id, searchQty=1, searchVariant=blue_car_with_gps.id)
        report_values_dashboad = self.env['report.mrp.report_bom_structure']._get_bom(
        report_values = self.env['report.mrp.report_bom_structure']._get_report_data(bom_id=bom_car.id, searchQty=1, searchVariant=red_car_without_gps.id)
        finished = self.env['product.product'].create({
        semi_finished = self.env['product.product'].create({
        assembly = self.env['product.product'].create({
        raw_material = self.env['product.product'].create({
        bom_finished = Form(self.env['mrp.bom'])
        bom_semi_finished = Form(self.env['mrp.bom'])
        bom_assembly = Form(self.env['mrp.bom'])
        report_values = self.env['report.mrp.report_bom_structure']._get_report_data(bom_id=bom_finished.id, searchQty=80)
        finished = self.env['product.product'].create({
        bom_finished = Form(self.env['mrp.bom'])
        bom_finished = Form(self.env['mrp.bom'])
        bom_finished = Form(self.env['mrp.bom'])
        bom_finished = Form(self.env['mrp.bom'])
        product_gram = self.env['product.product'].create({
        self.env['mrp.bom'].create({
        picking_form = Form(self.env['stock.picking'])
        self.env['stock.warehouse.orderpoint']._get_orderpoint_action()
        self.env['stock.warehouse.orderpoint']._get_orderpoint_action()
        orderpoint = self.env['stock.warehouse.orderpoint'].search([('product_id', '=', product_gram.id)])
        manufacturing_route = self.env['stock.location.route'].search([('id', '=', manufacturing_route_id)])
            return self.env['product.product'].create({
        mnf_product_a_form = Form(self.env['mrp.production'])
        mnf_product_a_form = Form(self.env['mrp.production'])
        self.company_a = self.env['res.company'].create({'name': 'Company A'})
        self.company_b = self.env['res.company'].create({'name': 'Company B'})
        self.warehouse_a = self.env['stock.warehouse'].search([('company_id', '=', self.company_a.id)], limit=1)
        self.warehouse_b = self.env['stock.warehouse'].search([('company_id', '=', self.company_b.id)], limit=1)
        self.user_a = self.env['res.users'].create({
        self.user_b = self.env['res.users'].create({
        product_b = self.env['product.product'].create({
            self.env['mrp.bom'].create({
        product_a = self.env['product.product'].create({
        product_b = self.env['product.product'].create({
            self.env['mrp.bom'].create({
        product_a = self.env['product.product'].create({
        mo = self.env['mrp.production'].create({
        product_a = self.env['product.product'].create({
        component_a = self.env['product.product'].create({
        self.env['mrp.bom'].create({
        mo_form = Form(self.env['mrp.production'].with_user(self.user_a))
        product = self.env['product.product'].create({
        component = self.env['product.product'].create({
        lot_b = self.env['stock.production.lot'].create({
        self.env['mrp.bom'].create({
        mo_form = Form(self.env['mrp.production'].with_user(self.user_a))
        product = self.env['product.product'].create({
        component = self.env['product.product'].create({
        lot_b = self.env['stock.production.lot'].create({
        self.env['mrp.bom'].create({
        mo_form = Form(self.env['mrp.production'].with_user(self.user_a))
        shared_product = self.env['product.product'].create({
        return self.env['mrp.workcenter.productivity'].create({
        man_order_form = Form(self.env['mrp.production'].with_user(self.user_mrp_manager))
        man_order_form = Form(self.env['mrp.production'].with_user(self.user_mrp_user))
        self.env['stock.quant'].create({
        self.env['stock.quant'].create({
        man_order_form = Form(self.env['mrp.production'].with_user(self.user_mrp_user))
        backorder = Form(self.env['mrp.production.backorder'].with_context(**action['context']))
        production_form = Form(self.env['mrp.production'])
        self.env['stock.quant'].with_context(inventory_mode=True).create({
        self.env['stock.quant'].with_context(inventory_mode=True).create({
        lot_1 = self.env['stock.production.lot'].create({
        lot_2 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location, 10, lot_id=lot_1)
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location, 10, lot_id=lot_2)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 5)
        update_quantity_wizard = self.env['change.production.qty'].create({
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location, 20)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 5)
        update_quantity_wizard = self.env['change.production.qty'].create({
        bom = self.env['mrp.bom'].create({
        production_form = Form(self.env['mrp.production'])
        bom = self.env['mrp.bom'].create({
        production_form = Form(self.env['mrp.production'])
        bom = self.env['mrp.bom'].create({
        production_form = Form(self.env['mrp.production'])
        bom = self.env['mrp.bom'].create({
        production_form = Form(self.env['mrp.production'])
        mo_form = Form(self.env['mrp.production'])
        bom_eff = self.env['mrp.bom'].create({
        production_form = Form(self.env['mrp.production'])
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location, 100)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 5)
        lot_p1_1 = self.env['stock.production.lot'].create({
        lot_p1_2 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location, 1, lot_id=lot_p1_1)
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location, 1, lot_id=lot_p1_2)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 5)
        backorder = Form(self.env['mrp.production.backorder'].with_context(**action['context']))
        first_lot_for_p1 = self.env['stock.production.lot'].create({
        second_lot_for_p1 = self.env['stock.production.lot'].create({
        final_product_lot = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(p1, self.stock_shelf_1, 3, lot_id=first_lot_for_p1)
        self.env['stock.quant']._update_available_quantity(p1, self.stock_shelf_2, 3, lot_id=first_lot_for_p1)
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location, 8, lot_id=second_lot_for_p1)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 5)
        self.env['stock.quant']._update_available_quantity(p1, self.stock_shelf_1, 2)
        self.env['stock.quant']._update_available_quantity(p1, self.stock_shelf_2, 3)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 1)
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location, 20)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 5)
        update_quantity_wizard = self.env['change.production.qty'].create({
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location, 100)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 5)
        warning = Form(self.env['mrp.consumption.warning'].with_context(**action['context']))
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location, 100)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 5)
        warning = Form(self.env['mrp.consumption.warning'].with_context(**action['context']))
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location, 100)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 5)
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location, 100)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 5)
        add_product = self.env['product.product'].create({
        serial = self.env['product.product'].create({
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location, 100)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 5)
        self.byproduct1 = self.env['product.product'].create({
        self.serial_1 = self.env['stock.production.lot'].create({
        self.serial_2 = self.env['stock.production.lot'].create({
        self.byproduct2 = self.env['product.product'].create({
        self.lot_1 = self.env['stock.production.lot'].create({
        self.lot_2 = self.env['stock.production.lot'].create({
        self.byproduct3 = self.env['product.product'].create({
        mo_form = Form(self.env['mrp.production'])
        backorder = Form(self.env['mrp.production.backorder'].with_context(**action['context']))
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location, 4)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 1)
        mo_form = Form(self.env['mrp.production'])
        sn = self.env['stock.production.lot'].create({
        mo_form = Form(self.env['mrp.production'])
        finished_product = self.env['product.product'].create({'name': 'finished product'})
        byproduct = self.env['product.product'].create({'name': 'byproduct', 'tracking': 'serial'})
        component = self.env['product.product'].create({'name': 'component'})
        bom = self.env['mrp.bom'].create({
        mo_form = Form(self.env['mrp.production'])
        sn = self.env['stock.production.lot'].create({
        mo_form = Form(self.env['mrp.production'])
        sn = self.env['stock.production.lot'].create({
        unbuild_form = Form(self.env['mrp.unbuild'])
        mo_form = Form(self.env['mrp.production'])
        product = self.env['product.product'].create({
        mo_form = Form(self.env['mrp.production'])
        move = self.env['stock.move'].create({
        product = self.env['product.product'].create({
        mo_form = Form(self.env['mrp.production'])
            move = self.env['stock.move'].create({
        plastic_laminate = self.env['product.product'].create({
        ply_veneer = self.env['product.product'].create({
        bom = self.env['mrp.bom'].create({
        mo_form = Form(self.env['mrp.production'])
        final_product_lot = self.env['stock.production.lot'].create({
        finished_product = self.env['product.product'].create({
        product_raw = self.env['product.product'].create({
        bom = self.env['mrp.bom'].create({
        mo_form = Form(self.env['mrp.production'])
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location_components, 5.0)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location_components, 5.0)
        wizard = Form(self.env[res_dict['res_model']].with_context(res_dict['context'])).save()
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location_components, 5.0)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location_components, 5.0)
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location_components, 5.0)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location_components, 5.0)
        wizard = Form(self.env[action['res_model']].with_context(action['context'])).save()
        wizard = Form(self.env[action['res_model']].with_context(action['context'])).save()
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location_components, 5.0)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location_components, 5.0)
        wizard = Form(self.env[action['res_model']].with_context(action['context'])).save()
        wizard = Form(self.env[action['res_model']].with_context(action['context'])).save()
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location_components, 5.0)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location_components, 5.0)
        mo2_form = Form(self.env['mrp.production'])
        mo3_form = Form(self.env['mrp.production'])
        wizard = Form(self.env[res_dict['res_model']].with_context(res_dict['context'])).save()
        mo_form = Form(self.env['mrp.production'])
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location_components, 5.0)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location_components, 5.0)
        wizard = Form(self.env[res_dict['res_model']].with_context(res_dict['context'])).save()
        p_final = self.env['product.product'].create({
        component = self.env['product.product'].create({
        bom = self.env['mrp.bom'].create({
        self.env['stock.quant']._update_available_quantity(component, self.stock_location_components, 25.0)
        mo_form = Form(self.env['mrp.production'])
        wizard = Form(self.env[res_dict['res_model']].with_context(res_dict['context'])).save()
        uom_cL = self.env['uom.uom'].create({
        product = self.env['product.product'].create({
        consumable_component = self.env['product.product'].create({
        storable_component = self.env['product.product'].create({
        self.env['stock.quant']._update_available_quantity(storable_component, self.env.ref('stock.stock_location_stock'), 100)
            bom = self.env['mrp.bom'].create({
            mo_form = Form(self.env['mrp.production'])
            wizard = Form(self.env[action['res_model']].with_context(action['context'])).save()
        categ_test = self.env['uom.category'].create({'name': 'Volume Test'})
        uom_L = self.env['uom.uom'].create({
        uom_ml = self.env['uom.uom'].create({
        product_comp = self.env['product.product'].create({
        product_final = self.env['product.product'].create({
        lot_final = self.env['stock.production.lot'].create({
        lot_comp = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(product_comp, self.stock_location, 1, lot_id=lot_comp)
        test_bom = self.env['mrp.bom'].create({
        mo_product_final_form = Form(self.env['mrp.production'])
        wizard = Form(self.env[res_dict['res_model']].with_context(res_dict['context'])).save()
        sn1 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(p_final, self.stock_location, 1, lot_id=sn1)
        scrap = self.env['stock.scrap'].create({
        mo_3 = Form(self.env['mrp.production'])
        mo_1 = Form(self.env['mrp.production'])
        mo_2 = Form(self.env['mrp.production'])
        wizard = Form(self.env[res_dict['res_model']].with_context(res_dict['context'])).save()
        bom = self.env['mrp.bom'].create({
        mo_form = Form(self.env['mrp.production'])
        backorder = Form(self.env['mrp.production.backorder'].with_context(**action['context']))
        move_prod_1 = self.env['stock.move'].search([
        move_prod_2 = self.env['stock.move'].search([
        move_prod_1_bo = self.env['stock.move'].search([
        move_prod_2_bo = self.env['stock.move'].search([
        bom = self.env['mrp.bom'].create({
        self.env['stock.quant'].create({
        mo = Form(self.env['mrp.production'])
        wizard = Form(self.env[res_dict['res_model']].with_context(res_dict['context'])).save()
        product = self.env['product.template'].create({
        component = self.env['product.template'].create({
        self.env['mrp.bom'].create({
        mo_form_1 = Form(self.env['mrp.production'])
        mo_form_1 = Form(self.env['mrp.production'].browse(mo_1.id))
        mo_form_1 = Form(self.env['mrp.production'].browse(mo_1.id))
        move_lines_1 = self.env['stock.move.line'].search([("reference", "=", mo_1.name)])
        move_finished_ids_1 = self.env['stock.move'].search([("production_id", "=", mo_1.id)])
        mo_form_2 = Form(self.env['mrp.production'])
        mo_form_2 = Form(self.env['mrp.production'].browse(mo_2.id))
        move_lines_2 = self.env['stock.move.line'].search([("reference", "=", mo_2.name)])
        move_finished_ids_2 = self.env['stock.move'].search([("production_id", "=", mo_2.id)])
        mo_form_3 = Form(self.env['mrp.production'])
        mo_form_3 = Form(self.env['mrp.production'].browse(mo_3.id))
        mo_form_3 = Form(self.env['mrp.production'].browse(mo_3.id))
        move_lines_3 = self.env['stock.move.line'].search([("reference", "=", mo_3.name)])
        move_finished_ids_3 = self.env['stock.move'].search([("production_id", "=", mo_3.id)])
        work_center_1 = self.env['mrp.workcenter'].create({"name": "WC1"})
        work_center_2 = self.env['mrp.workcenter'].create({"name": "WC2"})
        work_center_3 = self.env['mrp.workcenter'].create({"name": "WC3"})
        product = self.env['product.template'].create({"name": "Product"})
        component_1 = self.env['product.template'].create({"name": "Component 1", "type": "product"})
        component_2 = self.env['product.template'].create({"name": "Component 2", "type": "product"})
        component_3 = self.env['product.template'].create({"name": "Component 3", "type": "product"})
        self.env['stock.quant'].create({
        self.env['stock.quant'].create({
        self.env['stock.quant'].create({
        self.env['mrp.bom'].create({
        mo_form = Form(self.env['mrp.production'])
        bo = self.env['mrp.production.backorder'].create({
        mo_2 = self.env['mrp.production'].browse(mo.id + 1)
        product1 = self.env['product.product'].create({
        product2 = self.env['product.product'].create({
        mo_form = Form(self.env['mrp.production'])
        mo_form = Form(self.env['mrp.production'].browse(mo.id))
        mo_form = Form(self.env['mrp.production'].browse(mo.id))
        mo_form = Form(self.env['mrp.production'])
        mo_form = Form(self.env['mrp.production'].browse(mo2.id))
        mo_form = Form(self.env['mrp.production'].browse(mo2.id))
        mo_form = Form(self.env['mrp.production'])
        mo_form.product_uom_id = self.env['uom.uom'].browse(self.ref('uom.product_uom_dozen'))
        component = self.env['product.product'].create({
        bom1 = self.env['mrp.bom'].create({
        bom2 = self.env['mrp.bom'].create({
        mo_form = Form(self.env['mrp.production'])
        mo_form = Form(self.env['mrp.production'].browse(mo4.id))
        mo_form = Form(self.env['mrp.production'].browse(mo4.id))
        production_form = Form(self.env['mrp.production'])
        production_form = Form(self.env['mrp.production'])
        production_form = Form(self.env['mrp.production'])
        production_form = Form(self.env['mrp.production'])
        production_form = Form(self.env['mrp.production'])
        production_form = Form(self.env['mrp.production'])
        production_form = Form(self.env['mrp.production'])
        production_form = Form(self.env['mrp.production'])
        production_form = Form(self.env['mrp.production'])
        produce_product_4 = self.env['mrp.production'].search([('product_id', '=', self.product_4.id),
        self.env['stock.quant'].with_context(inventory_mode=True).create({
        self.env['stock.quant'].with_context(inventory_mode=True).create({
        all_categ_id = self.env['product.category'].search([('parent_id', '=', None)], limit=1)
        child_categ_id = self.env['product.category'].search([('parent_id', '=', all_categ_id.id)], limit=1)
            production_form = Form(self.env['mrp.production'])
        warehouse = self.env['stock.warehouse'].search([], limit=1)
        self.env['stock.location']._parent_store_compute()
        finished_product = self.env['product.product'].create({
        component = self.env['product.product'].create({
        self.env['stock.quant']._update_available_quantity(component, warehouse.wh_input_stock_loc_id, 100)
        bom = self.env['mrp.bom'].create({
        mo_form = Form(self.env['mrp.production'])
        pickings = self.env['stock.picking'].search([('product_id', '=', component.id)])
        product_1 = self.env['product.product'].create({
        component_1 = self.env['product.product'].create({
        self.env['mrp.bom'].create({
        move_dest = self.env['stock.move'].create({
        mo = self.env['mrp.production'].search([
        move_orig = self.env['stock.move'].search([
        product_bottle = self.env['product.product'].create({
        component_mold = self.env['product.product'].create({
        self.env['mrp.bom'].create({
        move_dest = self.env['stock.move'].create({
        mo = self.env['mrp.production'].search([
        product = self.env['product.product'].create({
        self.env['mrp.bom'].create({
        move_dest = self.env['stock.move'].create({
        production = self.env['mrp.production'].search([('product_id', '=', product.id)])
        comp1 = self.env['product.product'].create({
        self.env['stock.move'].create(move_values)
        product_1 = self.env['product.product'].create({
        product_2 = self.env['product.product'].create({
        product_3 = self.env['product.product'].create({
        bom1 = self.env['mrp.bom'].create({
        self.env['mrp.bom'].create({
        product_4 = self.env['product.product'].create({
        product_5 = self.env['product.product'].create({
        self.env['mrp.bom'].create({
        self.env['stock.warehouse.orderpoint'].create({
        self.env['stock.warehouse.orderpoint'].create({
        self.env['stock.warehouse.orderpoint'].create({
        pick_output = self.env['stock.picking'].create({
        mo = self.env['mrp.production'].search([
        mo2 = self.env['mrp.production'].search([
        mo3 = self.env['mrp.production'].search([
        mo_form = Form(self.env['mrp.production'])
            return self.env['procurement.group'].run([self.env['procurement.group'].Procurement(
        vendor = self.env['res.partner'].create({
        self.env['stock.location.route'].browse(self.ref('stock.route_warehouse0_mto')).action_unarchive()
        product = self.env['product.product'].create({
        component = self.env['product.product'].create({
        self.env['mrp.bom'].create({
        procurement_group = self.env['procurement.group'].create({
        customer_move = self.env['stock.move'].search([('group_id', '=', procurement_group.id)])
        manufacturing_order = self.env['mrp.production'].search([('product_id', '=', product.id)])
        manufacturing_orders = self.env['mrp.production'].search([('product_id', '=', product.id)])
        self.depot_location = self.env['stock.location'].create({
        self.env["stock.putaway.rule"].create({
        mrp_workcenter = self.env['mrp.workcenter'].create({
        self.env['stock.quant'].create({
        self.bom_laptop = self.env['mrp.bom'].create({
        form = Form(self.env['mrp.production'])
        manu_rule = self.env['stock.rule'].search([
        manu_rule = self.env['stock.rule'].search([
        lot_product_4 = self.env['stock.production.lot'].create({
        lot_product_2 = self.env['stock.production.lot'].create({
        self.env['stock.quant'].create({
        self.env['stock.quant'].create({
        production_form = Form(self.env['mrp.production'])
        scrap_id = self.env['stock.scrap'].with_context(active_model='mrp.production', active_id=production_3.id).create({'product_id': self.product_2.id, 'scrap_qty': 1.0, 'product_uom_id': self.product_2.uom_id.id, 'location_id': location_id, 'production_id': production_3.id})
        self.env['stock.scrap'].with_context(active_model='mrp.production', active_id=production_3.id).create({'product_id': self.product_2.id, 'scrap_qty': 1.0, 'product_uom_id': self.product_2.uom_id.id, 'location_id': location_id, 'lot_id': lot_product_2.id, 'production_id': production_3.id})
        serial = self.env['stock.production.lot'].create({'product_id': self.laptop.id, 'company_id': self.env.company.id})
            p = Form(self.env['product.product'])
        bom_kit_1 = self.env['mrp.bom'].create({
        bom_kit_2 = self.env['mrp.bom'].create({
        bom_kit_parent = self.env['mrp.bom'].create({
        bom_kit_3 = self.env['mrp.bom'].create({
        self.test_partner = self.env['res.partner'].create({
        self.test_supplier = self.env['stock.location'].create({
        picking = self.env['stock.picking'].create({
        move_receipt_1 = self.env['stock.move'].create({
        picking = self.env['stock.picking'].create({
        move_receipt_1 = self.env['stock.move'].create({
        product_chocolate = self.env['product.product'].create({
        product_chococake = self.env['product.product'].create({
        product_double_chococake = self.env['product.product'].create({
        bom_chococake = self.env['mrp.bom'].create({
        bom_double_chococake = self.env['mrp.bom'].create({
        mo_form = Form(self.env['mrp.production'])
        mo_form = Form(self.env['mrp.production'])
        product_apple_pie = self.env['product.product'].create({
        product_apple = self.env['product.product'].create({
        bom = self.env['mrp.bom'].create({
        mo_form = Form(self.env['mrp.production'])
        backorder_form = Form(self.env['mrp.production.backorder'].with_context(**action['context']))
        product_banana = self.env['product.product'].create({
        product_chocolate = self.env['product.product'].create({
        mo_form = Form(self.env['mrp.production'])
        return self.env['product.product'].create({
        quants = self.env['stock.quant'].create({
        quants |= self.env['stock.quant'].create({
        quants |= self.env['stock.quant'].create({
        quants |= self.env['stock.quant'].create({
        quants |= self.env['stock.quant'].create({
            bom = self.env['mrp.bom'].create({
            mo_form = Form(self.env['mrp.production'])
                mo_form.lot_producing_id = self.env['stock.production.lot'].create({'name': 'Serial or Lot finished', 'product_id': finished_product.id, 'company_id': self.env.company.id})
            lines = self.env['stock.traceability.report'].with_context(context).get_lines()
            lines = self.env['stock.traceability.report'].get_lines(final_product['id'], **{
        product_final = self.env['product.product'].create({
        product_1 = self.env['product.product'].create({
        product_2 = self.env['product.product'].create({
        byproduct_1 = self.env['product.product'].create({
        byproduct_2 = self.env['product.product'].create({
        bom_1 = self.env['mrp.bom'].create({
        mo_form = Form(self.env['mrp.production'])
        mo_form.lot_producing_id = self.env['stock.production.lot'].create({
            ml.lot_id = self.env['stock.production.lot'].create({
            ml.lot_id = self.env['stock.production.lot'].create({
            ml.lot_id = self.env['stock.production.lot'].create({
            ml.lot_id = self.env['stock.production.lot'].create({
        backorder = Form(self.env['mrp.production.backorder'].with_context(**action['context']))
        mo_form.lot_producing_id = self.env['stock.production.lot'].create({
            ml.lot_id = self.env['stock.production.lot'].create({
            ml.lot_id = self.env['stock.production.lot'].create({
            ml.lot_id = self.env['stock.production.lot'].create({
            ml.lot_id = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location, 100)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 5)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location), 5, 'You should have the 5 final product in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p1, self.stock_location), 80, 'You should have 80 products in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p2, self.stock_location), 0, 'You should have consumed all the 5 product in stock')
        x = Form(self.env['mrp.unbuild'])
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location), 2, 'You should have consumed 3 final product in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p1, self.stock_location), 92, 'You should have 80 products in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p2, self.stock_location), 3, 'You should have consumed all the 5 product in stock')
        x = Form(self.env['mrp.unbuild'])
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location), 0, 'You should have 0 finalproduct in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p1, self.stock_location), 100, 'You should have 80 products in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p2, self.stock_location), 5, 'You should have consumed all the 5 product in stock')
        x = Form(self.env['mrp.unbuild'])
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location, allow_negative=True), -5, 'You should have negative quantity for final product in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p1, self.stock_location), 120, 'You should have 80 products in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p2, self.stock_location), 10, 'You should have consumed all the 5 product in stock')
        lot = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location, 100)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 5)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location, lot_id=lot), 5, 'You should have the 5 final product in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p1, self.stock_location), 80, 'You should have 80 products in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p2, self.stock_location), 0, 'You should have consumed all the 5 product in stock')
            x = Form(self.env['mrp.unbuild'])
        x = Form(self.env['mrp.unbuild'])
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location, lot_id=lot), 2, 'You should have consumed 3 final product in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p1, self.stock_location), 92, 'You should have 80 products in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p2, self.stock_location), 3, 'You should have consumed all the 5 product in stock')
        x = Form(self.env['mrp.unbuild'])
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location, lot_id=lot), 0, 'You should have 0 finalproduct in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p1, self.stock_location), 100, 'You should have 80 products in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p2, self.stock_location), 5, 'You should have consumed all the 5 product in stock')
        x = Form(self.env['mrp.unbuild'])
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location, lot_id=lot, allow_negative=True), -5, 'You should have negative quantity for final product in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p1, self.stock_location), 120, 'You should have 80 products in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p2, self.stock_location), 10, 'You should have consumed all the 5 product in stock')
        lot = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location, 100, lot_id=lot)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 5)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location), 5, 'You should have the 5 final product in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p1, self.stock_location, lot_id=lot), 80, 'You should have 80 products in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p2, self.stock_location), 0, 'You should have consumed all the 5 product in stock')
        x = Form(self.env['mrp.unbuild'])
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location), 5, 'You should have consumed 3 final product in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location), 2, 'You should have consumed 3 final product in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p1, self.stock_location, lot_id=lot), 92, 'You should have 92 products in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p2, self.stock_location), 3, 'You should have consumed all the 5 product in stock')
        x = Form(self.env['mrp.unbuild'])
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location), 0, 'You should have 0 finalproduct in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p1, self.stock_location, lot_id=lot), 100, 'You should have 80 products in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p2, self.stock_location), 5, 'You should have consumed all the 5 product in stock')
        x = Form(self.env['mrp.unbuild'])
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location, allow_negative=True), -5, 'You should have negative quantity for final product in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p1, self.stock_location, lot_id=lot), 120, 'You should have 80 products in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p2, self.stock_location), 10, 'You should have consumed all the 5 product in stock')
        lot_final = self.env['stock.production.lot'].create({
        lot_1 = self.env['stock.production.lot'].create({
        lot_2 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location, 100, lot_id=lot_1)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 5, lot_id=lot_2)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location, lot_id=lot_final), 5, 'You should have the 5 final product in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p1, self.stock_location, lot_id=lot_1), 80, 'You should have 80 products in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p2, self.stock_location, lot_id=lot_2), 0, 'You should have consumed all the 5 product in stock')
        x = Form(self.env['mrp.unbuild'])
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location, lot_id=lot_final), 5, 'You should have consumed 3 final product in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location, lot_id=lot_final), 5, 'You should have consumed 3 final product in stock')
        x = Form(self.env['mrp.unbuild'])
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location, lot_id=lot_final), 2, 'You should have consumed 3 final product in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p1, self.stock_location, lot_id=lot_1), 92, 'You should have 92 products in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p2, self.stock_location, lot_id=lot_2), 3, 'You should have consumed all the 5 product in stock')
        x = Form(self.env['mrp.unbuild'])
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location, lot_id=lot_final), 0, 'You should have 0 finalproduct in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p1, self.stock_location, lot_id=lot_1), 100, 'You should have 80 products in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p2, self.stock_location, lot_id=lot_2), 5, 'You should have consumed all the 5 product in stock')
        x = Form(self.env['mrp.unbuild'])
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location, lot_id=lot_final, allow_negative=True), -5, 'You should have negative quantity for final product in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p1, self.stock_location, lot_id=lot_1), 120, 'You should have 80 products in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p2, self.stock_location, lot_id=lot_2), 10, 'You should have consumed all the 5 product in stock')
        lot_1 = self.env['stock.production.lot'].create({
        lot_2 = self.env['stock.production.lot'].create({
        lot_3 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(p1, self.stock_location, 100)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 1, lot_id=lot_1)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 3, lot_id=lot_2)
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 2, lot_id=lot_3)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location), 5, 'You should have the 5 final product in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p1, self.stock_location), 80, 'You should have 80 products in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p2, self.stock_location, lot_id=lot_1), 0, 'You should have consumed all the 1 product for lot 1 in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p2, self.stock_location, lot_id=lot_2), 0, 'You should have consumed all the 3 product for lot 2 in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p2, self.stock_location, lot_id=lot_3), 1, 'You should have consumed only 1 product for lot3 in stock')
        x = Form(self.env['mrp.unbuild'])
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p_final, self.stock_location), 0, 'You should have no more final product in stock after unbuild')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p1, self.stock_location), 100, 'You should have 80 products in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p2, self.stock_location, lot_id=lot_1), 1, 'You should have get your product with lot 1 in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p2, self.stock_location, lot_id=lot_2), 3, 'You should have the 3 basic product for lot 2 in stock')
        self.assertEqual(self.env['stock.quant']._get_available_quantity(p2, self.stock_location, lot_id=lot_3), 2, 'You should have get one product back for lot 3')
        lot_1 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 3, lot_id=lot_1)
        lot_finished_1 = self.env['stock.production.lot'].create({
        backorder = Form(self.env[action['res_model']].with_context(**action['context']))
        lot_2 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(p2, self.stock_location, 4, lot_id=lot_2)
        lot_finished_2 = self.env['stock.production.lot'].create({
        unbuild_location = self.env['stock.location'].create({
        product_route = self.env['stock.location.route'].create({
        bom = self.env['mrp.bom'].create({
        mo_form = Form(self.env['mrp.production'])
        x = Form(self.env['mrp.unbuild'])
        picking = self.env['stock.picking'].search([('product_id', 'in', [component1.id, component2.id])])
        self.customer_location = self.env['ir.model.data']._xmlid_to_res_id('stock.stock_location_customers')
        warehouse_form = Form(self.env['stock.warehouse'])
        product_form = Form(self.env['product.product'])
        product_form = Form(self.env['product.product'])
        bom_product_form = Form(self.env['mrp.bom'])
        production_form = Form(self.env['mrp.production'])
        self.env['stock.quant']._update_available_quantity(self.raw_product, self.warehouse.lot_stock_id, 4.0)
        picking_customer = self.env['stock.picking'].create({
            'partner_id': self.env['ir.model.data']._xmlid_to_res_id('base.res_partner_4'),
        self.env['stock.move'].create({
        production_order = self.env['mrp.production'].search([('product_id', '=', self.finished_product.id)])
        picking_stock_preprod = self.env['stock.move'].search([
        picking_stock_postprod = self.env['stock.move'].search([
        self.assertFalse(sum(self.env['stock.quant']._gather(self.raw_product, self.warehouse.lot_stock_id).mapped('quantity')))
        self.assertTrue(self.env['stock.quant']._gather(self.raw_product, self.warehouse.pbm_loc_id))
        self.assertFalse(sum(self.env['stock.quant']._gather(self.raw_product, self.warehouse.pbm_loc_id).mapped('quantity')))
        picking_stock_pick = self.env['stock.move'].search([
        self.env['stock.quant']._update_available_quantity(self.raw_product, self.warehouse.lot_stock_id, 4.0)
        picking_customer = self.env['stock.picking'].create({
            'partner_id': self.env['ir.model.data']._xmlid_to_res_id('base.res_partner_4'),
        self.env['stock.move'].create({
        production_order = self.env['mrp.production'].search([('product_id', '=', self.finished_product.id)])
        move_stock_preprod = self.env['stock.move'].search([
        move_stock_postprod = self.env['stock.move'].search([
        production_form = Form(self.env['mrp.production'])
        bom = self.env['mrp.bom'].search([
        new_product = self.env['product.product'].create({
        production_form = Form(self.env['mrp.production'])
        [two_units_uom, four_units_uom] = self.env['uom.uom'].create([{
        finished_product = self.env['product.product'].create({
        secondary_product = self.env['product.product'].create({
        component = self.env['product.product'].create({
        self.env['mrp.bom'].create({
        self.env['stock.warehouse.orderpoint'].create({
        self.env['procurement.group'].run_scheduler()
        mo = self.env['mrp.production'].search([('product_id', '=', finished_product.id)])
        byproduct_postprod_move = self.env['stock.move'].search([
        product_form = Form(self.env['product.product'])
        bom_product_form = Form(self.env['mrp.bom'])
        self.env['stock.quant']._update_available_quantity(
        rr_form = Form(self.env['stock.warehouse.orderpoint'])
        rr_form = Form(self.env['stock.warehouse.orderpoint'])
        rr_form = Form(self.env['stock.warehouse.orderpoint'])
        self.env['procurement.group'].run_scheduler()
        pickings_component = self.env['stock.picking'].search(
                action_from_do_finish = self.env['mrp.workorder'].browse(self.env.context.get('active_id')).do_finish()
            productions_to_validate = self.env['mrp.production'].browse(productions_to_validate)
        action = self.env["ir.actions.actions"]._for_xml_id("stock_account.stock_valuation_layer_action")
        analytic_lines = self.env['account.analytic.line'].sudo().create(mo_analytic_line_vals_list + wc_analytic_line_vals_list)
        workcenter_from1 = Form(self.env['mrp.workcenter'])
        quants = self.env['stock.quant'].with_context(inventory_mode=True).create({
        quants |= self.env['stock.quant'].with_context(inventory_mode=True).create({
        quants |= self.env['stock.quant'].with_context(inventory_mode=True).create({
        quants |= self.env['stock.quant'].create({
        production_table_form = Form(self.env['mrp.production'])
        production_form = Form(self.env['mrp.production'])
        productA_debit_line = self.env['account.move.line'].search([('ref', 'ilike', 'MO%Product A'), ('credit', '=', 0)])
        productA_credit_line = self.env['account.move.line'].search([('ref', 'ilike', 'MO%Product A'), ('debit', '=', 0)])
        productB_debit_line = self.env['account.move.line'].search([('ref', 'ilike', 'MO%Product B'), ('credit', '=', 0)])
        productB_credit_line = self.env['account.move.line'].search([('ref', 'ilike', 'MO%Product B'), ('debit', '=', 0)])
        wizard = Form(self.env[res_dict['res_model']].with_context(res_dict['context'])).save()
        productA_debit_line = self.env['account.move.line'].search([('ref', 'ilike', 'UB%Product A'), ('credit', '=', 0)])
        productA_credit_line = self.env['account.move.line'].search([('ref', 'ilike', 'UB%Product A'), ('debit', '=', 0)])
        productB_debit_line = self.env['account.move.line'].search([('ref', 'ilike', 'UB%Product B'), ('credit', '=', 0)])
        productB_credit_line = self.env['account.move.line'].search([('ref', 'ilike', 'UB%Product B'), ('debit', '=', 0)])
        wip_incoming_account = self.env['account.account'].create({
        wip_outgoing_account = self.env['account.account'].create({
        production_form = Form(self.env['mrp.production'])
        productA_debit_line = self.env['account.move.line'].search([('ref', 'ilike', 'MO%Product A'), ('credit', '=', 0)])
        productA_credit_line = self.env['account.move.line'].search([('ref', 'ilike', 'MO%Product A'), ('debit', '=', 0)])
        productB_debit_line = self.env['account.move.line'].search([('ref', 'ilike', 'MO%Product B'), ('credit', '=', 0)])
        productB_credit_line = self.env['account.move.line'].search([('ref', 'ilike', 'MO%Product B'), ('debit', '=', 0)])
        wizard = Form(self.env[res_dict['res_model']].with_context(res_dict['context'])).save()
        productA_debit_line = self.env['account.move.line'].search([('ref', 'ilike', 'UB%Product A'), ('credit', '=', 0)])
        productA_credit_line = self.env['account.move.line'].search([('ref', 'ilike', 'UB%Product A'), ('debit', '=', 0)])
        productB_debit_line = self.env['account.move.line'].search([('ref', 'ilike', 'UB%Product B'), ('credit', '=', 0)])
        productB_credit_line = self.env['account.move.line'].search([('ref', 'ilike', 'UB%Product B'), ('debit', '=', 0)])
        mo_form = Form(self.env['mrp.production'])
        mo_form = Form(self.env['mrp.production'])
        product_to_repair = self.env['product.product'].create({
        ptrepair_lot = self.env['stock.production.lot'].create({
        product_to_remove = self.env['product.product'].create({
        ptremove_lot = self.env['stock.production.lot'].create({
        mo_form = Form(self.env['mrp.production'])
        with Form(self.env['repair.order']) as ro_form:
        mo2_form = Form(self.env['mrp.production'])
        mo2.lot_producing_id = self.env['stock.production.lot'].create({
        company_without_subcontracting_loc = self.env['res.company'].search(
            subcontracting_location = self.env['stock.location'].create({
            self.env['ir.property']._set_default(
            self.env['stock.picking'].concat(*list(subcontract_details_per_picking.keys())).action_assign()
        bom = self.env['mrp.bom'].sudo()._bom_subcontract_find(
                    self.env['change.production.qty'].with_context(skip_activity=True).create({
                change_qty = self.env['change.production.qty'].create({
        group = self.env['procurement.group'].create({
            mo = self.env['mrp.production'].with_company(move.company_id).create(self._prepare_subcontract_mo_vals(move, bom))
            self.env['stock.move'].create(mo._get_moves_raw_values())
            self.env['stock.move'].create(mo._get_moves_finished_values())
        company2 = self.env['res.company'].create({'name': 'Test Company'})
        self.assertTrue(all(self.env['stock.warehouse'].search([]).with_context(active_test=False).mapped('subcontracting_type_id.use_create_components_lots')))
        picking_form = Form(self.env['stock.picking'])
        mo = self.env['mrp.production'].search([('bom_id', '=', self.bom.id)])
        pg1 = self.env['procurement.group'].create({})
        self.env['stock.warehouse.orderpoint'].create({
        self.env['procurement.group'].run_scheduler()
        picking = self.env['stock.picking'].search([('group_id', '=', pg1.id)])
        avail_qty_comp1 = self.env['stock.quant']._get_available_quantity(self.comp1, self.subcontractor_partner1.property_stock_subcontractor, allow_negative=True)
        avail_qty_comp2 = self.env['stock.quant']._get_available_quantity(self.comp2, self.subcontractor_partner1.property_stock_subcontractor, allow_negative=True)
        avail_qty_finished = self.env['stock.quant']._get_available_quantity(self.finished, wh.lot_stock_id)
        return_form = Form(self.env['stock.return.picking'].with_context(active_id=picking_receipt.id, active_model='stock.picking'))
        return_picking = self.env['stock.picking'].browse(return_picking_id)
        resupply_sub_on_order_route = self.env['stock.location.route'].search([('name', '=', 'Resupply Subcontractor on Order')])
        partner_subcontract_location = self.env['stock.location'].create({
        picking_form = Form(self.env['stock.picking'])
        mo = self.env['mrp.production'].search([('bom_id', '=', self.bom.id)])
        comp2mo = self.env['mrp.production'].search([('bom_id', '=', self.comp2_bom.id)])
        avail_qty_comp1 = self.env['stock.quant']._get_available_quantity(self.comp1, self.subcontractor_partner1.property_stock_subcontractor, allow_negative=True)
        avail_qty_comp2 = self.env['stock.quant']._get_available_quantity(self.comp2, self.subcontractor_partner1.property_stock_subcontractor, allow_negative=True)
        avail_qty_finished = self.env['stock.quant']._get_available_quantity(self.finished, wh.lot_stock_id)
        avail_qty_comp1_in_global_location = self.env['stock.quant']._get_available_quantity(self.comp1, self.env.company.subcontracting_location_id, allow_negative=True)
        avail_qty_comp2_in_global_location = self.env['stock.quant']._get_available_quantity(self.comp2, self.env.company.subcontracting_location_id, allow_negative=True)
        resupply_sub_on_order_route = self.env['stock.location.route'].search([('name', '=', 'Resupply Subcontractor on Order')])
        manufacture_route = self.env['stock.location.route'].search([('name', '=', 'Manufacture')])
        picking_form = Form(self.env['stock.picking'])
        mo = self.env['mrp.production'].search([('bom_id', '=', self.bom.id)])
        comp2mo = self.env['mrp.production'].search([('bom_id', '=', self.comp2_bom.id)])
        avail_qty_comp1 = self.env['stock.quant']._get_available_quantity(self.comp1, self.subcontractor_partner1.property_stock_subcontractor, allow_negative=True)
        avail_qty_comp2 = self.env['stock.quant']._get_available_quantity(self.comp2, self.subcontractor_partner1.property_stock_subcontractor, allow_negative=True)
        avail_qty_finished = self.env['stock.quant']._get_available_quantity(self.finished, wh.lot_stock_id)
        manufacture_route = self.env['stock.location.route'].search([('name', '=', 'Manufacture')])
        orderpoint_form = Form(self.env['stock.warehouse.orderpoint'])
        picking_form = Form(self.env['stock.picking'])
        mo = self.env['mrp.production'].search([('bom_id', '=', self.bom.id)])
        picking_delivery = self.env['stock.picking'].search([('origin', 'ilike', '%' + picking_receipt.name + '%')])
        move = self.env['stock.move'].search([
        comp2mo = self.env['mrp.production'].search([('bom_id', '=', self.comp2_bom.id)])
        main_partner_2 = self.env['res.partner'].create({'name': 'main_partner'})
        subcontractor_partner2 = self.env['res.partner'].create({
        comp3 = self.env['product.product'].create({
        bom_form = Form(self.env['mrp.bom'])
        picking_form = Form(self.env['stock.picking'])
        picking_form = Form(self.env['stock.picking'])
        main_partner_2 = self.env['res.partner'].create({'name': 'main_partner'})
        subcontractor_partner2 = self.env['res.partner'].create({
        comp3 = self.env['product.product'].create({
        bom_form = Form(self.env['mrp.bom'])
        picking_form = Form(self.env['stock.picking'])
        resupply_sub_on_order_route = self.env['stock.location.route'].search([('name', '=', 'Resupply Subcontractor on Order')])
        picking_form = Form(self.env['stock.picking'])
        backorder_wiz = Form(self.env[backorder_wiz['res_model']].with_context(backorder_wiz['context'])).save()
        backorder = self.env['stock.picking'].search([('backorder_id', '=', picking_receipt.id)])
        resupply_sub_on_order_route = self.env['stock.location.route'].search([
        picking_form = Form(self.env['stock.picking'])
        picking_delivery = self.env['stock.move'].search([
        subcontractor_contact = self.env['res.partner'].create({
        picking_form = Form(self.env['stock.picking'])
        mo = self.env['mrp.production'].search([('bom_id', '=', self.bom.id)])
        picking_form = Form(self.env['stock.picking'])
        mo = self.env['mrp.production'].browse(action['res_id'])
        avail_qty_comp1 = self.env['stock.quant']._get_available_quantity(self.comp1, self.subcontractor_partner1.property_stock_subcontractor, allow_negative=True)
        picking_form = Form(self.env['stock.picking'])
        mo = self.env['mrp.production'].browse(action['res_id'])
        warning = Form(self.env['mrp.consumption.warning'].with_context(**action_warning['context']))
        warning = Form(self.env['mrp.consumption.warning'].with_context(**action_warning['context']))
        avail_qty_comp1 = self.env['stock.quant']._get_available_quantity(self.comp1, self.subcontractor_partner1.property_stock_subcontractor, allow_negative=True)
        self.env['product.supplierinfo'].create({
        supplier = self.env['product.supplierinfo'].create({
        report_values = self.env['report.mrp.report_bom_structure']._get_report_data(self.bom.id, searchQty=1, searchVariant=False)
        main_company_1 = self.env['res.partner'].create({'name': 'main_partner'})
        self.subcontractor_partner1 = self.env['res.partner'].create({
        self.comp1_sn = self.env['product.product'].create({
        self.comp2 = self.env['product.product'].create({
        self.finished_product = self.env['product.product'].create({
        bom_form = Form(self.env['mrp.bom'])
        picking_form = Form(self.env['stock.picking'])
        mo = self.env['mrp.production'].search([('bom_id', '=', self.bom_tracked.id)])
        pg1 = self.env['procurement.group'].create({})
        self.env['stock.warehouse.orderpoint'].create({
        self.env['procurement.group'].run_scheduler()
        picking = self.env['stock.picking'].search([('group_id', '=', pg1.id)])
        lot_id = self.env['stock.production.lot'].create({
        serial_id = self.env['stock.production.lot'].create({
        mo = self.env['mrp.production'].browse(action['res_id'])
        avail_qty_comp1 = self.env['stock.quant']._get_available_quantity(self.comp1_sn, self.subcontractor_partner1.property_stock_subcontractor, allow_negative=True)
        avail_qty_comp2 = self.env['stock.quant']._get_available_quantity(self.comp2, self.subcontractor_partner1.property_stock_subcontractor, allow_negative=True)
        avail_qty_finished = self.env['stock.quant']._get_available_quantity(self.finished_product, wh.lot_stock_id)
        picking_form = Form(self.env['stock.picking'])
        avail_qty_comp1 = self.env['stock.quant']._get_available_quantity(self.comp1_sn, self.subcontractor_partner1.property_stock_subcontractor, allow_negative=True)
        avail_qty_comp2 = self.env['stock.quant']._get_available_quantity(self.comp2, self.subcontractor_partner1.property_stock_subcontractor, allow_negative=True)
        avail_qty_finished = self.env['stock.quant']._get_available_quantity(self.finished_product, wh.lot_stock_id)
        picking_form = Form(self.env['stock.picking'])
        mo = self.env['mrp.production'].search([('bom_id', '=', self.bom_tracked.id)])
        lot_comp2 = self.env['stock.production.lot'].create({
            serials_finished.append(self.env['stock.production.lot'].create({
            serials_comp1.append(self.env['stock.production.lot'].create({
            mo = self.env['mrp.production'].browse(action['res_id'])
        avail_qty_comp1 = self.env['stock.quant']._get_available_quantity(self.comp1_sn, self.subcontractor_partner1.property_stock_subcontractor, allow_negative=True)
        avail_qty_comp2 = self.env['stock.quant']._get_available_quantity(self.comp2, self.subcontractor_partner1.property_stock_subcontractor, allow_negative=True)
        avail_qty_finished = self.env['stock.quant']._get_available_quantity(self.finished_product, wh.lot_stock_id)
        resupply_sub_on_order_route = self.env['stock.location.route'].search([('name', '=', 'Resupply Subcontractor on Order')])
        finished_product, component = self.env['product.product'].create([{
        bom_form = Form(self.env['mrp.bom'])
        finished_lot, component_lot = self.env['stock.production.lot'].create([{
        self.env['stock.quant']._update_available_quantity(component, self.env.ref('stock.stock_location_stock'), todo_nb, lot_id=component_lot)
        picking_form = Form(self.env['stock.picking'])
        mo = self.env['mrp.production'].search([('bom_id', '=', bom.id)])
        wizard = Form(self.env[wizard_data['res_model']].with_context(wizard_data['context'])).save()
            picking_receipt = self.env['stock.picking'].search([('partner_id', '=', self.subcontractor_partner1.id), ('state', '!=', 'done')])
            mo = self.env['mrp.production'].browse(action['res_id'])
                wizard = Form(self.env[wizard_data['res_model']].with_context(wizard_data['context'])).save()
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        picking_form = Form(self.env['stock.picking'])
        picking_form = Form(self.env['stock.picking'])
        lot_comp2 = self.env['stock.production.lot'].create({
            serials_finished.append(self.env['stock.production.lot'].create({
            serials_comp1.append(self.env['stock.production.lot'].create({
            mo = self.env['mrp.production'].browse(action['res_id'])
        partner = self.env['res.partner'].create({
        suppliers = self.env['product.supplierinfo'].create([
            dropship_picking_type = self.env['stock.picking.type'].search([
            self.env['stock.rule'].create(vals)
        company_ids = self.env['res.company'].search([])
        company_has_rules = self.env['stock.rule'].search([('route_id', '=', route.id)]).mapped('company_id')
        mto_route = self.env['stock.location.route'].search([('name', '=', 'Replenish on Order (MTO)')])
        resupply_route = self.env['stock.location.route'].search([('name', '=', 'Resupply Subcontractor on Order')])
        buy_route = self.env['stock.location.route'].search([('name', '=', 'Buy')])
        dropship_route = self.env['stock.location.route'].search([('name', '=', 'Dropship')])
        warehouse = self.env['stock.warehouse'].create({
        self.env['product.supplierinfo'].create({
        partner = self.env['res.partner'].create({
        self.env['product.supplierinfo'].create({
        so_form = Form(self.env['sale.order'])
        po = self.env['purchase.order'].search([('origin', 'ilike', so.name)])
        picking_delivery = self.env['stock.move'].search([
        po = self.env['purchase.order.line'].search([
        resupply_sub_on_order_route = self.env['stock.location.route'].search([('name', '=', 'Resupply Subcontractor on Order')])
        vendor = self.env['res.partner'].create({'name': 'AAA', 'email': 'from.test@example.com'})
        self.env['product.supplierinfo'].create({
        po = Form(self.env['purchase.order'])
        mo = self.env['mrp.production'].search([('bom_id', '=', self.bom.id)])
        picking_deliveries = self.env['stock.picking'].search([('origin', '=', origin)])
        return self.env['note.stage'].search([('user_id', '=', self.env.uid)], limit=1)
        first_user_stage = self.env['note.stage'].search([('user_id', '=', self.env.uid)], limit=1)
            stages = self.env['note.stage'].search([('user_id', '=', self.env.uid)])
        user_group_id = self.env['ir.model.data']._xmlid_to_res_id('base.group_user')
        notes_count = self.env['note.note'].search_count([('user_id', '=', self.env.uid)])
                    'icon': modules.module.get_module_icon(self.env['note.note']._original_module),
        return bool(self.env['ir.config_parameter'].sudo().get_param('pad.pad_server'))
            "server": self.env['ir.config_parameter'].sudo().get_param('pad.pad_server'),
            "key": self.env['ir.config_parameter'].sudo().get_param('pad.pad_key'),
            model = self.env[self.env.context["model"]]
            "server": self.env['ir.config_parameter'].sudo().get_param('pad.pad_server'),
            "key": self.env['ir.config_parameter'].sudo().get_param('pad.pad_key'),
                    "server": self.env['ir.config_parameter'].sudo().get_param('pad.pad_server'),
                    "key": self.env['ir.config_parameter'].sudo().get_param('pad.pad_key'),
        account = self.env['iap.account'].get('partner_autocomplete')
            'db_uuid': self.env['ir.config_parameter'].sudo().get_param('database.uuid'),
        base_url = self.env['ir.config_parameter'].sudo().get_param('iap.partner_autocomplete.endpoint', self._DEFAULT_ENDPOINT)
        company_data = self.env['res.partner'].enrich_company(company_domain, False, self.vat, timeout=COMPANY_AC_TIMEOUT)
        self.env['res.partner']._iap_replace_logo(company_data)
            country = self.env['res.country'].search([['code', '=ilike', country_code]])
            country = self.env['res.country'].search([['name', '=ilike', country_name]])
                state = self.env['res.country.state'].search([
                state = self.env['res.country.state'].search([
        suggestions, _ = self.env['iap.autocomplete.api']._request_partner_autocomplete('search', {
        response, error = self.env['iap.autocomplete.api']._request_partner_autocomplete('enrich', {
        vies_vat_data, _ = self.env['iap.autocomplete.api']._request_partner_autocomplete('search_vat', {
        country = self.env['res.country'].search([('code', '=ilike', country_code)])
                europe = self.env["res.country.group"].search([('name', '=', 'Europe')], limit=1)
        already_synched = self.env['res.partner.autocomplete.sync'].search([('partner_id', '=', self.id), ('synched', '=', True)])
            self.env['res.partner.autocomplete.sync'].sudo().add_to_queue(self.id)
        company = self.env['res.company'].create({'name': "Test Company 1"})
        company_1 = self.env['res.company'].create({'name': "Test Company 1"})
                payment.suitable_payment_token_ids = self.env['payment.token'].sudo().search([
            codes = [key for key in dict(self.env['payment.acquirer']._fields['provider']._description_selection(self.env))]
        rg_data = self.env['account.payment'].read_group(
        codes = [key for key in dict(self.env['payment.acquirer']._fields['provider']._description_selection(self.env))]
        self.payment_token_id = self.env['payment.token'].sudo().search([
            refund_tx = self.env['account.payment'].search([
            transaction = self.env['payment.transaction'].create(transaction_vals)
            payment_method = self.env['account.payment.method.line'].search([
            payment_method_line = self.env['account.payment.method.line'].search([
                    existing_payment_method_line = self.env['account.payment.method.line'].search([
                        self.env['account.payment.method.line'].create({
                ir_field = self.env['ir.model.fields']._get(self._name, name)
        partner = self.env['res.partner'].browse(partner_id)
        compatible_acquirers = self.env['payment.acquirer'].search(domain)
        return self.env['res.lang'].get_installed()
        rg_data = self.env['payment.transaction'].read_group(
            acquirer = self.env['payment.acquirer'].browse(values['acquirer_id'])
            partner = self.env['res.partner'].browse(values['partner_id'])
            currency = self.env['res.currency'].browse(values.get('currency_id')).exists()
            refund_tx = self.env['payment.transaction'].search([
            invoices = self.env['account.move'].browse(invoice_ids).exists()
            model_name = self.env['ir.model'].sudo().browse(callback_model_id).model
            record = self.env[model_sudo.model].browse(res_id).exists()
        payment = self.env['account.payment'].create(payment_values)
        action = self.env['ir.actions.actions']._for_xml_id(
        self.currency = self.env['res.currency'].browse(self.env['res.currency'].search([], order='id desc', limit=1).id + 1000)
        self.currency = self.env['res.currency'].search([('active', '=', False)], limit=1)
        account = self.env['account.account'].search([('company_id', '=', self.env.company.id)], limit=1)
        invoice = self.env['account.move'].create({
                wizard.suitable_payment_token_ids = self.env['payment.token'].sudo().search([
            codes = [key for key in dict(self.env['payment.acquirer']._fields['provider']._description_selection(self.env))]
        codes = [key for key in dict(self.env['payment.acquirer']._fields['provider']._description_selection(self.env))]
                wizard.payment_token_id = self.env['payment.token'].sudo().search([
        installed_modules = self.env['ir.module.module'].sudo().search([
        module = self.env['ir.module.module'].sudo().search([('name', '=', module_name)])
        action = self.env["ir.actions.actions"]._for_xml_id("payment.action_payment_acquirer")
            pending_refunds_count = self.env['payment.transaction'].search_count([
        token = self.env['payment.token'].create({
        currency = self.env['res.currency'].browse(currency_id).exists()
            if self.env['payment.token'].search([('acquirer_id', '=', acquirer.id)], limit=1):
        currency = self.env['res.currency'].search([('name', 'in', res_content.get('currencies'))])
        currency = self.env['res.currency'].browse(currency_id).exists()
        currency = self.env['res.currency'].browse(currency_id).exists()
        currency = self.env['res.currency'].browse(currency_id).exists()
            mail_body = self.env['mail.render.mixin']._replace_local_links(render_template)
            self.env['mail.mail'].sudo().create(mail_values).send()
        currency = self.env['res.currency'].browse(currency_id).exists()
        currency = self.env['res.currency'].browse(currency_id).exists()
        currency = self.env['res.currency'].browse(currency_id).exists()
        return self.env['phone.blacklist'].browse(bl_entries.values()) | results
        records = self.env["phone.blacklist"].with_context(active_test=False).search([('number', 'in', numbers)])
        records = self.env["phone.blacklist"].with_context(active_test=False).search([('number', 'in', numbers)])
            record.kpi_pos_total_value = sum(self.env['pos.order'].search([
        return self.env['stock.warehouse'].search([('company_id', '=', self.env.company.id)], limit=1).id
        return self.env['stock.warehouse'].search([('company_id', '=', self.env.company.id)], limit=1).pos_type_id.id
        return self.env['account.journal'].search([('type', 'in', ('sale', 'general')), ('company_id', '=', self.env.company.id), ('code', '=', 'POSS')], limit=1)
        return self.env['account.journal'].search([('type', '=', 'sale'), ('company_id', '=', self.env.company.id)], limit=1)
        return self.env['pos.payment.method'].search([('split_transactions', '=', False), ('company_id', '=', self.env.company.id)])
        return self.env['product.pricelist'].search([('company_id', 'in', (False, self.env.company.id)), ('currency_id', '=', self.env.company.currency_id.id)], limit=1)
                config.allowed_pricelist_ids = self.env['product.pricelist'].search([]).ids
        account_accountant = self.env['ir.module.module'].sudo().search([('name', '=', 'account_accountant'), ('state', '=', 'installed')])
                config.selectable_categ_ids = self.env['pos.category'].search([])
                for key, val in self.env["account.cash.rounding"]._fields["stategy"]._description_selection(config.env):
            if self.env['pos.payment.method'].search_count([('id', 'in', config.payment_method_ids.ids), ('company_id', '!=', config.company_id.id)]):
            last_session = self.env['pos.session'].search([('config_id', '=', config.id)], limit=1)
        IrSequence = self.env['ir.sequence'].sudo()
            modules = self.env['ir.module.module'].sudo().search([('name', 'in', expected)])
                    field_groups = self.env['res.groups'].concat(*(self.env.ref(it) for it in field_group_xmlids))
        enforce_https = self.env['ir.config_parameter'].sudo().get_param('point_of_sale.enforce_https')
            self.env['pos.session'].create({
            companies = self.env['res.company'].search([])
            cash_journal = self.env['account.journal'].search([('company_id', '=', company.id), ('type', '=', 'cash')], limit=1)
            bank_journal = self.env['account.journal'].search([('company_id', '=', company.id), ('type', '=', 'bank')], limit=1)
            pos_journal = self.env['account.journal'].search([('company_id', '=', company.id), ('code', '=', 'POSS')])
                pos_journal = self.env['account.journal'].create({
            invoice_journal_id = pos_config.invoice_journal_id or self.env['account.journal'].search([('type', '=', 'sale'), ('company_id', '=', company.id)], limit=1)
        products = self.env['product.product'].search_read([('id', 'in', product_ids)], fields=fields)
        process_line = partial(self.env['pos.order.line']._order_line_fields, session_id=ui_order['pos_session_id'])
            'company_id': self.env['pos.session'].browse(ui_order['pos_session_id']).company_id.id,
        pos_session = self.env['pos.session'].browse(order['pos_session_id'])
        order_bank_statement_lines= self.env['pos.payment'].search([('pos_order_id', '=', order.id)])
        digits = self.env['decimal.precision'].precision_get('Product Unit of Measure')
            order.currency_rate = self.env['res.currency']._get_conversion_rate(order.company_id.currency_id, order.currency_id, order.company_id, order.date_order)
        for order in self.env['pos.payment'].read_group([('pos_order_id', 'in', self.ids)], ['pos_order_id', 'amount'], ['pos_order_id']):
        for order in self.env['pos.payment'].read_group(['&', ('pos_order_id', 'in', self.ids), ('amount', '<', 0)], ['pos_order_id', 'amount'], ['pos_order_id']):
        for order in self.env['pos.order.line'].read_group([('order_id', 'in', self.ids)], ['order_id', 'price_subtotal', 'price_subtotal_incl'], ['order_id']):
        session = self.env['pos.session'].browse(values['session_id'])
        action = self.env['ir.actions.act_window']._for_xml_id('stock.action_picking_tree_ready')
        new_move = self.env['account.move'].sudo().with_company(self.company_id).with_context(default_move_type=move_vals['move_type']).create(move_vals)
                    self.env['account.move.line'].with_context(check_move_validity=False).create({
        receivable_account = self.env["res.partner"]._find_accounting_partner(self.partner_id).property_account_receivable_id
                existing_order = self.env['pos.order'].search(['|', ('id', '=', order['data']['server_id']), ('pos_reference', '=', order['data']['name'])], limit=1)
        return self.env['pos.order'].search_read(domain = [('id', 'in', order_ids)], fields = ['id', 'pos_reference'])
                    destination_id = self.env['stock.warehouse']._get_partner_locations()[0].id
                pickings = self.env['stock.picking']._create_picking_from_pos_order_lines(destination_id, self.lines, picking_type, self.partner_id)
        self.env['pos.payment'].create(data)
        receipt = self.env['ir.attachment'].create({
            invoice = self.env['ir.attachment'].create({
        mail = self.env['mail.mail'].sudo().create(mail_values)
            session = self.env['pos.session'].browse(session_id).exists() if session_id else None
                line[2]['name'] = self.env['ir.sequence'].next_by_code('pos.order.line')
            product = self.env['product.product'].browse(line[2]['product_id'])
            line[0], line[1], {k: v for k, v in line[2].items() if k in self.env['pos.order.line']._fields}
            config = self.env['pos.order'].browse(values['order_id']).session_id.config_id
            values['name'] = self.env['ir.sequence'].next_by_code('pos.order.line')
            self.price_unit = self.env['account.tax']._fix_tax_included_price_company(price, self.tax_ids, tax_ids_after_fiscal_position, self.company_id)
                group_id = self.env['procurement.group'].create(line._prepare_procurement_group_vals())
            procurements.append(self.env['procurement.group'].Procurement(
            self.env['procurement.group'].run(procurements)
        orders = self.env['pos.order'].search(domain)
        payment_ids = self.env["pos.payment"].search([('pos_order_id', 'in', orders.ids)]).ids
        configs = self.env['pos.config'].browse(data['config_ids'])
        open_session = self.env['pos.session'].search([('config_id.rounding_method', 'in', self.ids), ('state', '!=', 'closed')], limit=1)
            payment_method.open_session_ids = self.env['pos.session'].search([('config_id', 'in', payment_method.config_ids.ids), ('state', '!=', 'closed')])
                result = self.env['pos.payment'].read_group([('session_id', '=', session.id), ('payment_method_id', '=', cash_payment_method.id)], ['amount'], ['session_id'])
        result = self.env['pos.payment'].read_group([('session_id', 'in', self.ids)], ['amount'], ['session_id'])
        orders_data = self.env['pos.order'].read_group([('session_id', 'in', self.ids)], ['session_id'], ['session_id'])
            session.picking_count = self.env['stock.picking'].search_count([('pos_session_id', '=', session.id)])
            session.failed_pickings = bool(self.env['stock.picking'].search([('pos_session_id', '=', session.id), ('state', '!=', 'done')], limit=1))
        action = self.env['ir.actions.act_window']._for_xml_id('stock.action_picking_tree_ready')
        pos_config = self.env['pos.config'].browse(config_id)
        pos_name = self.env['ir.sequence'].with_context(ctx).next_by_code('pos.session')
                last_sessions = self.env['pos.session'].search([('config_id', '=', self.config_id.id)]).ids
                self.cash_register_id.balance_start = self.env['pos.session'].browse(last_sessions[1]).cash_register_id.balance_end_real if len(last_sessions) > 1 else 0
                self.env['pos.order'].search([('session_id', '=', self.id), ('state', '=', 'paid')]).write({'state': 'done'})
        wizard = self.env['pos.close.session.wizard'].create({
        diff_move = self.env['account.move'].create({
        payment_method = self.env['pos.payment.method'].browse(payment_method_id)
            for payment_method in self.env['pos.payment.method'].browse(bank_payment_method_diffs.keys()):
            session_destination_id = self.env['stock.warehouse']._get_partner_locations()[0].id
            pickings = self.env['stock.picking']._create_picking_from_pos_order_lines(location_dest_id, lines, picking_type)
        propoerty_account = self.env['ir.property']._get('property_account_receivable_id', 'res.partner')
        account_move = self.env['account.move'].with_context(default_journal_id=journal.id).create({
        combine_inv_payment_receivable_lines = defaultdict(lambda: self.env['account.move.line'])
        split_inv_payment_receivable_lines = defaultdict(lambda: self.env['account.move.line'])
                    stock_moves = self.env['stock.move'].sudo().search([
                stock_moves = self.env['stock.move'].sudo().search([
        MoveLine = self.env['account.move.line'].with_context(check_move_validity=False)
        account_payment = self.env['account.payment'].create({
        account_payment = self.env['account.payment'].create({
                lines = combine_inv_payment_receivable_lines[payment_method] | combine_invoice_receivable_lines.get(payment_method, self.env['account.move.line'])
                lines = split_inv_payment_receivable_lines[payment] | split_invoice_receivable_lines.get(payment, self.env['account.move.line'])
        stock_moves = self.env['stock.move'].search([('picking_id', 'in', pickings.ids)])
        stock_account_move_lines = self.env['account.move'].search([('stock_move_id', 'in', stock_moves.ids)]).mapped('line_ids')
            tax_rep = self.env['account.tax.repartition.line'].browse(tax['tax_repartition_line_id'])
        accounting_partner = self.env["res.partner"]._find_accounting_partner(payment.partner_id)
        applied_taxes = self.env['account.tax'].browse(tax_ids)
        tax = self.env['account.tax'].browse(tax_id)
        accounting_partner = self.env["res.partner"]._find_accounting_partner(payment.partner_id)
        return self.env['account.move.line'].search([('ref', 'in', diff_lines_ref)]).mapped('move_id')
            self.env['mail.message'].create({
            if self.env['mail.activity'].search_count([('res_id', '=', session.id), ('res_model', '=', 'pos.session')]) == 0:
        self.env['cash.box.out']\
        self.env['pos.session']._alert_old_session()
            if self.env['pos.session'].sudo().search_count([('state', '!=', 'closed')]):
        if self.env['pos.session'].sudo().search_count([('state', '!=', 'closed')]):
        config = self.env['pos.config'].browse(pos_config_id)
            for w in self.env['stock.warehouse'].search([])]
        pos_order_data = self.env['pos.order'].read_group(
        running_sessions = self.env['pos.session'].sudo().search([('state', '!=', 'closed')])
            positive_picking = self.env['stock.picking'].create(
            negative_picking = self.env['stock.picking'].create(
            order_lines = self.env['pos.order.line'].concat(*lines)
            current_move = self.env['stock.move'].create(
                                    existing_lot = self.env['stock.production.lot'].search([
                                        existing_lot = self.env['stock.production.lot'].create({
                                self.env['stock.move.line'].create(ml_vals)
                                        self.env['stock.move.line'].create(ml_vals)
                                    self.env['stock.move.line'].create(ml_vals)
                            self.env['stock.move.line'].create(ml_vals)
                        self.env['stock.move.line'].create(ml_vals)
        warehouses = self.env['stock.warehouse'].search([('pos_type_id', '=', False)])
            result[params['uid']] = self.env['pos.order'].browse([order['id'] for order in self.env['pos.order'].create_from_ui([order_data])])
        self.warehouse = self.env['stock.warehouse'].search([('company_id', '=', self.env.company.id)], limit=1)
        self.partner = self.env['res.partner'].create({'name': 'Partner 1'})
        self.account = self.env['account.account'].create({'name': 'Receivable', 'code': 'RCV00' , 'user_type_id': account_type_rcv.id, 'reconcile': True})
        account_expense = self.env['account.account'].create({'name': 'Expense', 'code': 'EXP00' , 'user_type_id': account_type_exp.id, 'reconcile': True})
        account_income = self.env['account.account'].create({'name': 'Income', 'code': 'INC00' , 'user_type_id': account_type_inc.id, 'reconcile': True})
        account_output = self.env['account.account'].create({'name': 'Output', 'code': 'OUT00' , 'user_type_id': account_type_exp.id, 'reconcile': True})
        account_valuation = self.env['account.account'].create({'name': 'Valuation', 'code': 'STV00', 'user_type_id': account_type_exp.id, 'reconcile': True})
        self.category.property_stock_journal = self.env['account.journal'].create({'name': 'Stock journal', 'type': 'sale', 'code': 'STK00'})
        self.product = self.env['product.product'].create({
        sale_journal = self.env['account.journal'].create({'name': 'POS journal', 'type': 'sale', 'code': 'POS00'})
        self.cash_journal = self.env['account.journal'].create({'name': 'CASH journal', 'type': 'cash', 'code': 'CSH00'})
        self.sale_journal = self.env['account.journal'].create({'name': 'SALE journal', 'type': 'sale', 'code': 'INV00'})
        self.cash_payment_method = self.env['pos.payment.method'].create({
        self.env['stock.quant'].with_context(inventory_mode=True).create({
        self.env['stock.quant'].with_context(inventory_mode=True).create({
        self.env["product.pricelist"].search([]).write({"active": False})
        self.company1 = self.env["res.company"].create({
        self.company2 = self.env["res.company"].create({
        self.company2_pricelist = self.env["product.pricelist"].create({
        company1_pricelist = self.env["product.pricelist"].create({
        new_config = self.env["pos.config"].create({
        universal_pricelist = self.env["product.pricelist"].create({
        new_config = self.env["pos.config"].create({
        self.product2 = self.env['product.product'].create({
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        self.env['stock.quant'].with_context(inventory_mode=True).create({
        self.env['stock.quant'].with_context(inventory_mode=True).create({
        tracked_product, untracked_product = self.env['product.product'].create([{
        shelf1_location = self.env['stock.location'].create({
        lot = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(tracked_product, shelf1_location, qty, lot_id=lot)
        self.env['stock.quant']._update_available_quantity(untracked_product, shelf1_location, qty)
        invoice = self.env['account.move'].browse(res['res_id'])
        journal = self.env['account.journal'].create({
        self.env['res.currency.rate'].search([]).unlink()
        self.env['res.currency.rate'].create({
        sale_journal = self.env['account.journal'].create({
        invoice = self.env['account.move'].browse(res['res_id'])
        dummy_50_perc_tax = self.env['account.tax'].create({
        product5 = self.env['product.product'].create({
        wizard = self.env['pos.close.session.wizard'].browse(action['res_id'])
        self.stock_location = self.env['stock.warehouse'].create({
        self.env['pos.order'].create_from_ui(orders)
        self.env['pos.order'].create_from_ui(orders)
        self.env['pos.order'].create_from_ui(orders)
        self.env['pos.order'].create_from_ui(orders)
        self.env['pos.order'].create_from_ui(orders)
        self.env['pos.order'].create_from_ui(orders)
        self.env['pos.order'].create_from_ui(orders)
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        self.env['pos.order'].create_from_ui(orders)
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        self.env['pos.order'].create_from_ui(orders)
        self.env['stock.quant'].with_context(inventory_mode=True).create({
        order = self.env['pos.order'].create_from_ui(orders)
            bank_statements = [session.cash_register_id for session in self.env[active_model].browse(active_ids) if session.cash_register_id]
            values['ref'] = self.env[active_model].browse(active_ids)[0].name
        session = self.env["pos.session"].browse(self.env.context["active_ids"])
        config_ids = self.env['pos.config'].search([]).ids
        journals = self.env['account.journal'].search([('journal_user', '=', True)])
            return self.env['pos.order'].browse(active_id).session_id.config_id
            order = self.env['pos.order'].browse(active_id)
            order_id = self.env['pos.order'].browse(active_id)
        order = self.env['pos.order'].browse(self.env.context.get('active_id', False))
        secret = self.env["ir.config_parameter"].sudo().get_param("database.secret")
            user = self.env['res.users'].sudo().browse(access_uid)
        action = self.env["ir.actions.actions"]._for_xml_id("portal.portal_share_action")
        self.partner = self.env['res.partner'].create({
        portal_wizard = self.env['portal.wizard'].with_context(active_ids=[self.partner.id]).create({})
            self.env['portal.wizard'].with_context(active_ids=[self.partner.id]).with_user(self.user_employee).create({})
        portal_wizard = self.env['portal.wizard'].with_context(active_ids=[self.partner.id]).create({})
        portal_wizard = self.env['portal.wizard'].with_context(active_ids=[public_partner.id]).create({})
        portal_wizard = self.env['portal.wizard'].with_context(active_ids=[internal_partner.id]).create({})
        portal_wizard = self.env['portal.wizard'].with_context(active_ids=[self.portal_user.partner_id.id]).create({})
        portal_wizard = self.env['portal.wizard'].with_context(active_ids=[self.internal_user.partner_id.id]).create({})
        company_1 = self.env['res.company'].search([], limit=1)
        company_2 = self.env['res.company'].create({'name': 'Company 2'})
        partner_company_2 = self.env['res.partner'].with_company(company_2).create({
        portal_wizard = self.env['portal.wizard'].with_context(active_ids=[partner_company_2.id]).create({})
            record = self.env[result['res_model']].browse(result['res_id'])
        return [(model.model, model.name) for model in self.env['ir.model'].sudo().search([])]
        signup_enabled = self.env['ir.config_parameter'].sudo().get_param('auth_signup.invitation_scope') == 'b2c'
        for partner in self.env['res.partner'].sudo().browse(partner_ids):
        return self.env['res.users'].with_context(no_reset_password=True)._create_user_from_template({
        user = self.env['res.users'].sudo().with_context(active_test=False).search([
        self.env['pos.cache'].search([]).refresh_cache()
            Product = self.env['product.product'].with_user(cache.compute_user_id.id)
        limit = self.env['ir.config_parameter'].sudo().get_param('pos_cache.limit_products_per_request', 0)
        configs = self.env['pos.config'].search([])
                            gift_card = self.env["gift.card"].search(
            gift_card = self.env['ir.attachment'].create({
        configs_with_employees = self.env['pos.config'].search([('module_pos_hr', '=', 'True')]).filtered(lambda c: c.current_session_id)
        pos_session = self.env['pos.session'].search([('state', '=', 'opened'), ('user_id', '=', self.env.uid)], limit=1)
        if self.env['ir.config_parameter'].sudo().get_param('pos_mercury.enable_test_env'):
        for order in self.env['pos.order'].search([('create_date', '<', expired_creation_date)]):
        printer = self.env['restaurant.printer'].create({
        drinks_category = self.env['pos.category'].create({'name': 'Drinks'})
        pos_config = self.env['pos.config'].create({
        main_floor = self.env['restaurant.floor'].create({
        table_05 = self.env['restaurant.table'].create({
        table_04 = self.env['restaurant.table'].create({
        table_02 = self.env['restaurant.table'].create({
        second_floor = self.env['restaurant.floor'].create({
        table_01 = self.env['restaurant.table'].create({
        table_03 = self.env['restaurant.table'].create({
        self.env['ir.property']._set_default(
        test_sale_journal = self.env['account.journal'].create({
        cash_journal = self.env['account.journal'].create({
        coke = self.env['product.product'].create({
        water = self.env['product.product'].create({
        minute_maid = self.env['product.product'].create({
        pricelist = self.env['product.pricelist'].create({'name': 'Restaurant Pricelist'})
        self.assertEqual(1, self.env['pos.order'].search_count([('amount_total', '=', 4.4), ('state', '=', 'draft')]))
        self.assertEqual(1, self.env['pos.order'].search_count([('amount_total', '=', 4.4), ('state', '=', 'paid')]))
        self.assertEqual(0, self.env['pos.order'].search_count([('amount_total', '=', 4.4), ('state', '=', 'draft')]))
        self.assertEqual(1, self.env['pos.order'].search_count([('amount_total', '=', 2.2), ('state', '=', 'draft')]))
        self.assertEqual(2, self.env['pos.order'].search_count([('amount_total', '=', 4.4), ('state', '=', 'paid')]))
        order1 = self.env['pos.order'].search([('pos_reference', 'ilike', '%-0001')])
        order2 = self.env['pos.order'].search([('pos_reference', 'ilike', '%-0002')])
        order3 = self.env['pos.order'].search([('pos_reference', 'ilike', '%-0003')])
        order4 = self.env['pos.order'].search([('pos_reference', 'ilike', '%-0004')])
            self.crm_team_id = self.env['crm.team'].search(['|', ('company_id', '=', self.company_id.id), ('company_id', '=', False)], limit=1)
        dangerous_uom = self.env['uom.uom'].search([('rounding', '<', rounding)])
        read_group_res = self.env['product.template'].read_group([('categ_id', 'child_of', self.ids)], ['categ_id'], ['categ_id'])
                pricelist_name_search = self.env['product.pricelist'].name_search(pricelist_id_or_name, operator='=', limit=1)
                    pricelist = self.env['product.pricelist'].browse([pricelist_name_search[0][0]])
                pricelist = self.env['product.pricelist'].browse(pricelist_id_or_name)
                value = self.env['uom.uom'].browse(self._context['uom'])._compute_price(product.price, product.uom_id)
                value = self.env['uom.uom'].browse(self._context['uom'])._compute_price(product.lst_price, product.uom_id)
            to_uom = self.env['uom.uom'].browse(self._context['uom'])
            product.pricelist_item_count = self.env['product.pricelist.item'].search_count(domain)
        if self.env['product.product'].search(domain, limit=1):
            partner_ids = [partner_id, self.env['res.partner'].browse(partner_id).commercial_partner_id.id]
            supplier_info = self.env['product.supplierinfo'].sudo().search([
                suppliers_ids = self.env['product.supplierinfo']._search([
                category=self.env['product.category'].browse(self.env.context['categ_id']).name,
        action = self.env['ir.actions.act_window']._for_xml_id('product.action_open_label_layout')
        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
            uom = self.env['uom.uom'].browse(self._context['uom'])
            currency = self.env['res.currency'].browse(self._context['currency'])
            self.env['product.template'].invalidate_cache(fnames=['attribute_line_ids'])
        self.env['product.pricelist.item'].flush(['price', 'currency_id', 'company_id'])
        return self.env['product.pricelist.item'].browse(item_ids)
                    qty_in_product_uom = self.env['uom.uom'].browse([self._context['uom']])._compute_quantity(qty, product.uom_id)
            price_uom = self.env['uom.uom'].browse([qty_uom_id])
        product = self.env['product.product'].browse([prod_id])
        Partner = self.env['res.partner'].with_context(active_test=False)
        Property = self.env['ir.property'].with_company(company_id)
        linked_items = self.env['product.pricelist.item'].sudo().with_context(active_test=False).search([
        return self.env['product.pricelist'].search([
                decimal_places = self.env['decimal.precision'].precision_get('Product Price')
        main_company = self.env['res.company']._get_main_company()
                pricelist_data = self.env['product.pricelist'].name_search(pricelist_id_or_name, operator='=', limit=1)
                    pricelist = self.env['product.pricelist'].browse(pricelist_data[0][0])
                pricelist = self.env['product.pricelist'].browse(pricelist_id_or_name)
                value = self.env['uom.uom'].browse(self._context['uom'])._compute_price(template.price, template.uom_id)
        products = self.env['product.product'].search([('standard_price', operator, value)], limit=None)
        product_weight_in_lbs_param = self.env['ir.config_parameter'].sudo().get_param('product.weight_in_lbs')
        product_length_in_feet_param = self.env['ir.config_parameter'].sudo().get_param('product.volume_in_cubic_feet')
        product_length_in_feet_param = self.env['ir.config_parameter'].sudo().get_param('product.volume_in_cubic_feet')
        if self.env['product.template'].search(domain, limit=1):
            uom_id = self.env['uom.uom'].browse(vals.get('uom_id')) or self.uom_id
            uom_po_id = self.env['uom.uom'].browse(vals.get('uom_po_id')) or self.uom_po_id
            self.env['product.product'].invalidate_cache(fnames=[
        action = self.env['ir.actions.act_window']._for_xml_id('product.action_open_label_layout')
            uom = self.env['uom.uom'].browse(self._context['uom'])
            currency = self.env['res.currency'].browse(self._context['currency'])
                    combination = self.env['product.template.attribute.value'].concat(*combination_tuple)
        return self.env['product.product'].browse(self._get_variant_id_for_combination(filtered_combination))
        return self.env['product.product'].sudo().with_context(active_test=False).search(domain, order='active DESC', limit=1).id
        return next(self._get_possible_combinations(parent_combination, necessary_values), self.env['product.template.attribute.value'])
        all_exclusions = {self.env['product.template.attribute.value'].browse(k):
                          self.env['product.template.attribute.value'].browse(v) for k, v in
            current_exclusions[self.env['product.template.attribute.value'].browse(exclusion)] += 1
        return next(self._get_closest_possible_combinations(combination), self.env['product.template.attribute.value'])
            self.env['ir.property']._set_default(
                    params = {'currency': self.env['res.currency'].browse(currency_id).name}
                    self.env['ir.property']._set_default(
        res = self.env['product.pricelist']._get_partner_pricelist_multi(self.ids, company_id=company)
            pls = self.env['product.pricelist'].search(
            actual = self.env['ir.property']._get('property_product_pricelist', 'res.partner', 'res.partner,%s' % partner.id)
                self.env['ir.property']._set_multi(
        parent_childs = collections.defaultdict(lambda: self.env['product.category'])
        product_templates_ids = self.env['product.product'].browse(self.env.registry.populated_models['product.product']).product_tmpl_id.ids
            partner = self.env['res.partner'].browse(values['name'])
        self.env['res.config.settings'].create({
            ("currency_id", populate.randomize(self.env["res.currency"].search([("active", "=", True)]).ids)),
        self.env['res.config.settings'].create({
            product_variants = self.env['product.product'].browse(product_variants_ids)
        attributes = self.env["product.attribute"].browse(attribute_ids)
                attr = self.env["product.attribute"].browse(attr_id)
        ] + self.env['product.product']._populate_get_product_factories()
        configurable_templates = self.env["product.template"].search([
            attr_val = self.env['product.template.attribute.value'].browse(values['product_template_attribute_value_id']).attribute_line_id
        pricelist = self.env['product.pricelist'].browse(pricelist_id).exists()
            pricelist = self.env['product.pricelist'].search([], limit=1)
        self.datacard = self.env['product.product'].create({'name': 'Office Lamp'})
        self.usb_adapter = self.env['product.product'].create({'name': 'Office Chair'})
        self.sale_pricelist_id = self.env['product.pricelist'].create({
        spam_id = self.env['product.product'].create({
        self.env['product.pricelist.item'].create({
        self.res_partner_4 = self.env['res.partner'].create({'name': 'Ready Mat'})
        self.res_partner_1 = self.env['res.partner'].create({'name': 'Wood Corner'})
        self.category_5_id = self.env['product.category'].create({
        self.computer_SC234 = self.env['product.product'].create({
        self.ipad_retina_display = self.env['product.product'].create({
        self.custom_computer_kit = self.env['product.product'].create({
        self.ipad_mini = self.env['product.product'].create({
        self.monitor = self.env['product.product'].create({
        self.env['product.supplierinfo'].create([
        self.apple_in_ear_headphones = self.env['product.product'].create({
        self.laptop_E5023 = self.env['product.product'].create({
        self.laptop_S3450 = self.env['product.product'].create({
        self.product_service = self.env['product.product'].create({
        self.product_consu = self.env['product.product'].create({
        self.asustec = self.env['res.partner'].create({'name': 'Wood Corner'})
        self.camptocamp = self.env['res.partner'].create({'name': 'Azure Interior'})
        company_b = self.env['res.company'].create({
        self.size_attr = self.env['product.attribute'].create({'name': 'Size'})
        self.size_attr_value_s = self.env['product.attribute.value'].create({'name': 'S', 'attribute_id': self.size_attr.id})
        self.size_attr_value_m = self.env['product.attribute.value'].create({'name': 'M', 'attribute_id': self.size_attr.id})
        self.size_attr_value_l = self.env['product.attribute.value'].create({'name': 'L', 'attribute_id': self.size_attr.id})
        self.product_shirt_template = self.env['product.template'].create({
        search_not_to_be_found = self.env['product.template'].search(
        search_attribute = self.env['product.template'].search(
        search_value = self.env['product.template'].search(
        self.product_slip_template = self.env['product.template'].create({
        res = self.env['product.product'].name_search('Shirt', [], 'not ilike', None)
        self.size_attr = self.env['product.attribute'].create({'name': 'Size'})
        self.size_attr_value_s = self.env['product.attribute.value'].create({'name': 'S', 'attribute_id': self.size_attr.id})
        self.size_attr_value_m = self.env['product.attribute.value'].create({'name': 'M', 'attribute_id': self.size_attr.id})
        self.size_attr_value_l = self.env['product.attribute.value'].create({'name': 'L', 'attribute_id': self.size_attr.id})
        test_template = self.env['product.template'].create({
        test_template = self.env['product.template'].create({
        test_template = self.env['product.template'].create({
            products = self.env['product.product'].search([
        test_template = self.env['product.template'].create({
                products = self.env['product.product'].search([
        test_template = self.env['product.template'].create({
        template = self.env['product.template'].create({
        company_b = self.env['res.company'].create({'name': 'CB', 'currency_id': self.env.ref('base.VEF').id})
        template = self.env['product.template'].create({
        template = self.env['product.template'].create({
        self.size = self.env['product.attribute'].create({
        template = self.env['product.template'].create({
        template = self.env['product.template'].create({
        template = self.env['product.template'].create({
        template = self.env['product.template'].create({
        template = self.env['product.template'].create({
        template = self.env['product.template'].create({
        template = self.env['product.template'].create({
        template = self.env['product.template'].create({
        template = self.env['product.template'].create({
        toto = self.env['product.template'].create({
        toto = self.env['product.template'].create({
            self.env['product.template'].create({
        toto = self.env['product.template'].create({
        toto = self.env['product.template'].create({
        toto = self.env['product.template'].create({
        toto = self.env['product.template'].create({
        product_attribute = self.env['product.attribute'].create({'name': 'Color'})
        self.template = self.env['product.template'].create({
        color_values = self.env['product.attribute.value'].create([{
        ptal = self.env['product.template.attribute.line'].create({
        self.pa_color = self.env['product.attribute'].create({'name': "color", 'sequence': 1})
        color_values = self.env['product.attribute.value'].create([{
        self.pa_size = self.env['product.attribute'].create({'name': "size", 'sequence': 2})
        size_values = self.env['product.attribute.value'].create([{
        self.template = self.env['product.template'].create({
        dynamic_attr = self.env['product.attribute'].create({
        template = self.env['product.template'].create({
        name_searched = self.env['product.template'].name_search(name='cima')
        template = self.env['product.template'].create({
        template = self.env['product.template'].create({
        ptav_white = self.env['product.template.attribute.value'].search([
        return self.env['product.product'].with_context(active_test=False).search([
            'model_id': self.env['ir.model']._get_id('product.template')
        self.customer = self.env['res.partner'].create({
        id_max = self.env['mail.message'].search([], order='id desc', limit=1)
        invoice = self.env['account.move'].create({
        message_sent = self.env['mail.message'].search([('id', '>', id_max), ('subject', '=', 'YOUR PRODUCT')])
        id_max = self.env['mail.message'].search([], order='id desc', limit=1)
        invoice = self.env['account.move'].create({
        pub_user = self.env['res.users'].create({
        message_sent = self.env['mail.message'].search([('id', '>', id_max), ('subject', '=', 'YOUR PRODUCT')])
        product = self.env['product.product'].browse(product_id) or self.product_id
        alert_lots = self.env['stock.production.lot'].search([
        lot_stock_quants = self.env['stock.quant'].search([
        self.env['stock.production.lot']._alert_date_exceeded()
        self.env['stock.production.lot']._alert_date_exceeded()
        activity_count = self.env['mail.activity'].search_count([
        self.env['stock.production.lot']._alert_date_exceeded()
        activity_count = self.env['mail.activity'].search_count([
        mail_activity = self.env['mail.activity'].search([
        activity_count = self.env['mail.activity'].search_count([
        self.env['stock.production.lot']._alert_date_exceeded()
        activity_count = self.env['mail.activity'].search_count([
        self.env['stock.production.lot']._alert_date_exceeded()
        activity_count = self.env['mail.activity'].search_count([
        self.env['stock.production.lot']._alert_date_exceeded()
        activity_count = self.env['mail.activity'].search_count([
        partner = self.env['res.partner'].create({
        picking_form = Form(self.env['stock.picking'])
        apple_lot = self.env['stock.production.lot'].search(
        partner = self.env['res.partner'].create({
        picking_form = Form(self.env['stock.picking'])
        apple_lot = self.env['stock.production.lot'].search(
        partner = self.env['res.partner'].create({
        picking_form = Form(self.env['stock.picking'])
        picking_form = Form(self.env['stock.picking'])
        picking_form = Form(self.env['stock.picking'])
            picking_to_validate = self.env['stock.picking'].browse(picking_to_validate)
        pickings_to_validate = self.env['stock.picking'].browse(self.env.context.get('button_validate_picking_ids'))
        cron_triggers_count = self.env['ir.cron.trigger'].search_count(
        cron_triggers_count = self.env['ir.cron.trigger'].search_count(
            product_ids = self.env['product.template'].browse(
            product_ids = self.env['product.product'].browse(
            cron_triggers_count = self.env['ir.cron.trigger'].search_count(
        products_to_process = self.products_to_process or self.env['product.product'].search(
        self.env['account.move.line'].flush(['price_unit', 'quantity', 'balance', 'product_id', 'display_type'])
        self.env['account.move'].flush(['state', 'payment_state', 'move_type', 'invoice_date', 'company_id'])
        self.env['product.template'].flush(['list_price'])
                """.format(self.env['res.currency']._select_companies_rates())
        project_data = self.env['project.project'].read_group([('analytic_account_id', 'in', self.ids)], ['analytic_account_id'], ['analytic_account_id'])
        projects = self.env['project.project'].search([('analytic_account_id', 'in', self.ids)])
        has_tasks = self.env['project.task'].search_count([('project_id', 'in', projects.ids)])
            record.kpi_project_task_opened_value = self.env['project.task'].search_count([
            self.env['project.task'].search([('stage_id', 'in', self.ids)]).write({'active': False})
        task_data = self.env['project.task'].read_group(
        action = self.env['ir.actions.act_window']._for_xml_id('base.action_attachment')
        return self.env['project.project.stage'].search([], limit=1)
        favorite_projects = not_fav_projects = self.env['project.project'].sudo()
        return self.env['project.project.stage'].search([], order=order)
        read_group = self.env['project.milestone'].read_group([('project_id', 'in', self.ids)], ['project_id'], ['project_id'])
        collaborator_read_group = self.env['project.collaborator'].read_group(
        task_ids = self.env['project.task'].with_context(active_test=False).search([('project_id', '=', self.id)], order='parent_id').ids
        for task in self.env['project.task'].browse(task_ids):
            self.env['project.task'].search([('project_id', 'in', self.ids), ('recurring_task', '=', True)]).write({'recurring_task': False})
            projects_read_group = self.env['project.project'].read_group(
            analytic_account_to_update = self.env['account.analytic.account'].browse([
        wizard = self.env['project.delete.wizard'].create({
        project_subtypes = self.env['mail.message.subtype'].browse(subtype_ids) if subtype_ids else None
        values['alias_model_id'] = self.env['ir.model']._get('project.task').id
                'subtype_id': self.env['ir.model.data']._xmlid_to_res_id('mail.mt_note'),
        favorite_projects = not_fav_projects = self.env['project.project'].sudo()
        action = self.env['ir.actions.act_window']._for_xml_id('project.rating_rating_action_view_project_rating')
        action = self.env['ir.actions.act_window']._for_xml_id('project.action_project_task_user_tree')
        action = self.env['ir.actions.act_window']._for_xml_id(
        tasks = self.env['project.task'].search([('display_project_id', '=', self.id)])
        analytic_account = self.env['account.analytic.account'].create({
            analytic_account = self.env['account.analytic.account'].create({
        user_group_id = self.env['ir.model.data']._xmlid_to_res_id('base.group_user')
            return self.env['project.project'].browse(self._context['default_project_id']).company_id
        personal_stages = self.env['project.task.stage.personal'].search([('user_id', '=', self.env.uid), ('task_id', 'in', self.ids)])
        personal_stages_without_stage = self.env['project.task.stage.personal'].sudo().search([('task_id', 'in', self.ids), ('stage_id', '=', False)])
            personal_stage_by_user = defaultdict(lambda: self.env['project.task.stage.personal'])
                stage = self.env['project.task.type'].sudo().search([('user_id', '=', user_id.id)], limit=1)
                    stages = self.env['project.task.type'].sudo().with_context(lang=user_id.partner_id.lang, default_project_id=False).create(
            recurring_dates = self.env['project.task.recurrence']._get_next_recurring_dates(
            date_format = self.env['res.lang']._lang_get(self.env.user.lang).date_format
        count = self.env['project.task'].read_group([('recurrence_id', 'in', recurring_tasks.recurrence_id.ids)], ['id'], 'recurrence_id')
            group_dependent = self.env['project.task'].read_group([
            attachment_ids = self.env['ir.attachment'].search([('res_id', '=', task.id), ('res_model', '=', 'project.task')]).ids
            name = self.env['project.project'].browse(project_id).label_tasks
        return self.env['project.task.type'].search(search_domain, order=order, limit=1).id
                    project_id and self.env['project.project'].browse(project_id),
                    parent_id and self.env['project.task'].browse(parent_id)
                vals["company_id"] = self.env["project.project"].browse(
                recurrence = self.env['project.task.recurrence'].create(rec_values)
                    recurrence = self.env['project.task.recurrence'].create(rec_values)
            tasks |= self.env['project.task'].search(recurrence_domain)
        project_task_type = self.env['project.task.type'].browse(stage_id)
            parent_ids = self.env['project.task'].search([('depend_on_ids', 'in', self.ids)])
                fields_to_ids = self.env['ir.model.fields']._get_ids('project.task')
                body = self.env['ir.qweb']._render('project.task_track_depending_tasks', {
                'subtype_id': self.env['ir.model.data']._xmlid_to_res_id('mail.mt_note'),
        partner_ids = [p.id for p in self.env['mail.thread']._mail_find_partner_from_emails(email_list, records=task, force_create=False) if p]
        partner_ids = [p.id for p in self.env['mail.thread']._mail_find_partner_from_emails(email_list, records=self, force_create=False) if p]
        tasks = self.env['project.task'].with_context(active_test=False).search([('recurrence_id', 'in', self.recurrence_id.ids)])
        collaborator = self.env['project.collaborator'].search([], limit=1)
        collaborator = self.env['project.collaborator'].search([], limit=1)
                new_child = self.env['project.task'].sudo().create(child_values)
        children_tasks = self.env['project.task'].sudo().create(children)
            new_task = self.env['project.task'].sudo().create(create_values)
            project = self.env['project.project'].browse(result['project_id'])
        milestones = self.env['project.milestone'].search([('id', 'in', list(mapped_result.keys()))])
        projects = self.env["project.project"].search([])
        task_data = self.env['project.task'].read_group(
            created_users += self.env['res.users'].with_context(no_reset_password=True)._create_user_from_template({
        parent_childs = collections.defaultdict(lambda: self.env['project.task'])
        return self.env['project.task'].with_user(with_user or self.env.user).create(values)
        self.user_noone = self.env['res.users'].with_context({'no_reset_password': True, 'mail_create_nosubscribe': True}).create({
        self.task_3 = self.env['project.task'].with_context({'mail_create_nolog': True}).create({
        self.task_4 = self.env['project.task'].with_context({'mail_create_nolog': True}).create({
        self.task_5 = self.env['project.task'].with_context({'mail_create_nolog': True}).create({
        self.task_6 = self.env['project.task'].with_context({'mail_create_nolog': True}).create({
        tasks = self.env['project.task'].with_user(self.user_projectuser).search([('project_id', '=', pigs.id)])
        tmp_task = self.env['project.task'].with_user(self.user_projectuser).with_context({'mail_create_nolog': True}).create({
        tasks = self.env['project.task'].with_user(self.user_projectuser).search([('project_id', '=', pigs.id)])
        self.env['project.task'].with_user(self.user_projectuser).with_context({'mail_create_nolog': True}).create({
        self.assertRaises(AccessError, self.env['project.task'].with_user(self.user_projectuser).with_context({
        self.assertRaises(AccessError, self.env['project.task'].with_user(self.user_projectuser).with_context({
        project = self.env['project.project'].create({
        task_a = self.env['project.task'].create({
        task_f = self.env['project.task'].create({
        read_group_result = self.env['project.task.burndown.chart.report'].with_context(fill_temporal=True).read_group([('project_id', '=', project.id), ('display_project_id', '!=', False)], ['date', 'stage_id', 'nb_tasks'], ['date:month', 'stage_id'], lazy=False)
            user = self.env['res.users'].sudo().search([('login', '=', login)])
            project = self.env['project.project'].with_context({'tracking_disable': True}).create({
                    project = self.env['project.project'].with_context({'tracking_disable': True}).create({
                    project = self.env['project.project'].with_context({'tracking_disable': True}).create({
            with Form(self.env['project.task'].with_context({'tracking_disable': True})) as task_form:
                with Form(self.env['project.task'].with_context({'tracking_disable': True, 'default_parent_id': self.task_1.id, 'default_project_id': self.project_company_b.id})) as task_form:
                with Form(self.env['project.task'].with_context({'tracking_disable': True})) as task_form:
        Task = self.env['project.task'].with_context({'tracking_disable': True})
        Task = self.env['project.task'].with_context({'tracking_disable': True})
        rating_good = self.env['rating.rating'].create({
            'res_model_id': self.env['ir.model']._get('project.task').id,
            'parent_res_model_id': self.env['ir.model']._get('project.project').id,
        rating_bad = self.env['rating.rating'].create({
            'res_model_id': self.env['ir.model']._get('project.task').id,
            'parent_res_model_id': self.env['ir.model']._get('project.project').id,
        task_without_project = self.env['project.task'].with_context({'mail_create_nolog': True}).create({
            with Form(self.env['project.task']) as form:
            form = Form(self.env['project.task'])
            self.assertEqual(self.env['project.task'].search_count(domain), 1)
            self.env['project.task.recurrence']._cron_create_recurring_tasks()
            self.assertEqual(self.env['project.task'].search_count(domain), 1, 'no extra task should be created')
            self.assertEqual(self.env['project.task'].search_count(domain), 1)
            self.env['project.task.recurrence']._cron_create_recurring_tasks()
            self.assertEqual(self.env['project.task'].search_count(domain), 2)
            self.env['project.task.recurrence']._cron_create_recurring_tasks()
            self.assertEqual(self.env['project.task'].search_count(domain), 3)
            self.env['project.task.recurrence']._cron_create_recurring_tasks()
            self.assertEqual(self.env['project.task'].search_count(domain), 3)
        tasks = self.env['project.task'].search(domain)
        for f in self.env['project.task.recurrence']._get_recurring_fields():
            form = Form(self.env['project.task'])
            self.assertEqual(self.env['project.task'].search_count(domain), 1)
            self.env['project.task.recurrence']._cron_create_recurring_tasks()
            self.assertEqual(self.env['project.task'].search_count(domain), 1, 'no extra task should be created')
            self.assertEqual(self.env['project.task'].search_count(domain), 1)
            self.env['project.task.recurrence']._cron_create_recurring_tasks()
            self.assertEqual(self.env['project.task'].search_count(domain), 2)
            self.env['project.task.recurrence']._cron_create_recurring_tasks()
            self.assertEqual(self.env['project.task'].search_count(domain), 3)
            self.env['project.task.recurrence']._cron_create_recurring_tasks()
            self.assertEqual(self.env['project.task'].search_count(domain), 3)
        tasks = self.env['project.task'].search(domain)
        for f in self.env['project.task.recurrence']._get_recurring_fields():
            form = Form(self.env['project.task'])
            self.assertEqual(self.env['project.task'].search_count(domain), 1)
            self.env['project.task.recurrence']._cron_create_recurring_tasks()
            self.assertEqual(self.env['project.task'].search_count(domain), 1, 'no extra task should be created')
            self.assertEqual(self.env['project.task'].search_count(domain), 1)
            self.env['project.task.recurrence']._cron_create_recurring_tasks()
            self.assertEqual(self.env['project.task'].search_count(domain), 2)
            self.env['project.task.recurrence']._cron_create_recurring_tasks()
            self.assertEqual(self.env['project.task'].search_count(domain), 3)
            self.env['project.task.recurrence']._cron_create_recurring_tasks()
            self.assertEqual(self.env['project.task'].search_count(domain), 3)
            self.env['project.task.recurrence']._cron_create_recurring_tasks()
            self.assertEqual(self.env['project.task'].search_count(domain), 3)
            self.env['project.task.recurrence']._cron_create_recurring_tasks()
            self.assertEqual(self.env['project.task'].search_count(domain), 3)
            self.env['project.task.recurrence']._cron_create_recurring_tasks()
            self.assertEqual(self.env['project.task'].search_count(domain), 4)
        tasks = self.env['project.task'].search(domain)
        for f in self.env['project.task.recurrence']._get_recurring_fields():
            task = self.env['project.task'].create({
            self.env['project.task.recurrence']._cron_create_recurring_tasks()
            self.env['project.task.recurrence']._cron_create_recurring_tasks()
        task_c, task_b, task_a = self.env['project.task'].search([('project_id', '=', self.project_recurring.id)])
        form = Form(self.env['project.task'])
            self.env['project.task'].create({
        dates = self.env['project.task.recurrence']._get_next_recurring_dates(
        dates = self.env['project.task.recurrence']._get_next_recurring_dates(
        dates = self.env['project.task.recurrence']._get_next_recurring_dates(
        dates = self.env['project.task.recurrence']._get_next_recurring_dates(
        dates = self.env['project.task.recurrence']._get_next_recurring_dates(
        dates = self.env['project.task.recurrence']._get_next_recurring_dates(
            tasks = self.env['project.task'].search(domain)
        parent_task = self.env['project.task'].create({
            self.env['project.task.recurrence']._cron_create_recurring_tasks()
            self.assertEqual(self.env['project.task'].search_count(domain), 2, 'no extra task should be created')
            self.env['project.task.recurrence']._cron_create_recurring_tasks()
            self.env['project.task.recurrence']._cron_create_recurring_tasks()
            self.env['project.task.recurrence']._cron_create_recurring_tasks()
        tasks = self.env['project.task'].search(domain)
        for f in self.env['project.task.recurrence']._get_recurring_fields():
        project_share_wizard = self.env['project.share.wizard'].create({
            with self.get_project_sharing_form_view(self.env['project.task'].with_context({'tracking_disable': True, 'default_project_id': self.project_portal.id}), self.user_portal) as form:
        with self.get_project_sharing_form_view(self.env['project.task'].with_context({'tracking_disable': True, 'default_project_id': self.project_portal.id}), self.user_portal) as form:
        project_share_wizard = self.env['project.share.wizard'].create({
        project_share_wizard = self.env['project.share.wizard'].create({
        with Form(self.env['project.milestone'].with_context({'default_project_id': self.project_pigs.id})) as milestone_form:
            with Form(self.env['project.update'].with_context({'default_project_id': self.project_pigs.id})) as update_form:
        with Form(self.env['project.update'].with_context({'default_project_id': self.project_pigs.id})) as update_form:
        with Form(self.env['project.milestone'].with_context({'default_project_id': self.project_pigs.id})) as milestone_form:
        with Form(self.env['project.milestone'].with_context({'default_project_id': self.project_pigs.id})) as milestone_form:
        with Form(self.env['project.milestone'].with_context({'default_project_id': self.project_pigs.id})) as milestone_form:
        template_values = self.env['project.update']._get_template_values(self.project_pigs)
        with Form(self.env['project.milestone'].with_context({'default_project_id': self.project_pigs.id})) as milestone_form:
        with Form(self.env['project.milestone'].with_context({'default_project_id': self.project_pigs.id})) as milestone_form:
        with Form(self.env['project.milestone'].with_context({'default_project_id': self.project_pigs.id})) as milestone_form:
            action = self.env["ir.actions.actions"]._for_xml_id("project.action_view_task")
            action = self.env["ir.actions.actions"]._for_xml_id("project.open_task_type_form")
            action = self.env["ir.actions.actions"]._for_xml_id("project.action_view_all_task")
        timesheets = self.env['account.analytic.line'].sudo().create(vals_list)
        status = self.env['hr.leave.type'].create({
        self.hr_leave_type_with_ts = self.env['hr.leave.type'].create({
        self.hr_leave_type_no_ts = self.env['hr.leave.type'].create({
        self.Requests = self.env['hr.leave'].with_context(mail_create_nolog=True, mail_notrack=True)
        self.Allocations = self.env['hr.leave.allocation'].with_context(mail_create_nolog=True, mail_notrack=True)
                default_journal_id = self.env['account.journal'].search(journal_domain, limit=1)
        action = self.env["ir.actions.actions"]._for_xml_id("purchase.action_purchase_order_report_all")
        order_lines = self.env['purchase.order.line'].read_group(domain, ['product_id', 'product_uom_qty'], ['product_id'])
        action = self.env["ir.actions.actions"]._for_xml_id("purchase.action_purchase_order_report_all")
        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
            order.currency_rate = self.env['res.currency']._get_conversion_rate(order.company_id.currency_id, order.currency_id, order.company_id, order.date_order)
            self.fiscal_position_id = self.env['account.fiscal.position'].get_fiscal_position(self.partner_id.id)
            template = self.env['mail.template'].browse(ctx['default_template_id'])
        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
        AccountMove = self.env['account.move'].with_context(default_move_type='in_invoice')
        journal = self.env['account.move'].with_context(default_move_type=move_type)._get_default_journal()
        result = self.env['ir.actions.act_window']._for_xml_id('account.action_move_in_invoice_type')
            compose_form_id = self.env['ir.model.data']._xmlid_lookup('mail.email_compose_message_wizard_form')[2]
            template = self.env['mail.template'].browse(ctx['default_template_id'])
        activity = self.env['mail.activity'].search([
            price_unit = self.env['account.tax']._fix_tax_included_price_company(
        price_unit = self.env['account.tax']._fix_tax_included_price_company(seller.price, self.product_id.supplier_taxes_id, self.taxes_id, self.company_id) if seller else 0.0
        price_unit = self.env['account.tax']._fix_tax_included_price_company(
        all_partners = self.env['res.partner'].browse(self.env.registry.populated_models['res.partner'])
        partners_inter_company = self.env['res.partner'].concat(*partners_by_company.get(False, []))
        partners_by_company = {com: self.env['res.partner'].concat(*partners) | partners_inter_company for com, partners in partners_by_company.items() if com}
            company = self.env['res.company'].browse(values['company_id'])
            product = self.env['product.product'].browse(values['product_id'])
            po = self.env['purchase.order'].browse(values['order_id'])
        """ % self.env['res.currency']._select_companies_rates()
            currency_table=self.env['res.currency']._get_query_currency_table({'multi_company': True, 'date': {'date_to': fields.Date.today()}}),
        purchase_order_form = Form(self.env['purchase.order'].with_user(self.purchase_user))
        purchase_order_form = Form(self.env['purchase.order'].with_user(purchase_user_2))
        purchase_order_form = Form(self.env['purchase.order'].with_user(purchase_user_2))
        po = Form(self.env['purchase.order'])
        PurchaseOrder = self.env['purchase.order'].with_context(tracking_disable=True)
        self.env['ir.sequence'].search([
        po = Form(self.env['purchase.order'])
        po = Form(self.env['purchase.order'])
        po = Form(self.env['purchase.order'])
        activity = self.env['mail.activity'].search([
        packaging_single = self.env['product.packaging'].create({
        packaging_dozen = self.env['product.packaging'].create({
        po = self.env['purchase.order'].create({
        uom_pairs = self.env['uom.uom'].create({
        product_01 = self.env['product.product'].create(product_data)
        product_02 = self.env['product.product'].create(product_data)
        po_form = Form(self.env['purchase.order'])
        purchase_order = self.env['purchase.order'].with_context(tracking_disable=True).create({
        PurchaseOrderLine = self.env['purchase.order.line'].with_context(tracking_disable=True)
        purchase_order = self.env['purchase.order'].with_context(tracking_disable=True).create({
        PurchaseOrderLine = self.env['purchase.order.line'].with_context(tracking_disable=True)
        purchase_order = self.env['purchase.order'].with_context(tracking_disable=True).create({
        PurchaseOrderLine = self.env['purchase.order.line'].with_context(tracking_disable=True)
        purchase_order = self.env['purchase.order'].with_context(tracking_disable=True).create({
        PurchaseOrderLine = self.env['purchase.order.line'].with_context(tracking_disable=True)
            po = self.env['purchase.order'].with_context(tracking_disable=True).create({
        move_form = Form(self.env['account.move'].with_context(default_move_type='in_invoice'))
        po = self.env['purchase.order'].with_context(tracking_disable=True).create({
        move_form = Form(self.env['account.move'].with_context(default_move_type='in_invoice'))
        move_form.purchase_vendor_bill_id = self.env['purchase.bill.union'].browse(-po.id)
        analytic_account_default = self.env['account.analytic.account'].create({'name': 'default'})
        analytic_account_manual = self.env['account.analytic.account'].create({'name': 'manual'})
        self.env['account.analytic.default'].create({
        po_form = Form(self.env['purchase.order'].with_context(tracking_disable=True))
        aml = self.env['account.move.line'].search([('purchase_line_id', '=', purchase_order.order_line.id)])
        po = self.env['purchase.order'].create({
        f = Form(self.env['account.move'].with_context(default_move_type='in_invoice'))
        res_product1 = self.env['purchase.report'].search([
        res_product2 = self.env['purchase.report'].search([
            company: self.env['mrp.bom']._bom_find(self.env['product.product'].browse(product_ids), company_id=company.id, bom_type='phantom')
        bom = self.env['mrp.bom'].sudo()._bom_find(self.product_id, bom_type='phantom')[self.product_id]
        self.uom_kg = self.env['uom.uom'].search([('category_id', '=', self.categ_kgm.id), ('uom_type', '=', 'reference')],
        self.uom_unit = self.env['uom.uom'].search(
        self.bom_kit_1 = self.env['mrp.bom'].create({
        bom_kit_2 = self.env['mrp.bom'].create({
        bom_kit_parent = self.env['mrp.bom'].create({
        bom_kit_3 = self.env['mrp.bom'].create({
        p = Form(self.env['product.product'])
            f = Form(self.env['stock.move'])
        partner = self.env['res.partner'].create({'name': 'My Test Partner'})
        f = Form(self.env['purchase.order'])
        Form(self.env[res['res_model']].with_context(res['context'])).save().process()
        Form(self.env[res['res_model']].with_context(res['context'])).save().process()
        Form(self.env[res['res_model']].with_context(res['context'])).save().process()
        return_pick = self.env['stock.picking'].browse(res['res_id'])
        wiz = Form(self.env[wiz_act['res_model']].with_context(wiz_act['context'])).save()
        return_of_return_pick = self.env['stock.picking'].browse(res['res_id'])
        wiz = Form(self.env[wiz_act['res_model']].with_context(wiz_act['context'])).save()
        vendor1 = self.env['res.partner'].create({'name': 'aaa', 'email': 'from.test@example.com'})
        supplier_info1 = self.env['product.supplierinfo'].create({
        component = self.env['product.product'].create({
        finished = self.env['product.product'].create({
        self.env['stock.warehouse.orderpoint'].create({
        self.env['stock.warehouse.orderpoint'].create({
        self.env['mrp.bom'].create({
        picking_form = Form(self.env['stock.picking'])
        purchase = self.env['purchase.order.line'].search([
        self.po = self.env['purchase.order'].create({
                    subtype_id=self.env['ir.model.data']._xmlid_to_res_id('mail.mt_note'))
                    subtype_id=self.env['ir.model.data']._xmlid_to_res_id('mail.mt_note'))
        return self.env['purchase.requisition.type'].search([], limit=1)
        requisitions = self.env['purchase.requisition'].search([
                self.name = self.env['ir.sequence'].next_by_code('purchase.requisition.purchase.tender')
                self.name = self.env['ir.sequence'].next_by_code('purchase.requisition.blanket.order')
            supplier_infos = self.env['product.supplierinfo'].search([
            self.env['product.supplierinfo'].create({
            pick_in = self.env['stock.picking.type'].search(
        warehouse = self.env['stock.warehouse'].browse(self.ref('stock.warehouse0'))
        self.env['procurement.group'].run([self.env['procurement.group'].Procurement(
            self.env['uom.uom'].browse(self.ref('uom.product_uom_unit')),
        line = self.env['purchase.requisition.line'].search([('product_id', '=', self.product_13.id), ('product_qty', '=', 14.0)])
        vendor1 = self.env['res.partner'].create({'name': 'AAA', 'email': 'from.test@example.com'})
        vendor2 = self.env['res.partner'].create({'name': 'BBB', 'email': 'from.test2@example.com'})
        supplier_info1 = self.env['product.supplierinfo'].create({
        product_test = self.env['product.product'].create({
        move1 = self.env['stock.move'].create({
        purchase1 = self.env['purchase.order'].search([('partner_id', '=', vendor1.id)])
        requisition_type = self.env['purchase.requisition.type'].create({
        requisition_blanket = self.env['purchase.requisition'].create({
        move2 = self.env['stock.move'].create({
        move3 = self.env['stock.move'].create({
        purchase2 = self.env['purchase.order'].search([('partner_id', '=', vendor2.id), ('requisition_id', '=', requisition_blanket.id)])
        vendor1 = self.env['res.partner'].create({'name': 'AAA', 'email': 'from.test@example.com'})
        supplier_info1 = self.env['product.supplierinfo'].create({
        product_1 = self.env['product.product'].create({
        product_2 = self.env['product.product'].create({
        requisition_type = self.env['purchase.requisition.type'].create({
        requisition_1 = self.env['purchase.requisition'].create({
        requisition_2 = self.env['purchase.requisition'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        POL1 = self.env['purchase.order.line'].search([('product_id', '=', product_1.id)]).order_id
        POL2 = self.env['purchase.order.line'].search([('product_id', '=', product_2.id)]).order_id
        order_line = self.env['purchase.order.line'].search([
        product = self.env['product.product'].create({'name': 'prsds-product'})
        customer = self.env['res.partner'].create({'name': 'prsds-customer'})
        sale_order = self.env['sale.order'].create({
        call_for_tender = self.env['purchase.requisition'].search([('origin', '=', sale_order.name)])
        vendor = self.env['res.partner'].create({'name': 'prsds-vendor'})
        f = Form(self.env['purchase.order'].with_context(default_requisition_id=call_for_tender))
        groups = self.env['purchase.order.line'].read_group(domain,
                location = self.env['stock.warehouse.orderpoint'].browse(group['orderpoint_id'][:1]).location_id
                order = self.env['purchase.order'].browse(group['order_id'][0])
            product = self.env['product.product'].browse(group['product_id'][0])
            uom = self.env['uom.uom'].browse(group['product_uom'][0])
        purchases = self.env['purchase.order'].search([
        orderpoint = self.env['stock.warehouse.orderpoint'].browse(orderpoint_id)
        orderpoint = self.env['stock.warehouse.orderpoint'].browse(orderpoint_id)
        orderpoint.route_id = self.env['stock.rule'].search([('action', '=', 'buy')], limit=1).route_id.id
        result = self.env["ir.actions.actions"]._for_xml_id('stock.action_picking_tree_all')
            order_line_ids = self.env['purchase.order.line'].browse([order_line.id for order in order_exceptions.values() for order_line in order[0]])
            move_ids = self.env['stock.move'].concat(*rendering_context.keys())
        documents = self.env['stock.picking']._log_activity_get_documents(purchase_order_lines_quantities, 'move_ids', 'DOWN', _keys_in_sorted, _keys_in_groupby)
        self.env['stock.picking']._log_activity(_render_note_exception_quantity_po, filtered_documents)
        picking_type = self.env['stock.picking.type'].search([('code', '=', 'incoming'), ('warehouse_id.company_id', '=', company_id)])
            picking_type = self.env['stock.picking.type'].search([('code', '=', 'incoming'), ('warehouse_id', '=', False)])
                            not in self.env["stock.location"].search(
                    picking = self.env['stock.picking'].create(res)
        price_unit_prec = self.env['decimal.precision'].precision_get('Product Price')
        return self.env['stock.move'].create(values)
            price_unit_prec = self.env['decimal.precision'].precision_get('Product Price')
        for res in self.env['stock.rule'].search_read([('action', '=', 'buy')], ['route_id']):
        result = self.env['ir.actions.act_window']._for_xml_id('purchase.purchase_rfq')
        order_line_ids = self.env['purchase.order.line'].search([('orderpoint_id', '=', self.id)])
        order = self.env['purchase.order.line'].search([
        route_id = self.env['stock.rule'].search([
            stock_moves = self.env['stock.move.line'].search([
        action = self.env["ir.actions.actions"]._for_xml_id("purchase.purchase_form_action")
            po = self.env['purchase.order'].sudo().search([dom for dom in domain], limit=1)
                    po = self.env['purchase.order'].with_company(company_id).with_user(SUPERUSER_ID).create(vals)
                po_lines_by_product[product] = self.env['purchase.order.line'].concat(*list(po_lines))
                po_lines = po_lines_by_product.get(procurement.product_id.id, self.env['purchase.order.line'])
                    po_line_values.append(self.env['purchase.order.line']._prepare_purchase_order_line_from_procurement(
            self.env['purchase.order.line'].sudo().create(po_line_values)
            merged_procurement = self.env['procurement.group'].Procurement(
        price_unit = self.env['account.tax']._fix_tax_included_price_company(seller.price, line.product_id.supplier_taxes_id, line.taxes_id, company_id) if seller else 0.0
        fpos = self.env['account.fiscal.position'].with_company(company_id).get_fiscal_position(partner.id)
            delta_days = int(self.env['ir.config_parameter'].get_param('purchase_stock.delta_days_merge') or 0)
        po_lines = self.env['purchase.order.line'].search(domain)
            products = self.env['product.product'].search_read(
            'group_id': self.env['procurement.group'],
        return ProcurementGroup.run([self.env['procurement.group'].Procurement(
        rslt = self.env['purchase.order'].create({
        move_form = Form(self.env['account.move'].with_context(default_move_type='in_invoice', default_date=date))
        picking = self.env['stock.picking'].search([('purchase_id','=',purchase_order.id)])
        picking = self.env['stock.picking'].search([('purchase_id', '=', purchase_order.id)])
        return_pick = self.env['stock.picking'].browse(stock_return_picking_action['res_id'])
        refund_invoice_wiz = self.env['account.move.reversal'].with_context(active_model="account.move", active_ids=[invoice.id]).create({
        refund_invoice = self.env['account.move'].browse(refund_invoice_wiz.reverse_moves()['res_id'])
        picking = self.env['stock.picking'].search([('purchase_id', '=', purchase_order.id)], order="id asc", limit=1)
        picking = self.env['stock.picking'].search([('purchase_id', '=', purchase_order.id)], order='id desc', limit=1)
        tax_exclude_id = self.env["account.tax"].create(
        picking = self.env['stock.picking'].search([('purchase_id','=',purchase_order.id)])
        picking = self.env['stock.picking'].search([('purchase_id','=',purchase_order.id)])
        res_partner_3 = self.env['res.partner'].create({
        product_cable_management_box = self.env['product.product'].create({
        purchase_order_1 = self.env['purchase.order'].create({
        Form(self.env[res['res_model']].with_context(res['context'])).save().process()
        purchase_order_2 = self.env['purchase.order'].create({
        Form(self.env['stock.immediate.transfer'].with_context(res['context'])).save().process()
        outgoing_shipment = self.env['stock.picking'].create({
        Form(self.env['stock.immediate.transfer'].with_context(res['context'])).save().process()
        purchase_order_3 = self.env['purchase.order'].create({
        Form(self.env[res['res_model']].with_context(res['context'])).save().process()
        self.partner_id = self.env['res.partner'].create({'name': 'Wood Corner Partner'})
        self.product_id_1 = self.env['product.product'].create({'name': 'Large Desk'})
        self.product_id_2 = self.env['product.product'].create({'name': 'Conference Chair'})
        self.po = self.env['purchase.order'].create(self.po_vals)
        self.po = self.env['purchase.order'].with_user(self.user_purchase_user).create(self.po_vals)
        partner = self.env['res.partner'].create({
        vendor = self.env['res.partner'].create({
        seller = self.env['product.supplierinfo'].create({
        product = self.env['product.product'].create({
        customer_move = self.env['stock.move'].create({
        purchase_order = self.env['purchase.order'].search([('partner_id', '=', partner.id)])
        self.assertEqual(self.env['stock.quant']._get_available_quantity(product, stock_location), 0.0, 'Wrong quantity in stock.')
        po = self.env['purchase.order'].create(self.po_vals)
        self.env['ir.config_parameter'].sudo().set_param('stock.propagate_uom', '1')
        partner = self.env['res.partner'].create({
        seller = self.env['product.supplierinfo'].create({
        product = self.env['product.product'].create({
        customer_picking = self.env['stock.picking'].create({
        customer_move = self.env['stock.move'].create({
        purchase_order = self.env['purchase.order'].search([('partner_id', '=', partner.id)])
        customer_move_2 = self.env['stock.move'].create({
        purchase_order_2 = self.env['purchase.order'].search([('partner_id', '=', partner.id), ('state', '=', 'draft')])
        po = self.env['purchase.order'].create(self.po_vals)
        po = self.env['purchase.order'].create(self.po_vals)
        self.env['ir.config_parameter'].sudo().set_param('stock.propagate_uom', '1')
        partner = self.env['res.partner'].create({'name': 'AAA', 'email': 'from.test@example.com'})
        supplier_info1 = self.env['product.supplierinfo'].create({
        product = self.env['product.product'].create({
        delivery_order = self.env['stock.picking'].create({
        customer_move = self.env['stock.move'].create({
        purchase_order = self.env['purchase.order'].search([('partner_id', '=', partner.id)])
        warehouse = self.env['stock.warehouse'].search([], limit=1)
        po_form = Form(self.env['purchase.order'])
        pickings = self.env['stock.picking'].search([('group_id', '=', po.group_id.id)])
        po = self.env['purchase.order'].create(self.po_vals)
        backorder_wizard = Form(self.env[backorder_wizard_dict['res_model']].with_context(backorder_wizard_dict['context'])).save()
            self.env['stock.return.picking'].with_context(
        return_pick = self.env['stock.picking'].browse(stock_return_picking_action['res_id'])
            return self.env['procurement.group'].run([self.env['procurement.group'].Procurement(
        partner = self.env['res.partner'].create({
        seller = self.env['product.supplierinfo'].create({
        vendor = self.env['res.partner'].create({
        self.env['stock.location.route'].browse(self.ref('stock.route_warehouse0_mto')).action_unarchive()
        product = self.env['product.product'].create({
        procurement_group = self.env['procurement.group'].create({
        customer_move = self.env['stock.move'].search([('group_id', '=', procurement_group.id)])
        purchase_order = self.env['purchase.order'].search([('partner_id', '=', partner.id)])
        purchase_orders = self.env['purchase.order'].search([('partner_id', '=', partner.id)])
        purchase_orders = self.env['purchase.order'].search([('partner_id', '=', partner.id)])
        res_partner_3 = self.env['res.partner'].create({
        product_cable_management_box = self.env['product.product'].create({
        purchase_order_1 = self.env['purchase.order'].create({
        Form(self.env[res['res_model']].with_context(res['context'])).save().process()
        purchase_order_2 = self.env['purchase.order'].create({
        Form(self.env[res['res_model']].with_context(res['context'])).save().process()
        outgoing_shipment = self.env['stock.picking'].create({
        Form(self.env[res['res_model']].with_context(res['context'])).save().process()
        outgoing_shipment_uom = self.env['stock.picking'].create({
        Form(self.env[res['res_model']].with_context(res['context'])).save().process()
        NewUSD = self.env['res.currency'].create({
        purchase_order_usd = self.env['purchase.order'].create({
        Form(self.env[res['res_model']].with_context(res['context'])).save().process()
        outgoing_shipment_cur = self.env['stock.picking'].create({
        Form(self.env[res['res_model']].with_context(res['context'])).save().process()
        outgoing_shipment_ret = self.env['stock.picking'].create({
        Form(self.env[res['res_model']].with_context(res['context'])).save().process()
        product_fifo_negative = self.env['product.product'].create({
        outgoing_shipment_neg = self.env['stock.picking'].create({
        outgoing_shipment_neg2 = self.env['stock.picking'].create({
        purchase_order_neg = self.env['purchase.order'].create({
        Form(self.env[res['res_model']].with_context(res['context'])).save().process()
        purchase_order_neg2 = self.env['purchase.order'].create({
        Form(self.env[res['res_model']].with_context(res['context'])).save().process()
        tax = self.env["account.tax"].create({
        super_product = self.env['product.product'].create({
        purchase_order = self.env['purchase.order'].create({
        Form(self.env[res['res_model']].with_context(res['context'])).save().process()
        res_partner_3 = self.env['res.partner'].create({
        product_fiforet_icecream = self.env['product.product'].create({
        purchase_order_1 = self.env['purchase.order'].create({
        purchase_order_2 = self.env['purchase.order'].create({
        Form(self.env[res['res_model']].with_context(res['context'])).save().process()
        Form(self.env[res['res_model']].with_context(res['context'])).save().process()
        return_picking = self.env['stock.picking'].browse(return_picking_id)
        self.customer = self.env['res.partner'].create({'name': 'abc'})
        self.group = self.env['procurement.group'].create({'partner_id': self.customer.id, 'name': 'New Group'})
        seller = self.env['product.supplierinfo'].create({
        product = self.env['product.product'].create({
        self.picking_out = self.env['stock.picking'].create({
        self.move = self.env['stock.move'].create({
        purchase_order = self.env['purchase.order'].search([('partner_id', '=', self.customer.id)])
        purchase_order = self.env['purchase.order'].search([('partner_id', '=', self.customer.id)])
        purchase_order = self.env['purchase.order'].search([('partner_id', '=', self.customer.id)])
        picking_ids = self.env['stock.picking'].search([('group_id', '=', self.group.id)])
        purchase_order = self.env['purchase.order'].search([('partner_id', '=', self.customer.id)])
        picking_ids = self.env['stock.picking'].search([('group_id', '=', self.group.id)])
        purchase_order = self.env['purchase.order'].search([('partner_id', '=', self.customer.id)])
        picking_ids = self.env['stock.picking'].search([('group_id', '=', self.group.id)])
        purchase_order = self.env['purchase.order'].search([('partner_id', '=', self.customer.id)])
        picking_ids = self.env['stock.picking'].search([('group_id', '=', self.group.id)])
        partner = self.env['res.partner'].create({
        seller = self.env['product.supplierinfo'].create({
        product_car = self.env['product.product'].create({
        customer_picking = self.env['stock.picking'].create({
        customer_move = self.env['stock.move'].create({
        purchase_order = self.env['purchase.order'].search([('partner_id', '=', partner.id)])
        purchase = self.env['purchase.order.line'].search([('product_id', '=', self.product_1.id)], limit=1).order_id
        purchase1 = self.env['purchase.order.line'].search([('product_id', '=', self.product_1.id)], limit=1).order_id
        purchase2 = self.env['purchase.order.line'].search([('product_id', '=', self.product_2.id)], limit=1).order_id
        self.env['procurement.group'].run([self.env['procurement.group'].Procurement(
        purchase = self.env['purchase.order.line'].search([('product_id', '=', self.product_1.id)], limit=1).order_id
        incoming_shipment1 = self.env['stock.picking'].search([('move_lines.product_id', 'in', (self.product_1.id, self.product_2.id)), ('picking_type_id', '=', self.warehouse_1.int_type_id.id), ('location_id', '=', self.warehouse_1.wh_input_stock_loc_id.id), ('location_dest_id', '=', self.warehouse_1.wh_qc_stock_loc_id.id)])
        incoming_shipment2 = self.env['stock.picking'].search([('picking_type_id', '=', self.warehouse_1.int_type_id.id), ('location_id', '=', self.warehouse_1.wh_qc_stock_loc_id.id), ('location_dest_id', '=', self.warehouse_1.lot_stock_id.id)])
        product_1 = self.env['product.product'].create({
        move_1 = self.env['stock.move'].create({
        po_line = self.env['purchase.order.line'].search([
        move_2 = self.env['stock.move'].create({
        po_line = self.env['purchase.order.line'].search([
        ProcurementGroup.run([self.env['procurement.group'].Procurement(
        purchase_order = self.env['purchase.order.line'].search([('product_id', '=', self.t_shirt.id)], limit=1).order_id
        ProcurementGroup.run([self.env['procurement.group'].Procurement(
        self.env['procurement.group'].run_scheduler()
        ProcurementGroup.run([self.env['procurement.group'].Procurement(
        company2 = self.env['res.company'].create({
        vendor = self.env['res.partner'].create({
        vendor2 = self.env['res.partner'].create({
        product = self.env['product.product'].create({
        orderpoint_form = Form(self.env['stock.warehouse.orderpoint'])
        orderpoint_form = Form(self.env['stock.warehouse.orderpoint'].with_company(company2))
        warehouse = self.env['stock.warehouse'].search([], limit=1)
            delivery_moves |= self.env['stock.move'].create({
        self.env['procurement.group'].run_scheduler()
        po_line = self.env['purchase.order.line'].search([('product_id', '=', product.id)])
        self.env['procurement.group'].run_scheduler()
        po_line = self.env['purchase.order.line'].search([('product_id', '=', product.id)])
        self.env['stock.warehouse.orderpoint'].search([]).unlink()
        orderpoint_form = Form(self.env['stock.warehouse.orderpoint'])
        self.env['product.supplierinfo'].search([('product_tmpl_id', '=', self.product_1.product_tmpl_id.id)]).unlink()
        self.env['product.supplierinfo'].create({
        self.env['procurement.group'].run_scheduler()
        purchase_order = self.env['purchase.order'].search([('partner_id', '=', self.partner_1.id)])
        self.po = self.env['purchase.order'].create(self.po_vals)
        move_form = Form(self.env['account.move'].with_context(default_move_type='in_invoice'))
        self.po = self.env['purchase.order'].create(self.po_vals)
        move_form = Form(self.env['account.move'].with_context(default_move_type='in_invoice'))
        return_pick = self.env['stock.picking'].browse(res['res_id'])
        move_form = Form(self.env['account.move'].with_context(default_move_type='in_refund'))
        self.env['stock.picking.type'].search([('code', '=', 'outgoing')]).write({'code': 'internal'})
        po1 = self.env['purchase.order'].create({
        wiz = Form(self.env[wiz_act['res_model']].with_context(wiz_act['context'])).save()
        stock_return_picking_form = Form(self.env['stock.return.picking'].with_context(
        return_pick = self.env['stock.picking'].browse(res['res_id'])
        wiz = Form(self.env[wiz_act['res_model']].with_context(wiz_act['context'])).save()
        po = self.env['purchase.order'].create(self.po_vals)
        activity = self.env['mail.activity'].search([
        wiz = Form(self.env[wiz_act['res_model']].with_context(wiz_act['context'])).save()
        company_b = self.env['res.company'].create({
            "currency_id": self.env['res.currency'].with_context(active_test=False).search([
        po = self.env['purchase.order'].create(dict(company_id=company_a.id, partner_id=self.partner_a.id))
        company_b = self.env['res.company'].create({
            "currency_id": self.env['res.currency'].with_context(active_test=False).search([
        po = self.env['purchase.order'].create(self.po_vals)
        self.env['stock.backorder.confirmation'].with_context(res_dict['context']).process_cancel_backorder()
        po = self.env['purchase.order'].create(self.po_vals)
        self.env['stock.backorder.confirmation'].with_context(res_dict['context']).process_cancel_backorder()
        yards_uom = self.env['uom.uom'].create({
        po = self.env['purchase.order'].create({
        _product = self.env['product.product'].create({
        _purchase_order = self.env['purchase.order'].create({
        backorder_wizard = Form(self.env[backorder_wizard_dict['res_model']].with_context(backorder_wizard_dict['context'])).save()
        backorder_wizard = Form(self.env[backorder_wizard_dict['res_model']].with_context(backorder_wizard_dict['context'])).save()
        backorder_wizard = Form(self.env[backorder_wizard_dict['res_model']].with_context(backorder_wizard_dict['context'])).save()
        po_form = Form(self.env['purchase.order'])
        wizard = Form(self.env[res_dict['res_model']].with_context(res_dict['context'])).save()
        po_form = Form(self.env['purchase.order'])
        wizard = Form(self.env[res_dict['res_model']].with_context(res_dict['context'])).save()
        po_form = Form(self.env['purchase.order'])
        warehouse_1 = self.env['stock.warehouse'].search([('company_id', '=', self.env.user.id)], limit=1)
        warehouse_2 = self.env['stock.warehouse'].create({'name': 'WH 2', 'code': 'WH2', 'company_id': self.env.company.id, 'partner_id': self.env.company.partner_id.id, 'reception_steps': 'one_step'})
        orderpoint_form = Form(self.env['stock.warehouse.orderpoint'])
        picking_form = Form(self.env['stock.picking'])
        self.env['procurement.group'].run_scheduler()
        purchase_order = self.env['purchase.order'].search([('partner_id', '=', self.partner.id)])
        warehouse_1 = self.env['stock.warehouse'].search([('company_id', '=', self.env.user.id)], limit=1)
        subloc_1 = self.env['stock.location'].create({'name': 'subloc_1', 'location_id': warehouse_1.lot_stock_id.id})
        subloc_2 = self.env['stock.location'].create({'name': 'subloc_2', 'location_id': warehouse_1.lot_stock_id.id})
        orderpoint_form = Form(self.env['stock.warehouse.orderpoint'])
        orderpoint_form = Form(self.env['stock.warehouse.orderpoint'])
        picking_form = Form(self.env['stock.picking'])
        self.env['procurement.group'].run_scheduler()
        purchase_order = self.env['purchase.order'].search([('partner_id', '=', self.partner.id)])
        warehouse_1 = self.env['stock.warehouse'].search([('company_id', '=', self.env.user.id)], limit=1)
        outside_loc = self.env['stock.location'].create({
        route = self.env['stock.location.route'].create({
        vendor1 = self.env['res.partner'].create({'name': 'AAA', 'email': 'from.test@example.com'})
        supplier_info1 = self.env['product.supplierinfo'].create({
        product = self.env['product.product'].create({
        orderpoint_form = Form(self.env['stock.warehouse.orderpoint'].with_user(2))
        move = self.env['stock.move'].create({
        purchase_order = self.env['purchase.order.line'].search([('product_id', '=', product.id)]).order_id
        partner = self.env['res.partner'].create({
        product_form = Form(self.env['product.product'])
        product_form = Form(self.env['product.product'])
        picking_form = Form(self.env['stock.picking'])
        self.env['stock.warehouse.orderpoint']._get_orderpoint_action()
        self.env['stock.warehouse.orderpoint']._get_orderpoint_action()
        orderpoint_product = self.env['stock.warehouse.orderpoint'].search(
        orderpoint_product_mto_buy = self.env['stock.warehouse.orderpoint'].search(
        po = self.env['purchase.order'].search([('partner_id', '=', partner.id)])
        self.env['stock.warehouse.orderpoint']._get_orderpoint_action()
        orderpoint_product = self.env['stock.warehouse.orderpoint'].search(
        orderpoint_product_mto_buy = self.env['stock.warehouse.orderpoint'].search(
        picking_form = Form(self.env['stock.picking'])
        self.env['stock.warehouse.orderpoint'].flush()
        self.env['stock.warehouse.orderpoint']._get_orderpoint_action()
        orderpoint_product = self.env['stock.warehouse.orderpoint'].search(
        orderpoint_product_mto_buy = self.env['stock.warehouse.orderpoint'].search(
        partner = self.env['res.partner'].create({
        for wh in self.env['stock.warehouse'].search([]):
        product_form = Form(self.env['product.product'])
        product_form = Form(self.env['product.product'])
        picking_form = Form(self.env['stock.picking'])
        self.env['stock.warehouse.orderpoint']._get_orderpoint_action()
        orderpoint_product = self.env['stock.warehouse.orderpoint'].search(
        orderpoint_product_mto_buy = self.env['stock.warehouse.orderpoint'].search(
        po = self.env['purchase.order'].search([('partner_id', '=', partner.id)])
        self.env['stock.warehouse.orderpoint'].flush()
        self.env['stock.warehouse.orderpoint']._get_orderpoint_action()
        orderpoint_product = self.env['stock.warehouse.orderpoint'].search(
        orderpoint_product_mto_buy = self.env['stock.warehouse.orderpoint'].search(
        picking_form = Form(self.env['stock.picking'])
        self.env['stock.warehouse.orderpoint'].flush()
        self.env['stock.warehouse.orderpoint']._get_orderpoint_action()
        orderpoint_product = self.env['stock.warehouse.orderpoint'].search(
        orderpoint_product_mto_buy = self.env['stock.warehouse.orderpoint'].search(
        warehouse = self.env['stock.warehouse'].search(
        product = self.env["product.product"].create({
        default_vendor = self.env["res.partner"].create({
        secondary_vendor = self.env["res.partner"].create({
        self.env["product.supplierinfo"].create({
        self.env["product.supplierinfo"].create({
        po_line = self.env["purchase.order.line"].search(
        self.env["procurement.group"].run(
            [self.env["procurement.group"].Procurement(
        po_line = self.env["purchase.order.line"].search(
        po_line = self.env["purchase.order.line"].search(
        self.env["procurement.group"].run(
            [self.env["procurement.group"].Procurement(
        po_line = self.env["purchase.order.line"].search(
        warehouse = self.env['stock.warehouse'].create({
        mto_rule = self.env['stock.rule'].search(
        route_mto = self.env["stock.location.route"].create({
        product = self.env["product.product"].create({
        self.env['res.lang']._activate_lang('fr_FR')
        self.env['ir.translation']._set_ids('product.template,name', 'model', 'fr_FR', product.product_tmpl_id.ids, 'produit en français')
        self.env['ir.translation']._set_ids('product.product,name', 'model', 'fr_FR', product.ids, 'produit en français')
        default_vendor = self.env["res.partner"].create({
        self.env["product.supplierinfo"].create({
        customer = self.env["res.partner"].create({
        proc_group = self.env["procurement.group"].create({
        procurement = self.env["procurement.group"].Procurement(
        self.env["procurement.group"].run([procurement])
        po_line = self.env["purchase.order.line"].search(
        self.vendor = self.env['res.partner'].create(dict(name='The Replenisher'))
        self.supplierinfo = self.env['product.supplierinfo'].create({
        self.product1 = self.env['product.product'].create({
        self.wh = self.env['stock.warehouse'].search([('company_id', '=', self.env.user.id)], limit=1)
        replenish_wizard = self.env['product.replenish'].create({
        last_po_id = self.env['purchase.order'].search([
        product_to_buy = self.env['product.product'].create({
        vendor1 = self.env['res.partner'].create({'name': 'vendor1', 'email': 'from.test@example.com'})
        supplierinfo1 = self.env['product.supplierinfo'].create({
        supplierinfo2 = self.env['product.supplierinfo'].create({
        replenish_wizard = self.env['product.replenish'].create({
        last_po_id = self.env['purchase.order'].search([
        product_to_buy = self.env['product.product'].create({
        vendor1 = self.env['res.partner'].create({'name': 'vendor1', 'email': 'from.test@example.com'})
        vendor2 = self.env['res.partner'].create({'name': 'vendor2', 'email': 'from.test2@example.com'})
        supplierinfo1 = self.env['product.supplierinfo'].create({
        supplierinfo2 = self.env['product.supplierinfo'].create({
        supplierinfo3 = self.env['product.supplierinfo'].create({
        replenish_wizard = self.env['product.replenish'].create({
        last_po_id = self.env['purchase.order'].search([
        product_to_buy = self.env['product.product'].create({
        vendor1 = self.env['res.partner'].create({'name': 'vendor1', 'email': 'from.test@example.com'})
        vendor2 = self.env['res.partner'].create({'name': 'vendor2', 'email': 'from.test2@example.com'})
        supplierinfo1 = self.env['product.supplierinfo'].create({
        supplierinfo2 = self.env['product.supplierinfo'].create({
        replenish_wizard = self.env['product.replenish'].create({
        last_po_id = self.env['purchase.order'].search([
        product_to_buy = self.env['product.product'].create({
        vendor1 = self.env['res.partner'].create({'name': 'vendor1', 'email': 'from.test@example.com'})
        supplierinfo1 = self.env['product.supplierinfo'].create({
        supplierinfo2 = self.env['product.supplierinfo'].create({
        supplierinfo3 = self.env['product.supplierinfo'].create({
        replenish_wizard = self.env['product.replenish'].create({
        last_po_id = self.env['purchase.order'].search([
        self.env['res.config.settings'].write({
        warehouse = self.env['stock.warehouse'].search([('company_id', '=', self.env.company.id)], limit=1)
        location_1 = self.env['stock.location'].create({
        location_2 = self.env['stock.location'].create({
        receipt_1 = self.env['stock.picking.type'].create({
        receipt_2 = self.env['stock.picking.type'].create({
        route = self.env['stock.location.route'].create({
        self.partner_id = self.env['res.partner'].create({
        self.product1 = self.env['product.product'].create({
        self.stock_journal = self.env['account.journal'].create({
        po1 = self.env['purchase.order'].create({
        wizard = Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        po1 = self.env['purchase.order'].create({
        wizard = Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        po1 = self.env['purchase.order'].create({
        po1 = self.env['purchase.order'].create({
        wizard = self.env[(res_dict.get('res_model'))].browse(res_dict.get('res_id')).with_context(res_dict['context'])
        self.env['res.currency.rate'].search([]).unlink()
        po1 = self.env['purchase.order'].create({
        self.env['res.currency.rate'].create({
        wizard = Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        po1 = self.env['purchase.order'].create({
        move_form = Form(self.env['account.move'].with_context(default_move_type='in_invoice'))
        po2 = self.env['purchase.order'].create({
        move_form = Form(self.env['account.move'].with_context(default_move_type='in_invoice'))
        return_pick = self.env['stock.picking'].browse(stock_return_picking_action['res_id'])
        move_form = Form(self.env['account.move'].with_context(default_move_type='in_refund'))
        price_diff_entry = self.env['account.move.line'].search([('account_id', '=', self.price_diff_account.id)])
        po_form = Form(self.env['purchase.order'])
        move_form = Form(self.env['account.move'].with_context(default_move_type='in_invoice'))
        price_diff_aml = self.env['account.move.line'].search([('account_id','=', self.price_diff_account.id)])
        input_aml = self.env['account.move.line'].search([('account_id','=',self.stock_input_account.id)])
        tax_with_no_account = self.env['account.tax'].create({
        po1 = self.env['purchase.order'].create({
        self.env['res.currency.rate'].search([]).unlink()
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        po = self.env['purchase.order'].create({
        inv = self.env['account.move'].with_context(default_move_type='in_invoice').create({
        self.env['res.currency.rate'].search([]).unlink()
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        po = self.env['purchase.order'].create({
        inv = self.env['account.move'].with_context(default_move_type='in_invoice').create({
        self.env['res.currency.rate'].search([]).unlink()
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        po = self.env['purchase.order'].create({
        inv = self.env['account.move'].with_context(default_move_type='in_invoice').create({
        self.env['res.currency.rate'].search([]).unlink()
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        self.env['res.currency.rate'].create({
        po = self.env['purchase.order'].create({
        inv = self.env['account.move'].with_context(default_move_type='in_invoice').create({
        backorder_picking = self.env['stock.picking'].search([('backorder_id', '=', picking.id)])
        inv1 = self.env['account.move'].with_context(default_move_type='in_invoice').create({
        po_form = Form(self.env['purchase.order'])
        invoice_form = Form(self.env['account.move'].with_context(default_move_type='in_invoice'))
        price_diff_aml = self.env['account.move.line'].search([('account_id','=', self.price_diff_account.id)])
        input_aml = self.env['account.move.line'].search([('account_id','=', self.stock_input_account.id)])
        po_form = Form(self.env['purchase.order'])
        invoice_form = Form(self.env['account.move'].with_context(default_move_type='in_invoice'))
        price_diff_aml = self.env['account.move.line'].search([('account_id', '=', self.price_diff_account.id)])
        input_aml = self.env['account.move.line'].search([('account_id', '=', self.stock_input_account.id)])
        po_form = Form(self.env['purchase.order'])
        invoice_form = Form(self.env['account.move'].with_context(default_move_type='in_invoice'))
        price_diff_aml = self.env['account.move.line'].search([('account_id','=', self.price_diff_account.id)])
        input_aml = self.env['account.move.line'].search([('account_id','=', self.stock_input_account.id)])
            self.env['rating.rating'].sudo().create({
                'res_model_id': self.env['ir.model']._get_id(self._name),
        data = self.env['rating.rating'].read_group(domain, ['parent_res_id', 'rating'], ['parent_res_id', 'rating'], lazy=False)
            ratings = self.env['rating.rating'].search([('res_model', '=', self._name), ('res_id', '=', record.id), ('consumed', '=', True)], limit=1)
        read_group_res = self.env['rating.rating'].read_group(domain, ['rating:avg'], groupby=['res_id'], lazy=False)  # force average on rating column
                    res_name_field = self.env['rating.rating']._fields['res_name']
        self.env['rating.rating'].sudo().search([('res_model', '=', self._name), ('res_id', 'in', record_ids)]).unlink()
            rating = self.env['rating.rating'].sudo().create({
                'res_model_id': self.env['ir.model']._get_id(self._name),
            subtype_id = self.env['ir.model.data']._xmlid_to_res_id('mail.mt_note')
            rating = self.env['rating.rating'].search([('access_token', '=', token)], limit=1)
            rating = self.env['rating.rating'].search([('res_model', '=', self._name), ('res_id', '=', self.ids[0])], limit=1)
        data = self.env['rating.rating'].read_group(base_domain, ['rating'], ['rating', 'res_id'])
        default=lambda self: self.env['product.pricelist'].search([('company_id', 'in', [self.env.company.id, False])], limit=1).id,
            self.pricelist_id = self.env['product.pricelist'].search([
                warehouse = self.env['stock.warehouse'].search([('company_id', '=', self.company_id.id)], limit=1)
        vals['name'] = self.env['ir.sequence'].next_by_code('repair.order') or '/'
        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
        available_qty_owner = self.env['stock.quant']._get_available_quantity(self.product_id, self.location_id, self.lot_id, owner_id=self.partner_id, strict=True)
        available_qty_noown = self.env['stock.quant']._get_available_quantity(self.product_id, self.location_id, self.lot_id, strict=True)
                fpos = self.env['account.fiscal.position'].get_fiscal_position(partner_invoice.id, delivery_id=repair.address_id.id)
            self.env['account.move'].with_company(company_id).with_context(default_company_id=company_id, default_move_type='out_invoice').create(invoices_vals_list)
        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
            available_qty_owner = self.env['stock.quant']._get_available_quantity(repair.product_id, repair.location_id, repair.lot_id, owner_id=repair.partner_id, strict=True)
                available_quantity = self.env['stock.quant']._get_available_quantity(
            warehouse = self.env['stock.warehouse'].search(args, limit=1)
            self.location_dest_id = self.env['stock.location'].search([('usage', '=', 'production'), ('company_id', '=', self.repair_id.company_id.id)], limit=1)
            self.location_id = self.env['stock.location'].search([('usage', '=', 'production'), ('company_id', '=', self.repair_id.company_id.id)], limit=1).id
            self.location_dest_id = self.env['stock.location'].search([('scrap_location', '=', True), ('company_id', 'in', [self.repair_id.company_id.id, False])], limit=1).id
                fpos = self.env['account.fiscal.position'].get_fiscal_position(partner_invoice.id, delivery_id=self.repair_id.address_id.id)
            fpos = self.env['account.fiscal.position'].get_fiscal_position(partner_invoice.id, delivery_id=self.repair_id.address_id.id)
        return self.env['repair.order'].create({
        return self.env['repair.line'].create({
        return self.env['repair.fee'].create({
        make_invoice = self.env['repair.order.make_invoice'].create({
        company02 = self.env['res.company'].create({
        tax01 = self.env["account.tax"].create({
        tax02 = self.env["account.tax"].create({
        super_product = self.env['product.template'].create({
        ro_form = Form(self.env['repair.order'])
            repairs = self.env['repair.order'].browse(self._context['active_ids'])
            res['name'] = _('Working Hours of %s', self.env['res.company'].browse(res['company_id']).name)
            company = self.env['res.company'].browse(company_id)
        week_type = self.env['resource.calendar.attendance'].get_week_type(today)
        resources = self.env['resource.resource'] if not resources else resources
        resources_list = list(resources) + [self.env['resource.resource']]
        for attendance in self.env['resource.calendar.attendance'].search(domain):
                    start_week_type = self.env['resource.calendar.attendance'].get_week_type(start)
        resources = self.env['resource.resource'] if not resources else resources
        resources_list = list(resources) + [self.env['resource.resource']]
        for leave in self.env['resource.calendar.leaves'].search(domain):
        resources = self.env['resource.resource'] if not resources else resources
        resources_list = list(resources) + [self.env['resource.resource']]
            company = self.env['res.company'].browse(res['company_id'])
                values['calendar_id'] = self.env['res.company'].browse(values['company_id']).resource_calendar_id.id
                tz = (self.env['res.users'].browse(values.get('user_id')).tz or
                      self.env['resource.calendar'].browse(values.get('calendar_id')).tz)
        calendar_mapping = defaultdict(lambda: self.env['resource.resource'])
                  self.env['resource.calendar'].browse(values.get('resource_calendar_id')).tz)
            resource = self.env['resource.resource'].create(resource_vals)
        mapped_resources = defaultdict(lambda: self.env['resource.resource'])
        mapped_resources = defaultdict(lambda: self.env['resource.resource'])
            self.env['resource.calendar.leaves'].create({
            self.env['resource.calendar.leaves'].create({
        self.env['resource.calendar.leaves'].create({
        self.env['resource.calendar.leaves'].create({
        self.env['resource.calendar.leaves'].create({
        leave = self.env['resource.calendar.leaves'].create({
        leave = self.env['resource.calendar.leaves'].create({
        leave = self.env['resource.calendar.leaves'].create({
        leave = self.env['resource.calendar.leaves'].create({
        leave = self.env['resource.calendar.leaves'].create({
        leave = self.env['resource.calendar.leaves'].create({
        self.att_4 = self.env['resource.calendar.attendance'].create({
        self.env['resource.calendar.leaves'].create({
        self.env['resource.calendar.leaves'].create({
        self.env['resource.calendar.attendance'].create({
        leave = self.env['resource.calendar.leaves'].create({
        leave = self.env['resource.calendar.leaves'].create({
        leave = self.env['resource.calendar.leaves'].create({
        self.env['resource.calendar.leaves'].create({
        self.env['resource.calendar.leaves'].create({
        self.env['resource.calendar.leaves'].create({
        self.env['resource.calendar.leaves'].create({
        leave = self.env['resource.calendar.leaves'].create({
        leave = self.env['resource.calendar.leaves'].create({
        leave = self.env['resource.calendar.leaves'].create({
        jean_leave = self.env['resource.calendar.leaves'].create({
        leave = self.env['resource.calendar.leaves'].create({
        leave = self.env['resource.calendar.leaves'].create({
        leave = self.env['resource.calendar.leaves'].create({
        leave = self.env['resource.calendar.leaves'].create({
        leave = self.env['resource.calendar.leaves'].create({
        leave = self.env['resource.calendar.leaves'].create({
        self.env['resource.calendar.leaves'].create({
        leave = self.env['resource.calendar.leaves'].create({
        query = self.env['sale.order']._where_calc([
        self.env['sale.order']._apply_ir_rules(query, 'read')
        sale_order_data = self.env['sale.order'].read_group([
            sale_order_data = self.env['sale.order'].read_group([
            return self.env["ir.actions.actions"]._for_xml_id("sale.action_order_report_so_salesteam")
            product_data = self.env['product.product'].sudo().with_context(active_test=False).search_read([('product_tmpl_id', 'in', self.ids)], fields=['id'])
            so_lines = self.env['sale.order.line'].sudo().search_read([('product_id', 'in', product_ids), ('company_id', '!=', target_company.id)], fields=['id', 'product_id'])
        action = self.env["ir.actions.actions"]._for_xml_id("sale.report_all_channels_sales_action")
        combination = self.env['product.template.attribute.value'] \
        action = self.env["ir.actions.actions"]._for_xml_id("sale.action_open_sale_onboarding_payment_acquirer_wizard")
        sample_sales_order = self.env['sale.order'].search(
            sample_sales_order = self.env['sale.order'].create({
            product = self.env['product.product'].search([], limit=1)
                product = self.env['product.product'].create({
            self.env['sale.order.line'].create({
        message_composer = self.env['mail.compose.message'].with_context(
        action = self.env["ir.actions.actions"]._for_xml_id("sale.action_orders")
            self.env['ir.config_parameter'].set_param('sale.automatic_invoice', False)
            self.quotation_validity_days = self.env['res.company'].default_get(['quotation_validity_days'])['quotation_validity_days']
            self.quotation_validity_days = self.env['res.company'].default_get(['quotation_validity_days'])['quotation_validity_days']
        if self.env['ir.config_parameter'].sudo().get_param('sale.use_quotation_validity_days'):
            for d in self.env['sale.order.line'].read_group([
        use_invoice_terms = self.env['ir.config_parameter'].sudo().get_param('account.use_invoice_terms')
        return self.env['crm.team']._get_default_team_id()
                order.currency_rate = self.env['res.currency']._get_conversion_rate(order.company_id.currency_id, order.currency_id, order.company_id, order.date_order)
        self.fiscal_position_id = self.env['account.fiscal.position'].with_company(self.company_id).get_fiscal_position(self.partner_id.id, self.partner_shipping_id.id)
        if self.env['ir.config_parameter'].sudo().get_param('account.use_invoice_terms'):
            values['team_id'] = self.env['crm.team'].with_context(
            self.team_id = self.env['crm.team'].with_context(
            price_unit = self.env['account.tax']._fix_tax_included_price_company(
            vals['name'] = self.env['ir.sequence'].next_by_code('sale.order', sequence_date=seq_date) or _('New')
            partner = self.env['res.partner'].browse(vals.get('partner_id'))
        journal = self.env['account.move'].with_context(default_move_type='out_invoice')._get_default_journal()
        action = self.env["ir.actions.actions"]._for_xml_id("account.action_move_out_invoice_type")
                'default_invoice_payment_term_id': self.payment_term_id.id or self.partner_id.property_payment_term_id.id or self.env['account.move'].default_get(['invoice_payment_term_id']).get('invoice_payment_term_id'),
        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
        return self.env['sale.order.line'].browse(invoiceable_line_ids + down_payment_line_ids)
        if not self.env['account.move'].check_access_rights('create', False):
        moves = self.env['account.move'].sudo().with_context(default_move_type='out_invoice').create(invoice_vals_list)
            template_id = int(self.env['ir.config_parameter'].sudo().get_param('sale.default_confirmation_template'))
            template_id = self.env['mail.template'].search([('id', '=', template_id)]).id
                template_id = self.env['ir.model.data']._xmlid_to_res_id('sale.mail_template_sale_confirmation', raise_if_not_found=False)
            template_id = self.env['ir.model.data']._xmlid_to_res_id('sale.email_template_edi_sale', raise_if_not_found=False)
        template = self.env['mail.template'].browse(template_id)
            analytic = self.env['account.analytic.account'].create(order._prepare_analytic_account_data(prefix))
        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
            precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
            fields = self.env['ir.model.fields'].search([
        data = self.env['account.analytic.line'].read_group(
        product_uom_map = {uom.id: uom for uom in self.env['uom.uom'].browse(product_uom_ids)}
            vals['price_unit'] = self.env['account.tax']._fix_tax_included_price_company(self._get_display_price(product), product.taxes_id, self.tax_id, self.company_id)
            self.price_unit = self.env['account.tax']._fix_tax_included_price_company(self._get_display_price(product), product.taxes_id, self.tax_id, self.company_id)
        quotation_data = self.env['sale.order'].read_group([
        self.env['account.move.line'].flush(['balance', 'move_id', 'account_id', 'exclude_from_invoice_tab'])
        self.env['account.move'].flush(['state', 'campaign_id', 'move_type'])
        action = self.env["ir.actions.actions"]._for_xml_id("sale.action_quotations_with_onboarding")
        action = self.env["ir.actions.actions"]._for_xml_id("account.action_move_journal_line")
        invoices = self.env['account.move'].search([('campaign_id', '=', self.id)])
        color_attribute_ids = self.env["product.attribute"].search([
                x_inter_company = self.env[recordset._name].concat(*x_by_company.get(False, []))
            return {com: (self.env[recordset._name].concat(*x_records) | x_inter_company).ids for com, x_records in x_by_company.items() if com}
        partners_ids_by_company = x_ids_by_company(self.env["res.partner"].browse(self.env.registry.populated_models["res.partner"]))
        pricelist_ids_by_company = x_ids_by_company(self.env["product.pricelist"].browse(self.env.registry.populated_models["product.pricelist"]))
        user_ids_by_company = x_ids_by_company(self.env["res.users"].browse(self.env.registry.populated_models["res.users"]), with_false=False)
            orders_to_confirm = self.env['sale.order'].browse(random.sample(order_ids, int(len(order_ids) * sample_ratio)))
        product_ids += self.env["product.product"].search([
        self.env['product.product'].browse(product_ids).read(['uom_id'])  # prefetch all uom_id
            return self.env['product.product'].browse(values['product_id']).uom_id.id
        docs = self.env['sale.order'].browse(docids)
        SaleOrder = self.env['sale.order'].with_context(tracking_disable=True)
        india_channel = self.env['crm.team'].with_context(tracking_disable=True).create({
        self.assertIn(india_channel.id, self.env['crm.team'].search([]).ids, 'Sales manager should be able to create a Sales Team')
        self.assertNotIn(india_channel.id, self.env['crm.team'].search([]).ids, 'Sales manager should be able to delete a Sales Team')
            self.env['sale.order'].with_user(self.company_data['default_user_salesman_2']).create({
            self.env['sale.order'].with_user(self.company_data['default_user_portal']).create({
            self.env['sale.order'].with_user(self.company_data['default_user_employee']).create({
        order_form = Form(self.env['sale.order'].with_context(tracking_disable=True))
        support_product = self.env['product.product'].create({
        christmas_pricelist = self.env['product.pricelist'].create({
        order_form = Form(self.env['sale.order'].with_context(tracking_disable=True))
        computer_case = self.env['product.product'].create({
        new_uom = self.env['uom.uom'].create({
        christmas_pricelist = self.env['product.pricelist'].create({
        so = self.env['sale.order'].create({
        order_line = self.env['sale.order.line'].new({
        computer_case = self.env['product.product'].create({
        first_pricelist = self.env['product.pricelist'].create({
        second_pricelist = self.env['product.pricelist'].create({
        so = self.env['sale.order'].create({
        order_line = self.env['sale.order.line'].new({
        computer_case = self.env['product.product'].create({
        other_currency = self.env['res.currency'].create({'name': 'other currency',
        self.env['res.currency.rate'].create({'name': '2018-07-11',
        self.env['res.currency.rate'].search(
        new_uom = self.env['uom.uom'].create({
        first_pricelist = self.env['product.pricelist'].create({
        so = self.env['sale.order'].create({
        order_line = self.env['sale.order.line'].new({
        partner_with_warning = self.env['res.partner'].create({
        partner_with_block_warning = self.env['res.partner'].create({
        sale_order = self.env['sale.order'].create({'partner_id': partner_with_warning.id})
        product_with_warning = self.env['product.product'].create({
        product_with_block_warning = self.env['product.product'].create({
        sale_order_line = self.env['sale.order.line'].create({
        for field in self.env['sale.order.line']._fields.values():
        sale_order = self.env['sale.order'].with_user(self.company_data['default_user_salesman']).create({
        mail_template = self.env['mail.template'].browse(email_ctx.get('default_template_id')).copy({'auto_delete': False})
        self.env['ir.sequence'].search([
        serv_cost = self.env['product.product'].create({
        so = self.env['sale.order'].create({
        inv = self.env['account.move'].with_context(default_move_type='in_invoice').create({
        tax_include = self.env['account.tax'].create({
        tax_exclude = self.env['account.tax'].create({
        product_shared = self.env['product.template'].create({
        so_1 = self.env['sale.order'].with_user(self.company_data['default_user_salesman']).create({
            'partner_id': self.env['res.partner'].create({'name': 'A partner'}).id,
        eur_pricelist = self.env['product.pricelist'].create({'name': 'EUR', 'currency_id': self.env.ref('base.EUR').id})
        usd_pricelist = self.env['product.pricelist'].create({'name': 'USD', 'currency_id': self.env.ref('base.USD').id})
        wiz = self.env['sale.advance.payment.inv'].with_context(active_ids=orders.ids, open_invoices=True).create({})
        sol_note = self.env['sale.order.line'].create({
        products = self.env["product.product"].search([], limit=2)
        other_company = self.env["res.company"].create({
        user_in_other_company = self.env["res.users"].create({
        self.env['res.currency.rate'].search([]).unlink()
        self.env['res.currency.rate'].create({
        pricelist = self.env["product.pricelist"].create({
        partner = self.env['res.partner'].create({
        sale_order = self.env['sale.order'].create({
        partner = self.env['res.partner'].create({
        sale_order = self.env['sale.order'].create({
        sale_order = self.env['sale.order'].create({
        sale_order = self.env['sale.order'].create({
        partner = self.env['res.partner'].create({'name': "I'm a partner"})
        product_tmpl = self.env['product.template'].create({'name': "I'm a product"})
        packaging_single = self.env['product.packaging'].create({
        packaging_dozen = self.env['product.packaging'].create({
        so = self.env['sale.order'].create({
        return self.env['sale.order'].create({
        self.env['ir.config_parameter'].sudo().set_param('account.use_invoice_terms', True)
        self.env['ir.config_parameter'].sudo().set_param('sale.use_quotation_validity_days', True)
        self.env['product.product'].invalidate_cache(['price'])
        self.env['product.product'].invalidate_cache(['price'])
        SaleOrder = self.env['sale.order'].with_context(sale_show_partner_name=True)
        sale_order = self.env['sale.order'].create({
        product_id = self.env['ir.config_parameter'].sudo().get_param('sale.default_deposit_product_id')
        return self.env['product.product'].browse(int(product_id)).exists()
            sale_order = self.env['sale.order'].browse(self._context.get('active_id'))
            sale_order = self.env['sale.order'].browse(self._context.get('active_id'))
        invoice = self.env['account.move'].sudo().create(invoice_vals).with_user(self.env.uid)
        sale_orders = self.env['sale.order'].browse(self._context.get('active_ids', []))
                self.product_id = self.env['product.product'].create(vals)
                self.env['ir.config_parameter'].sudo().set_param('sale.default_deposit_product_id', self.product_id.id)
            program.order_count = self.env['sale.order.line'].search_count([('product_id', '=', program.discount_line_product_id.id)])
        orders = self.env['sale.order.line'].search([('product_id', '=', self.discount_line_product_id.id)]).mapped('order_id')
        free_reward_product = self.env['coupon.program'].search([('reward_type', '=', 'product')]).mapped('discount_line_product_id')
                free_product_lines = self.env['coupon.program'].search([('reward_type', '=', 'product'), ('reward_product_id', 'in', program.discount_specific_product_ids.ids)]).mapped('discount_line_product_id')
        coupon = self.env['coupon.coupon'].search([
            coupon = self.env['coupon.coupon'].sudo().create({
        programs = self.env['coupon.program'].with_context(
        programs = self.env['coupon.program'].with_context(
            return self.env['sale.order.line'].browse()
            related_program = self.env['coupon.program'].search([('discount_line_product_id', '=', line.product_id.id)])
            Program = self.env['coupon.program'].sudo()
        self.company_b = self.env['res.company'].create(dict(name="TEST"))
        self.immediate_promotion_program_c2 = self.env['coupon.program'].create({
        order_b = self.env["sale.order"].create({
        sales_order = self.env['sale.order'].browse(self.env.context.get('active_id'))
        program = self.env['coupon.program'].search([('promo_code', '=', coupon_code)])
            coupon = self.env['coupon.coupon'].search([('code', '=', coupon_code)], limit=1)
            return self.env["ir.actions.actions"]._for_xml_id("sale_crm.crm_quotation_partner_action")
        action = self.env["ir.actions.actions"]._for_xml_id("sale_crm.sale_action_quotations_new")
        action = self.env["ir.actions.actions"]._for_xml_id("sale.action_quotations_with_onboarding")
        action = self.env["ir.actions.actions"]._for_xml_id("sale.action_orders")
        self.assertEqual(lead.partner_id, self.env['res.partner'])
        new_partner = self.env['res.partner'].search([('email_normalized', '=', 'amy.wong@test.example.com')])
        self.assertEqual(new_partner, self.env['res.partner'])
        convert = self.env['crm.quotation.partner'].with_context({
        self.assertEqual(convert.partner_id, self.env['res.partner'])
        new_partner = self.env['res.partner'].search([('email_normalized', '=', 'amy.wong@test.example.com')])
        convert = self.env['crm.quotation.partner'].with_context({
        self.assertEqual(convert.partner_id, self.env['res.partner'])
        new_partner = self.env['res.partner'].search([('email_normalized', '=', 'amy.wong@test.example.com')])
        self.assertEqual(new_partner, self.env['res.partner'])
        new_partner = self.env['res.partner'].search([('email_normalized', '=', 'amy.wong@test.example.com')])
        self.assertEqual(new_partner, self.env['res.partner'])
        convert = self.env['crm.quotation.partner'].with_context({
        convert = self.env['crm.quotation.partner'].with_context({
        self.assertEqual(convert.partner_id, self.env['res.partner'])
        new_partner = self.env['res.partner'].search([('email_normalized', '=', 'amy.wong@test.example.com')])
        self.assertEqual(new_partner, self.env['res.partner'])
        self.assertEqual(lead.partner_id, self.env['res.partner'])
        expense_data = self.env['hr.expense'].read_group([('sale_order_id', 'in', self.ids)], ['sale_order_id'], ['sale_order_id'])
        so = self.env['sale.order'].create({
        sheet = self.env['hr.expense.sheet'].create({
        exp = self.env['hr.expense'].create({
        prod_exp_2 = self.env['product.product'].create({
        sheet = self.env['hr.expense.sheet'].create({
        exp = self.env['hr.expense'].create({
            self.env["sale.order.line"].create({
        return self.env['gift.card'].create(
            all_channels_sales = self.env['sale.report'].read_group([
            company = self.env["res.company"].browse(company_id) if company_id else self.env.company
        user = access_uid and self.env['res.users'].sudo().browse(access_uid) or self.env.user
        new_sol = self.env['sale.order.line'].new(values)
        order_line = self.env['sale.order.line'].create(values)
            companies = self.env['res.company'].sudo().search([('sale_order_template_id', 'in', self.ids)])
        languages = self.env['res.lang'].search([('active', '=', 'true')])
        existing_trans = self.env['ir.translation'].search([('name', '=', model_name),
            self.env['ir.translation'].create(data)
            self.env["sale.order.line"].flush(['margin'])
            grouped_order_lines_data = self.env['sale.order.line'].read_group(
        self.product = self.env['product.product'].create({'name': 'Individual Workplace'})
        self.partner_id = self.env['res.partner'].create({'name': 'A test partner'}).id
        self.partner_invoice_address_id = self.env['res.partner'].create({
        warehouse_form = Form(self.env['stock.warehouse'])
        product_form = Form(self.env['product.product'])
        product_form = Form(self.env['product.product'])
        bom_product_form = Form(self.env['mrp.bom'])
        sale_form = Form(self.env['sale.order'])
        sale_form.partner_id = self.env['res.partner'].create({'name': 'My Test Partner'})
        mo = self.env['mrp.production'].search([
        product_form = Form(self.env['product.product'])
        bom_product_form = Form(self.env['mrp.bom'])
        child_manufaturing = self.env['mrp.production'].search([('product_id', '=', self.product_raw.id)])
        manufaturing_from_so = self.env['mrp.production'].search([('product_id', '=', self.product_manu.id)])
        exception = self.env['mail.activity'].search([('res_model', '=', 'mrp.production'),
        p = Form(self.env['product.product'])
            f = Form(self.env['stock.move'])
        with Form(self.env['mrp.bom']) as f:
        with Form(self.env['mrp.bom']) as f:
        with Form(self.env['mrp.bom']) as f:
        order_form = Form(self.env['sale.order'])
        order_form.partner_id = self.env['res.partner'].create({'name': 'My Test Partner'})
        self.env['procurement.group'].run_scheduler()
        mnf_product_a = self.env['mrp.production'].search([('product_id', '=', product_a.id)])
        product = self.env['product.product'].create({
        product_wood_panel = self.env['product.product'].create({
        product_desk_bolt = self.env['product.product'].create({
        self.env['mrp.bom'].create({
        partner = self.env['res.partner'].create({'name': 'My Test Partner'})
        f = Form(self.env['sale.order'])
        wiz = Form(self.env[wiz_act['res_model']].with_context(wiz_act['context'])).save()
        self.partner = self.env['res.partner'].create({'name': 'My Test Partner'})
        account_type = self.env['account.account.type'].create({'name': 'RCV type', 'type': 'other', 'internal_group': 'asset'})
        self.account_receiv = self.env['account.account'].create({'name': 'Receivable', 'code': 'RCV00' , 'user_type_id': account_type.id, 'reconcile': True})
        account_expense = self.env['account.account'].create({'name': 'Expense', 'code': 'EXP00' , 'user_type_id': account_type.id, 'reconcile': True})
        account_output = self.env['account.account'].create({'name': 'Output', 'code': 'OUT00' , 'user_type_id': account_type.id, 'reconcile': True})
        account_valuation = self.env['account.account'].create({'name': 'Valuation', 'code': 'STV00' , 'user_type_id': account_type.id, 'reconcile': True})
        self.category.property_stock_journal = self.env['account.journal'].create({'name': 'Stock journal', 'type': 'sale', 'code': 'STK00'})
        self.env['stock.quant'].sudo().create({
        self.env['stock.quant'].sudo().create({
        self.bom = self.env['mrp.bom'].create({
        self.so = self.env['sale.order'].create(so_vals)
        wiz = Form(self.env[wiz_act['res_model']].with_context(wiz_act['context'])).save()
        self.env['stock.quant']._update_available_quantity(self.component_a, stock_location, 20)
        self.env['stock.quant']._update_available_quantity(self.component_b, stock_location, 10)
        self.env['stock.quant']._update_available_quantity(self.component_c, stock_location, 30)
        partner = self.env['res.partner'].create({'name': 'My Test Partner'})
        f = Form(self.env['sale.order'])
        bom_from_k1 = self.env['mrp.bom']._bom_find(self.kit_1)[self.kit_1]
        wiz = Form(self.env[wiz_act['res_model']].with_context(wiz_act['context'])).save().process()
        wiz = Form(self.env[wiz_act['res_model']].with_context(wiz_act['context'])).save().process()
        wiz = Form(self.env[wiz_act['res_model']].with_context(wiz_act['context'])).save().process()
        self.env['stock.quant']._update_available_quantity(self.component_a, stock_location, 56)
        self.env['stock.quant']._update_available_quantity(self.component_b, stock_location, 28)
        self.env['stock.quant']._update_available_quantity(self.component_c, stock_location, 84)
        self.env['stock.quant']._update_available_quantity(self.component_d, stock_location, 14)
        self.env['stock.quant']._update_available_quantity(self.component_e, stock_location, 7)
        self.env['stock.quant']._update_available_quantity(self.component_f, stock_location, 14)
        self.env['stock.quant']._update_available_quantity(self.component_g, stock_location, 28)
        partner = self.env['res.partner'].create({'name': 'My Test Partner'})
        f = Form(self.env['sale.order'])
        wiz = Form(self.env[wiz_act['res_model']].with_context(wiz_act['context'])).save().process()
        wiz = Form(self.env[wiz_act['res_model']].with_context(wiz_act['context'])).save().process()
        wiz = Form(self.env[wiz_act['res_model']].with_context(wiz_act['context'])).save().process()
        return_pick = self.env['stock.picking'].browse(res['res_id'])
        wiz = Form(self.env[wiz_act['res_model']].with_context(wiz_act['context'])).save()
        return_of_return_pick = self.env['stock.picking'].browse(res['res_id'])
        Form(self.env[wiz_act['res_model']].with_context(wiz_act['context'])).save().process()
        warehouse_1 = self.env['stock.warehouse'].create({
        warehouse_2 = self.env['stock.warehouse'].create({
        self.env['stock.quant']._update_available_quantity(self.component_a, warehouse_1.lot_stock_id, 8)
        self.env['stock.quant']._update_available_quantity(self.component_b, warehouse_1.lot_stock_id, 4)
        self.env['stock.quant']._update_available_quantity(self.component_c, warehouse_1.lot_stock_id, 12)
        self.env['stock.quant']._update_available_quantity(self.component_d, warehouse_1.lot_stock_id, 2)
        self.env['stock.quant']._update_available_quantity(self.component_e, warehouse_1.lot_stock_id, 1)
        self.env['stock.quant']._update_available_quantity(self.component_f, warehouse_1.lot_stock_id, 2)
        self.env['stock.quant']._update_available_quantity(self.component_g, warehouse_1.lot_stock_id, 4)
        self.env['stock.quant']._update_available_quantity(self.component_a, warehouse_2.lot_stock_id, 7)
        self.env['stock.quant']._update_available_quantity(self.component_b, warehouse_2.lot_stock_id, 3)
        self.env['stock.quant']._update_available_quantity(self.component_c, warehouse_2.lot_stock_id, 12)
        self.env['stock.quant']._update_available_quantity(self.component_d, warehouse_2.lot_stock_id, 1)
        self.env['stock.quant']._update_available_quantity(self.component_e, warehouse_2.lot_stock_id, 1)
        self.env['stock.quant']._update_available_quantity(self.component_f, warehouse_2.lot_stock_id, 1)
        self.env['stock.quant']._update_available_quantity(self.component_g, warehouse_2.lot_stock_id, 4)
        f = Form(self.env['sale.order'])
        f.partner_id = self.env['res.partner'].create({'name': 'My Test Partner'})
        bom_kit_uom_1 = self.env['mrp.bom'].create({
        self.env['stock.quant']._update_available_quantity(component_uom_unit, stock_location, 240)
        self.env['stock.quant']._update_available_quantity(component_uom_dozen, stock_location, 10)
        self.env['stock.quant']._update_available_quantity(component_uom_kg, stock_location, 0.03)
        partner = self.env['res.partner'].create({'name': 'My Test Partner'})
        f = Form(self.env['sale.order'])
        Form(self.env[res['res_model']].with_context(res['context'])).save().process()
        bom_kit_uom_1 = self.env['mrp.bom'].create({
        bom_kit_uom_in_kit = self.env['mrp.bom'].create({
        warehouse_1 = self.env['stock.warehouse'].create({
        self.env['stock.quant']._update_available_quantity(component_uom_unit, warehouse_1.lot_stock_id, 576)
        self.env['stock.quant']._update_available_quantity(component_uom_dozen, warehouse_1.lot_stock_id, 24)
        self.env['stock.quant']._update_available_quantity(component_uom_kg, warehouse_1.lot_stock_id, 0.12)
        self.env['stock.quant']._update_available_quantity(component_uom_gm, warehouse_1.lot_stock_id, 3000)
        f = Form(self.env['sale.order'])
        f.partner_id = self.env['res.partner'].create({'name': 'My Test Partner'})
        stock_location_components = self.env['stock.location'].create({
        stock_location_14 = self.env['stock.location'].create({
        with Form(self.env['mrp.bom']) as bom:
        route_shelf1 = self.env['stock.location.route'].create({
        route_shelf2 = self.env['stock.location.route'].create({
        self.env['stock.quant']._update_available_quantity(component_shelf1, self.company_data['default_warehouse'].lot_stock_id, 15)
        self.env['stock.quant']._update_available_quantity(component_shelf2, self.company_data['default_warehouse'].lot_stock_id, 10)
        order_form = Form(self.env['sale.order'])
        order_form.partner_id = self.env['res.partner'].create({'name': 'My Test Partner'})
        with Form(self.env['mrp.bom']) as bom:
        warehouse_1 = self.env['stock.warehouse'].create({
        self.env['stock.quant']._update_available_quantity(component_unit, warehouse_1.lot_stock_id, 12)
        self.env['stock.quant']._update_available_quantity(component_kg, warehouse_1.lot_stock_id, 14)
        order_form = Form(self.env['sale.order'])
        order_form.partner_id = self.env['res.partner'].create({'name': 'My Test Partner'})
        finished_product = self.env['product.product'].create({
        product_raw = self.env['product.product'].create({
        bom = self.env['mrp.bom'].create({
        sale_form = Form(self.env['sale.order'])
        sale_form.partner_id = self.env['res.partner'].create({'name': 'My Test Partner'})
        mo = self.env['mrp.production'].search([('product_id', '=', finished_product.id)])
        finished_product = self.env['product.product'].create({
        product_raw = self.env['product.product'].create({
        bom = self.env['mrp.bom'].create({
        sale_form = Form(self.env['sale.order'])
        sale_form.partner_id = self.env['res.partner'].create({'name': 'My Test Partner'})
        mo = self.env['mrp.production'].search([('product_id', '=', finished_product.id)])
        mos = self.env['mrp.production'].search([('product_id', '=', finished_product.id)])
        finished_product = self.env['product.product'].create({
        product_raw = self.env['product.product'].create({
        bom = self.env['mrp.bom'].create({
        sale_form = Form(self.env['sale.order'])
        sale_form.partner_id = self.env['res.partner'].create({'name': 'My Test Partner'})
        mo = self.env['mrp.production'].search([('product_id', '=', finished_product.id)])
        mos = self.env['mrp.production'].search([('product_id', '=', finished_product.id)])
        self.partner = self.env['res.partner'].create({'name': 'My Test Partner'})
        account_type = self.env['account.account.type'].create({'name': 'RCV type', 'type': 'other', 'internal_group': 'asset'})
        self.account_receiv = self.env['account.account'].create({'name': 'Receivable', 'code': 'RCV00' , 'user_type_id': account_type.id, 'reconcile': True})
        account_expense = self.env['account.account'].create({'name': 'Expense', 'code': 'EXP00' , 'user_type_id': account_type.id, 'reconcile': True})
        account_output = self.env['account.account'].create({'name': 'Output', 'code': 'OUT00' , 'user_type_id': account_type.id, 'reconcile': True})
        account_valuation = self.env['account.account'].create({'name': 'Valuation', 'code': 'STV00' , 'user_type_id': account_type.id, 'reconcile': True})
        self.category.property_stock_journal = self.env['account.journal'].create({'name': 'Stock journal', 'type': 'sale', 'code': 'STK00'})
        self.prod_att_1 = self.env['product.attribute'].create({'name': 'Color'})
        self.prod_attr1_v1 = self.env['product.attribute.value'].create({'name': 'red', 'attribute_id': self.prod_att_1.id, 'sequence': 1})
        self.prod_attr1_v2 = self.env['product.attribute.value'].create({'name': 'blue', 'attribute_id': self.prod_att_1.id, 'sequence': 2})
        self.product_template = self.env['product.template'].create({
            component = self.env['product.product'].create({
            self.env['stock.quant'].sudo().create({
            bom = self.env['mrp.bom'].create({
            self.env['mrp.bom.line'].create({
            so = self.env['sale.order'].create(so_vals)
            wiz = Form(self.env[wiz_act['res_model']].with_context(wiz_act['context'])).save()
        main_kit_product = self.env['product.product'].create({
        nested_kit_product = self.env['product.product'].create({
        product = self.env['product.product'].create({
        nested_kit_bom = self.env['mrp.bom'].create({
        main_bom = self.env['mrp.bom'].create({
        order_form = Form(self.env['sale.order'])
        stock_return_picking_form = Form(self.env['stock.return.picking'].with_context(
        return_pick = self.env['stock.picking'].browse(res['res_id'])
        self.env['stock.quant']._update_available_quantity(self.component_a, stock_location, 1)
        self.env['mrp.bom'].create({
        p2_bom = self.env['mrp.bom'].create({
        so_form = Form(self.env['sale.order'])
        so_form.partner_id = self.env['res.partner'].create({'name': 'Super Partner'})
        wiz = Form(self.env[wiz_act['res_model']].with_context(wiz_act['context'])).save()
        return self.env['product.product'].create({
        self.stock_input_account = self.env['account.account'].create({
        self.stock_output_account = self.env['account.account'].create({
        self.stock_valuation_account = self.env['account.account'].create({
        self.expense_account = self.env['account.account'].create({
        self.income_account = self.env['account.account'].create({
        self.stock_journal = self.env['account.journal'].create({
        self.recv_account = self.env['account.account'].create({
        self.pay_account = self.env['account.account'].create({
        self.customer = self.env['res.partner'].create({
        self.journal_sale = self.env['account.journal'].create({
        bom_product_form = Form(self.env['mrp.bom'])
        bom_product_form = Form(self.env['mrp.bom'])
        so = self.env['sale.order'].create({
        component_1 = self.env['product.product'].create({'name': 'compo 1'})
        component_2 = self.env['product.product'].create({'name': 'compo 2'})
        product_category = self.env['product.category'].create({
        attributes = self.env['product.attribute'].create({'name': 'Legs'})
        steel_legs = self.env['product.attribute.value'].create({'attribute_id': attributes.id, 'name': 'Steel'})
        aluminium_legs = self.env['product.attribute.value'].create(
        product = self.env['product.product'].create({
        self.env['mrp.bom'].create({
        self.env['mrp.bom'].create({
        partner = self.env['res.partner'].create({'name': 'Testing Man'})
        so = self.env['sale.order'].create({
        self.env['sale.order.line'].create({
        self.customer = self.env['res.partner'].create({
        cat = self.env['product.category'].create({
        self.bom = self.env['mrp.bom'].create({
        self.env['mrp.bom.line'].create({
        self.env['mrp.bom.line'].create({
        so = self.env['sale.order'].create({
        bom_product_form = Form(self.env['mrp.bom'])
        self.customer = self.env['res.partner'].create({
        so = self.env['sale.order'].create({
        with Form(self.env['mrp.bom']) as bom:
        order_form = Form(self.env['sale.order'])
        manufacturing_order = self.env['mrp.production'].search([('product_id', '=', self.product_1.id), ('move_dest_ids', 'in', order.picking_ids[0].move_lines.ids)])
        order_form = Form(self.env['sale.order'])
        self.env['procurement.group'].run_scheduler()
        manufacturing_order = self.env['mrp.production'].search([('product_id', '=', self.product_1.id)]) 
            pc = Form(self.env['product.category'])
        self.assertIn("seller_ids", self.env['product.template'].fields_get())
        product = Form(self.env['product.template'])
        product_component = Form(self.env['product.product'])
        with Form(self.env['mrp.bom']) as bom:
        so_form = Form(self.env['sale.order'])
        so_form.partner_id = self.env['res.partner'].create({'name': 'Another Test Partner'})
        mo = self.env['mrp.production'].search([('origin', 'like', sale_order_so0.name)], limit=1)
        self.customer_location = self.env['ir.model.data']._xmlid_to_res_id('stock.stock_location_customers')
        self.warehouse = self.env['stock.warehouse'].create({
        product_form = Form(self.env['product.product'])
        product_form = Form(self.env['product.product'])
        product_form = Form(self.env['product.product'])
        product_form = Form(self.env['product.product'])
        bom_product_form = Form(self.env['mrp.bom'])
        bom_product_form = Form(self.env['mrp.bom'])
        so_form = Form(self.env['sale.order'])
        so_form.partner_id = self.env['res.partner'].create({'name': 'Another Test Partner'})
        self.custom_pricelist = self.env['product.pricelist'].create({
        product_attributes = self.env['product.attribute'].create([{
        self.env['product.attribute.value'].create([{
        self.env['product.template.attribute.line'].create([{
        product_attributes = self.env['product.attribute'].create([{
        product_attribute_values = self.env['product.attribute.value'].create([{
        self.env['product.template.attribute.line'].create([{
        tax = self.env['account.tax'].create({'name': "Test tax", 'amount': 15})
        office_chair = self.env['product.product'].create({
            order.tasks_ids = self.env['project.task'].search(['&', ('display_project_id', '!=', 'False'), '|', ('sale_line_id', 'in', order.order_line.ids), ('sale_order_id', '=', order.id)])
                eval_context = self.env['ir.actions.actions']._get_eval_context()
            action = self.env["ir.actions.actions"]._for_xml_id("project.action_view_task")
            project = self.env['project.project'].create(values)
            project.type_ids = self.env['project.task.type'].create({'name': _('New')})
        task = self.env['project.task'].sudo().create(values)
                task_analytic_account_id = self.env['project.task'].read_group([
                project_analytic_account_id = self.env['project.project'].read_group([
            tag_ids = self.env['account.analytic.tag'].search([
                    sale_to_notify_map.setdefault(sale_order, self.env['purchase.order.line'])
        purchase_order_lines = self.env['purchase.order.line'].search([('sale_line_id', 'in', self.mapped('order_line').ids), ('state', '!=', 'cancel')])
            purchase_to_notify_map.setdefault(purchase_line.order_id, self.env['sale.order.line'])
        database_data = self.env['purchase.order.line'].sudo().read_group([('sale_line_id', 'in', self.ids)], ['sale_line_id'], ['sale_line_id'])
            precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
        last_purchase_lines = self.env['purchase.order.line'].search([('sale_line_id', 'in', self.ids)])
            purchase_to_notify_map.setdefault(purchase_line.order_id, self.env['sale.order.line'])
            last_purchase_line = self.env['purchase.order.line'].search([('sale_line_id', '=', line.id)], order='create_date DESC', limit=1)
        fpos = self.env['account.fiscal.position'].sudo().get_fiscal_position(partner_supplier.id)
            price_unit = self.env['account.tax'].sudo()._fix_tax_included_price_company(
        return self.env['stock.warehouse'].search([('company_id', '=', self.env.company.id)], limit=1)
        default = self.env['stock.warehouse'].search([('company_id', '=', self.env.company.id)], limit=1)
            user = self.env['res.users'].browse(vals.get('user_id', False))
            new_partner = self.env['res.partner'].browse(values.get('partner_shipping_id'))
                    documents = self.env['stock.picking']._log_activity_get_documents(to_log, 'move_ids', 'UP')
            warehouse_id = self.env['ir.default'].get_model_defaults('sale.order').get('warehouse_id')
                documents = self.env['stock.picking']._log_activity_get_documents(sale_order_lines_quantities, 'move_ids', 'UP')
        action = self.env["ir.actions.actions"]._for_xml_id("stock.action_picking_tree_all")
            visited_moves = self.env[visited_moves[0]._name].concat(*visited_moves)
            order_line_ids = self.env['sale.order.line'].browse([order_line.id for order in order_exceptions.values() for order_line in order[0]])
        self.env['stock.picking']._log_activity(_render_note_exception_quantity_so, documents)
        grouped_lines = defaultdict(lambda: self.env['sale.order.line'])
                    mto_route = self.env['stock.warehouse']._find_global_route('stock.route_warehouse0_mto', _('Make To Order'))
        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
                group_id = self.env['procurement.group'].create(line._prepare_procurement_group_vals())
            procurements.append(self.env['procurement.group'].Procurement(
            self.env['procurement.group'].run(procurements)
        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
            self.env['sale.order.line'].create(sale_order_lines_vals)
            origin_moves = self.env['stock.move'].browse([move.id for move_orig in moves_information.values() for move in move_orig[0]])
        sale_orders = defaultdict(lambda: self.env['sale.order'])
        for move_line in self.env['stock.move.line'].search([('lot_id', 'in', self.ids), ('state', '=', 'done')]):
        action = self.env["ir.actions.actions"]._for_xml_id("sale.action_orders")
        so_lines = self.env['sale.order.line'].search(domain)
        self.env['stock.quant'].with_context(inventory_mode=True).create({
        sale_order = self.env['sale.order'].create({
        in_move_1 = self.env['stock.move'].create({
        in_move_2 = self.env['stock.move'].create({
        wiz = Form(self.env[wiz['res_model']].with_context(wiz['context'])).save()
        wiz = Form(self.env[wiz['res_model']].with_context(wiz['context'])).save()
        wiz = Form(self.env[wiz['res_model']].with_context(wiz['context'])).save()
        wiz = Form(self.env[wiz['res_model']].with_context(wiz['context'])).save()
        wiz = Form(self.env[wiz['res_model']].with_context(wiz['context'])).save()
        so = self.env['sale.order'].create({
        return_pick = self.env['stock.picking'].browse(res['res_id'])
        picking = self.env['stock.picking'].create({
        self.env['stock.move'].create({
        wiz = Form(self.env[wiz['res_model']].with_context(wiz['context'])).save()
        wiz = Form(self.env[wiz['res_model']].with_context(wiz['context'])).save()
        wiz = Form(self.env[wiz['res_model']].with_context(wiz['context'])).save()
        in_move_1 = self.env['stock.move'].create({
        sale_order = self.env['sale.order'].create({
        in_move_2 = self.env['stock.move'].create({
        in_move_1 = self.env['stock.move'].create({
        in_move_2 = self.env['stock.move'].create({
        sale_order = self.env['sale.order'].create({
        sale_order = self.env['sale.order'].create({
        in_move_1 = self.env['stock.move'].create({
        sale_order = self.env['sale.order'].create({
        in_move_2 = self.env['stock.move'].create({
        in_move_1 = self.env['stock.move'].create({
            self.env['stock.return.picking'].with_context(
        return_pick = self.env['stock.picking'].browse(stock_return_picking_action['res_id'])
        so_2 = self.env['sale.order'].create({
        in_move_2 = self.env['stock.move'].create({
            self.env['stock.return.picking'].with_context(
        redeliver_pick = self.env['stock.picking'].browse(stock_redeliver_picking_action['res_id'])
        unit_12 = self.env['uom.uom'].create({
        so_1 = self.env['sale.order'].create({
        in_move_1 = self.env['stock.move'].create({
        so_2 = self.env['sale.order'].create({
        rslt = self.env['sale.order'].create({
        rslt = self.env['account.move'].create({
        move1 = self.env['stock.move'].create({
        picking = self.env['stock.picking'].search([('sale_id', '=', sale_order.id)])
        picking = self.env['stock.picking'].search([('sale_id', '=', sale_order.id)])
        return_pick = self.env['stock.picking'].browse(stock_return_picking_action['res_id'])
        refund_invoice_wiz = self.env['account.move.reversal'].with_context(active_model='account.move', active_ids=[invoice.id]).create({
        refund_invoice = self.env['account.move'].browse(refund_invoice_wiz.reverse_moves()['res_id'])
        picking = self.env['stock.picking'].search([('sale_id', '=', sale_order.id)], order="id asc", limit=1)
        picking = self.env['stock.picking'].search([('sale_id', '=', sale_order.id)], order='id desc', limit=1)
        sale_order = self.env['sale.order'].create(sale_order_vals)
        self.so = self.env['sale.order'].create({
        wiz = Form(self.env[wiz_act['res_model']].with_context(wiz_act['context'])).save()
        for field in self.env['sale.order.line']._fields.values():
        self.so = self.env['sale.order'].create({
        advance_product = self.env['product.product'].create({
        adv_wiz = self.env['sale.advance.payment.inv'].with_context(active_ids=[self.so.id]).create({
        inv = self.env['account.move'].browse(act['res_id'])
        self.so = self.env['sale.order'].create(so_vals)
        return_pick = self.env['stock.picking'].browse(res['res_id'])
        adv_wiz = self.env['sale.advance.payment.inv'].with_context(active_ids=[self.so.id]).create({
        self.so = self.env['sale.order'].create(so_vals)
        wizard = Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        self.so = self.env['sale.order'].create({
        wizard = Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        wizard = Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        self.env['stock.quant']._update_available_quantity(item2, self.company_data['default_warehouse'].lot_stock_id, 2)
        self.so = self.env['sale.order'].create({
        wizard = Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        partner2 = self.env['res.partner'].create({'name': 'Another Test Partner'})
        so1 = self.env['sale.order'].create({
        so1 = self.env['sale.order'].create({
        self.env['ir.config_parameter'].sudo().set_param('stock.propagate_uom', '1')
        so1 = self.env['sale.order'].create({
        self.env['stock.picking.type'].search([('code', '=', 'incoming')]).write({'code': 'internal'})
        so1 = self.env['sale.order'].create({
        wiz = Form(self.env[wiz_act['res_model']].with_context(wiz_act['context'])).save()
        stock_return_picking_form = Form(self.env['stock.return.picking'].with_context(
        return_pick = self.env['stock.picking'].browse(res['res_id'])
        wiz = Form(self.env[wiz_act['res_model']].with_context(wiz_act['context'])).save()
        self.env['stock.quant']._update_available_quantity(item1, warehouse1.lot_stock_id, 10)
        self.env['stock.quant']._update_reserved_quantity(item1, warehouse1.lot_stock_id, 3)
        warehouse2 = self.env['stock.warehouse'].create({
        self.env['stock.quant']._update_available_quantity(item1, warehouse2.lot_stock_id, 5)
        so = self.env['sale.order'].create({
        self.env['stock.quant']._update_available_quantity(item1, self.company_data['default_warehouse'].lot_stock_id, 10)
        so = self.env['sale.order'].create({
        return_picking = self.env['stock.picking'].browse(res['res_id'])
        return_picking = self.env['stock.picking'].browse(res['res_id'])
        product_inv_on_order = self.env['product.product'].create({
        product_inv_on_order = self.env['product.product'].create({
        so = self.env['sale.order'].create(so_vals)
        wiz = Form(self.env[wiz_act['res_model']].with_context(wiz_act['context'])).save()
        wizard = self.env['sale.order.cancel'].with_context({'order_id': so.id}).create({'order_id': so.id})
        self.env['stock.quant']._update_available_quantity(product, self.company_data['default_warehouse'].lot_stock_id, 20)
        product = self.env['product.product'].create({
        packaging = self.env['product.packaging'].create({
        so = self.env['sale.order'].create({
        so = self.env['sale.order'].create({
        yards_uom = self.env['uom.uom'].create({
        so = self.env['sale.order'].create({
        self.env['stock.quant']._update_available_quantity(product, self.company_data['default_warehouse'].lot_stock_id, 50)
        sale_order = self.env['sale.order'].create({
        order = self.env['sale.order'].create({
        order = self.env['sale.order'].create({
        order = self.env['sale.order'].create({
        return self.env['sale.order'].create({
        return self.env['sale.order.line'].create({
        product_template = self.env['product.template'].create({
        Form(self.env[res['res_model']].with_context(res['context'])).save().process()
        Form(self.env[res['res_model']].with_context(res['context'])).save().process()
        so.pricelist_id = self.env['product.pricelist'].create({
        main_company = self.env['res.company']._get_main_company()
        self.env['res.currency.rate'].search([]).unlink()
        self.env['res.currency.rate'].create([
        new_company = self.env['res.company'].create({
        incoming_picking_type = self.env['stock.picking.type'].search([('company_id', '=', new_company.id), ('code', '=', 'incoming')], limit=1)
        production_location = self.env['stock.location'].search([('company_id', '=', new_company.id), ('usage', '=', 'production')])
        picking = self.env['stock.picking'].create({
        self.env['stock.move'].create({
        wizard = Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        partner = self.env['res.partner'].create({'name': 'Super Partner'})
        so = self.env['sale.order'].create({
        timesheets_read_group = self.env['account.analytic.line'].read_group([('project_id', 'in', self.ids)], ['project_id', 'so_line', 'unit_amount'], ['project_id', 'so_line'], lazy=False)
        employees = self.env['account.analytic.line'].read_group([('task_id', 'in', projects.task_ids.ids)], ['employee_id', 'project_id'], ['employee_id', 'project_id'], ['employee_id', 'project_id'], lazy=False)
            sol = self.env['sale.order.line'].search([
        invoices = self.env['account.move'].search([
        action = self.env["ir.actions.actions"]._for_xml_id("hr_timesheet.timesheet_action_all")
        return self.env['sale.order.line'].search([('order_id', 'in', sale_orders.ids), ('is_service', '=', True)], order='id asc')
        profitability = self.env['project.profitability.report'].read_group(
        return self.env['sale.order.line'].search(domain, limit=1)
        timesheet_groups = self.env['account.analytic.line'].sudo().read_group(
                'timesheet_ids': self.env['account.analytic.line'].browse(timesheet_ids),
        group_data = self.env['account.analytic.line'].sudo().read_group([
        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
        action = self.env["ir.actions.actions"]._for_xml_id("sale_timesheet.timesheet_action_from_sales_order")
            sols_by_so_dict = with_price_unit and defaultdict(lambda: self.env[self._name])  # key: (sale_order_id, product_id), value: sale order line
        wizard = self.env['project.create.sale.order'].with_context(allowed_company_ids=[self.company_data_2['company'].id, self.env.company.id], company_id=self.company_data_2['company'].id, active_id=self.project_non_billable.id, active_model='project.project').create({
        sale_order = self.env['sale.order'].browse(action['res_id'])
        sale_order_line1 = self.env['sale.order.line'].create({
        sale_order_line2 = self.env['sale.order.line'].create({
        self.env['account.analytic.line'].create({
        sale_order_line1 = self.env['sale.order.line'].create({
        sale_order_line2 = self.env['sale.order.line'].create({
        self.env['account.analytic.line'].create({
        sale_order_line = self.env['sale.order.line'].create({
        self.env['account.analytic.line'].create({
        product = self.env['product.product'].create({
        so_form = Form(self.env['sale.order'])
        so_form.partner_id = self.env['res.partner'].create({'name': 'Toto'})
        self.env['account.analytic.line'].create({
        wizard = self.env['sale.advance.payment.inv'].with_context(context).create({
        invoice = self.env['account.move'].browse(invoice_dict['res_id'])
        refund_invoice_wiz = self.env['account.move.reversal'].with_context(wiz_context).create({
        refund_invoice = self.env['account.move'].browse(refund_invoice_wiz.reverse_moves()['res_id'])
        wizard = self.env['sale.advance.payment.inv'].with_context(context).create({
        project_global_stat = self.env['project.profitability.report'].search([('project_id', '=', self.project_global.id)]).read()[0]
        self.env['project.profitability.report'].flush()
        project_so_1_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', project_so_1.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        project_so_2_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', project_so_2.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        project_so_3_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', project_so_3.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        project_global_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', self.project_global.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        self.env['project.profitability.report'].flush()
        project_so_1_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', project_so_1.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        project_so_2_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', project_so_2.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        project_so_3_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', project_so_3.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        project_global_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', self.project_global.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        self.env['project.profitability.report'].flush()
        project_so_1_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', project_so_1.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        project_so_2_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', project_so_2.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        project_so_3_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', project_so_3.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        project_global_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', self.project_global.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        InvoiceWizard = self.env['sale.advance.payment.inv'].with_context(mail_notrack=True)
        invoice_1 = self.env['account.move'].browse(invoice_id)
        self.env['project.profitability.report'].flush()
        project_so_1_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', project_so_1.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        project_so_2_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', project_so_2.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        project_so_3_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', project_so_3.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        project_global_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', self.project_global.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        invoice_2 = self.env['account.move'].browse(invoice_id)
        self.env['project.profitability.report'].flush()
        project_so_1_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', project_so_1.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        project_so_2_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', project_so_2.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        project_so_3_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', project_so_3.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        project_global_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', self.project_global.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        invoice_3 = self.env['account.move'].browse(invoice_id)
        self.env['project.profitability.report'].flush()
        project_so_1_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', project_so_1.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        project_so_2_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', project_so_2.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        project_so_3_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', project_so_3.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        project_global_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', self.project_global.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        so_line_expense = self.env['sale.order.line'].create({
        self.env['project.profitability.report'].flush()
        project_so_1_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', project_so_1.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        project_so_2_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', project_so_2.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        project_global_stat = self.env['project.profitability.report'].read_group([('project_id', 'in', self.project_global.ids)], ['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues'], ['project_id'])[0]
        downpayment = self.env['sale.advance.payment.inv'].with_context(context).create({
        invoice_downpayment = self.env['account.move'].browse(invoice_id)
        downpayment2 = self.env['sale.advance.payment.inv'].with_context(context).create({
        invoice_downpayment2 = self.env['account.move'].search(expression.AND([action_invoice['domain'], [('id', 'not in', posted_invoice_res_ids)]]))
        credit_note_wizard = self.env['account.move.reversal'].with_context({
        invoice_credit = self.env['account.move'].browse(credit_id)
        self.env['project.profitability.report'].flush()
        project_so_2_stat = self.env['project.profitability.report'].read_group(
        so_line_expense = self.env['sale.order.line'].create({
        expense1 = self.env['account.analytic.line'].create({
        self.env['project.profitability.report'].flush()
        project_so_2_stat = self.env['project.profitability.report'].read_group(
        payment = self.env['sale.advance.payment.inv'].with_context(mail_notrack=True).create({
        invoice_payment = self.env['account.move'].search(expression.AND([action_invoice['domain'], [('id', 'not in', posted_invoice_res_ids)]]))
        self.env['project.profitability.report'].flush()
        project_so_2_stat = self.env['project.profitability.report'].read_group(
        credit_note_wizard = self.env['account.move.reversal'].with_context({
        invoice_credit = self.env['account.move'].browse(credit_id)
        self.env['project.profitability.report'].flush()
        project_so_2_stat = self.env['project.profitability.report'].read_group(
        so_line_deliver_no_task = self.env['sale.order.line'].create({
        self.env['project.profitability.report'].flush()
        project_so_2_stat = self.env['project.profitability.report'].read_group(
        task_using_milestone_not_tracked = self.env['project.task'].create({
        self.env['project.profitability.report'].flush()
        project_so_2_stat = self.env['project.profitability.report'].read_group(
        self.env['project.profitability.report'].flush()
        project_so_2_stat = self.env['project.profitability.report'].read_group(
        payment = self.env['sale.advance.payment.inv'].with_context(mail_notrack=True).create({
        invoice_payment = self.env['account.move'].browse(action_invoice['res_id'])
        self.env['project.profitability.report'].flush()
        project_so_2_stat = self.env['project.profitability.report'].read_group(
        sale_order_line = self.env['sale.order.line'].create({
        self.env['account.analytic.line'].create({
        product_service_task = self.env['product.product'].create({
        self.env['sale.order.line'].create({
        sale_order_line = self.env['sale.order.line'].create({
        task = self.env['project.task'].search([('sale_line_id', '=', sale_order_line.id)])
        self.env['account.analytic.line'].create({
        self.env['account.analytic.line'].create({
        so_line_deliver_global_project = self.env['sale.order.line'].create({
        task_serv2 = self.env['project.task'].search([('sale_line_id', '=', so_line_deliver_global_project.id)])
        timesheets |= self.env['account.analytic.line'].create({
        timesheets |= self.env['account.analytic.line'].create({
        so_line_deliver_new_task_project = self.env['sale.order.line'].create({
        task_serv2 = self.env['project.task'].search([('sale_line_id', '=', so_line_deliver_new_task_project.id)])
        timesheet1 = self.env['account.analytic.line'].create({
        timesheet2 = self.env['account.analytic.line'].create({
        timesheet3 = self.env['account.analytic.line'].create({
        so_line1 = self.env['sale.order.line'].create({
        project_template2 = self.env['project.project'].create({
        Stage = self.env['project.task.type'].with_context(default_project_id=project_template2.id)
        product_deli_ts_tmpl = self.env['product.product'].create({
        so_line1 = self.env['sale.order.line'].create({
        so_line2 = self.env['sale.order.line'].create({
        so_line3 = self.env['sale.order.line'].create({
        so_line4 = self.env['sale.order.line'].create({
        so_line5 = self.env['sale.order.line'].create({
        so_line1 = self.env['sale.order.line'].create({
        so_line2 = self.env['sale.order.line'].create({
        so_line3 = self.env['sale.order.line'].create({
        so_line1 = self.env['sale.order.line'].create({
        so_line_deliver_new_task_project = self.env['sale.order.line'].create({
        so_line_deliver_new_task_project_2 = self.env['sale.order.line'].create({
        subtask = self.env['project.task'].create({
        task2 = self.env['project.task'].create({
        sale_order_line = self.env['sale.order.line'].create({
        sale_order_line = self.env['sale.order.line'].create({
        task = self.env['project.task'].search([('sale_line_id', '=', sale_order_line.id)])
        task = self.env['project.task'].create({
        self.env['account.analytic.line'].create({
        timesheet = self.env['account.analytic.line'].new({
        sale_order = self.env['sale.order'].create({
        so_line_ordered_project_only = self.env['sale.order.line'].create({
        so_line_ordered_global_project = self.env['sale.order.line'].create({
        task_serv2 = self.env['project.task'].search([('sale_line_id', '=', so_line_ordered_global_project.id)])
        project_serv1 = self.env['project.project'].search([('sale_line_id', '=', so_line_ordered_project_only.id)])
        timesheet1 = self.env['account.analytic.line'].create({
        timesheet2 = self.env['account.analytic.line'].create({
        timesheet3 = self.env['account.analytic.line'].create({
        timesheet4 = self.env['account.analytic.line'].create({
        so_line_ordered_task_in_project = self.env['sale.order.line'].create({
        sale_order = self.env['sale.order'].create({
        so_line_deliver_global_project = self.env['sale.order.line'].create({
        so_line_deliver_task_project = self.env['sale.order.line'].create({
        task_serv1 = self.env['project.task'].search([('sale_line_id', '=', so_line_deliver_global_project.id)])
        task_serv2 = self.env['project.task'].search([('sale_line_id', '=', so_line_deliver_task_project.id)])
        project_serv2 = self.env['project.project'].search([('sale_line_id', '=', so_line_deliver_task_project.id)])
        timesheet1 = self.env['account.analytic.line'].create({
        timesheet2 = self.env['account.analytic.line'].create({
        so_line_deliver_only_project = self.env['sale.order.line'].create({
        timesheet3 = self.env['account.analytic.line'].create({
        timesheet4 = self.env['account.analytic.line'].create({
        sale_order = self.env['sale.order'].create({
        so_line_manual_global_project = self.env['sale.order.line'].create({
        so_line_manual_only_project = self.env['sale.order.line'].create({
        timesheet1 = self.env['account.analytic.line'].create({
        timesheet2 = self.env['account.analytic.line'].create({
        sale_order = self.env['sale.order'].create({
        so_line_ordered_project_only = self.env['sale.order.line'].create({
        so_line_deliver_global_project = self.env['sale.order.line'].create({
        so_line_deliver_task_project = self.env['sale.order.line'].create({
        task_serv1 = self.env['project.task'].search([('sale_line_id', '=', so_line_deliver_global_project.id)])
        task_serv2 = self.env['project.task'].search([('sale_line_id', '=', so_line_deliver_task_project.id)])
        project_serv2 = self.env['project.project'].search([('sale_line_id', '=', so_line_deliver_task_project.id)])
        timesheet1 = self.env['account.analytic.line'].create({
        timesheet2 = self.env['account.analytic.line'].create({
        timesheet3 = self.env['account.analytic.line'].create({
        timesheet4 = self.env['account.analytic.line'].create({
        wizard = self.env['sale.advance.payment.inv'].with_context(self.context).create({
        wizard = self.env['sale.advance.payment.inv'].with_context(context).create({
        sale_order1 = self.env['sale.order'].create({
        sale_order2 = self.env['sale.order'].create({
        so1_product_global_project_so_line = self.env['sale.order.line'].create({
        so2_product_global_project_so_line = self.env['sale.order.line'].create({
        task_so1 = self.env['project.task'].search([('sale_line_id', '=', so1_product_global_project_so_line.id)])
        task_so2 = self.env['project.task'].search([('sale_line_id', '=', so2_product_global_project_so_line.id)])
        task_so1_timesheet1 = self.env['account.analytic.line'].create({
        task_so1_timesheet2 = self.env['account.analytic.line'].create({
            project = self.env['project.project'].browse(active_id)
            domain = self.env['sale.order.line']._timesheet_compute_delivered_quantity_domain()
            timesheet = self.env['account.analytic.line'].read_group(domain + [('task_id', 'in', line.project_id.tasks.ids), ('so_line', '=', False), ('timesheet_invoice_id', '=', False)], ['unit_amount'], ['task_id'])
            timesheet_employees = self.env['account.analytic.line'].search([('task_id', 'in', self.project_id.tasks.ids)]).mapped('employee_id')
        timesheet_with_so_line = self.env['account.analytic.line'].search_count([('task_id', 'in', self.project_id.tasks.ids), ('so_line', '!=', False)])
        action = self.env["ir.actions.actions"]._for_xml_id("sale.action_orders")
        sale_order = self.env['sale.order'].create({
            sale_order_line = self.env['sale.order.line'].create({
            self.env['account.analytic.line'].search(search_domain).write({
        task_id = self.env['project.task'].search([('project_id', '=', self.project_id.id)], order='create_date DESC', limit=1).id
        EmployeeMap = self.env['project.sale.line.employee.map'].sudo()
                sale_order_line = self.env['sale.order.line'].create(values)
            self.env['account.analytic.line'].search(search_domain).write({
            user = self.env['res.users'].sudo().browse(user_id)
        teams = self.env['crm.team'].search([
            team = self.env['crm.team'].browse(self.env.context.get('default_team_id'))
            teams = self.env['crm.team'].search([('company_id', 'in', valid_cids)])
        multi_enabled = self.env['ir.config_parameter'].sudo().get_param('sales_team.membership_multi', False)
            self.env['crm.team.member'].create([{'crm_team_id': team.id, 'user_id': user.id} for user in users_new])
            other_memberships = self.env['crm.team.member'].search([
        all_companies = self.env['res.company'].search([])
        existing = self.env['crm.team.member'].search([
            member_user_ids = self.env['crm.team.member'].search([('id', 'not in', self.ids)]).user_id
            member_user_ids = self.env['crm.team.member'].search([]).user_id
                member.user_in_teams_ids = self.env['crm.team'].browse(self.env.context['default_crm_team_id']).member_ids
        all_companies = self.env['res.company'].search([])
        multi_enabled = self.env['ir.config_parameter'].sudo().get_param('sales_team.membership_multi', False)
            existing = self.env['crm.team.member'].search([('user_id', 'in', active.user_id.ids)])
            user_mapping = dict.fromkeys(existing.user_id, self.env['crm.team'])
                teams = user_mapping.get(member.user_id, self.env['crm.team'])
        is_membership_multi = self.env['ir.config_parameter'].sudo().get_param('sales_team.membership_multi', False)
        is_membership_multi = self.env['ir.config_parameter'].sudo().get_param('sales_team.membership_multi', False)
        user_memberships = dict.fromkeys(existing.user_id.ids, self.env['crm.team.member'])
            existing_to_archive += user_memberships.get(values['user_id'], self.env['crm.team.member']).filtered(
            team = self.env['crm.team']._get_default_team_id()
            team = self.env['crm.team']._get_default_team_id()
            team = self.env['crm.team']._get_default_team_id()
            team = self.env['crm.team']._get_default_team_id()
            team = self.env['crm.team']._get_default_team_id()
        team_c2 = self.env['crm.team'].browse(self.team_c2.id)
        self.assertEqual(team_c2.member_ids, self.env['res.users'])
        self.assertEqual(team_c2.member_ids, self.env['res.users'])
        team_c2 = self.env['crm.team'].browse(self.team_c2.id)
        self.assertEqual(team_c2.member_ids, self.env['res.users'])
        self.assertEqual(team_c2.member_ids, self.env['res.users'])
        self.sales_team_1 = self.env['crm.team'].create({
        sales_team_1_m1 = self.env['crm.team.member'].create({
        sales_team_1_m2 = self.env['crm.team.member'].create({
        found = self.env['crm.team.member'].search([
            self.env['crm.team.member'].create({
            self.env['crm.team.member'].create([
        self.env['ir.config_parameter'].sudo().set_param('sales_team.membership_multi', False)
        self.env['ir.config_parameter'].sudo().set_param('sales_team.membership_multi', False)
        self.assertEqual(new_team.member_ids, self.env['res.users'])
        new_user = self.env['res.users'].search([('login', '=', 'mcfly@test.example.com')])
        memberships = self.env['crm.team.member'].with_context(active_test=False).search([('user_id', '=', self.user_sales_leads.id)])
            self.env['crm.team.member'].create({'crm_team_id': new_team.id, 'user_id': new_user.id})
        self.assertEqual(new_team.member_ids, self.env['res.users'])
        new_user = self.env['res.users'].search([('login', '=', 'mcfly@test.example.com')])
            self.env['crm.team.member'].create({'crm_team_id': new_team.id, 'user_id': new_user.id})
        self.env['ir.config_parameter'].sudo().set_param('sales_team.membership_multi', False)
        sales_team_1 = self.env['crm.team'].browse(self.sales_team_1.ids)
        new_team = self.env['crm.team'].browse(self.new_team.ids)
        self.assertEqual(new_team.member_ids, self.env['res.users'])
        memberships = self.env['crm.team.member'].with_context(active_test=False).search([('user_id', '=', self.user_sales_leads.id)])
        memberships_new = self.env['crm.team.member'].with_context(active_test=False).search([('user_id', '=', self.user_sales_leads.id)])
        sales_team_1 = self.env['crm.team'].browse(self.sales_team_1.ids)
        new_team = self.env['crm.team'].browse(self.new_team.ids)
        self.assertEqual(new_team.member_ids, self.env['res.users'])
        memberships = self.env['crm.team.member'].with_context(active_test=False).search([('user_id', '=', self.user_sales_leads.id)])
        memberships_new = self.env['crm.team.member'].with_context(active_test=False).search([('user_id', '=', self.user_sales_leads.id)])
        sales_team_1 = self.env['crm.team'].browse(self.sales_team_1.ids)
        new_team = self.env['crm.team'].browse(self.new_team.ids)
        self.assertEqual(new_team.crm_team_member_ids, self.env['crm.team.member'])
        self.assertEqual(new_team.crm_team_member_all_ids, self.env['crm.team.member'])
        self.assertEqual(new_team.member_ids, self.env['res.users'])
        new_member = self.env['crm.team.member'].create({
        added = self.env['crm.team.member'].search([('crm_team_id', '=', new_team.id), ('user_id', '=', self.user_sales_leads.id)])
        admin_original = self.env['crm.team.member'].search([
        admin_archived = self.env['crm.team.member'].create({
                    'partner': all_partners[0] if all_partners else self.env['res.partner'],
                    for fname in self.env['res.partner']._sms_get_number_fields():
                    'partner': self.env['res.partner'],
        composer = self.env['sms.composer'].with_context(**composer_context).create(create_vals)
            body = self.env['sms.template']._render_template(template_fallback, self._name, self.ids)[self.id]
            subtype_id = self.env['ir.model.data']._xmlid_to_res_id('mail.mt_note')
        sms_all = self.env['sms.sms'].sudo()
            for partner in self.env['res.partner'].sudo().browse(partner_ids):
            sms_all |= self.env['sms.sms'].sudo().create(sms_create_vals)
                existing = self.env['mail.notification'].sudo().search([
                self.env['mail.notification'].sudo().create(notif_create_values)
            res['model_id'] = self.env['ir.model']._get(res['model']).id
        self._new_sms = self.env['sms.sms'].sudo()
        self.env['sms.sms'].sudo().search([('state', '=', 'outgoing')]).unlink()
        sms = self.env['sms.sms'].sudo().search(domain)
        self.assertEqual(self.env['mail.notification'].search(base_domain), self.env['mail.notification'])
        partners = self.env['res.partner'].concat(*list(p['partner'] for p in recipients_info if p.get('partner')))
        notifications = self.env['mail.notification'].search(base_domain)
            partner = recipient_info.get('partner', self.env['res.partner'])
        for sms_template in self.env['sms.template'].browse(self.sms_templates.ids):
                self.env['sms.template'].create({
        for sms_template in self.env['sms.template'].browse(self.sms_templates.ids):
            self.env['sms.template'].create({
            self.assertTrue(bool(self.env['sms.template'].with_user(admin).browse(sms_template.ids).name))
        self.env['ir.config_parameter'].sudo().set_param('mail.restrict.template.rendering', True)
        sms_composer = self.env['sms.composer'].create({
        self.env['ir.config_parameter'].sudo().set_param('mail.restrict.template.rendering', True)
        sms_composer = self.env['sms.composer'].create({
                self.env['mail.notification'].browse(notif_ids).sudo().write({'notification_status': 'canceled'})
                self.env['mail.message'].browse(message_ids)._notify_message_notification_update()
                composer.active_domain_count = self.env[composer.res_model].search_count(literal_eval(composer.active_domain or '[]'))
        self.env['sms.api']._send_sms_batch([{
        subtype_id = self.env['ir.model.data']._xmlid_to_res_id('mail.mt_note')
            return self.env['sms.sms'].sudo().search([('id', 'in', sms_all.ids)])
            bl_numbers = self.env['phone.blacklist'].sudo().search([]).mapped('number')
            all_bodies = self.env['mail.render.mixin']._render_template(self.body, records._name, records.ids)
        return self.env['sms.sms'].sudo().create(sms_create_vals)
                template = self.env['sms.template'].browse(template_id)
                template = self.env['sms.template'].browse(template_id)
                template = self.env['sms.template'].browse(template_id)
            records = self.env[self.res_model].search(active_domain)
            records = self.env[self.res_model].browse(literal_eval(self.res_ids))
            records = self.env[self.res_model].browse(self.res_id)
        return [(model.model, model.name) for model in self.env['ir.model'].sudo().search([])]
        return self.env['res.lang'].get_installed()
        sms_template = self.env['sms.template'].browse(sms_template_id)
        res = self.env[sms_template.model_id.model].search([], limit=1)
            preview.no_record = (self.env[preview.model_id.model].search_count([]) == 0) if preview.model_id else True
            letters = self.env['snailmail.letter'].search([
            msg_id = self.env[vals['model']].browse(vals['res_id']).message_post(
            partner_id = self.env['res.partner'].browse(vals['partner_id'])
        self.env['mail.notification'].sudo().create(notification_vals)
        obj = self.env[self.model].browse(self.res_id)
                report = self.env['ir.actions.report']._get_report_from_name(report_name)
            attachment = self.env['ir.attachment'].create({
        account_token = self.env['iap.account'].get('snailmail').account_token
        dbuuid = self.env['ir.config_parameter'].sudo().get_param('database.uuid')
            link = self.env['iap.account'].get_credits_url(service_name='snailmail')
            link = self.env['iap.account'].get_credits_url(service_name='snailmail', trial=True)
        endpoint = self.env['ir.config_parameter'].sudo().get_param('snailmail.endpoint', DEFAULT_ENDPOINT)
        timeout = int(self.env['ir.config_parameter'].sudo().get_param('snailmail.timeout', DEFAULT_TIMEOUT))
        return not self.env['ir.config_parameter'].sudo().get_param('%s.warning_shown' % self._name, False)
        self.env['ir.config_parameter'].sudo().set_param('%s.warning_shown' % self._name, True)
        self.env['ir.config_parameter'].sudo().set_param('%s.warning_shown' % self._name, True)
            letters = self.env['snailmail.letter'].search([
        letters_to_resend = self.env['snailmail.letter'].search([
        self.letter = self.env['snailmail.letter'].create({
        invoice = self.env['account.move'].with_context(default_move_type='out_invoice').create({
            invalid_invoices = wizard.invoice_ids.filtered(lambda i: not self.env['snailmail.letter']._is_valid_address(i.partner_id))
            letter = self.env['snailmail.letter'].create({
            if self.env['snailmail.confirm.invoice'].show_warning():
                wizard = self.env['snailmail.confirm.invoice'].create({'model_name': _('Invoice'), 'invoice_send_id': self.id})
        self.env['bus.bus']._sendone(self.env.user.partner_id, 'snailmail_invalid_address', {
        Move = self.env['stock.move'].with_context(active_test=False)
        Quant = self.env['stock.quant'].with_context(active_test=False)
        incoming_moves = self.env['stock.move.line'].read_group([
        outgoing_moves = self.env['stock.move.line'].read_group([
                ids |= set(self.env[model].search(domain).ids)
        locations = self.env['stock.location'].browse(location_ids)
        quants_groupby = self.env['stock.quant'].read_group(domain_quant, ['product_id', 'quantity'], ['product_id'], orderby='id')
            products_without_quants_in_domain = self.env['product.product'].search([
        read_group_res = self.env['stock.warehouse.orderpoint'].read_group(
                location=self.env['stock.location'].browse(self._context['active_id']).name,
            location = self.env['stock.location'].browse(self._context['location'])
        action = self.env["ir.actions.actions"]._for_xml_id("stock.action_orderpoint")
        action = self.env["ir.actions.actions"]._for_xml_id("stock.stock_move_line_action")
        return self.env['product.template']._get_action_view_related_putaway_rules(domain)
        action = self.env["ir.actions.actions"]._for_xml_id("stock.action_storage_category_capacity")
        action = self.env["ir.actions.actions"]._for_xml_id("stock.action_production_lot_form")
                warehouse = self.env['stock.warehouse'].search(
        action = self.env['stock.quant'].action_view_inventory()
        action = self.env["ir.actions.actions"]._for_xml_id("stock.stock_replenishment_product_product_action")
        product_id = self.env['product.product'].browse(product_id)
        location_id = self.env['stock.location'].browse(location_id)
        lot_id = self.env['stock.production.lot'].browse(lot_id)
        package_id = self.env['stock.quant.package'].browse(package_id)
        owner_id = self.env['res.partner'].browse(owner_id)
        to_uom = self.env['uom.uom'].browse(to_uom)
        quants = self.env['stock.quant']._gather(product_id, location_id, lot_id=lot_id, package_id=package_id, owner_id=owner_id, strict=True)
        rule = self.env['procurement.group']._get_rule(self, location, {
        quants_groupby = self.env['stock.quant'].read_group(domain_quant, ['product_id', 'quantity'], ['product_id'], orderby='id')
        lines = self.env['stock.production.lot'].read_group(domain, ['product_id'], ['product_id'])
        default=lambda self: self.env['stock.location.route'].search_count([('product_selectable', '=', True)]))
        self.has_available_route_ids = self.env['stock.location.route'].search_count([('product_selectable', '=', True)])
        incoming_moves = self.env['stock.move.line'].read_group([
        outgoing_moves = self.env['stock.move.line'].read_group([
            product = self.env['product.product'].browse([move['product_id'][0]])
            product = self.env['product.product'].browse([move['product_id'][0]])
        product_variant_query = self.env['product.product']._search(domain)
        product_variant_query = self.env['product.product']._search(domain)
        product_variant_query = self.env['product.product']._search(domain)
        product_variant_query = self.env['product.product']._search(domain)
        product_data = self.env['stock.warehouse.orderpoint'].read_group([('product_id.product_tmpl_id', 'in', self.ids)], ['product_id', 'product_min_qty', 'product_max_qty'], ['product_id'])
            product = self.env['product.product'].browse([data['product_id'][0]])
        if self.ids and self.product_variant_ids.ids and self.env['stock.move.line'].sudo().search_count([
            new_uom = self.env['uom.uom'].browse(vals['uom_id'])
            done_moves = self.env['stock.move'].search([('product_id', 'in', updated.with_context(active_test=False).mapped('product_variant_ids').ids)], limit=1)
            existing_move_lines = self.env['stock.move.line'].search([
        self.env['stock.storage.category.capacity'].create(storage_category_capacity_vals)
            action = self.env["ir.actions.actions"]._for_xml_id("stock.action_change_product_quantity")
        action = self.env["ir.actions.actions"]._for_xml_id("stock.stock_move_line_action")
        action = self.env["ir.actions.actions"]._for_xml_id("stock.action_production_lot_form")
            products = self.env['product.product'].browse(self.env.context['default_product_id'])
            products = self.env['product.template'].browse(self.env.context['default_product_tmpl_id']).product_variant_ids
            warehouse = self.env['stock.warehouse'].search([('company_id', '=', company.id)], limit=1)
        action = self.env["ir.actions.actions"]._for_xml_id("stock.action_stock_rules_report")
        action = self.env["ir.actions.actions"]._for_xml_id('stock.stock_replenishment_product_product_action')
                if self.env['stock.move'].sudo().search_count([
                if self.env['stock.move.line'].sudo().search_count([
                if self.env['stock.quant'].sudo().search_count([
        get_param = self.env['ir.config_parameter'].sudo().get_param
            wh = self.env['stock.warehouse'].search([('company_id', '=', self.env.company.id)], limit=1)
            product_template = self.env['product.template'].browse(self.env.context.get('active_id'))
            product = self.env[active_model].browse(self.env.context.get('active_id'))
            child_location_count = self.env['stock.location'].search_count([
            location = self.env['stock.location'].create({
            inventory_loss_location = self.env['stock.location'].create({
            self.env['ir.property']._set_default(
            production_location = self.env['stock.location'].create({
            self.env['ir.property']._set_default(
            scrap_location = self.env['stock.location'].create({
            self.env['ir.sequence'].create(scrap_vals)
        company_ids  = self.env['res.company'].search([])
        company_with_warehouse = self.env['stock.warehouse'].with_context(active_test=False).search([]).mapped('company_id')
            self.env['stock.warehouse'].create({
        company_without_transit = self.env['res.company'].search([('internal_transit_location_id', '=', False)])
        company_ids  = self.env['res.company'].search([])
        inventory_loss_product_template_field = self.env['ir.model.fields']._get('product.template', 'property_stock_inventory')
        companies_having_property = self.env['ir.property'].sudo().search([('fields_id', '=', inventory_loss_product_template_field.id), ('res_id', '=', False)]).mapped('company_id')
        company_ids  = self.env['res.company'].search([])
        production_product_template_field = self.env['ir.model.fields']._get('product.template', 'property_stock_production')
        companies_having_property = self.env['ir.property'].sudo().search([('fields_id', '=', production_product_template_field.id), ('res_id', '=', False)]).mapped('company_id')
        company_ids  = self.env['res.company'].search([])
        companies_having_scrap_loc = self.env['stock.location'].search([('scrap_location', '=', True)]).mapped('company_id')
        company_ids  = self.env['res.company'].search([])
        company_has_scrap_seq = self.env['ir.sequence'].search([('code', '=', 'stock.scrap')]).mapped('company_id')
        self.env['stock.warehouse'].sudo().create({
            picking_types = self.env['stock.picking.type'].with_context(active_test=False).search([
        warehouses = self.env['stock.warehouse'].search([('view_location_id', 'parent_of', self.ids)])
            reserved_quantities = self.env['stock.move.line'].search_count([
                    warehouses = self.env['stock.warehouse'].search([('active', '=', True), '|', ('lot_stock_id', '=', location.id), ('view_location_id', '=', location.id)])
                children_location = self.env['stock.location'].with_context(active_test=False).search([('id', 'child_of', self.ids)])
                children_quants = self.env['stock.quant'].search(['&', '|', ('quantity', '!=', 0), ('reserved_quantity', '!=', 0), ('location_id', 'in', internal_children_locations.ids)])
            move_line_data = self.env['stock.move.line'].read_group([
            quant_data = self.env['stock.quant'].read_group([
                uoms = self.env['uom.uom'].browse(values['product_uom_id'])
            loc.warehouse_domain_ids = self.env['stock.warehouse'].search(domain)
            return self.env['stock.picking'].browse(self.env.context['default_picking_id']).group_id.id
            data = self.env['stock.move.line'].read_group(
                    self.env['uom.uom'].browse(line_uom_id)._compute_quantity(qty, uom, round=False)
                    move_line = self.env['stock.move.line'].create(dict(move._prepare_move_line_vals(), qty_done=quantity_done))
                      self.env['stock.move.line'].read_group([('move_id', 'in', self.ids)], ['move_id', 'product_qty'], ['move_id'])}
                total_availability = self.env['stock.quant']._get_available_quantity(move.product_id, move.location_id) if move.product_id else 0.0
            read_res = self.env['product.product'].browse(product_ids).with_context(warehouse=key_context[0], to_date=key_context[1]).read(['virtual_available'])
            lots_by_move_id = self.env['stock.move.line'].read_group(
            picking_id = self.env['stock.picking'].browse(self.env.context['default_picking_id'])
                    self.env['stock.move.line']._log_message(move.picking_id, move, 'stock.track_move_template', vals)
            odoobot_id = self.env['ir.model.data']._xmlid_to_res_id("base.partner_root")
            self.next_serial = self.env['stock.production.lot']._get_next_serial(self.company_id, self.product_id)
        action = self.env["ir.actions.actions"]._for_xml_id("stock.act_assign_serial_numbers")
        moves_to_unreserve = self.env['stock.move'].browse(moves_to_unreserve)
        ml_to_update, ml_to_unlink = self.env['stock.move.line'].browse(ml_to_update), self.env['stock.move.line'].browse(ml_to_unlink)
        moves_not_to_recompute = self.env['stock.move'].browse(moves_not_to_recompute)
        lot_names = self.env['stock.production.lot'].generate_lot_names(self.next_serial, next_serial_count or self.next_serial_count)
                rule = self.env['procurement.group']._search_rule(move.route_ids, move.product_packaging_id, move.product_id, warehouse_id, domain)
        return self.env['stock.move'].concat(*new_moves)
        moves_by_neg_key = defaultdict(lambda: self.env['stock.move'])
                moves = self.env['stock.move'].concat(*g)
        quants = self.env['stock.quant'].search([('product_id', '=', self.product_id.id),
                existing_lots = self.env['stock.production.lot'].search([
        picking = self.env['stock.picking'].search(domain, limit=1)
            moves = self.env['stock.move'].concat(*list(moves))
            procurement_requests.append(self.env['procurement.group'].Procurement(
        self.env['procurement.group'].run(procurement_requests, raise_user_error=not self.env.context.get('from_orderpoint'))
            rounding = self.env['decimal.precision'].precision_get('Product Unit of Measure')
        rounding = self.env['decimal.precision'].precision_get('Product Unit of Measure')
                    quants = self.env['stock.quant']._update_reserved_quantity(
                    self.env['stock.move.line'].create([self._prepare_move_line_vals(quantity=1, reserved_quant=reserved_quant) for i in range(int(quantity))])
                    self.env['stock.move.line'].create(self._prepare_move_line_vals(quantity=quantity, reserved_quant=reserved_quant))
        return self.env['stock.quant']._get_available_quantity(self.product_id, location_id, lot_id=lot_id, package_id=package_id, owner_id=owner_id, strict=strict, allow_negative=allow_negative)
                grouped_move_lines_out[k] = sum(self.env['stock.move.line'].concat(*list(g)).mapped('product_qty'))
        self.env['stock.move.line'].create(move_line_vals_list)
            rounding = self.env['decimal.precision'].precision_get('Product Unit of Measure')
        backorder_moves = self.env['stock.move'].create(backorder_moves_vals)
        move_dests_per_company = defaultdict(lambda: self.env['stock.move'])
        decimal_precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
        new_product_qty = float_round(new_product_qty, precision_digits=self.env['decimal.precision'].precision_get('Product Unit of Measure'))
            rules = self.env['procurement.group']._search_rule(False, move.product_packaging_id, product_id, move.warehouse_id, domain)
            products = self.env['product.product'].browse(product_ids).with_context(location=location.id)
        if not self or self.env['ir.config_parameter'].sudo().get_param('stock.no_auto_scheduler'):
        orderpoints_by_company = defaultdict(lambda: self.env['stock.warehouse.orderpoint'])
            orderpoint = self.env['stock.warehouse.orderpoint'].search([
        if not self or self.env['ir.config_parameter'].sudo().get_param('stock.picking_no_auto_reserve'):
        moves_to_reserve = self.env['stock.move'].search(expression.AND([static_domain, expression.OR(domains)]),
        wh_location_query = self.env['stock.location']._search([('id', 'child_of', warehouse.view_location_id.id)])
        in_domain, out_domain = self.env['report.stock.report_product_product_replenishment']._move_confirmed_domain(
        outs = self.env['stock.move'].search(out_domain, order='reservation_date, priority desc, date, id')
        reserved_outs = self.env['stock.move'].search(
        ins = self.env['stock.move'].search(in_domain, order='priority desc, date, id')
            if move_line.state == 'done' and not float_is_zero(move_line.product_uom_qty, precision_digits=self.env['decimal.precision'].precision_get('Product Unit of Measure')):
                        lots = self.env['stock.production.lot'].search([('product_id', '=', self.product_id.id),
                        message, recommended_location = self.env['stock.quant']._check_serial_number(self.product_id,
                vals['company_id'] = self.env['stock.move'].browse(vals['move_id']).company_id.id
                vals['company_id'] = self.env['stock.picking'].browse(vals['picking_id']).company_id.id
            new_move = self.env['stock.move'].create({
        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
                updates[key] = self.env[model].browse(vals[key])
        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
                    self.env['stock.quant']._update_reserved_quantity(ml.product_id, ml.location_id, -ml.product_qty, lot_id=ml.lot_id, package_id=ml.package_id, owner_id=ml.owner_id, strict=True)
                        self.env['stock.quant']._update_reserved_quantity(ml.product_id, ml.location_id, -ml.product_qty, lot_id=False, package_id=ml.package_id, owner_id=ml.owner_id, strict=True)
            precision_digits = self.env['decimal.precision'].precision_get('Product Unit of Measure')
                                lot = self.env['stock.production.lot'].search([
            mls_tracked_without_lot = self.env['stock.move.line'].browse(ml_ids_tracked_without_lot)
        ml_to_create_lot = self.env['stock.move.line'].browse(ml_ids_to_create_lot)
        mls_to_delete = self.env['stock.move.line'].browse(ml_ids_to_delete)
        key_to_mls = defaultdict(lambda: self.env['stock.move.line'])  # key to all mls
        lots = self.env['stock.production.lot'].create(lot_vals)
            data['lot_name'] = self.env['stock.production.lot'].browse(vals.get('lot_id')).name
            data['location_name'] = self.env['stock.location'].browse(vals.get('location_id')).name
            data['location_dest_name'] = self.env['stock.location'].browse(vals.get('location_dest_id')).name
            data['package_name'] = self.env['stock.quant.package'].browse(vals.get('package_id')).name
            data['result_package_name'] = self.env['stock.quant.package'].browse(vals.get('result_package_id')).name
            data['owner_name'] = self.env['res.partner'].browse(vals.get('owner_id')).name
        available_quantity = self.env['stock.quant']._get_available_quantity(
            outdated_candidates = self.env['stock.move.line'].search(outdated_move_lines_domain).sorted(current_picking_first)
            self.env['stock.move.line'].browse(to_unlink_candidate_ids).unlink()
            warehouse = self.env['stock.warehouse'].search([('company_id', '=', res['company_id'])], limit=1)
        default=lambda self: self.env['ir.sequence'].next_by_code('stock.orderpoint'))
            other_warehouses = self.env['stock.warehouse'].search([('id', '!=', orderpoint.warehouse_id.id)])
            orderpoint.allowed_location_ids = self.env['stock.location'].search(loc_domain)
            self.warehouse_id = self.env['stock.warehouse'].search([
        action = self.env['ir.actions.actions']._for_xml_id('stock.action_stock_replenishment_info')
        res = self.env['stock.replenishment.info'].create({
        orderpoints_contexts = defaultdict(lambda: self.env['stock.warehouse.orderpoint'])
        rules_groups = self.env['stock.rule'].read_group([
        action = self.env["ir.actions.actions"]._for_xml_id("stock.action_orderpoint_replenish")
        orderpoints = self.env['stock.warehouse.orderpoint'].with_context(active_test=False).search([])
        qty_by_product_warehouse = self.env['report.stock.quantity'].read_group(
            product = self.env['product.product'].browse(product).with_prefetch(all_product_ids)
            warehouse = self.env['stock.warehouse'].browse(warehouse).with_prefetch(all_warehouse_ids)
            products = self.env['product.product'].browse(p_ids)
        dummy, qty_by_product_wh = self.env['product.product'].browse(product_ids)._get_quantity_in_progress(warehouse_ids=warehouse_ids)
        rounding = self.env['decimal.precision'].precision_get('Product Unit of Measure')
        orderpoint_by_product_warehouse = self.env['stock.warehouse.orderpoint'].read_group(
        lot_stock_id_by_warehouse = self.env['stock.warehouse'].search_read([
        orderpoint_by_product_location = self.env['stock.warehouse.orderpoint'].with_context(active_test=False).read_group(
                self.env['stock.warehouse.orderpoint'].browse(orderpoint_id).qty_forecast += product_qty
                orderpoint_values = self.env['stock.warehouse.orderpoint']._get_orderpoint_values(product, lot_stock_id)
                    'company_id': self.env['stock.warehouse'].browse(warehouse).company_id.id,
        orderpoints = self.env['stock.warehouse.orderpoint'].with_user(SUPERUSER_ID).create(orderpoint_values_list)
        orderpoints_to_remove = self.env['stock.warehouse.orderpoint'].with_context(active_test=False).search(domain)
            orderpoints_batch = self.env['stock.warehouse.orderpoint'].browse(orderpoints_batch_ids)
                        procurements.append(self.env['procurement.group'].Procurement(
                        self.env['procurement.group'].with_context(from_orderpoint=True).run(procurements, raise_user_error=raise_user_error)
                    failed_orderpoints = self.env['stock.warehouse.orderpoint'].concat(*[o[0] for o in orderpoints_exceptions])
                existing_activity = self.env['mail.activity'].search([
                            self.env['stock.move.line'].create({
                    self.env['stock.move'].create({
            grouped_quants[k] = sum(self.env['stock.quant'].concat(*list(g)).mapped('quantity'))
            grouped_ops[k] = sum(self.env['stock.move.line'].concat(*list(g)).mapped(field))
                wh = self.env['stock.warehouse'].browse(vals['warehouse_id'])
                vals['sequence_id'] = self.env['ir.sequence'].sudo().create({
                vals['sequence_id'] = self.env['ir.sequence'].sudo().create({
            data = self.env['stock.picking'].read_group(domains[field] +
        warehouse = self.env['stock.warehouse'].search([('company_id', '=', self.company_id.id)], limit=1)
            warehouse = self.env['stock.warehouse'].search([('company_id', '=', self.company_id.id)], limit=1)
        action = self.env["ir.actions.actions"]._for_xml_id(action_xmlid)
        if self.env['ir.config_parameter'].sudo().get_param('stock.no_default_immediate_tranfer'):
        default=lambda self: self.env['stock.picking.type'].browse(self._context.get('default_picking_type_id')).default_location_src_id,
        default=lambda self: self.env['stock.picking.type'].browse(self._context.get('default_picking_type_id')).default_location_dest_id,
        delay_alert_date_data = self.env['stock.move'].read_group([('id', 'in', self.move_lines.ids), ('delay_alert_date', '!=', False)], ['delay_alert_date:max'], 'picking_id')
        for move in self.env['stock.move'].search([('picking_id', 'in', self.ids)]):
                relevant_move_state = self.env['stock.move'].browse(picking_move_lines[picking.id])._get_relevant_state_among_moves()
            picking.has_scrap_move = bool(self.env['stock.move'].search_count([('picking_id', '=', picking.id), ('scrapped', '=', True)]))
        cnt_by_picking = self.env['stock.move.line'].read_group(domain, ['picking_id'], ['picking_id'])
            wh_location_ids = self.env['stock.location']._search([('id', 'child_of', picking_type_id.warehouse_id.view_location_id.id), ('usage', '!=', 'supplier')])
            if self.env['stock.move'].search([
        late_stock_moves = self.env['stock.move'].search([('delay_alert_date', operator, value)])
                moves = self.env['stock.move'].search([('picking_id', '=', picking_id)])
                customerloc, location_id = self.env['stock.warehouse']._get_partner_locations()
                location_dest_id, supplierloc = self.env['stock.warehouse']._get_partner_locations()
        picking_type = self.env['stock.picking.type'].browse(vals.get('picking_type_id', defaults.get('picking_type_id')))
        precision_digits = self.env['decimal.precision'].precision_get('Product Unit of Measure')
            grouped_quants[k] = sum(self.env['stock.quant'].concat(*list(g)).mapped('quantity'))
            grouped_ops[k] = sum(self.env['stock.move.line'].concat(*list(g)).mapped('product_qty'))
                        self.env['stock.package_level'].create({
            precision_digits = self.env['decimal.precision'].precision_get('Product Unit of Measure')
                wh_location_ids = self.env['stock.location']._search([('id', 'child_of', self.picking_type_id.warehouse_id.view_location_id.id), ('usage', '!=', 'supplier')])
                if self.env['stock.move'].search([
        prec = self.env["decimal.precision"].precision_get("Product Unit of Measure")
        precision_digits = self.env['decimal.precision'].precision_get('Product Unit of Measure')
        origin_objects = self.env[list(orig_obj_changes.keys())[0]._name].concat(*list(orig_obj_changes.keys()))
                for document, responsible, visited in visited_move._get_upstream_documents_and_responsibles(self.env[visited_move._name]):
            moves = self.env[moves[0]._name].concat(*moves)
            origin_moves = self.env['stock.move'].browse([move.id for move_orig in rendering_context.values() for move in move_orig[0]])
            move_dest_ids = self.env['stock.move'].concat(*rendering_context.keys())
        return _explore(self.env['stock.picking'], self.env['stock.move'], moves)
            wiz = self.env['stock.package.destination'].create({
            package = self.env['stock.quant.package'].create({})
            precision_digits = self.env['decimal.precision'].precision_get('Product Unit of Measure')
                package_level = self.env['stock.package_level'].create({
        action = self.env["ir.actions.actions"]._for_xml_id("stock.action_stock_scrap")
        scraps = self.env['stock.scrap'].search([('picking_id', '=', self.id)])
        action = self.env["ir.actions.actions"]._for_xml_id("stock.action_package_view")
        action = self.env["ir.actions.actions"]._for_xml_id("stock.stock_move_action")
        return self.env["ir.actions.actions"]._for_xml_id("stock.stock_reception_action")
        'Lot/Serial Number', default=lambda self: self.env['ir.sequence'].next_by_code('stock.lot.serial'),
            last_serial = self.env['stock.production.lot'].search(
                return self.env['stock.production.lot'].generate_lot_names(last_serial.name, 2)[1]
                product_name = self.env['product.product'].browse(rec['product_id'][0]).display_name
            picking_id = self.env['stock.picking'].browse(active_picking_id)
            move_lines = self.env['stock.move.line'].search([('lot_id', 'in', self.ids), ('product_id', '!=', vals['product_id'])])
        return self.env['stock.quant']._get_quants_action()
        move_lines = self.env['stock.move.line'].search(domain)
            product_template = self.env['product.template'].browse(self.env.context.get('active_id'))
        domain_loc = self.env['product.product']._get_domain_locations()[0]
        quant_query = self.env['stock.quant']._search(domain_loc)
            product = self.env['product.product'].browse(vals['product_id'])
            location = self.env['stock.location'].browse(vals['location_id'])
            lot_id = self.env['stock.production.lot'].browse(vals.get('lot_id'))
            package_id = self.env['stock.quant.package'].browse(vals.get('package_id'))
            owner_id = self.env['res.partner'].browse(vals.get('owner_id'))
        warehouse = self.env['stock.warehouse'].search([('company_id', '=', company_user.id)], limit=1)
        action = self.env["ir.actions.actions"]._for_xml_id("stock.stock_move_line_action")
            message, dummy = self.env['stock.quant']._check_serial_number(self.product_id,
            previous_quants = self.env['stock.quant'].search([
            self.location_id = self.env['stock.warehouse'].search(
        moves = self.env['stock.move'].with_context(inventory_mode=False).create(move_vals)
        quant_ids = self.env['stock.quant'].browse([quant['id'] for quant in self.env.cr.dictfetchall()])
            warehouse = self.env['stock.warehouse'].search([('company_id', '=', company_user.id)], limit=1)
            quants = self.env['stock.quant'].search([('product_id', '=', product_id.id),
        default=lambda self: self.env['ir.sequence'].next_by_code('stock.quant.package') or _('Unknown Pack'))
            move_line_to_modify = self.env['stock.move.line'].search([
        self.env['stock.quant']._quant_tasks()
        action = self.env["ir.actions.actions"]._for_xml_id("stock.action_picking_tree_all")
        pickings = self.env['stock.move.line'].search(domain).mapped('picking_id')
        return self.env['stock.quant'].search([('package_id', 'in', self.ids)])
            products = self.env['product.product'].browse(product_ids).with_context(location=location.id)
            moves = self.env['stock.move'].with_user(SUPERUSER_ID).sudo().with_company(company_id).create(moves_values)
        default=lambda self: self.env['ir.sequence'].next_by_code('procurement.group') or '',
            if hasattr(self.env['stock.rule'], '_run_%s' % action):
                    getattr(self.env['stock.rule'], '_run_%s' % action)(procurements)
        orderpoints = self.env['stock.warehouse.orderpoint'].search(domain)
        moves_to_assign = self.env['stock.move'].search(domain, limit=None,
            self.env['stock.move'].browse(moves_chunk).sudo()._action_assign()
        self.env['stock.quant']._quant_tasks()
        return self.env['stock.location'].search([('scrap_location', '=', True), ('company_id', 'in', [company_id, False])], limit=1).id
        warehouse = self.env['stock.warehouse'].search([('company_id', '=', company_id)], limit=1)
            warehouse = self.env['stock.warehouse'].search([('company_id', '=', self.company_id.id)], limit=1)
                self.scrap_location_id = self.env['stock.location'].search([
            message, recommended_location = self.env['stock.quant']._check_serial_number(self.product_id,
            scrap.name = self.env['ir.sequence'].next_by_code('stock.scrap') or _('New')
            move = self.env['stock.move'].create(scrap._prepare_move_values())
        action = self.env['ir.actions.act_window']._for_xml_id('stock.action_picking_tree_all')
        action = self.env['ir.actions.act_window']._for_xml_id('stock.stock_move_line_action')
        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
        available_qty = sum(self.env['stock.quant']._gather(self.product_id,
        count = self.env['stock.warehouse'].with_context(active_test=False).search_count([('company_id', '=', self.env.company.id)])
        vals['view_location_id'] = self.env['stock.location'].create(loc_vals).id
            vals[field_name] = self.env['stock.location'].with_context(active_test=False).create(values).id
                picking_type_ids = self.env['stock.picking.type'].with_context(active_test=False).search([('warehouse_id', '=', warehouse.id)])
                move_ids = self.env['stock.move'].search([
                location_ids = self.env['stock.location'].with_context(active_test=False).search([('location_id', 'child_of', warehouse.view_location_id.id)])
                picking_type_using_locations = self.env['stock.picking.type'].search([
                rule_ids = self.env['stock.rule'].with_context(active_test=False).search([('warehouse_id', '=', warehouse.id)])
        cnt_by_company = self.env['stock.warehouse'].sudo().read_group([('active', '=', True)], ['company_id'], groupby=['company_id'])
            self.env['res.partner'].browse(partner_id).with_company(company_id).write({'property_stock_customer': transit_loc, 'property_stock_supplier': transit_loc})
            self.env['res.partner'].browse(partner_id).write({'property_stock_customer': transit_loc, 'property_stock_supplier': transit_loc})
        IrSequenceSudo = self.env['ir.sequence'].sudo()
        max_sequence = self.env['stock.picking.type'].search_read([('sequence', '!=', False)], ['sequence'], limit=1, order='sequence desc')
                self[rule_field] = self.env['stock.rule'].create(values)
            route = self.env['stock.location.route'].search([('name', 'like', route_name)], limit=1)
                route = self.env['stock.location.route'].create(route_data['route_create_values'])
            existing_rule = self.env['stock.rule'].search([
                self.env['stock.rule'].create(rule_vals)
        location = self.env['stock.location'].with_context(active_test=False).search([
                    missing_location[location] = self.env['stock.location'].create(location_values).id
        routes = self.env['stock.location.route'].search([('supplier_wh_id', '=', self.id)])
        routes = self.env['stock.location.route'].search([('supplied_wh_id', 'in', self.ids)])
        self.env['stock.rule'].search([
        routes |= self.env["stock.location.route"].search([('supplied_wh_id', 'in', self.ids)])
        self.env['res.config.settings'].create({
        self.env['res.config.settings'].create({
        warehouses = self.env['stock.warehouse'].browse(self.env.registry.populated_models['stock.warehouse'])
                        child_locations = self.env['stock.location'].concat(*children)
        removal_strategies = self.env['product.removal'].search([])
        product_ids = self.env['product.product'].browse(self.env.registry.populated_models['product.product']).filtered(lambda p: p.type == 'product').ids
        location_ids = self.env['stock.location'].browse(self.env.registry.populated_models['stock.location']).filtered(lambda loc: loc.usage == 'internal')
            child_locs = self.env['stock.location'].search([
            ]) + self.env['stock.location'].browse(values['location_in_id'])
        warehouses = self.env['stock.warehouse'].browse(warehouse_ids)
            warehouse.id: self.env['stock.location'].search([('id', 'child_of', warehouse.lot_stock_id.id)]).ids
        supplierinfos = self.env['product.supplierinfo'].browse(self.env.registry.populated_models['product.supplierinfo'])
            warehouse = self.env['stock.warehouse'].browse(values['warehouse_id'])
        product_ids = self.env['product.product'].search([
        locations = self.env['stock.location'].search([
        warehouses = self.env['stock.warehouse'].browse(self.env.registry.populated_models['stock.warehouse'])
        internal_locations = self.env['stock.location'].search([('company_id', 'in', company_ids), ('usage', '=', 'internal')])
        in_warehouse_locations = self.env['stock.location'].search([('id', 'child_of', warehouses.lot_stock_id.ids)])
            locations_by_company = {company_id: self.env['stock.location'].concat(*locations) for company_id, locations in locations_by_company.items()}
        picking_types_ids = self.env['stock.picking.type'].browse(self.env.registry.populated_models['stock.picking.type']).ids
        cross_company_locations = self.env['stock.location'].search([('company_id', '=', False)])
        locations_companies = self.env['stock.location'].search([('company_id', 'in', company_ids)])
        all_partners = self.env['res.partner'].browse(self.env.registry.populated_models['res.partner'])
        partners_inter_company = self.env['res.partner'].concat(*partners_by_company.get(False, []))
        partners_by_company = {com: self.env['res.partner'].concat(*partners) | partners_inter_company for com, partners in partners_by_company.items() if com}
            picking_type = self.env['stock.picking.type'].browse(values['picking_type_id'])
            picking_type = self.env['stock.picking.type'].browse(values['picking_type_id'])
            locations_by_company = {com: self.env['stock.location'].concat(*locs) for com, locs in locations_by_company.items()}
                picking_type = self.env['stock.picking.type'].browse(values['picking_type_id'])
            picking_to_confirm = self.env['stock.picking'].browse(random.sample(picking_ids, int(len(picking_ids) * sample_ratio)))
            picking_to_validate = self.env['stock.picking'].browse(random.sample(picking_ids, int(len(picking_ids) * sample_ratio)))
            lots = self.env["stock.production.lot"].create(lot_values)
            packages = self.env["stock.quant.package"].create(package_values)
            self.env['stock.move.line'].create(sml_values)
        picking_ids = self.env['stock.picking'].browse(self.env.registry.populated_models['stock.picking'])
        product_ids = self.env['product.product'].browse(self.env.registry.populated_models['product.product']).filtered(lambda p: p.type in ('product', 'consu')).ids
            return self.env['product.product'].browse(values['product_id']).uom_id.id
                    picking = self.env['stock.picking'].browse(values['picking_id'])
        incoming_moves = self.env['stock.move'].read_group(in_domain, ['product_qty:sum'], 'product_id')
        outgoing_moves = self.env['stock.move'].read_group(out_domain, ['product_qty:sum'], 'product_id')
            'precision': self.env['decimal.precision'].precision_get('Product Unit of Measure'),
            warehouse = self.env['stock.warehouse'].browse(self.env.context.get('warehouse'))
            warehouse = self.env['stock.warehouse'].browse(self.get_warehouses()[0]['id'])
        wh_location_ids = [loc['id'] for loc in self.env['stock.location'].search_read(
            product_templates = self.env['product.template'].browse(product_template_ids)
            product_variants = self.env['product.product'].browse(product_variant_ids)
        outs = self.env['stock.move'].search(out_domain, order='reservation_date, priority desc, date, id')
        reserved_outs = self.env['stock.move'].search(
        ins = self.env['stock.move'].search(in_domain, order='priority desc, date, id')
        return self.env['stock.warehouse'].search_read(fields=['id', 'name', 'code'])
            'precision': self.env['decimal.precision'].precision_get('Product Unit of Measure'),
        pickings = self.env['stock.picking'].search([('id', 'in', docids), ('picking_type_code', '!=', 'outgoing'), ('state', '!=', 'cancel')])
        wh_location_ids = self.env['stock.location']._search([('id', 'child_of', warehouse.view_location_id.id), ('usage', '!=', 'supplier')])
        outs = self.env['stock.move'].search(
                    sources_to_lines[source].append(self._prepare_report_line(qty_done, product_id, out, source[0], move_ins=self.env['stock.move'].browse(moves_in_ids)))
            moves_in = self.env['stock.move'].browse(qty_and_ins[1])
            'precision': self.env['decimal.precision'].precision_get('Product Unit of Measure'),
        outs = self.env['stock.move'].browse(move_ids)
        new_outs = self.env['stock.move'].create(new_move_vals)
            potential_ins = self.env['stock.move'].browse(ins)
        self.env['stock.move'].browse(move_ids)._action_assign()
        out = self.env['stock.move'].browse(move_id)
        ins = self.env['stock.move'].browse(in_ids)
                new_out = self.env['stock.move'].create(new_move_vals)
                lines = self.env['stock.move.line'].search([
            record = self.env[model].browse(rec_id)
            record = self.env[model].browse(rec_id)
        return self.env['ir.qweb.field.float'].value_to_html(qty, {'decimal_precision': 'Product Unit of Measure'})
            move_line = self.env[model].browse(model_id)
            model = self.env[line['model_name']].browse(line['model_id'])
        base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')
            rcontext['reference'] = self.env[context.get('active_model')].browse(int(context.get('active_id'))).display_name
        body = self.env['ir.ui.view'].with_context(context)._render_template(
        header = self.env['ir.actions.report']._render_template("web.internal_layout", values=rcontext)
        header = self.env['ir.actions.report']._render_template("web.minimal_layout", values=dict(rcontext, subst=True, body=header))
        return self.env['ir.actions.report']._run_wkhtmltopdf(
        return self.env['stock.move'].create({
        form_wizard = Form(self.env['stock.assign.serial'].with_context(
        form_wizard = Form(self.env['stock.assign.serial'].with_context(
        form_wizard = Form(self.env['stock.assign.serial'].with_context(
        form_wizard = Form(self.env['stock.assign.serial'].with_context(
        form_wizard = Form(self.env['stock.assign.serial'].with_context(
        form_wizard = Form(self.env['stock.assign.serial'].with_context(
        form_wizard = Form(self.env['stock.assign.serial'].with_context(
        shelf_location = self.env['stock.location'].create({
        form_wizard = Form(self.env['stock.assign.serial'].with_context(
        putaway_product = self.env['stock.putaway.rule'].create({
        form_wizard = Form(self.env['stock.assign.serial'].with_context(
        picking_type = self.env['stock.picking.type'].search([
        picking_type = self.env['stock.picking.type'].search([
        self.env['stock.quant']._update_available_quantity(self.product1, self.stock_location, 100)
        self.assertEqual(len(self.env['stock.quant']._gather(self.product1, self.stock_location)), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product1, self.stock_location), 100.0)
        inventory_quant = self.env['stock.quant'].search([
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product1, self.stock_location), 0.0)
        self.assertEqual(sum(self.env['stock.quant']._gather(self.product1, self.stock_location).mapped('quantity')), 0.0)
        inventory_quant = self.env['stock.quant'].search([
        lot1 = self.env['stock.production.lot'].create({
        inventory_quant = self.env['stock.quant'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product2, self.stock_location, lot_id=lot1), 1.0)
        self.assertEqual(len(self.env['stock.quant']._gather(self.product2, self.stock_location, lot_id=lot1)), 1.0)
        inventory_quant = self.env['stock.quant'].search([
        lot1 = self.env['stock.production.lot'].create({
        inventory_quant = self.env['stock.quant'].create({
        inventory_quants = self.env['stock.quant'].search(quant_domain)
        lot1 = self.env['stock.production.lot'].create({
        self.env['stock.quant'].create({
        inventory_quants = self.env['stock.quant'].search(quant_domain)
        self.env['stock.quant'].create({
        inventory_quants = self.env['stock.quant'].search(quant_domain)
            self.env['stock.track.confirmation'].with_context(
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product2, self.stock_location, lot_id=lot1, strict=True), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product2, self.stock_location, strict=True), 10.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product2, self.stock_location), 11.0)
        self.assertEqual(len(self.env['stock.quant']._gather(self.product2, self.stock_location, lot_id=lot1, strict=True)), 1.0)
        self.assertEqual(len(self.env['stock.quant']._gather(self.product2, self.stock_location, strict=True)), 1.0)
        self.assertEqual(len(self.env['stock.quant']._gather(self.product2, self.stock_location)), 2.0)
        owner1 = self.env['res.partner'].create({'name': 'test_inventory_5'})
        inventory_quant = self.env['stock.quant'].create({
        quant = self.env['stock.quant']._gather(self.product1, self.stock_location)
        inventory_quant = self.env['stock.quant'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product1, self.stock_location), 10.0)
        move_stock_pack = self.env['stock.move'].create({
        move_pack_cust = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._gather(self.product1, self.pack_location).quantity, 10.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product1, self.pack_location), 0.0)
        inventory_quant = self.env['stock.quant'].search([
        self.assertEqual(self.env['stock.quant']._gather(self.product1, self.pack_location).quantity, 8.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product1, self.pack_location), 0)
        inventory_quant = self.env['stock.quant'].search([
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product1, self.pack_location), 2)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product1, self.pack_location), 0)
        owner1 = self.env['res.partner'].create({'name': 'test_inventory_7'})
        self.env['stock.quant'].create(vals)
        self.env['stock.quant'].create(dict(**vals, inventory_quantity=1))
        self.assertEqual(len(self.env['stock.quant']._gather(self.product1, self.stock_location)), 2.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product1, self.stock_location), 2.0)
        self.env['stock.quant']._quant_tasks()
        inventory_quant = self.env['stock.quant'].search([
        inventory_quant = self.env['stock.quant'].create(vals={
        self.env['stock.quant']._update_available_quantity(self.product1, self.stock_location, 7)
        inventory_quant = self.env['stock.quant'].search([
        move_out = self.env['stock.move'].create({
        conflict_wizard_form = Form(self.env['stock.inventory.conflict'].with_context(conflict_wizard_values['context']))
        quant = self.env['stock.quant'].create(vals)
        move_out = self.env['stock.move'].create({
        quant = self.env['stock.quant'].create(vals)
        inventory_quant = self.env['stock.quant'].create({
        product3 = self.env['product.product'].create({
        self.env['stock.quant'].create({
        new_loc = self.env['stock.location'].create({
        existing_loc2 = self.env['stock.location'].create({
        no_cyclic_loc = self.env['stock.location'].create({
        self.env['stock.quant']._update_available_quantity(self.product1, new_loc, 5)
        self.env['stock.quant']._update_available_quantity(self.product1, existing_loc2, 5)
        self.env['stock.quant']._update_available_quantity(self.product1, no_cyclic_loc, 5)
        quant_new_loc = self.env['stock.quant'].search([('location_id', '=', new_loc.id)])
        quant_existing_loc = self.env['stock.quant'].search([('location_id', '=', existing_loc2.id)])
        quant_non_cyclic_loc = self.env['stock.quant'].search([('location_id', '=', no_cyclic_loc.id)])
        quants = self.env['stock.quant']._gather(product_id, location_id, lot_id=lot_id, package_id=package_id, owner_id=owner_id, strict=strict)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.supplier_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.supplier_location, allow_negative=True), -100.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 100.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_lot, self.supplier_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_lot, self.stock_location), 5.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.supplier_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location), 5.0)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 100)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 100.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.customer_location), 100.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.customer_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        lot1 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.product_lot, self.stock_location, 2)
        self.env['stock.quant']._update_available_quantity(self.product_lot, self.stock_location, 3, lot_id=lot1)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_lot, self.stock_location), 5.0)
        move1 = self.env['stock.move'].create({
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 2)
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1, lot_id=lot1)
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1, lot_id=lot2)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location), 4.0)
        move1 = self.env['stock.move'].create({
        lot3 = self.env['stock.production.lot'].create({
        lot4 = self.env['stock.production.lot'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, lot_id=lot1, strict=True), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, lot_id=lot2, strict=True), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, lot_id=lot3, strict=True), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, lot_id=lot4, strict=True), 0.0)
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1, lot_id=lot1)
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1, lot_id=lot2)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location), 2.0)
        move1 = self.env['stock.move'].create({
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 2)
        lot3 = self.env['stock.production.lot'].create({
        lot4 = self.env['stock.production.lot'].create({
        self.env['stock.move.line'].create({
        self.env['stock.move.line'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, lot_id=lot1, strict=True), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, lot_id=lot2, strict=True), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, lot_id=lot3, strict=True), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, lot_id=lot4, strict=True), 0.0)
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1, lot_id=lot1)
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1, lot_id=lot2)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location), 2.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, lot_id=lot1, strict=True), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, lot_id=lot2, strict=True), 0.0)
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1)
        lot3 = self.env['stock.production.lot'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, lot_id=lot1, strict=True), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, lot_id=lot2, strict=True), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, lot_id=lot3, strict=True), 0.0)
        move1 = self.env['stock.move'].create({
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1.0)
        lot1 = self.env['stock.production.lot'].create({
        self.env['stock.move.line'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location), 0.0)
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1.0)
        move1 = self.env['stock.move'].create({
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location), 0.0)
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1, lot_id=lot1)
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location), 2.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, lot_id=lot1, strict=True), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, lot_id=lot2, strict=True), 0.0)
        lot1 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1, lot_id=lot1)
        move1 = self.env['stock.move'].create({
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1)
        lot2 = self.env['stock.production.lot'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, strict=True), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, lot_id=lot1, strict=True), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, strict=True), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, lot_id=lot1, strict=True), 1.0)
        shelf1_location = self.env['stock.location'].create({
        putaway = self.env['stock.putaway.rule'].create({
        move1 = self.env['stock.move'].create({
        shelf1_location = self.env['stock.location'].create({
        putaway = self.env['stock.putaway.rule'].create({
        move1 = self.env['stock.move'].create({
        shelf1_location = self.env['stock.location'].create({
        shelf2_location = self.env['stock.location'].create({
        putaway_category = self.env['stock.putaway.rule'].create({
        putaway_product = self.env['stock.putaway.rule'].create({
        move1 = self.env['stock.move'].create({
        shelf1_location = self.env['stock.location'].create({
        shelf2_location = self.env['stock.location'].create({
        putaway_category = self.env['stock.putaway.rule'].create({
        putaway_product = self.env['stock.putaway.rule'].create({
        move1 = self.env['stock.move'].create({
        shelf_location = self.env['stock.location'].create({
        putaway = self.env['stock.putaway.rule'].create({
        move1 = self.env['stock.move'].create({
        child_category = self.env['product.category'].create({
        shelf1_location = self.env['stock.location'].create({
        shelf2_location = self.env['stock.location'].create({
        putaway_category_all = self.env['stock.putaway.rule'].create({
        putaway_category_office_furn = self.env['stock.putaway.rule'].create({
        move1 = self.env['stock.move'].create({
        storage_category = self.env['stock.storage.category'].create({
        self.env['stock.location'].create({
        shelf2_location = self.env['stock.location'].create({
        putaway = self.env['stock.putaway.rule'].create({
        move1 = self.env['stock.move'].create({
        storage_category = self.env['stock.storage.category'].create({
        shelf1_location = self.env['stock.location'].create({
        putaway = self.env['stock.putaway.rule'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        storage_category = self.env['stock.storage.category'].create({
        shelf1_location = self.env['stock.location'].create({
        putaway = self.env['stock.putaway.rule'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        storage_category = self.env['stock.storage.category'].create({
        shelf1_location = self.env['stock.location'].create({
        putaway = self.env['stock.putaway.rule'].create({
        product2 = self.env['product.product'].create({
        self.env['stock.quant'].create({
        move1 = self.env['stock.move'].create({
        storage_category = self.env['stock.storage.category'].create({
        package_type = self.env['stock.package.type'].create({
        self.env['stock.location'].create({
        shelf2_location = self.env['stock.location'].create({
        putaway = self.env['stock.putaway.rule'].create({
        package = self.env['stock.quant.package'].create({
        move1 = self.env['stock.move'].create({
        storage_category = self.env['stock.storage.category'].create({
        package_type = self.env['stock.package.type'].create({
        self.env['stock.location'].create({
        shelf2_location = self.env['stock.location'].create({
        putaway = self.env['stock.putaway.rule'].create({
        package1 = self.env['stock.quant.package'].create({
        move1 = self.env['stock.move'].create({
        package2 = self.env['stock.quant.package'].create({
        move2 = self.env['stock.move'].create({
        storage_category = self.env['stock.storage.category'].create({
        package_type = self.env['stock.package.type'].create({
        self.env['stock.location'].create({
        shelf2_location = self.env['stock.location'].create({
        putaway = self.env['stock.putaway.rule'].create({
        package1 = self.env['stock.quant.package'].create({
        move1 = self.env['stock.move'].create({
        package2 = self.env['stock.quant.package'].create({
        move2 = self.env['stock.move'].create({
        storage_category = self.env['stock.storage.category'].create({
        package_type = self.env['stock.package.type'].create({
        self.env['stock.location'].create({
        shelf2_location = self.env['stock.location'].create({
        putaway = self.env['stock.putaway.rule'].create({
        package1 = self.env['stock.quant.package'].create({
        move1 = self.env['stock.move'].create({
        package2 = self.env['stock.quant.package'].create({
        product2 = self.env['product.product'].create({
        move2 = self.env['stock.move'].create({
        storage_category = self.env['stock.storage.category'].create({
        shelf1_location = self.env['stock.location'].create({
        putaway = self.env['stock.putaway.rule'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 150.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 150.0)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 50.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 50.0)
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, -1.0, lot_id=lot1)
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1.0, lot_id=lot2)
        move1 = self.env['stock.move'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 30.0)
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 2.0)
        move = self.env['stock.move'].create({
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 4.0)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 6.0)
        move = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 6.0)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 2.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 8.0)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 4.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.customer_location), 12.0)
            lot_id = self.env['stock.production.lot'].create({
            self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1.0, lot_id=lot_id)
        move = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.customer_location), 12.0)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 3.0)
        move_partial = self.env['stock.move'].create({
        move_receipt = self.env['stock.move'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 150.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 150.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 50.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 150.0)
        package1 = self.env['stock.quant.package'].create({'name': 'test_unreserve_2_pack'})
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 150.0, package_id=package1)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, package_id=package1), 150.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, package_id=package1), 50.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, package_id=package1), 150.0)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 2)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 2)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 2.0)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 2)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 2)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 2.0)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 3)
        self.env['stock.quant'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 5)
        move1 = self.env['stock.move'].create({
        q1 = self.env['stock.quant'].create({
        q2 = self.env['stock.quant'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 10.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 10.0)
        product = self.env['product.product'].create({
        serial_numbers = self.env['stock.production.lot'].create([{
            self.env['stock.quant'].create({
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(product, self.stock_location), 0.0)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0)
        move_stock_pack = self.env['stock.move'].create({
        move_pack_cust = self.env['stock.move'].create({
        lot1 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0, lot_id=lot1)
        move_stock_pack = self.env['stock.move'].create({
        move_pack_cust = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot1), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot1), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.pack_location, lot_id=lot1), 0.0)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 2.0)
        move_stock_pack_1 = self.env['stock.move'].create({
        move_stock_pack_2 = self.env['stock.move'].create({
        move_pack_cust = self.env['stock.move'].create({
        lot1 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 2.0, lot_id=lot1)
        move_stock_pack_1 = self.env['stock.move'].create({
        move_stock_pack_2 = self.env['stock.move'].create({
        move_pack_cust = self.env['stock.move'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 2.0)
        move_stock_pack = self.env['stock.move'].create({
        move_pack_cust_1 = self.env['stock.move'].create({
        move_pack_cust_2 = self.env['stock.move'].create({
        move_supp_stock_1 = self.env['stock.move'].create({
        move_supp_stock_2 = self.env['stock.move'].create({
        move_stock_stock_1 = self.env['stock.move'].create({
        move_stock_stock_2 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 6.0)
        picking_stock_pack = self.env['stock.picking'].create({
        move_stock_pack = self.env['stock.move'].create({
        picking_pack_cust = self.env['stock.picking'].create({
        move_pack_cust = self.env['stock.move'].create({
        backorder_wizard = Form(self.env[backorder_wizard_dict['res_model']].with_context(backorder_wizard_dict['context'])).save()
        backorder = self.env['stock.picking'].search([('backorder_id', '=', picking_stock_pack.id)])
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, move_stock_pack.location_dest_id), 6)
            lot_id = self.env['stock.production.lot'].create({
            self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1.0, lot_id=lot_id)
        picking_stock_pack = self.env['stock.picking'].create({
        move_stock_pack = self.env['stock.move'].create({
        picking_pack_cust = self.env['stock.picking'].create({
        move_pack_cust = self.env['stock.move'].create({
        uom_3units = self.env['uom.uom'].create({
            lot_id = self.env['stock.production.lot'].create({
            self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1.0, lot_id=lot_id)
        picking_stock_pack = self.env['stock.picking'].create({
        move_stock_pack = self.env['stock.move'].create({
        picking_pack_cust = self.env['stock.picking'].create({
        move_pack_cust = self.env['stock.move'].create({
        backorder_wizard = self.env[(res_dict_for_back_order.get('res_model'))].browse(res_dict_for_back_order.get('res_id')).with_context(res_dict_for_back_order['context'])
        backorder = self.env['stock.picking'].search([('backorder_id', '=', picking_pack_cust.id)])
        lot3 = self.env['stock.production.lot'].search([('name', '=', "lot3")])
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.customer_location), 3)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.pack_location), 0)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 2.0)
        move_out = self.env['stock.move'].create({
        move_stock_pack = self.env['stock.move'].create({
        move_pack_cust = self.env['stock.move'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 10.0)
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move3 = self.env['stock.move'].create({
        quant = self.env['stock.quant']._gather(self.product, self.stock_location)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 12.0)
        move1 = self.env['stock.move'].create({
        quant = self.env['stock.quant']._gather(self.product, self.stock_location)
        move2 = self.env['stock.move'].create({
        quant = self.env['stock.quant']._gather(self.product, self.stock_location)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0)
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        lot1 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0, lot_id=lot1)
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot1), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot1), 0.0)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.customer_location), 3.0)
        product_01 = self.env['product.product'].create({
        product_02 = self.env['product.product'].create({
        self.env['stock.quant']._update_available_quantity(product_01, self.stock_location, 1)
        self.env['stock.quant']._update_available_quantity(product_02, self.stock_location, 1)
        customer = self.env['res.partner'].create({'name': 'SuperPartner'})
        picking = self.env['stock.picking'].create({
        p01_move = self.env['stock.move'].create({
        self.env['stock.move'].create({
        shelf1_location = self.env['stock.location'].create({
        shelf2_location = self.env['stock.location'].create({
        self.env['stock.quant']._update_available_quantity(self.product, shelf1_location, 1.0)
        self.env['stock.quant']._update_available_quantity(self.product, shelf2_location, 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf1_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf2_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 2.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf1_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf2_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf1_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf2_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0, lot_id=lot1)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0, lot_id=lot2)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 2.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot1), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot2), 1.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot1), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot2), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot1), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot2), 0.0)
        package1 = self.env['stock.quant.package'].create({'name': 'test_edit_reserved_move_line_3'})
        package2 = self.env['stock.quant.package'].create({'name': 'test_edit_reserved_move_line_3'})
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0, package_id=package1)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0, package_id=package2)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 2.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, package_id=package1), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, package_id=package2), 1.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, package_id=package1), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, package_id=package2), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, package_id=package1), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, package_id=package2), 0.0)
        owner1 = self.env['res.partner'].create({'name': 'test_edit_reserved_move_line_4_1'})
        owner2 = self.env['res.partner'].create({'name': 'test_edit_reserved_move_line_4_2'})
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0, owner_id=owner1)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0, owner_id=owner2)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 2.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, owner_id=owner1), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, owner_id=owner2), 1.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, owner_id=owner1), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, owner_id=owner2), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, owner_id=owner1), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, owner_id=owner2), 0.0)
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        package1 = self.env['stock.quant.package'].create({'name': 'test_edit_reserved_move_line_5'})
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0, lot_id=lot1, package_id=package1)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0, lot_id=lot2)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 2.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot1, package_id=package1), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot2), 1.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot1, package_id=package1), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot2), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot1, package_id=package1), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot2), 0.0)
        shelf1_location = self.env['stock.location'].create({
        shelf2_location = self.env['stock.location'].create({
        self.env['stock.quant']._update_available_quantity(self.product, shelf1_location, 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf1_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf2_location), 0.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf1_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf2_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf1_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf2_location), 0.0)
        lot1 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.product_lot, self.stock_location, 5)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_lot, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_lot, self.stock_location, lot_id=lot1, strict=True), 0.0)
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.product_lot, self.stock_location, 3)
        self.env['stock.quant']._update_available_quantity(self.product_lot, self.stock_location, 2, lot_id=lot1)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_lot, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_lot, self.stock_location, lot_id=lot1, strict=True), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_lot, self.stock_location, lot_id=lot2, strict=True), 0.0)
        shelf1_location = self.env['stock.location'].create({
        shelf2_location = self.env['stock.location'].create({
        self.env['stock.quant']._update_available_quantity(self.product, shelf1_location, 1.0)
        self.env['stock.quant']._update_available_quantity(self.product, shelf2_location, 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf1_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf2_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 2.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf1_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf2_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf1_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf2_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0, lot_id=lot1)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0, lot_id=lot2)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 2.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot1), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot2), 1.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot1), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot2), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot1), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot2), 0.0)
        package1 = self.env['stock.quant.package'].create({'name': 'test_edit_reserved_move_line_3'})
        package2 = self.env['stock.quant.package'].create({'name': 'test_edit_reserved_move_line_3'})
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0, package_id=package1)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0, package_id=package2)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 2.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, package_id=package1), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, package_id=package2), 1.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, package_id=package1), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, package_id=package2), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, package_id=package1), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, package_id=package2), 0.0)
        owner1 = self.env['res.partner'].create({'name': 'test_edit_reserved_move_line_4_1'})
        owner2 = self.env['res.partner'].create({'name': 'test_edit_reserved_move_line_4_2'})
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0, owner_id=owner1)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0, owner_id=owner2)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 2.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, owner_id=owner1), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, owner_id=owner2), 1.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, owner_id=owner1), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, owner_id=owner2), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, owner_id=owner1), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, owner_id=owner2), 0.0)
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        package1 = self.env['stock.quant.package'].create({'name': 'test_edit_reserved_move_line_5'})
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0, lot_id=lot1, package_id=package1)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0, lot_id=lot2)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 2.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot1, package_id=package1), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot2), 1.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot1, package_id=package1), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot2), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot1, package_id=package1), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, lot_id=lot2), 0.0)
        shelf1_location = self.env['stock.location'].create({
        shelf2_location = self.env['stock.location'].create({
        self.env['stock.quant']._update_available_quantity(self.product, shelf1_location, 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf1_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf2_location), 0.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf1_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf2_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf1_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf2_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf2_location, allow_negative=True), -1.0)
        shelf1_location = self.env['stock.location'].create({
        shelf2_location = self.env['stock.location'].create({
        self.env['stock.quant']._update_available_quantity(self.product, shelf1_location, 1.0)
        self.env['stock.quant']._update_available_quantity(self.product, shelf2_location, 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 2.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf1_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf2_location), 1.0)
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf1_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf2_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf1_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf2_location), 0.0)
        shelf1_location = self.env['stock.location'].create({
        self.env['stock.quant']._update_available_quantity(self.product, shelf1_location, 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf1_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf1_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf1_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf1_location, allow_negative=True), -1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, allow_negative=True), -1.0)
        shelf1_location = self.env['stock.location'].create({
        self.env['stock.quant']._update_available_quantity(self.product, shelf1_location, 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf1_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf1_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, shelf1_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        move1 = self.env['stock.move'].create({
        owner = self.env['res.partner'].create({'name': 'Jean'})
        picking = self.env['stock.picking'].create({
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 10.0)
        self.env['stock.move.line'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 20.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 15.0)
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        package1 = self.env['stock.quant.package'].create({'name': 'test_edit_done_move_line_12'})
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_lot, self.stock_location, lot_id=lot1), 12.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_lot, self.stock_location, lot_id=lot1), 24.0)
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        package1 = self.env['stock.quant.package'].create({'name': 'test_edit_reserved_move_line_5'})
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_lot, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_lot, self.stock_location, lot_id=lot1, package_id=package1), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_lot, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_lot, self.stock_location, lot_id=lot1), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_lot, self.stock_location, lot_id=lot1, package_id=package1), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_lot, self.stock_location, lot_id=lot2, package_id=package1), 1.0)
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 12.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 24.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 2.0)
        partner = self.env['res.partner'].create({'name': 'Jean'})
        picking = self.env['stock.picking'].create({
        self.env['stock.move'].create({
        wizard = Form(self.env[res_dict['res_model']].with_context(res_dict['context'])).save()
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 10.0)
        partner = self.env['res.partner'].create({'name': 'Jean'})
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 5.0)
        picking = self.env['stock.picking'].create({
        self.env['stock.move'].create({
        wizard = Form(self.env[res_dict['res_model']].with_context(res_dict['context'])).save()
        backorder_wizard = self.env[(res_dict_for_back_order.get('res_model'))].browse(res_dict_for_back_order.get('res_id')).with_context(res_dict_for_back_order['context'])
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        backorder = self.env['stock.picking'].search([('backorder_id', '=', picking.id)])
        product5 = self.env['product.product'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1)
        picking = self.env['stock.picking'].create({
        product1_move = self.env['stock.move'].create({
        product5_move = self.env['stock.move'].create({
        wizard = Form(self.env[action['res_model']].with_context(action['context'])).save()
        wizard = self.env[(action.get('res_model'))].browse(action.get('res_id')).with_context(action.get('context'))
        backorder = self.env['stock.picking'].search([('backorder_id', '=', picking.id)])
        partner = self.env['res.partner'].create({'name': 'Jean'})
        lot1 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.product_lot, self.stock_location, 5.0, lot_id=lot1)
        picking = self.env['stock.picking'].create({
        self.env['stock.move'].create({
        immediate_trans_wiz = Form(self.env[immediate_trans_wiz_dict['res_model']].with_context(immediate_trans_wiz_dict['context'])).save()
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        picking = self.env['stock.picking'].create({
        self.env['stock.move'].create({
        picking = self.env['stock.picking'].create({
        self.env['stock.move'].create({
        product3_move = self.env['stock.move'].create({
        partner = self.env['res.partner'].create({'name': 'Jean'})
        picking = self.env['stock.picking'].create({
        self.env['stock.move'].create({
        scrap = self.env['stock.scrap'].create({
        partner = self.env['res.partner'].create({'name': 'Pierre'})
        receipt1 = self.env['stock.picking'].create({
        self.env['stock.move'].create({
        receipt2 = self.env['stock.picking'].create({
        self.env['stock.move'].create({
        receipt3 = self.env['stock.picking'].create({
        self.env['stock.move'].create({
        immediate_trans_wiz = Form(self.env[immediate_trans_wiz_dict['res_model']].with_context(immediate_trans_wiz_dict['context'])).save()
        immediate_trans_wiz = Form(self.env[immediate_trans_wiz_dict['res_model']].with_context(immediate_trans_wiz_dict['context'])).save()
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1)
        scrap = self.env['stock.scrap'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0)
        scrap = self.env['stock.scrap'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_consu, self.stock_location), 0)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1)
        move1 = self.env['stock.move'].create({
        scrap = self.env['stock.scrap'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 10)
        partner = self.env['res.partner'].create({'name': 'Kimberley'})
        picking = self.env['stock.picking'].create({
        move1 = self.env['stock.move'].create({
        scrap = self.env['stock.scrap'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 4)
        partner = self.env['res.partner'].create({'name': 'Kimberley'})
        picking = self.env['stock.picking'].create({
        move1 = self.env['stock.move'].create({
        scrap = self.env['stock.scrap'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1)
        scrap = self.env['stock.scrap'].create({
        insufficient_qty_wizard = self.env['stock.warn.insufficient.qty.scrap'].create({
        self.assertEqual(self.env['stock.quant']._gather(self.product, self.stock_location).quantity, -11)
        child_loc1 = self.env['stock.location'].create({
        child_loc2 = self.env['stock.location'].create({
        lot1 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.product_serial, child_loc1, 1, lot1)
        scrap = self.env['stock.scrap'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        initial_in_date_lot2 = self.env['stock.quant'].search([
        quant_lot1 = self.env['stock.quant'].search([
        move3 = self.env['stock.move'].create({
        quant_in_pack = self.env['stock.quant'].search([
        quant_lot1 = self.env['stock.quant'].search([
        quant_lot2 = self.env['stock.quant'].search([
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        initial_in_date_lot2 = self.env['stock.quant'].search([
        quant_lot1 = self.env['stock.quant'].search([
        move3 = self.env['stock.move'].create({
        self.env['stock.move.line'].create({
        quants = self.env['stock.quant'].search([
        move1 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        picking = self.env['stock.picking'].create({
        move1 = self.env['stock.move'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 12)
        picking = self.env['stock.picking'].create({
        move1 = self.env['stock.move'].create({
        move_in = self.env['stock.move'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 10)
        move_out = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 12)
        picking = self.env['stock.picking'].create({
        move1 = self.env['stock.move'].create({
        ml = self.env['stock.move.line'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 2)
        picking = self.env['stock.picking'].create({
        move1 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.customer_location), 2)
        product1 = self.env['product.product'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1)
        self.env['stock.quant']._update_available_quantity(product1, self.stock_location, 2)
        picking = self.env['stock.picking'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, self.stock_location), 0)
        product1 = self.env['product.product'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1)
        self.env['stock.quant']._update_available_quantity(product1, self.stock_location, 2)
        picking = self.env['stock.picking'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, self.stock_location), 0)
        product2 = self.env['product.product'].create({
        product3 = self.env['product.product'].create({
        self.env['stock.quant'].with_context(inventory_mode=True).create([{
        delivery_form = Form(self.env['stock.picking'])
        backorder_wizard_form = Form(self.env[backorder_wizard_dict['res_model']].with_context(backorder_wizard_dict['context']))
        first_backorder = self.env['stock.picking'].search([('backorder_id', '=', delivery.id)], limit=1)
        backorder_wizard_form = Form(self.env[backorder_wizard_dict['res_model']].with_context(backorder_wizard_dict['context']))
        second_backorder = self.env['stock.picking'].search([('backorder_id', '=', first_backorder.id)], limit=1)
        backorder_wizard_form = Form(self.env[backorder_wizard_dict['res_model']].with_context(backorder_wizard_dict['context']))
        lot1 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.pack_location, 1, lot1)
        move = self.env['stock.move'].create({
        move_line = self.env['stock.move.line'].create({
        product = self.env['product.product'].create({
        self.env['stock.quant']._update_available_quantity(product, self.stock_location, 36.0)
        picking_out = self.env['stock.picking'].create({
        move = self.env['stock.move'].create({
        picking_client = self.env['stock.picking'].create({
        picking_pick = self.env['stock.picking'].create({
        picking_ship = self.env['stock.picking'].create({
        picking_pack = self.env['stock.picking'].create({
        picking_pick = self.env['stock.picking'].create({
        location = self.env['stock.location'].browse(self.stock_location)
        self.env['stock.quant']._update_available_quantity(self.productA, location, 10.0)
        backorder = self.env['stock.picking'].search([('backorder_id', '=', picking_client.id)])
        stock_location = self.env['stock.location'].browse(self.stock_location)
        self.env['stock.quant']._update_available_quantity(self.productA, stock_location, 10.0)
        pack_location = self.env['stock.location'].browse(self.pack_location)
        self.env['stock.quant']._update_available_quantity(self.productA, pack_location, 5.0)
        self.assertEqual(len(self.env['stock.quant']._gather(self.productA, stock_location)), 1.0)
        self.assertEqual(len(self.env['stock.quant']._gather(self.productA, pack_location)), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, pack_location), 5.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, pack_location), 5.0)
        self.assertEqual(sum(self.env['stock.quant']._gather(self.productA, stock_location).mapped('quantity')), 0.0)
        self.assertEqual(len(self.env['stock.quant']._gather(self.productA, pack_location)), 1.0)
        stock_location = self.env['stock.location'].browse(self.stock_location)
        self.env['stock.quant']._update_available_quantity(self.productA, stock_location, 10.0)
        return_pick = self.env['stock.picking'].browse(stock_return_picking_action['res_id'])
        stock_location = self.env['stock.location'].browse(self.stock_location)
        self.env['stock.quant']._update_available_quantity(self.productA, stock_location, 10.0)
        stock_location = self.env['stock.location'].browse(self.stock_location)
        self.env['stock.quant']._update_available_quantity(self.productA, stock_location, 10.0)
        return_pick = self.env['stock.picking'].browse(stock_return_picking_action['res_id'])
        stock_location = self.env['stock.location'].browse(self.stock_location)
        warehouse_1 = self.env['stock.warehouse'].search([('company_id', '=', self.env.user.id)], limit=1)
        warehouse_2 = self.env['stock.warehouse'].create({
        resupply_route = self.env['stock.location.route'].search([('supplier_wh_id', '=', warehouse_2.id), ('supplied_wh_id', '=', warehouse_1.id)])
        self.env['stock.quant']._update_available_quantity(self.productA, stock_location, 10.0)
        self.env['procurement.group'].run_scheduler()
        next_activity = self.env['mail.activity'].search([('res_model', '=', 'product.template'), ('res_id', '=', self.productA.product_tmpl_id.id)])
        location = self.env['stock.location'].browse(self.stock_location)
        self.env['stock.quant']._update_available_quantity(self.productA, location, 10.0)
        picking_pick_backorder = self.env['stock.picking'].search([('backorder_id', '=', picking_pick.id)])
        location = self.env['stock.location'].browse(self.stock_location)
        self.env['stock.quant']._update_available_quantity(self.productA, location, 10.0)
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        location = self.env['stock.location'].browse(self.stock_location)
        self.env['stock.quant']._update_available_quantity(self.productA, location, 10.0)
        picking_client = self.env['stock.picking'].create({
        picking_pick = self.env['stock.picking'].create({
        location = self.env['stock.location'].browse(self.stock_location)
        pack_location = self.env['stock.location'].browse(self.pack_location)
        self.env['stock.quant']._update_available_quantity(self.gB, location, 10000.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.gB, pack_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.gB, location), 5000.0)
        self.assertEqual(self.env['stock.quant']._gather(self.gB, pack_location).quantity, 5000.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.gB, pack_location), 0.0)
        stock_location = self.env['stock.location'].browse(self.stock_location)
        pack_location = self.env['stock.location'].browse(self.pack_location)
        customer_location = self.env['stock.location'].browse(self.customer_location)
        lot = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.productA, stock_location, 10.0, lot_id=lot)
        customer_quantity = self.env['stock.quant']._get_available_quantity(self.productA, customer_location, lot_id=lot)
        return_pick_picking = self.env['stock.picking'].browse(stock_return_picking_action['res_id'])
        return_ship_picking = self.env['stock.picking'].browse(stock_return_picking_action['res_id'])
        customer_quantity = self.env['stock.quant']._get_available_quantity(self.productA, customer_location, lot_id=lot)
        pack_quantity = self.env['stock.quant']._get_available_quantity(self.productA, pack_location, lot_id=lot)
        stock_quantity = self.env['stock.quant']._get_available_quantity(self.productA, stock_location, lot_id=lot)
        stock_location = self.env['stock.location'].browse(self.stock_location)
        lot = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.productA, stock_location, 1.0, lot_id=lot)
        return_ship_picking = self.env['stock.picking'].browse(stock_return_picking_action['res_id'])
        return_pack_picking = self.env['stock.picking'].browse(stock_return_picking_action['res_id'])
        return_pick_picking = self.env['stock.picking'].browse(stock_return_picking_action['res_id'])
        location = self.env['stock.location'].browse(self.stock_location)
        self.env['stock.quant']._update_available_quantity(self.productA, location, 10.0)
        backorder_wizard = self.env[(backorder_wizard_values.get('res_model'))].browse(backorder_wizard_values.get('res_id')).with_context(backorder_wizard_values['context'])
        back_order = self.env['stock.picking'].search([('backorder_id', '=', picking_pick.id)])
        location = self.env['stock.location'].browse(self.stock_location)
        self.env['stock.quant']._update_available_quantity(self.productA, location, 10.0)
        pick_location = self.env['stock.location'].browse(self.stock_location)
        return_warehouse = self.env['stock.warehouse'].create({'name': 'return warehouse', 'code': 'rw'})
        return_location = self.env['stock.location'].create({
        self.env['stock.quant']._update_available_quantity(self.productA, pick_location, 10.0)
        return_to_pick_picking = self.env['stock.picking'].browse(return_to_pick_picking_action['res_id'])
        return_to_return_picking = self.env['stock.picking'].browse(return_to_return_picking_action['res_id'])
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, pick_location), 5.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, return_location), 5.0)
        self.assertEqual(len(self.env['stock.quant'].search([('product_id', '=', self.productA.id), ('quantity', '!=', 0)])), 2)
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        lot3 = self.env['stock.production.lot'].create({
        stock_location = self.env['stock.location'].browse(self.stock_location)
        self.env['stock.quant']._update_available_quantity(self.productA, stock_location, 7.0, lot_id=lot1)
        self.env['stock.quant']._update_available_quantity(self.productA, stock_location, 7.0, lot_id=lot2)
        self.env['stock.quant']._update_available_quantity(self.productA, stock_location, 7.0, lot_id=lot3)
        stock_return_picking_form = Form(self.env['stock.return.picking'].with_context(
        return_pick = self.env['stock.picking'].browse(stock_return_picking.create_returns()['res_id'])
        delivery_order = self.env['stock.picking'].create({
        pack_location = self.env['stock.location'].browse(self.pack_location)
        self.env['stock.quant']._update_available_quantity(self.productA, pack_location, 2)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, pack_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, pack_location), 1.0)
        backorder = self.env['stock.picking'].search([('backorder_id', '=', delivery_order.id)])
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, pack_location), 0.0)
        delivery_order = self.env['stock.picking'].create({
        pack_location = self.env['stock.location'].browse(self.pack_location)
        self.env['stock.quant']._update_available_quantity(self.productA, pack_location, 1)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, pack_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, pack_location), 0.0)
        backorder = self.env['stock.picking'].search([('backorder_id', '=', delivery_order.id)])
        delivery_order = self.env['stock.picking'].create({
        pack_location = self.env['stock.location'].browse(self.pack_location)
        self.env['stock.quant']._update_available_quantity(self.productA, pack_location, 2)
        self.env['stock.quant']._update_available_quantity(self.productA, pack_location, 2)
        backorder = self.env['stock.picking'].search([('backorder_id', '=', delivery_order.id)])
        delivery_order = self.env['stock.picking'].create({
        pack_location = self.env['stock.location'].browse(self.pack_location)
        self.env['stock.quant']._update_available_quantity(self.productA, pack_location, 2)
        self.env['stock.quant']._update_available_quantity(self.productB, pack_location, 2)
        backorder_wizard = Form(self.env['stock.backorder.confirmation'].with_context(res_dict['context'])).save()
        backorder = self.env['stock.picking'].search([('backorder_id', '=', delivery_order.id)])
        delivery_order = self.env['stock.picking'].create({
        pack_location = self.env['stock.location'].browse(self.pack_location)
        self.env['stock.quant']._update_available_quantity(self.productA, pack_location, 1)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, pack_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, pack_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, pack_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, pack_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, pack_location, allow_negative=True), -1.0)
        delivery_order = self.env['stock.picking'].create({
        pack_location = self.env['stock.location'].browse(self.pack_location)
        self.env['stock.quant']._update_available_quantity(self.productA, pack_location, 1)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, pack_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, pack_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, pack_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, pack_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, pack_location, allow_negative=True), -2.0)
        receipt = self.env['stock.picking'].create({
        stock_location = self.env['stock.location'].browse(self.stock_location)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, stock_location), 2.0)
        delivery = self.env['stock.picking'].create({
        stock_location = self.env['stock.location'].browse(self.stock_location)
        self.env['stock.quant']._update_available_quantity(self.productA, stock_location, 5)
        delivery = self.env['stock.picking'].create({
        stock_location = self.env['stock.location'].browse(self.stock_location)
        self.env['stock.quant']._update_available_quantity(product, stock_location, 5.5)
        back_order = self.env['stock.picking'].search([('backorder_id', '=', delivery.id)])
        self.env['stock.quant']._update_available_quantity(self.productA, self.env['stock.location'].browse(self.stock_location), 1.0)
        delivery_order = self.env['stock.picking'].create({
        inventory_quant = self.env['stock.quant'].create({
        lot1 = self.env['stock.production.lot'].create({
        stock_location = self.env['stock.location'].browse(self.stock_location)
        self.env['stock.quant']._update_available_quantity(self.productA, stock_location, 1.0, lot_id=lot1)
        delivery_order = self.env['stock.picking'].create({
        inventory_quant = self.env['stock.quant'].create({
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        stock_location = self.env['stock.location'].browse(self.stock_location)
        self.env['stock.quant']._update_available_quantity(self.productA, stock_location, 1.0, lot_id=lot1)
        delivery_order = self.env['stock.picking'].create({
        inventory_quant = self.env['stock.quant'].create({
        serial1 = self.env['stock.production.lot'].create({
        serial2 = self.env['stock.production.lot'].create({
        stock_location = self.env['stock.location'].browse(self.stock_location)
        self.env['stock.quant']._update_available_quantity(self.productA, stock_location, 1.0, lot_id=serial1)
        delivery_order = self.env['stock.picking'].create({
        inventory_quant = self.env['stock.quant'].create({
        self.env['stock.picking.type']\
        delivery_order = self.env['stock.picking'].create({
        self.env['stock.picking.type']\
        delivery_order = self.env['stock.picking'].create({
        self.env['stock.picking.type']\
        delivery_order = self.env['stock.picking'].create({
        self.env['stock.picking.type']\
        delivery_order = self.env['stock.picking'].create({
            self.env['stock.production.lot']\
        lot1 = self.env['stock.production.lot'].create({
        receipt = self.env['stock.picking'].create({
        receipt = self.env['stock.picking'].create({
        receipt = self.env['stock.picking'].create({
        warehouse = self.env['stock.warehouse'].create({
        receipt1 = self.env['stock.picking'].create({
        receipt2 = self.env['stock.picking'].create({
        warehouse = self.env['stock.warehouse'].create({
        receipt1 = self.env['stock.picking'].create({
        receipt2 = self.env['stock.picking'].create({
        delivery_order = self.env['stock.picking'].create({
        delivery_order = self.env['stock.picking'].create({
        back_order = self.env['stock.picking'].search([('backorder_id', '=', delivery_order.id)])
        picking = Form(self.env['stock.picking'])
        ptout = self.env['stock.picking.type'].browse(self.picking_type_out)
        receipt = self.env['stock.picking'].create({
        delivery_order = self.env['stock.picking'].create({
        stock_location = self.env['stock.location'].browse(self.stock_location)
        self.assertEqual(self.env['stock.quant']._gather(self.productA, stock_location).reserved_quantity, 10.0)
        self.assertEqual(self.env['stock.quant']._gather(self.productB, stock_location).reserved_quantity, 10.0)
        delivery_order = self.env['stock.picking'].create({
        owner1 = self.env['res.partner'].create({'name': 'owner'})
        receipt = self.env['stock.picking'].create({
        move1 = self.env['stock.move'].create({
        wiz = Form(self.env['stock.immediate.transfer'].with_context(wiz['context'])).save()
        supplier_location = self.env['stock.location'].browse(self.supplier_location)
        stock_location = self.env['stock.location'].browse(self.stock_location)
        supplier_quant = self.env['stock.quant']._gather(self.productA, supplier_location)
        stock_quant = self.env['stock.quant']._gather(self.productA, stock_location)
        partner = self.env['res.partner'].create({'name': 'Partner'})
        supplier_location = self.env['stock.location'].browse(self.supplier_location)
        stock_location = self.env['stock.location'].create({
        shelf_location = self.env['stock.location'].create({
        putaway_product = self.env['stock.putaway.rule'].create({
        picking_type = self.env['stock.picking.type'].browse(self.picking_type_in)
        receipt_form = Form(self.env['stock.picking'].with_context(
        picking = self.env['stock.picking'].create({
        picking = self.env['stock.picking'].create({
        categ_test = self.env['uom.category'].create({'name': 'Bigger than tons'})
        T_LBS = self.env['uom.uom'].create({
        T_GT = self.env['uom.uom'].create({
        T_TEST = self.env['product.product'].create({
        picking_in = self.env['stock.picking'].create({
        move = self.env['stock.move'].create({
        lot = self.env['stock.production.lot'].create({'name': 'Lot TEST', 'product_id': T_TEST.id, 'company_id': self.env.company.id, })
        self.env['stock.move.line'].create({
        back_order_in = self.env['stock.picking'].search([('backorder_id', '=', picking_in.id)])
        product_G = self.env['product.product'].create({
        stock_location = self.env['stock.location'].browse(self.stock_location)
        self.env['stock.quant']._update_available_quantity(product_G, stock_location, 149.88)
        picking = self.env['stock.picking'].create({
        move = self.env['stock.move'].create({
        product_LtDA = self.env['product.product'].create({
        product_GtDA = self.env['product.product'].create({
        stock_location = self.env['stock.location'].browse(self.stock_location)
        self.env['stock.quant']._update_available_quantity(product_LtDA, stock_location, 149)
        self.env['stock.quant']._update_available_quantity(product_GtDA, stock_location, 149.88)
        move_LtDA = self.env['stock.move'].create({
        move_GtDA = self.env['stock.move'].create({
        self.env['stock.quant']._update_available_quantity(product_LtDA, stock_location, 149.88)
        self.env['stock.quant']._update_available_quantity(product_GtDA, stock_location, 149.88)
        move_lines_LtDA = self.env["stock.move.line"].search([
        move_lines_GtDA = self.env["stock.move.line"].search([
        self.product1 = self.env['product.product'].create({
        self.partner = self.env['res.partner'].create({'name': 'Partner'})
        self.wh = self.env['stock.warehouse'].search([('company_id', '=', self.env.user.id)], limit=1)
        procurement_group0 = self.env['procurement.group'].create({})
        partners = self.env['res.partner'].search([], limit=2)
        procurement_group1 = self.env['procurement.group'].create({'partner_id': partner0.id})
        procurement_group2 = self.env['procurement.group'].create({'partner_id': partner1.id})
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        warehouse_1 = self.env['stock.warehouse'].search([('company_id', '=', self.env.user.id)], limit=1)
        warehouse_2 = self.env['stock.warehouse'].create({
        resupply_route = self.env['stock.location.route'].search([('supplier_wh_id', '=', warehouse_2.id), ('supplied_wh_id', '=', warehouse_1.id)])
        replenish_wizard = self.env['product.replenish'].create({
        last_picking_id = self.env['stock.picking'].search([('origin', '=', 'Manual Replenishment')])[-1]
        push_location = self.env['stock.location'].create({
        route = self.env['stock.location.route'].create({
        move1 = self.env['stock.move'].create({
        self.wh = self.env['stock.warehouse'].search([('company_id', '=', self.env.user.id)], limit=1)
        new_loc = self.env['stock.location'].create({
        picking_type = self.env['stock.picking.type'].create({
        route = self.env['stock.location.route'].create({
        product = self.env['product.product'].create({
        move1 = self.env['stock.move'].create({
        warehouse = self.env['stock.warehouse'].search([('company_id', '=', self.env.user.id)], limit=1)
        product_a = self.env['product.product'].create({
        self.env['stock.quant']._update_available_quantity(product_a, warehouse.wh_output_stock_loc_id, 4.0)
        self.env['stock.quant']._update_available_quantity(product_a, warehouse.lot_stock_id, 4.0)
        rule = self.env['procurement.group']._get_rule(product_a, final_location, values)
        pg = self.env['procurement.group'].create({'name': 'Test-pg-mtso-mto'})
        self.env['procurement.group'].run([
        qty_available = self.env['stock.quant']._get_available_quantity(product_a, warehouse.wh_output_stock_loc_id)
        picking_ids = self.env['stock.picking'].search([('group_id', '=', pg.id)])
        warehouse = self.env['stock.warehouse'].search([('company_id', '=', self.env.user.id)], limit=1)
        product_a = self.env['product.product'].create({
        self.env['stock.quant']._update_available_quantity(product_a, warehouse.wh_output_stock_loc_id, 4.0)
        rule = self.env['procurement.group']._get_rule(product_a, final_location, values)
        pg = self.env['procurement.group'].create({'name': 'Test-pg-mtso-mts'})
        self.env['procurement.group'].run([
        picking_ids = self.env['stock.picking'].search([('group_id', '=', pg.id)])
        warehouse = self.env['stock.warehouse'].search([('company_id', '=', self.env.user.id)], limit=1)
        product_a = self.env['product.product'].create({
        self.env['stock.quant']._update_available_quantity(product_a, warehouse.wh_output_stock_loc_id, 4.0)
        rule = self.env['procurement.group']._get_rule(product_a, final_location, values)
        pg1 = self.env['procurement.group'].create({'name': 'Test-pg-mtso-mts-1'})
        pg2 = self.env['procurement.group'].create({'name': 'Test-pg-mtso-mts-2'})
        pg3 = self.env['procurement.group'].create({'name': 'Test-pg-mtso-mts-3'})
        self.env['procurement.group'].run([
        pickings_pg1 = self.env['stock.picking'].search([('group_id', '=', pg1.id)])
        pickings_pg2 = self.env['stock.picking'].search([('group_id', '=', pg2.id)])
        pickings_pg3 = self.env['stock.picking'].search([('group_id', '=', pg3.id)])
        warehouse = self.env['stock.warehouse'].search([('company_id', '=', self.env.user.id)], limit=1)
        product_A = self.env['product.product'].create({
        product_B = self.env['product.product'].create({
        rule = self.env['procurement.group']._get_rule(product_A, final_location, {'warehouse_id': warehouse})
        self.env['stock.quant']._update_available_quantity(product_A, warehouse.lot_stock_id, 5.0)
        self.env['stock.quant']._update_available_quantity(product_B, warehouse.lot_stock_id, 3.0)
        move_A = self.env['stock.move'].create(move_A_vals)
        move_B = self.env['stock.move'].create(move_B_vals)
        warehouse = self.env['stock.warehouse'].search([('company_id', '=', self.env.user.id)], limit=1)
        product_A = self.env['product.product'].create({
        product_B = self.env['product.product'].create({
        rule = self.env['procurement.group']._get_rule(product_A, final_location, {'warehouse_id': warehouse})
        self.env['stock.quant']._update_available_quantity(product_A, warehouse.lot_stock_id, 5.0)
        self.env['stock.quant']._update_available_quantity(product_B, warehouse.lot_stock_id, 3.0)
        move_A1 = self.env['stock.move'].create(move_A1_vals)
        move_A2 = self.env['stock.move'].create(move_A2_vals)
        move_B1 = self.env['stock.move'].create(move_B1_vals)
        move_B2 = self.env['stock.move'].create(move_B2_vals)
        warehouse = self.env['stock.warehouse'].search([('company_id', '=', self.env.user.id)], limit=1)
        product_A = self.env['product.product'].create({
        rule = self.env['procurement.group']._get_rule(product_A, final_location, {'warehouse_id': warehouse})
        self.env['stock.quant']._update_available_quantity(product_A, warehouse.lot_stock_id, 4.0)
        move_A1 = self.env['stock.move'].create(move_A1_vals)
        move_A2 = self.env['stock.move'].create(move_A2_vals)
        warehouse = self.env['stock.warehouse'].search([('company_id', '=', self.env.company.id)], limit=1)
        product_a = self.env['product.product'].create({
        pg = self.env['procurement.group'].create({'name': 'Test-delay_alert_3'})
        self.env['procurement.group'].run([
        ship, pack, pick = self.env['stock.move'].search([('product_id',  '=', product_a.id)])
        push_location_1 = self.env['stock.location'].create({
        push_location_2 = self.env['stock.location'].create({
        route_on_product = self.env['stock.location.route'].create({
        route_on_packaging = self.env['stock.location.route'].create({
        product = self.env['product.product'].create({
        packaging = self.env['product.packaging'].create({
        move1 = self.env['stock.move'].create({
        picking_client = self.env['stock.picking'].create({
        picking_pick = self.env['stock.picking'].create({
        pack_location = self.env['stock.location'].browse(self.pack_location)
        stock_location = self.env['stock.location'].browse(self.stock_location)
        self.env['stock.picking.type'].browse(self.picking_type_out).reservation_method = 'at_confirm'
        customer_picking = self.env['stock.picking'].create({
        customer_move = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, stock_location), 0)
        supplier_picking = self.env['stock.picking'].create({
        supplier_move = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, stock_location), 0)
        pack_location = self.env['stock.location'].browse(self.pack_location)
        stock_location = self.env['stock.location'].browse(self.stock_location)
        self.env['stock.picking.type'].browse(self.picking_type_out).reservation_method = 'at_confirm'
        self.env['stock.quant']._update_available_quantity(self.productA, stock_location, 10.0)
        picking_pick_2 = self.env['stock.picking'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, pack_location), 10.0)
        stock_location = self.env['stock.location'].browse(self.stock_location)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, stock_location), 0)
        picking_type_out1 = self.env['stock.picking.type'].browse(self.picking_type_out).copy()
        customer_picking1 = self.env['stock.picking'].create({
        supplier_picking = self.env['stock.picking'].create({
        supplier_move = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.productA, stock_location), 40)
        self.product_serial = self.env['product.product'].create({
        move = self.env['stock.move'].create({
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        lot3 = self.env['stock.production.lot'].create({
        move = self.env['stock.move'].create({
        product1 = self.env['product.product'].create({
        picking_form = Form(self.env['stock.picking'])
        picking_type_company_a = self.env['stock.picking.type'].search([
        picking_type_company_a = self.env['stock.picking.type'].search([
        stock_location_a_1 = self.env['stock.location'].with_user(self.user_a).create({
        putaway_form = Form(self.env['stock.putaway.rule'])
        stock_location_a_1 = self.env['stock.location'].with_user(self.user_a).create({
        putaway_rule = self.env['stock.putaway.rule'].with_user(self.user_a).create({
        shared_partner = self.env['res.partner'].create({
        product = self.env['product.product'].create({
        inventory_quant = self.env['stock.quant'].with_user(self.user_a).with_context(inventory_mode=True).create({
        last_move_id = self.env['stock.move'].search([('is_inventory', '=', True)])[-1]
        product = self.env['product.product'].create({
            self.env['stock.quant'].with_user(self.user_a).with_context(inventory_mode=True).create({
        picking_type_company_b = self.env['stock.picking.type'].search([('company_id', '=', self.company_b.id)], limit=1)
        picking_form = Form(self.env['stock.picking'].with_user(self.user_a))
        product_lot = self.env['product.product'].create({
        self.env['stock.production.lot'].create({
        self.env['stock.production.lot'].create({
        product = self.env['product.product'].create({
        picking = self.env['stock.picking'].with_user(self.user_a).create({
        move1 = self.env['stock.move'].create({
        created_serial = self.env['stock.production.lot'].search([
        product = self.env['product.product'].create({
        orderpoint = Form(self.env['stock.warehouse.orderpoint'].with_user(self.user_a))
        product = self.env['product.product'].create({
        orderpoint = Form(self.env['stock.warehouse.orderpoint'].with_user(self.user_a))
        product_form = Form(self.env['product.template'].with_user(self.user_a))
        product_form = Form(self.env['product.template'].with_user(self.user_a))
        product_form = Form(self.env['product.template'].with_user(self.user_a))
        product = self.env['product.product'].create({
        picking_type_b = self.env['stock.picking.type'].search([
        move = self.env['stock.move'].create({
        product = self.env['product.product'].create({
        picking_type_b = self.env['stock.picking.type'].search([
        move = self.env['stock.move'].create({
        product = self.env['product.product'].create({
        picking_type_b = self.env['stock.picking.type'].search([
        move = self.env['stock.move'].create({
        product_lot = self.env['product.product'].create({
        picking_type_to_transit = self.env['stock.picking.type'].create({
            'sequence_id': self.env['ir.sequence'].create({
        route = self.env['stock.location.route'].create({
        move_from_supplier = self.env['stock.move'].create({
        move_to_transit = self.env['stock.move'].create({
        move_push = self.env['stock.move'].search([('location_id', '=', intercom_location.id),
        self.assertEqual(self.env['stock.quant']._get_available_quantity(product_lot, intercom_location, lot_1), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(product_lot, self.stock_location_b, lot_2), 1.0)
        partner = self.env['res.partner'].create({'name': 'Deco Addict'})
        resupply_route = self.env['stock.location.route'].search([('supplier_wh_id', '=', self.warehouse_b.id),
        product_lot = self.env['product.product'].create({
        move_sup_to_whb = self.env['stock.move'].create({
        picking_out = self.env['stock.picking'].create({
        move_wha_to_cus = self.env['stock.move'].create({
        move_whb_to_transit = self.env['stock.move'].search([('location_id', '=', self.stock_location_b.id),
        move_transit_to_wha = self.env['stock.move'].search([('location_id', '=', intercom_location.id),
        wizard = Form(self.env[res_dict['res_model']].with_context(res_dict['context'])).save()
        self.assertEqual(self.env['stock.quant']._get_available_quantity(product_lot, intercom_location, lot_b), 1.0)
        wizard = Form(self.env[res_dict['res_model']].with_context(res_dict['context'])).save()
        self.assertEqual(self.env['stock.quant']._get_available_quantity(product_lot, customer_location, lot_a), 1.0)
        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 20.0)
        self.env['stock.quant']._update_available_quantity(self.productB, self.stock_location, 20.0)
        ship_move_a = self.env['stock.move'].create({
        ship_move_b = self.env['stock.move'].create({
        pack = self.env['stock.quant.package'].create({'name': 'The pack to pick'})
        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 20.0, package_id=pack)
        picking = self.env['stock.picking'].create({
        package_level = self.env['stock.package_level'].create({
        pack = self.env['stock.quant.package'].create({'name': 'The pack to pick'})
        shelf1_location = self.env['stock.location'].create({
        self.env['stock.quant']._update_available_quantity(self.productA, shelf1_location, 20.0, package_id=pack)
        picking = self.env['stock.picking'].create({
        package_level = self.env['stock.package_level'].create({
        package_level = self.env['stock.package_level'].create({
        shelf1_location = self.env['stock.location'].create({
        shelf2_location = self.env['stock.location'].create({
        picking = self.env['stock.picking'].create({
        ship_move_a = self.env['stock.move'].create({
        pack1 = self.env['stock.quant.package'].search([])[-1]
        wizard = self.env[(wizard_values.get('res_model'))].browse(wizard_values.get('res_id'))
        pack2 = self.env['stock.quant.package'].search([])[-1]
        quant = self.env['stock.quant'].create({
        package = self.env['stock.quant.package'].create({
        move = self.env['stock.move'].create({
        picking = self.env['stock.picking'].create({
        shelf1 = self.env['stock.location'].create({
        shelf2 = self.env['stock.location'].create({
        package = self.env['stock.quant.package'].create({})
        picking = self.env['stock.picking'].create({
        self.env['stock.move.line'].create({
        self.env['stock.move.line'].create({
        location_form = Form(self.env['stock.location'])
        putaway_A = self.env['stock.putaway.rule'].create({
        putaway_B = self.env['stock.putaway.rule'].create({
        receipt_form = Form(self.env['stock.picking'])
        internal_transfer = self.env['stock.picking'].search([
        internal_form = Form(self.env['stock.picking'])
        location_form = Form(self.env['stock.location'])
        location_form = Form(self.env['stock.location'])
        putaway_A = self.env['stock.putaway.rule'].create({
        putaway_B = self.env['stock.putaway.rule'].create({
        receipt_form = Form(self.env['stock.picking'])
        internal_transfer = self.env['stock.picking'].search([
        internal_form = Form(self.env['stock.picking'])
        lot1 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 20.0, lot_id=lot1)
        ship_move_a = self.env['stock.move'].create({
        package = self.env["stock.quant.package"].create({"name": "Src Pack"})
        dest_package1 = self.env["stock.quant.package"].create({"name": "Dest Pack1"})
        picking_form = Form(self.env['stock.picking'])
        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 100, package_id=package)
        new_package = self.env["stock.quant.package"].create({"name": "New Pack"})
        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 20, package_id=new_package)
        package = self.env["stock.quant.package"].create({"name": "Src Pack"})
        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 100, package_id=package)
        picking = self.env['stock.picking'].create({
        backorders = self.env['stock.picking'].search([('backorder_id', '=', picking.id)])
        package = self.env["stock.quant.package"].create({"name": "Src Pack"})
        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 100, package_id=package)
        picking = self.env['stock.picking'].create({
        receipt_form = Form(self.env['stock.picking'].with_context(default_immediate_transfer=False))
        receipt_form = Form(self.env['stock.picking'].with_context(default_immediate_transfer=True))
        res_partner_2 = self.env['res.partner'].create({
        res_partner_4 = self.env['res.partner'].create({
        product_neg = self.env['product.product'].create({
        pick_neg = self.env['stock.picking'].create(vals)
        lot_a = self.env['stock.production.lot'].create({'name': 'Lot neg', 'product_id': product_neg.id, 'company_id': self.env.company.id})
        package1 = self.env['stock.quant.package'].create({'name': 'Palneg 1'})
        package2 = self.env['stock.quant.package'].create({'name': 'Palneg 2'})
        package3 = self.env['stock.quant.package'].create({'name': 'Palneg 3'})
        new_pack1 = self.env['stock.move.line'].create({
        new_pack2 = self.env['stock.move.line'].create({
        delivery_order_neg = self.env['stock.picking'].create(vals)
        records = self.env['stock.quant'].search([('product_id', '=', product_neg.id), ('quantity', '!=', '0')])
        delivery_reconcile = self.env['stock.picking'].create(vals)
        lot = self.env["stock.production.lot"].search([
        pack = self.env["stock.quant.package"].search([('name', '=', 'Palneg 2')], limit=1)
        neg_quants = self.env['stock.quant'].search([
        self.product = self.env['product.product'].create({
        self.partner = self.env['res.partner'].create({'name': 'Partner'})
        product_route = self.env['stock.location.route'].create({
        pick_output = self.env['stock.picking'].create(vals)
            self.env['procurement.group'].run_scheduler()
        moves = self.env['stock.move'].search([
        move_dest = self.env['stock.move'].create({
        move_orig = self.env['stock.move'].create({
        warehouse = self.env['stock.warehouse'].search([], limit=1)
        orderpoint_form = Form(self.env['stock.warehouse.orderpoint'])
        rule = self.env['stock.rule'].search([
        delivery_move = self.env['stock.move'].create({
        self.env['procurement.group'].run_scheduler()
        receipt_move = self.env['stock.move'].search([
        self.productA = self.env['product.product'].create({
        self.productB = self.env['product.product'].create({
        warehouse = self.env['stock.warehouse'].search([], limit=1)
        orderpoint_form = Form(self.env['stock.warehouse.orderpoint'])
        self.env['stock.warehouse.orderpoint'].create({
        self.env['stock.rule'].create({
        delivery_picking = self.env['stock.picking'].create({
        delivery_move = self.env['stock.move'].create({
        receipt_move = self.env['stock.move'].search([
        receipt_move2 = self.env['stock.move'].search([
        self.partner = self.env['res.partner'].create({'name': 'Partner'})
        warehouse = self.env['stock.warehouse'].search([('company_id', '=', self.env.user.id)], limit=1)
        product_a = self.env['product.product'].create({
        self.env['stock.quant']._update_available_quantity(product_a, warehouse.lot_stock_id, 10.0)
        wave_pg = self.env['procurement.group'].create({'name': 'Wave PG'})
        wave_route = self.env['stock.location.route'].create({
        pg = self.env['procurement.group'].create({'name': 'Wave 1'})
        self.env['procurement.group'].run([
        picking_pick = self.env['stock.picking'].search([('group_id', '=', wave_pg.id)])
        picking_ship = self.env['stock.picking'].search([('group_id', '=', pg.id)])
        pg = self.env['procurement.group'].create({'name': 'Wave 2'})
        self.env['procurement.group'].run([
        picking_ship = self.env['stock.picking'].search([('group_id', '=', pg.id)])
        warehouse = self.env['stock.warehouse'].create({
        shelf1 = self.env['stock.location'].create({
        shelf2 = self.env['stock.location'].create({
        products = self.env['product.product'].create([{'name': i, 'type': 'product'} for i in range(500)])
        self.env['stock.warehouse.orderpoint'].create([{
        self.env['stock.rule'].create({
        self.env['stock.rule'].create({
        self.env['stock.rule'].create({
        wrong_route = self.env['stock.location.route'].create({
        self.env['stock.rule'].create({
        self.env['procurement.group'].run_scheduler()
        self.assertTrue(self.env['stock.move'].search([('product_id', 'in', products.ids)]))
            self.assertTrue(self.env['mail.activity'].search([
        self.env['stock.picking.type'].browse(self.ref('stock.picking_type_out')).reservation_method = 'manual'
        self.env['stock.quant'].create({
        self.env['stock.quant'].create({
        self.picking_out = self.env['stock.picking'].create({
        self.env['stock.move'].create({
        self.picking_out_2 = self.env['stock.picking'].create({
        self.env['stock.move'].create({
        orderpoint_form = Form(self.env['stock.warehouse.orderpoint'])
        product = self.env['product.product'].create({
        result = self.env['product.product'].search([
        quants = self.env['stock.quant']._gather(product_id, location_id, lot_id=lot_id, package_id=package_id, owner_id=owner_id, strict=strict)
        self.env['stock.quant'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
            self.env['stock.quant'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 3.0)
            self.env['stock.quant'].create({
        self.env['stock.quant'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.env['stock.quant'].create({
        self.env['stock.quant'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.env['stock.quant'].create({
        self.env['stock.quant'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, allow_negative=True), -5.0)
        lot1 = self.env['stock.production.lot'].create({
        self.env['stock.quant'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_lot, self.stock_location, lot_id=lot1), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_lot, self.stock_location, lot_id=lot1, allow_negative=True), -10.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_consu, self.stock_location), 0.0)
            self.env['stock.quant']._update_available_quantity(self.product_consu, self.stock_location, 1.0)
        self.env['stock.quant'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
            self.env['stock.quant'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 2.0)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 3.0)
        quant = self.env['stock.quant'].search([('location_id', '=', self.stock_location.id)], limit=1)
        available_quantity = self.env['stock.quant']._get_available_quantity(product, self.stock_location, allow_negative=True)
            self.env['stock.quant']._update_available_quantity(product, self.stock_location, 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(product, self.stock_location, allow_negative=True), available_quantity + 1)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0)
        product2 = self.env['product.product'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0)
        self.env['stock.quant']._update_available_quantity(self.product, stock_sub_location, 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 2.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, stock_sub_location), 1.0)
        self.env['stock.quant']._update_available_quantity(product2, stock_sub_location, 1.0)
        self.env['stock.quant']._update_available_quantity(product2, self.stock_location, 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(product2, self.stock_location), 2.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(product2, stock_sub_location), 1.0)
        location1 = self.env['stock.location'].create({
            self.env['stock.quant']._update_available_quantity(self.product, location1, 1.0)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, -1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location, allow_negative=True), -1.0)
            self.env['stock.quant'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 2.0)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, -1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 1.0)
        quant = self.env['stock.quant'].search([('location_id', '=', self.stock_location.id)], limit=1)
        available_quantity = self.env['stock.quant']._get_available_quantity(product, self.stock_location, allow_negative=True)
            self.env['stock.quant']._update_available_quantity(product, self.stock_location, -1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(product, self.stock_location, allow_negative=True), available_quantity - 1)
        self.env['stock.quant'].create({
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, -1.0)
        self.env['stock.quant'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 10.0)
        self.env['stock.quant']._update_reserved_quantity(self.product, self.stock_location, 10.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
            self.env['stock.quant'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 10.0)
        self.env['stock.quant']._update_reserved_quantity(self.product, self.stock_location, 10.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.env['stock.quant'].create({
        self.env['stock.quant'].create({
        self.env['stock.quant'].create({
        self.env['stock.quant'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 29.0)
        self.env['stock.quant']._update_reserved_quantity(self.product, self.stock_location, 10.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 19.0)
        self.env['stock.quant'].create({
        self.env['stock.quant'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
            self.env['stock.quant']._update_reserved_quantity(self.product, self.stock_location, 10.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
            self.env['stock.quant']._update_reserved_quantity(self.product, self.stock_location, 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.env['stock.quant'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.env['stock.quant']._update_reserved_quantity(self.product, self.stock_location, -10.0, strict=True)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 10.0)
            self.env['stock.quant']._update_reserved_quantity(self.product, self.stock_location, 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
            self.env['stock.quant']._update_reserved_quantity(self.product, self.stock_location, -1.0, strict=True)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 2.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 2.0)
        self.env['stock.quant']._update_reserved_quantity(self.product, self.stock_location, 2.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.env['stock.quant']._update_reserved_quantity(self.product, self.stock_location, -2.0, strict=True)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 2.0)
        self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, -2.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, self.stock_location), 0.0)
        self.env['stock.quant']._update_available_quantity(self.product, pack_location, 2.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product, pack_location), 2.0)
        lot1 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1.0)
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1.0, lot_id=lot1)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location), 2.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, strict=True), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, lot_id=lot1), 1.0)
        self.env['stock.quant']._update_reserved_quantity(self.product_serial, self.stock_location, 1.0, lot_id=lot1, strict=True)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, strict=True), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, lot_id=lot1), 0.0)
        self.env['stock.quant']._update_reserved_quantity(self.product_serial, self.stock_location, -1.0, lot_id=lot1, strict=True)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location), 2.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, strict=True), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, lot_id=lot1), 1.0)
            self.env['stock.quant']._update_reserved_quantity(self.product_serial, self.stock_location, -1.0, strict=True)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location), 2.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, strict=True), 1.0)
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product_serial, self.stock_location, lot_id=lot1), 1.0)
        quant = self.env['stock.quant'].create({
            self.env['stock.quant'].create({
        self.env['stock.quant'].create({
        quantity, in_date = self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 1.0)
        self.env['stock.quant'].create({
        quantity, in_date = self.env['stock.quant']._update_available_quantity(self.product, self.stock_location, 2.0)
        lot1 = self.env['stock.production.lot'].create({
        quantity, in_date = self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1.0, lot_id=lot1)
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1.0, lot_id=lot1, in_date=in_date_lot1)
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1.0, lot_id=lot2, in_date=in_date_lot2)
        quants = self.env['stock.quant']._update_reserved_quantity(self.product_serial, self.stock_location, 1)
        lifo_strategy = self.env['product.removal'].search([('method', '=', 'lifo')])
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1.0, lot_id=lot1, in_date=in_date_lot1)
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_location, 1.0, lot_id=lot2, in_date=in_date_lot2)
        quants = self.env['stock.quant']._update_reserved_quantity(self.product_serial, self.stock_location, 1)
        lot1 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.product_lot, self.stock_location, 1.0, lot_id=lot1, in_date=in_date1)
        quant = self.env['stock.quant'].search([
        self.env['stock.quant']._update_available_quantity(self.product_lot, self.stock_location, 1.0, lot_id=lot1, in_date=in_date2)
        quant = self.env['stock.quant'].search([
        closest_strategy = self.env['product.removal'].search([('method', '=', 'closest')])
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_subloc2, 1.0, lot_id=lot1, in_date=in_date)
        self.env['stock.quant']._update_available_quantity(self.product_serial, self.stock_subloc3, 1.0, lot_id=lot2, in_date=in_date)
        quants = self.env['stock.quant']._update_reserved_quantity(self.product_serial, self.stock_location, 1)
        closest_strategy = self.env['product.removal'].search([('method', '=', 'closest')])
        self.env['stock.quant'].create({
        self.env['stock.quant'].create({
        quants = self.env['stock.quant']._update_reserved_quantity(self.product, self.stock_location, 3)
        quants = self.env['stock.quant'].search([('product_id', '=', self.product.id)])
        quants = self.env['stock.quant'].search([
        stock_move = self.env['stock.move'].search([
        quants = self.env['stock.quant'].search([
        quants = self.env['stock.quant'].search([
        stock_move = self.env['stock.move'].search([
        valid_quant = self.env['stock.quant'].create({
        invalid_quant = self.env['stock.quant'].create({
        valid_quant = self.env['stock.quant'].with_context(inventory_mode=True).create({
        inventoried_quant = self.env['stock.quant'].with_context(inventory_mode=True).create({
            invalid_quant = self.env['stock.quant'].with_context(inventory_mode=True).create({
        stock_move = self.env['stock.move'].search([
        stock_move = self.env['stock.move'].search([
        sn1 = self.env['stock.production.lot'].create({
        product1 = self.env['product.product'].create({
        lot1 = self.env['stock.production.lot'].create({
        product_form = Form(self.env['product.product'])
        warehouse = self.env['stock.warehouse'].search([], limit=1)
        stock = self.env['stock.location'].create({
        self.env['stock.quant'].with_context(inventory_mode=True).create({
        self.env['stock.move'].flush()
        report_records_today = self.env['report.stock.quantity'].read_group(
        report_records_tomorrow = self.env['report.stock.quantity'].read_group(
        report_records_yesterday = self.env['report.stock.quantity'].read_group(
        move_out = self.env['stock.move'].create({
        self.env['stock.move'].flush()
        report_records_tomorrow = self.env['report.stock.quantity'].read_group(
        self.env['stock.move'].flush()
        report_records_tomorrow = self.env['report.stock.quantity'].read_group(
        report_records_today = self.env['report.stock.quantity'].read_group(
        move_in = self.env['stock.move'].create({
        self.env['stock.move'].flush()
        report_records_tomorrow = self.env['report.stock.quantity'].read_group(
        report_records_today = self.env['report.stock.quantity'].read_group(
        move_out = self.env['stock.move'].create({
        self.env['stock.move'].flush()
        report_records_today = self.env['report.stock.quantity'].read_group(
        report_records_tomorrow = self.env['report.stock.quantity'].read_group(
        report_records_yesterday = self.env['report.stock.quantity'].read_group(
        product_form = Form(self.env['product.product'])
        warehouse = self.env['stock.warehouse'].search([], limit=1)
        stock = self.env['stock.location'].create({
        stock_without_wh = self.env['stock.location'].create({
        self.env['stock.quant'].with_context(inventory_mode=True).create({
        self.env['stock.quant'].with_context(inventory_mode=True).create({
        move = self.env['stock.move'].create({
        self.env['stock.move'].flush()
        report_records = self.env['report.stock.quantity'].read_group(
        report_records = self.env['report.stock.quantity'].read_group(
        move = self.env['stock.move'].create({
        self.env['stock.move'].flush()
        report_records = self.env['report.stock.quantity'].read_group(
        product_form = Form(self.env['product.product'])
        warehouse = self.env['stock.warehouse'].search([], limit=1)
        stock = self.env['stock.location'].create({
        stock_real_loc = self.env['stock.location'].create({
        self.env['stock.move'].flush()
        report_records = self.env['report.stock.quantity'].read_group(
        move_in = self.env['stock.move'].create({
        self.env['stock.move'].flush()
        report_records = self.env['report.stock.quantity'].read_group(
        move_out = self.env['stock.move'].create({
        self.env['stock.move'].flush()
        report_records = self.env['report.stock.quantity'].read_group(
        receipt_form = Form(self.env['stock.picking'].with_context(
        delivery_form = Form(self.env['stock.picking'].with_context(
        receipt_form = Form(self.env['stock.picking'].with_context(
        receipt_form = Form(self.env['stock.picking'].with_context(
        delivery_form = Form(self.env['stock.picking'].with_context(
        delivery_form = Form(self.env['stock.picking'].with_context(
        delivery_form = Form(self.env['stock.picking'].with_context(
        delivery_form = Form(self.env['stock.picking'].with_context(
        delivery_form = Form(self.env['stock.picking'].with_context(
        delivery_form = Form(self.env['stock.picking'].with_context(
        delivery_form = Form(self.env['stock.picking'].with_context(
        delivery_form = Form(self.env['stock.picking'].with_context(
        receipt_form = Form(self.env['stock.picking'].with_context(
        receipt_form = Form(self.env['stock.picking'].with_context(
        receipt_form = Form(self.env['stock.picking'].with_context(
        pg1 = self.env['procurement.group'].create({})
        reordering_rule = self.env['stock.warehouse.orderpoint'].create({
        pickings = self.env['stock.picking'].search([('product_id', '=', self.product.id)])
        wh_2 = self.env['stock.warehouse'].create({
        picking_type_out_2 = self.env['stock.picking.type'].search([
        delivery_form = Form(self.env['stock.picking'].with_context(
        delivery_form = Form(self.env['stock.picking'].with_context(
        company_2 = self.env['res.company'].create({'name': 'Aperture Science'})
        wh_2 = self.env['stock.warehouse'].search([('company_id', '=', company_2.id)])
        receipt_form = Form(self.env['stock.picking'].with_context(
        receipt_form = Form(self.env['stock.picking'].with_context(
        product_attr_color = self.env['product.attribute'].create({'name': 'Color'})
        color_gray = self.env['product.attribute.value'].create({
        color_blue = self.env['product.attribute.value'].create({
        product_attr_size = self.env['product.attribute'].create({'name': 'size'})
        size_pocket = self.env['product.attribute.value'].create({
        size_xl = self.env['product.attribute.value'].create({
        product_template = self.env['product.template'].create({
        receipt_form = Form(self.env['stock.picking'].with_context(
        receipt_form = Form(self.env['stock.picking'].with_context(
        delivery_form = Form(self.env['stock.picking'].with_context(
        delivery_form = Form(self.env['stock.picking'].with_context(
        delivery_form = Form(self.env['stock.picking'].with_context(
        receipt_form = Form(self.env['stock.picking'].with_context(
        delivery_form = Form(self.env['stock.picking'].with_context(
        delivery_form = Form(self.env['stock.picking'].with_context(
        receipt_form = Form(self.env['stock.picking'].with_context(
        delivery_form = Form(self.env['stock.picking'])
        receipt_form = Form(self.env['stock.picking'])
        receipt_form = Form(self.env['stock.picking'])
        delivery_form = Form(self.env['stock.picking'].with_context(
        delivery_form = Form(self.env['stock.picking'].with_context(
        delivery_form = Form(self.env['stock.picking'].with_context(
        delivery_form = Form(self.env['stock.picking'].with_context(
        receipt_form = Form(self.env['stock.picking'])
        product2 = self.env['product.product'].create({
        product3 = self.env['product.product'].create({
        delivery_form = Form(self.env['stock.picking'].with_context(
        delivery_form = Form(self.env['stock.picking'].with_context(
        receipt_form = Form(self.env['stock.picking'].with_context(
        delivery_form = Form(self.env['stock.picking'].with_context(
        receipt_form = Form(self.env['stock.picking'].with_context(
        receipt_form = Form(self.env['stock.picking'].with_context(
        wh_2 = self.env['stock.warehouse'].create({
        picking_type_out_2 = self.env['stock.picking.type'].search([
        delivery_form = Form(self.env['stock.picking'].with_context(
        receipt_form = Form(self.env['stock.picking'].with_context(
        warehouse = self.env['stock.warehouse'].search([('lot_stock_id', '=', self.stock_location.id)], limit=1)
        ship_move = self.env['stock.move'].create({
        receipt_form = Form(self.env['stock.picking'].with_context(
        self.env['stock.quant'].with_context(inventory_mode=True).create({
        delivery_form = Form(self.env['stock.picking'].with_context(
        receipt_form = Form(self.env['stock.picking'].with_context(
        self.product1 = self.env['product.product'].create({
        self.wh = self.env['stock.warehouse'].create({
        self.uom_unit = self.env['uom.uom'].search([('category_id', '=', self.categ_unit.id), ('uom_type', '=', 'reference')], limit=1)
        self.move1 = self.env['stock.move'].create({
        self.quant1 = self.env['stock.quant'].create({
        self.move2 = self.env['stock.move'].create({
        self.env['base'].flush()
        report = self.env['report.stock.quantity'].read_group(
        wh2 = self.env['stock.warehouse'].create({'name': 'WH2', 'code': 'WH2'})
        self.move_transit_out = self.env['stock.move'].create({
        self.move_transit_in = self.env['stock.move'].create({
        self.env['base'].flush()
        report = self.env['report.stock.quantity'].read_group(
        report = self.env['report.stock.quantity'].read_group(
        self.product_replenished = self.env['product.product'].create({
        self.env['stock.rule'].create({
        delivery_picking = self.env['stock.picking'].create({
        self.env['stock.move'].create({
        self.env['stock.move'].flush()
        self.env['stock.warehouse.orderpoint'].action_open_orderpoints()
        orderpoint = self.env['stock.warehouse.orderpoint'].search([
        self.env['stock.warehouse.orderpoint'].action_open_orderpoints()
        move = self.env['stock.move'].search([
        orderpoint = self.env['stock.warehouse.orderpoint'].search([
        orderpoint_form = Form(self.env['stock.warehouse.orderpoint'])
        self.env['stock.warehouse.orderpoint'].action_open_orderpoints()
        self.env['stock.quant']._update_available_quantity(
        move1 = self.env['stock.move'].create({
        quant = self.env['stock.quant']._gather(
        test_stock_location = self.env['stock.location'].create({
        self.env['stock.quant']._update_available_quantity(
        move1 = self.env['stock.move'].create({
        quant = self.env['stock.quant']._gather(
        package = self.env['stock.quant.package'].create({
        self.env['stock.quant']._update_available_quantity(
        move1 = self.env['stock.move'].create({
        self.assertEqual(move1.move_line_ids.package_id, self.env['stock.quant.package'])
        self.assertEqual(len(self.env['stock.quant']._gather(self.product1, self.stock_location)), 1)
        self.assertEqual(len(self.env['stock.quant']._gather(self.product1, self.stock_location, package_id=package)), 0)
        self.assertEqual(self.env['stock.quant']._gather(self.product1, self.stock_location).reserved_quantity, 0)
        product1 = self.env['product.product'].create({
        product2 = self.env['product.product'].create({
        lot1 = self.env['stock.production.lot'].create({
        lot2 = self.env['stock.production.lot'].create({
        self.env['stock.quant']._update_available_quantity(product1, self.stock_location, 1, lot_id=lot1)
        self.env['stock.quant']._update_available_quantity(product2, self.stock_location, 1, lot_id=lot2)
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        wizard = Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        wizard = Form(self.env[res_dict.get('res_model')].with_context(res_dict['context'])).save()
        backorder_wizard = self.env[(res_dict_for_back_order.get('res_model'))].browse(res_dict_for_back_order.get('res_id')).with_context(res_dict_for_back_order['context'])
        wizard = Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        wizard = Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        wizard = Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        wizard = Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        wizard = Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        backorder_wizard = self.env[(res_dict_for_back_order.get('res_model'))].browse(res_dict_for_back_order.get('res_id')).with_context(res_dict_for_back_order['context'])
        wizard = Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        backorder_wizard = self.env[(res_dict_for_back_order.get('res_model'))].browse(res_dict_for_back_order.get('res_id')).with_context(res_dict_for_back_order['context'])
        wizard = Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        backorder_wizard = self.env[(res_dict_for_back_order.get('res_model'))].browse(res_dict_for_back_order.get('res_id')).with_context(res_dict_for_back_order['context'])
        wizard = Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        wizard = Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        quant_obj = self.env['stock.quant'].with_context(inventory_mode=True)
        picking_in = self.env['stock.picking.type'].browse(self.picking_type_in)
        wizard = self.env[(res_dict.get('res_model'))].browse(res_dict.get('res_id'))
        self.env['stock.picking.type'].browse(self.picking_type_in).show_reserved = True
        quants = self.env['stock.quant']._gather(self.productE, self.env['stock.location'].browse(self.stock_location))
        neg_quants = self.env['stock.quant'].search([('product_id', '=', self.productE.id), ('quantity', '<', 0.0)])
        quants = self.env['stock.quant']._gather(self.productE, self.env['stock.location'].browse(self.stock_location))
        quants = self.env['stock.quant']._gather(self.productE, self.env['stock.location'].browse(self.stock_location))
        neg_quants = self.env['stock.quant'].search([('product_id', '=', self.productE.id), ('quantity', '<', 0.0)])
        quants = self.env['stock.quant']._gather(self.productE, self.env['stock.location'].browse(self.stock_location))
        inventory_quant = self.env['stock.quant'].create({
        inventory_quant = self.env['stock.quant'].create({
        backorder_wizard = Form(self.env['stock.backorder.confirmation'].with_context(res_dict['context'])).save()
        warehouse_company_1 = self.env['stock.warehouse'].search([('company_id', '=', self.env.company.id)], limit=1)
        f = Form(self.env['stock.location.route'])
        warehouse_company_2 = self.env['stock.warehouse'].search([('company_id', '=', company_2.id)], limit=1)
        f = Form(self.env['stock.location.route'])
        product = self.env['product.product'].create({
        replenish_wizard = self.env['product.replenish'].create({
        incoming_picking = self.env['stock.picking'].search([('product_id', '=', product.id), ('picking_type_id', '=', warehouse_company_1.in_type_id.id)])
        outgoing_picking = self.env['stock.picking'].search([('product_id', '=', product.id), ('picking_type_id', '=', warehouse_company_2.out_type_id.id)])
        warehouse_company_1 = self.env['stock.warehouse'].search([('company_id', '=', self.env.company.id)], limit=1)
        f = Form(self.env['stock.location.route'])
        warehouse_company_2 = self.env['stock.warehouse'].search([('company_id', '=', company_2.id)], limit=1)
        f = Form(self.env['stock.location.route'])
        company_3 = self.env['res.company'].create({
        warehouse_company_3 = self.env['stock.warehouse'].search([('company_id', '=', company_3.id)], limit=1)
        f = Form(self.env['stock.location.route'])
        product_from_company_2 = self.env['product.product'].create({
        product_from_company_3 = self.env['product.product'].create({
        f = Form(self.env['stock.picking'], view='stock.view_picking_form')
        incoming_picking = self.env['stock.picking'].search([('product_id', '=', product_from_company_2.id), ('picking_type_id', '=', warehouse_company_1.in_type_id.id)])
        outgoing_picking = self.env['stock.picking'].search([('product_id', '=', product_from_company_2.id), ('picking_type_id', '=', warehouse_company_2.out_type_id.id)])
        incoming_picking = self.env['stock.picking'].search([('product_id', '=', product_from_company_3.id), ('picking_type_id', '=', warehouse_company_1.in_type_id.id)])
        outgoing_picking = self.env['stock.picking'].search([('product_id', '=', product_from_company_3.id), ('picking_type_id', '=', warehouse_company_3.out_type_id.id)])
        partner = self.env['res.partner'].create({'name': 'Hubert Bonisseur de la Bath'})
        product = self.env['product.product'].create({'name': 'Un petit coup de polish', 'type': 'product'})
        wh = self.env['stock.warehouse'].search([('company_id', '=', self.env.company.id)], limit=1)
        f = Form(self.env['stock.picking'], view='stock.view_picking_form')
        picking_form = Form(self.env['stock.picking'].with_context(default_immediate_transfer=True))
        picking_form = Form(self.env['stock.picking'].with_context(default_immediate_transfer=False))
        product_lot = self.env['product.product'].create({
        product_serial = self.env['product.product'].create({
        picking_type = self.env['stock.picking.type'].browse(self.picking_type_in)
        picking_form = Form(self.env['stock.picking'])
        picking_form = Form(self.env['stock.picking'])
        lots = self.env['stock.production.lot'].search([('product_id', '=', product_lot.id)], order='name asc')
        picking_type = self.env['stock.picking.type'].browse(self.picking_type_in)
        picking_form = Form(self.env['stock.picking'])
        picking_form = Form(self.env['stock.picking'])
            wizard = Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        self.sublocation = self.env['stock.location'].create({
        self.partner = self.env['res.partner'].create({'name': 'Deco Addict'})
        product_1_quant = self.env['stock.quant'].with_context(inventory_mode=True).create({
        move_in_id = self.env['stock.move'].search([('is_inventory', '=', True), ('product_id', '=', self.product_1.id)])
        move_ids = self.env['stock.move'].search([('is_inventory', '=', True), ('product_id', '=', self.product_1.id)])
        quants = self.env['stock.quant']._gather(self.product_1, self.product_1.property_stock_inventory)
        self.assertEqual(self.env['stock.quant']._gather(self.product_1, self.warehouse_1.lot_stock_id).quantity, 35.0)
        self.assertEqual(self.env['stock.quant']._gather(self.product_1, self.warehouse_1.lot_stock_id.location_id).quantity, 35.0)
        self.assertEqual(self.env['stock.quant']._gather(self.product_1, self.warehouse_1.view_location_id).quantity, 35.0)
        self.assertEqual(self.env['stock.quant']._gather(self.product_1, self.warehouse_1.wh_input_stock_loc_id).quantity, 0.0)
        self.assertEqual(self.env['stock.quant']._gather(self.product_1, self.env.ref('stock.stock_location_stock')).quantity, 0.0)
        InventoryWizard = self.env['stock.change.product.qty'].with_user(self.user_stock_manager)
        quant = self.env['stock.quant'].search([('id', 'not in', self.existing_quants.ids)])
        InventoryWizard = self.env['stock.change.product.qty'].with_user(self.user_stock_user)
        picking_out = self.env['stock.picking'].create({
        customer_move = self.env['stock.move'].create({
        productA = self.env['product.product'].create({'name': 'Product A', 'type': 'product'})
        picking_out = self.env['stock.picking'].create({
        self.env['stock.move'].create({
        quant = self.env['stock.quant'].search([('product_id', '=', productA.id), ('location_id', '=', stock_location.id)])
        return_pick = self.env['stock.picking'].browse(stock_return_picking_action['res_id'])
        quant = self.env['stock.quant'].search([('product_id', '=', productA.id), ('location_id', '=', stock_location.id)])
        productA = self.env['product.product'].create({'name': 'Product A', 'type': 'product'})
        picking_out = self.env['stock.picking'].create({
        self.env['stock.move'].create({
        quant = self.env['stock.quant'].search([('product_id', '=', productA.id), ('location_id', '=', stock_location.id)])
        move = self.env['stock.move'].search([('product_id', '=', productA.id), ('is_inventory', '=', True)])
        self.env['stock.quant']._quant_tasks()
        quants = self.env['stock.quant'].search([('product_id', '=', productA.id), ('location_id', '=', stock_location.id)])
        quant = self.env['stock.quant'].search([('product_id', '=', productA.id), ('location_id', '=', location_loss.id)])
        warehouse_stock = self.env['stock.warehouse'].create({
        warehouse_distribution = self.env['stock.warehouse'].create({
        warehouse_shop = self.env['stock.warehouse'].create({
        product = self.env['product.product'].create({
        picking_out = self.env['stock.picking'].create({
        self.env['stock.move'].create({
        moves = self.env['stock.move'].search([('product_id', '=', product.id)])
        self.assertTrue(self.env['stock.move'].search([('location_id', '=', warehouse_stock.lot_stock_id.id)]))
        self.assertTrue(self.env['stock.move'].search([('location_dest_id', '=', warehouse_distribution.lot_stock_id.id)]))
        self.assertTrue(self.env['stock.move'].search([('location_id', '=', warehouse_distribution.lot_stock_id.id)]))
        self.assertTrue(self.env['stock.move'].search([('location_dest_id', '=', warehouse_shop.lot_stock_id.id)]))
        self.assertTrue(self.env['stock.move'].search([('location_id', '=', warehouse_shop.lot_stock_id.id)]))
        warehouse_distribution_wavre = self.env['stock.warehouse'].create({
        warehouse_shop_wavre = self.env['stock.warehouse'].create({
        warehouse_distribution_namur = self.env['stock.warehouse'].create({
        warehouse_shop_namur = self.env['stock.warehouse'].create({
        product = self.env['product.product'].create({
        self.env['stock.quant']._update_available_quantity(product, warehouse_distribution_wavre.lot_stock_id, 1.0)
        self.env['stock.quant']._update_available_quantity(product, warehouse_distribution_namur.lot_stock_id, 1.0)
        picking_out_namur = self.env['stock.picking'].create({
        self.env['stock.move'].create({
        picking_stock_transit = self.env['stock.picking'].search([('location_id', '=', warehouse_distribution_namur.lot_stock_id.id)])
        picking_transit_shop_namur = self.env['stock.picking'].search([('location_dest_id', '=', warehouse_shop_namur.lot_stock_id.id)])
        self.assertEqual(self.env['stock.quant']._gather(product, customer_location).quantity, 1)
        self.assertEqual(sum(self.env['stock.quant']._gather(product, warehouse_distribution_namur.lot_stock_id).mapped('quantity')), 0)
        picking_out_wavre = self.env['stock.picking'].create({
        self.env['stock.move'].create({
        picking_stock_transit = self.env['stock.picking'].search([('location_id', '=', warehouse_distribution_wavre.lot_stock_id.id)])
        picking_transit_shop_wavre = self.env['stock.picking'].search([('location_dest_id', '=', warehouse_shop_wavre.lot_stock_id.id)])
        self.assertEqual(self.env['stock.quant']._gather(product, customer_location).quantity, 2)
        self.assertEqual(sum(self.env['stock.quant']._gather(product, warehouse_distribution_wavre.lot_stock_id).mapped('quantity')), 0)
        partner = self.env['res.partner'].create({'name': 'Chicago partner'})
        company = self.env['res.company'].create({
        self.env['stock.warehouse'].create({
        wh = self.env["stock.warehouse"].search([])
        wh = Form(self.env['stock.warehouse'])
        custom_location = Form(self.env['stock.location'])
        wh = Form(self.env['stock.warehouse'])
        custom_location = Form(self.env['stock.location'])
        route = Form(self.env['stock.location.route'])
        wh = Form(self.env['stock.warehouse'])
        product_wise = self.env['product.product'].create({
        self.partner = self.env['res.partner'].create({'name': 'Deco Addict'})
        warehouse = self.env['stock.warehouse'].search([('company_id', '=', self.env.company.id)], limit=1)
        self.shelf2 = self.env['stock.location'].create({
        self.shelf1 = self.env['stock.location'].create({
        self.partner2 = self.env['res.partner'].create({'name': 'Ready Mat'})
        pick1_wise = self.env['stock.picking'].create(vals)
        package1 = self.env['stock.quant.package'].create({'name': 'Pack 1'})
        new_pack1 = self.env['stock.move.line'].create({
        records = self.env['stock.quant'].search([('product_id', '=', product_wise.id)])
        delivery_order_wise1 = self.env['stock.picking'].create(vals)
        delivery_order_wise2 = self.env['stock.picking'].create(vals)
        records = self.env['stock.quant'].search([
        records = self.env['stock.quant'].search([
                product_id = self.env['product.product'].browse(self.env.context['default_product_id'])
                product_tmpl_id = self.env['product.template'].browse(self.env.context['default_product_tmpl_id'])
            warehouse = self.env['stock.warehouse'].search([('company_id', '=', company.id)], limit=1)
            self.env['procurement.group'].with_context(clean_context(self.env.context)).run([
                self.env['procurement.group'].Procurement(
        replenishment = self.env['procurement.group'].create({})
        move = self.env['stock.move'].browse(self.env.context.get('default_move_id'))
            pickings_to_validate = self.env['stock.picking'].browse(pickings_to_validate).with_context(skip_backorder=True)
            return self.env['stock.picking']\
        warehouse = self.env['stock.warehouse'].search(
        self.env['stock.quant'].with_context(inventory_mode=True).create({
            pickings_to_validate = self.env['stock.picking'].browse(pickings_to_validate)
            quants = self.env['stock.quant'].browse(self.env.context['default_quant_ids'])
            picking = self.env['stock.picking'].browse(self.env.context.get('active_id'))
        line_fields = [f for f in self.env['stock.return.picking.line']._fields.keys()]
        product_return_moves_data_tmpl = self.env['stock.return.picking.line'].default_get(line_fields)
                product_id = self.env['product.product'].browse(self.env.context['default_product_id'])
                product_tmpl_id = self.env['product.template'].browse(self.env.context['default_product_tmpl_id'])
            warehouse_id = self.env['stock.warehouse'].search([('company_id', '=', company.id)], limit=1).id
            self.env['procurement.group'].with_context(allowed_company_ids=cids).run_scheduler(
            quantity.quant_ids = self.env['stock.quant'].search([
            new_product_category = self.env['product.category'].browse(vals.get('categ_id'))
        if move_vals_list and not self.env['stock.valuation.layer'].check_access_rights('read', raise_exception=False):
            account_moves = self.env['account.move'].sudo().create(move_vals_list)
        groups = self.env['stock.valuation.layer'].read_group(domain, ['value:sum', 'quantity:sum'], ['product_id'])
        if self.filtered(lambda p: p.valuation == 'real_time') and not self.env['stock.valuation.layer'].check_access_rights('read', raise_exception=False):
        stock_valuation_layers = self.env['stock.valuation.layer'].sudo().create(svl_vals_list)
        account_moves = self.env['account.move'].sudo().create(am_vals_list)
        candidates = self.env['stock.valuation.layer'].sudo().search([
        svls_to_vacuum = self.env['stock.valuation.layer'].sudo().search([
        all_candidates = self.env['stock.valuation.layer'].sudo().search(domain)
            vacuum_svl = self.env['stock.valuation.layer'].sudo().create(vals)
        self.env['stock.valuation.layer'].browse(x[0].id for x in as_svls)._validate_accounting_entries()
        AccountMove = self.env['account.move'].sudo()
        products = self.env['product.product'].search_read(domain, ['quantity_svl'])
        impacted_products |= self.env['product.product'].browse(impacted_product_ids)
        if move_vals_list and not self.env['stock.valuation.layer'].check_access_rights('read', raise_exception=False):
            account_moves = self.env['account.move'].sudo().create(move_vals_list)
        action_data = self.env['ir.actions.act_window']._for_xml_id('account.action_move_journal_line')
        precision = self.env['decimal.precision'].precision_get('Product Price')
        return self.env['stock.move.line'].browse(res)
        return self.env['stock.valuation.layer'].sudo().create(svl_vals_list)
        return self.env['stock.valuation.layer'].sudo().create(svl_vals_list)
        return self.env['stock.valuation.layer'].sudo().create(svl_vals_list)
        valued_moves = {valued_type: self.env['stock.move'] for valued_type in self._get_valued_types()}
        stock_valuation_layers = self.env['stock.valuation.layer'].sudo()
        return (self.picking_id.partner_id and self.env['res.partner']._find_accounting_partner(self.picking_id.partner_id).id) or False
        analytic_lines = self.env['account.analytic.line'].sudo().create(analytic_lines_vals)
            self.env['stock.move'].browse(
        scraps = self.env['stock.scrap'].search([('picking_id', '=', self.id)])
        action = self.env["ir.actions.actions"]._for_xml_id("stock_account.stock_valuation_layer_action")
        company = self.env['stock.location'].browse(wh_location_ids[0]).company_id
        svl = self.env['stock.valuation.layer'].search(domain + [('company_id', '=', company.id)])
            Form(self.env['stock.valuation.layer.revaluation'].with_context(context)).save()
        old_layers = self.env['stock.valuation.layer'].search([('product_id', '=', self.product1.id)], order="create_date desc, id desc")
        revaluation_wizard = Form(self.env['stock.valuation.layer.revaluation'].with_context(context))
        new_layer = self.env['stock.valuation.layer'].search([('product_id', '=', self.product1.id)], order="create_date desc, id desc", limit=1)
            Form(self.env['stock.valuation.layer.revaluation'].with_context(context)).save()
        old_layers = self.env['stock.valuation.layer'].search([('product_id', '=', self.product1.id)], order="create_date desc, id desc")
        revaluation_wizard = Form(self.env['stock.valuation.layer.revaluation'].with_context(context))
        new_layer = self.env['stock.valuation.layer'].search([('product_id', '=', self.product1.id)], order="create_date desc, id desc", limit=1)
            Form(self.env['stock.valuation.layer.revaluation'].with_context(context)).save()
        old_layers = self.env['stock.valuation.layer'].search([('product_id', '=', self.product1.id)], order="create_date desc, id desc")
        revaluation_wizard = Form(self.env['stock.valuation.layer.revaluation'].with_context(context))
        new_layer = self.env['stock.valuation.layer'].search([('product_id', '=', self.product1.id)], order="create_date desc, id desc", limit=1)
        return self.env['account.move.line'].search([
        return self.env['account.move.line'].search([
        return self.env['account.move.line'].search([
        in_move = self.env['stock.move'].create({
        out_move = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move3 = self.env['stock.move'].create({
        move4 = self.env['stock.move'].create({
        move5 = self.env['stock.move'].create({
        move6 = self.env['stock.move'].create({
        move7 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move3 = self.env['stock.move'].create({
        move4 = self.env['stock.move'].create({
        move5 = self.env['stock.move'].create({
        move6 = self.env['stock.move'].create({
        move7 = self.env['stock.move'].create({
        transit_location = self.env['stock.location'].search([
        move8 = self.env['stock.move'].create({
        move9 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move3 = self.env['stock.move'].create({
        move4 = self.env['stock.move'].create({
        move5 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        out_pick = self.env['stock.picking'].create({
            'partner_id': self.env['res.partner'].search([], limit=1).id,
        move3 = self.env['stock.move'].create({
        move4 = self.env['stock.move'].create({
        return_pick = self.env['stock.picking'].browse(stock_return_picking_action['res_id'])
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move3 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move3 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move3 = self.env['stock.move'].create({
        receipt = self.env['stock.picking'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        delivery = self.env['stock.picking'].create({
        move3 = self.env['stock.move'].create({
        #move4 = self.env['stock.move'].create({
        #self.env['stock.move']._run_fifo_vacuum()
        #move5 = self.env['stock.move'].create({
        #self.env['stock.move']._run_fifo_vacuum()
        move1 = self.env['stock.move'].create({
        self.env['stock.move.line'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move3 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        product = self.env['product.product'].create({
        product = self.env['product.product'].create({
        product = self.env['product.product'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move3 = self.env['stock.move'].create({
        move4 = self.env['stock.move'].create({
        move5 = self.env['stock.move'].create({
        move6 = self.env['stock.move'].create({
        move7 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move3 = self.env['stock.move'].create({
        move4 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move3 = self.env['stock.move'].create({
        move4 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move3 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        self.assertEqual(self.env['stock.quant']._get_available_quantity(self.product1, self.stock_location), 0)
        move1 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move3 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move3 = self.env['stock.move'].create({
        move4 = self.env['stock.move'].create({
        move5 = self.env['stock.move'].create({
        move6 = self.env['stock.move'].create({
        move7 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].with_user(self.inventory_user).create({
        move1 = self.env['stock.move'].with_user(self.inventory_user).create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move3 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move3 = self.env['stock.move'].create({
        view_location = self.env['stock.location'].create({'name': 'view', 'usage': 'view'})
        subloc1 = self.env['stock.location'].create({
        subloc2 = self.env['stock.location'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        scrap = self.env['stock.location'].create({
        move1 = self.env['stock.move'].create({
        customer1 = self.env['stock.location'].create({
        supplier1 = self.env['stock.location'].create({
        move2 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move3 = self.env['stock.move'].create({
        move4 = self.env['stock.move'].create({
        move5 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move3 = self.env['stock.move'].create({
        move4 = self.env['stock.move'].create({
        move5 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move3 = self.env['stock.move'].create({
        move4 = self.env['stock.move'].create({
        move5 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        move1 = self.env['stock.move'].create({
        move2 = self.env['stock.move'].create({
        currency_1 = self.env['res.currency'].create({
        currency_2 = self.env['res.currency'].create({
        company_form = Form(self.env['res.company'])
        company_form = Form(self.env['res.company'])
        warehouse_1 = self.env['stock.warehouse'].search([('company_id', '=', company_1.id)], limit=1)
        warehouse_2 = self.env['stock.warehouse'].search([('company_id', '=', company_2.id)], limit=1)
        move_1 = self.env['stock.move'].with_company(company_1).create({
        move_2 = self.env['stock.move'].with_company(company_2).create({
            action = self.env["ir.actions.actions"]._for_xml_id("stock_account.stock_valuation_layer_action")
            product = self.env['product.product'].browse(res['product_id'])
        remaining_svls = self.env['stock.valuation.layer'].search([
        revaluation_svl = self.env['stock.valuation.layer'].create(revaluation_svl_vals)
        account_move = self.env['account.move'].create(move_vals)
            self.env['ir.sequence'].create(dropship_vals)
        company_ids = self.env['res.company'].search([])
        company_has_dropship_seq = self.env['ir.sequence'].search([('code', '=', 'stock.dropshipping')]).mapped('company_id')
            sequence = self.env['ir.sequence'].search([
            self.env['stock.picking.type'].create(dropship_vals)
        company_ids = self.env['res.company'].search([])
            dropship_picking_type = self.env['stock.picking.type'].search([
            self.env['stock.rule'].create(dropship_vals)
        company_ids = self.env['res.company'].search([])
        company_has_dropship_rule = self.env['stock.rule'].search([('route_id', '=', dropship_route.id)]).mapped('company_id')
        supplier_crossdock = self.env['res.partner'].create({'name': "Crossdocking supplier"})
        wh_pps = self.env['stock.warehouse'].create({
        p_f = Form(self.env['product.template'])
        so_form = Form(self.env['sale.order'])
        so_form.partner_id = self.env['res.partner'].create({'name': 'My Test Partner'})
        self.env['procurement.group'].run_scheduler()
        po = self.env['purchase.order'].search([
        prod = self.env['product.product'].create({'name': 'Large Desk'})
        vendor1 = self.env['res.partner'].create({'name': 'vendor1'})
        seller1 = self.env['product.supplierinfo'].create({
        cust = self.env['res.partner'].create({'name': 'customer1'})
        so = self.env['sale.order'].create({
        po = self.env['purchase.order'].search([('group_id', '=', so.procurement_group_id.id)])
        sol2 = self.env['sale.order.line'].create({
        supplier_dropship = self.env['res.partner'].create({'name': 'Vendor of Dropshipping test'})
        drop_shop_product = self.env['product.product'].create({
        so_form = Form(self.env['sale.order'])
        so_form.partner_id = self.env['res.partner'].create({'name': 'My Test Partner'})
        purchase = self.env['purchase.order'].search([('partner_id', '=', supplier_dropship.id)])
        move_line = self.env['stock.move.line'].search([
        product_category_001 = self.env['product.category'].create({
        res_partner_3 = self.env['res.partner'].create({'name': 'My Test Partner'})
        product_form = Form(self.env['product.product'])
        order_form = Form(self.env['purchase.order'])
        order2_form = Form(self.env['purchase.order'])
        out_form = Form(self.env['stock.picking'])
        res_partner_2 = self.env['res.partner'].create({'name': 'My Test Partner'})
        res_partner_address = self.env['res.partner'].create({
        product_form = Form(self.env['product.product'])
        so_form = Form(self.env['sale.order'])
        purchase = self.env['purchase.order.line'].search([
        vendor1 = self.env['res.partner'].create({'name': 'vendor1'})
        seller1 = self.env['product.supplierinfo'].create({
        customer1 = self.env['res.partner'].create({'name': 'customer1'})
        self.sale_order1 = self.env['sale.order'].create({
        self.purchase_order1 = self.env['purchase.order'].search([('group_id', '=', self.sale_order1.procurement_group_id.id)])
        immediate_transfer = Form(self.env[wizard['res_model']].with_context(wizard['context'])).save()
        move_form = Form(self.env['account.move'].with_context(default_move_type='in_invoice'))
        return_pick = self.env['stock.picking'].browse(stock_return_picking_action['res_id'])
        landed_costs = self.env['stock.landed.cost'].create({
        action = self.env["ir.actions.actions"]._for_xml_id("stock_landed_costs.action_stock_landed_cost")
        action = self.env["ir.actions.actions"]._for_xml_id("stock_landed_costs.action_stock_landed_cost")
            lc_journal = self.env['ir.property']._get("property_stock_journal", "product.category")
            vals['name'] = self.env['ir.sequence'].next_by_code('stock.landed.cost')
                    valuation_layer = self.env['stock.valuation.layer'].create({
            products = self.env['product.product'].browse(p.id for p in cost_to_add_byproduct.keys())
                    self.env['stock.valuation.adjustment.lines'].create(val_line_values)
        action = self.env["ir.actions.actions"]._for_xml_id("stock_account.stock_valuation_layer_action")
        product_landed_cost_1 = self.env['product.product'].create({
        product_landed_cost_2 = self.env['product.product'].create({
        picking_default_vals = self.env['stock.picking'].default_get(list(self.env['stock.picking'].fields_get()))
        picking_landed_cost_1 = self.env['stock.picking'].new(vals)
        picking_landed_cost_1 = self.env['stock.picking'].create(vals)
        picking_landed_cost_2 = self.env['stock.picking'].new(vals)
        picking_landed_cost_2 = self.env['stock.picking'].create(vals)
        default_vals = self.env['stock.landed.cost'].default_get(list(self.env['stock.landed.cost'].fields_get()))
        virtual_home_staging = self.env['product.product'].create({
        stock_landed_cost_1 = self.env['stock.landed.cost'].new(default_vals)
        stock_landed_cost_1 = self.env['stock.landed.cost'].create(vals)
        account_entry = self.env['account.move.line'].read_group(
        account_entry = self.env['account.move.line'].read_group(
        wizard = Form(self.env[(res_dict.get('res_model'))].with_context(res_dict.get('context'))).save()
        wizard = Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        self.price_diff_account = self.env['account.account'].create({
        po_form = Form(self.env['purchase.order'])
        po_form.partner_id = self.env['res.partner'].create({'name': 'vendor'})
        svl = self.env['stock.valuation.layer'].search([('stock_move_id', '=', receipt.move_lines.id)])
        aml = self.env['account.move.line'].search([('account_id', '=', self.company_data['default_account_stock_valuation'].id)])
        lc = self.env['stock.landed.cost'].create(dict(
        svl = self.env['stock.valuation.layer'].search([('stock_move_id', '=', receipt.move_lines.id)], order='id desc', limit=1)
        aml = self.env['account.move.line'].search([('account_id', '=', self.company_data['default_account_stock_valuation'].id)], order='id desc', limit=1)
        move_form = Form(self.env['account.move'].with_context(default_move_type='in_invoice'))
        price_diff_aml = self.env['account.move.line'].search([('account_id','=', self.price_diff_account.id), ('move_id', '=', move.id)])
        product_landed_cost_3 = self.env['product.product'].create({
        product_landed_cost_4 = self.env['product.product'].create({
        picking_default_vals = self.env['stock.picking'].default_get(list(self.env['stock.picking'].fields_get()))
        picking_landed_cost_3 = self.env['stock.picking'].new(vals)
        picking_landed_cost_3 = self.env['stock.picking'].create(vals)
        picking_landed_cost_4 = self.env['stock.picking'].new(vals)
        picking_landed_cost_4 = self.env['stock.picking'].create(vals)
        virtual_interior_design = self.env['product.product'].create({'name': 'Virtual Interior Design'})
        default_vals = self.env['stock.landed.cost'].default_get(list(self.env['stock.landed.cost'].fields_get()))
        stock_landed_cost_2 = self.env['stock.landed.cost'].new(default_vals)
        stock_landed_cost_2 = self.env['stock.landed.cost'].create(vals)
        default_vals = self.env['stock.landed.cost'].default_get(list(self.env['stock.landed.cost'].fields_get()))
        stock_landed_cost_3 = self.env['stock.landed.cost'].new(default_vals)
        stock_landed_cost_3 = self.env['stock.landed.cost'].create(vals)
        fifo_pc = self.env['product.category'].create({
        po = self.env['purchase.order'].create({
        validate_wizard = Form(self.env[(res_dict.get('res_model'))].with_context(res_dict.get('context'))).save()
        return self.env['account.move.line'].search([
        return self.env['account.move.line'].search([
        return self.env['account.move.line'].search([
        return self.env['account.move.line'].search([
        return self.env['account.move.line'].search([
        lc = Form(self.env['stock.landed.cost'])
        in_move = self.env['stock.move'].create({
            picking = self.env['stock.picking'].create({
        out_move = self.env['stock.move'].create({
            picking = self.env['stock.picking'].create({
            self.env['stock.move.line'].create({
        rfq = Form(self.env['purchase.order'])
        wiz = Form(self.env['stock.immediate.transfer'].with_context(wiz['context'])).save().process()
        vb = self.env['account.move'].browse(action['res_id'])
        lcvb = Form(self.env['account.move'].with_context(default_move_type='in_invoice'))
        lc = Form(self.env[action['res_model']].browse(action['res_id']))
        rfq = Form(self.env['purchase.order'])
        wiz = Form(self.env['stock.immediate.transfer'].with_context(wiz['context'])).save()
        vb = Form(self.env['account.move'].with_context(default_move_type='in_invoice'))
        lc = Form(self.env[action['res_model']].browse(action['res_id']))
        rfq = Form(self.env['purchase.order'])
        wiz = Form(self.env['stock.immediate.transfer'].with_context(wiz['context'])).save().process()
        vb = self.env['account.move'].browse(action['res_id'])
        lcvb = Form(self.env['account.move'].with_context(default_move_type='in_invoice'))
        lc = Form(self.env[action['res_model']].browse(action['res_id']))
            wave = self.env['stock.picking.batch'].browse(self.env.context.get('active_wave_id'))
            wave = self.env['stock.picking.batch'].create({
        line_by_picking = defaultdict(lambda: self.env['stock.move.line'])
            line_by_move = defaultdict(lambda: self.env['stock.move.line'])
            self.env['stock.picking'].create(picking_to_wave_vals_list)
            data = self.env['stock.picking.batch'].read_group(domains[field] +
            batch.allowed_picking_ids = self.env['stock.picking'].search(domain)
                vals['name'] = self.env['ir.sequence'].next_by_code('picking.wave') or '/'
                vals['name'] = self.env['ir.sequence'].next_by_code('picking.batch') or '/'
        self.picking_type_out = self.env['ir.model.data']._xmlid_to_res_id('stock.picking_type_out')
        self.env['stock.picking.type'].browse(self.picking_type_out).reservation_method = 'manual'
        self.productA = self.env['product.product'].create({
        self.productB = self.env['product.product'].create({
        self.picking_client_1 = self.env['stock.picking'].create({
        self.env['stock.move'].create({
        self.picking_client_2 = self.env['stock.picking'].create({
        self.env['stock.move'].create({
        self.picking_client_3 = self.env['stock.picking'].create({
        self.env['stock.move'].create({
        self.batch = self.env['stock.picking.batch'].create({
        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 10.0)
        self.env['stock.quant']._update_available_quantity(self.productB, self.stock_location, 10.0)
        quant_A = self.env['stock.quant']._gather(self.productA, self.stock_location)
        quant_B = self.env['stock.quant']._gather(self.productB, self.stock_location)
        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 10.0)
        self.env['stock.quant']._update_available_quantity(self.productB, self.stock_location, 10.0)
        immediate_transfer_wizard = Form(self.env[(immediate_transfer_wizard_dict.get('res_model'))].with_context(immediate_transfer_wizard_dict['context'])).save()
        quant_A = self.env['stock.quant']._gather(self.productA, self.stock_location)
        quant_B = self.env['stock.quant']._gather(self.productB, self.stock_location)
        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 5.0)
        self.env['stock.quant']._update_available_quantity(self.productB, self.stock_location, 10.0)
        back_order_wizard = Form(self.env[(back_order_wizard_dict.get('res_model'))].with_context(back_order_wizard_dict['context'])).save()
        self.assertTrue(self.env['stock.picking'].search([('backorder_id', '=', self.picking_client_1.id)]), 'no back order created')
        quant_A = self.env['stock.quant']._gather(self.productA, self.stock_location)
        quant_B = self.env['stock.quant']._gather(self.productB, self.stock_location)
        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 5.0)
        self.env['stock.quant']._update_available_quantity(self.productB, self.stock_location, 10.0)
        immediate_transfer_wizard = Form(self.env[(immediate_transfer_wizard_dict.get('res_model'))].with_context(immediate_transfer_wizard_dict['context'])).save()
        back_order_wizard = Form(self.env[(back_order_wizard_dict.get('res_model'))].with_context(back_order_wizard_dict['context'])).save()
        self.assertTrue(self.env['stock.picking'].search([('backorder_id', '=', self.picking_client_1.id)]), 'no back order created')
        quant_A = self.env['stock.quant']._gather(self.productA, self.stock_location)
        quant_B = self.env['stock.quant']._gather(self.productB, self.stock_location)
        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 5.0)
        self.env['stock.quant']._update_available_quantity(self.productB, self.stock_location, 10.0)
        back_order_wizard = Form(self.env[(back_order_wizard_dict.get('res_model'))].with_context(back_order_wizard_dict['context'])).save()
        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 10.0)
        self.env['stock.quant']._update_available_quantity(self.productB, self.stock_location, 10.0)
        wizard = self.env[(wizard_values.get('res_model'))].browse(wizard_values.get('res_id'))
        back_order_wizard = Form(self.env[(back_order_wizard_dict.get('res_model'))].with_context(back_order_wizard_dict['context'])).save()
        wizard_form = Form(self.env[res_dict['res_model']].with_context(res_dict['context']))
        wave = self.env['stock.picking.batch'].search([
        action = self.env['ir.actions.actions']._for_xml_id('stock_picking_batch.stock_add_to_wave_action_stock_picking')
        wizard_form = Form(self.env[action['res_model']].with_context(action['context']))
        wizard_form = Form(self.env[res_dict['res_model']].with_context(res_dict['context']))
        wave = self.env['stock.picking.batch'].search([
        wizard_form = Form(self.env[res_dict['res_model']].with_context(res_dict['context']))
        wave = self.env['stock.picking.batch'].search([
        wizard_form = Form(self.env[res_dict['res_model']].with_context(res_dict['context']))
        wave = self.env['stock.picking.batch'].search([
        action = self.env['ir.actions.actions']._for_xml_id('stock_picking_batch.stock_add_to_wave_action_stock_picking')
        wizard_form = Form(self.env[action['res_model']].with_context(action['context']))
        all_db_pickings = self.env['stock.picking'].search([])
        wizard_form = Form(self.env[res_dict['res_model']].with_context(res_dict['context']))
        wave = self.env['stock.picking.batch'].search([
        new_all_db_picking = self.env['stock.picking'].search([])
        all_db_pickings = self.env['stock.picking'].search([])
        wizard_form = Form(self.env[res_dict['res_model']].with_context(res_dict['context']))
        wave = self.env['stock.picking.batch'].search([
        new_all_db_picking = self.env['stock.picking'].search([])
        sns = self.env['stock.production.lot'].create([{
            self.env['stock.quant']._update_available_quantity(self.productB, self.stock_location, 1.0, lot_id=sns[i])
        dozen_move = self.env['stock.move'].create({
        wizard_form = Form(self.env[res_dict['res_model']].with_context(res_dict['context']))
        wave = self.env['stock.picking.batch'].search([
            wizard_form = Form(self.env[res_dict['res_model']])
            companies = self.env['res.company'].search([])
            wizard_form = Form(self.env[res_dict['res_model']].with_context(res_dict['context']))
            lines = self.env['stock.move.line'].browse(self.env.context.get('active_ids'))
            pickings = self.env['stock.picking'].browse(self.env.context.get('active_ids'))
            self.env['stock.picking'].browse(self.env.context['pickings_to_detach']).batch_id = False
            self.env['stock.picking'].browse(self.env.context['pickings_to_detach']).batch_id = False
        pickings = self.env['stock.picking'].browse(self.env.context.get('active_ids'))
            batch = self.env['stock.picking.batch'].create({
        wiz = self.env['confirm.stock.sms'].create({'pick_ids': [(4, p.id) for p in self]})
        pickings_to_validate = self.env['stock.picking'].browse(self.env.context.get('button_validate_picking_ids'))
        pickings_to_validate = self.env['stock.picking'].browse(self.env.context.get('button_validate_picking_ids'))
        signup_allowed = self.env['res.users'].sudo()._get_signup_invitation_scope() == 'b2c'
            input_count = self.env['survey.user_input'].read_group(
            input_line_count = self.env['survey.user_input.line'].read_group(
                answer_vals['invite_token'] = self.env['survey.user_input']._generate_invite_token()
        return self.attempts_limit - self.env['survey.user_input'].search_count(domain)
            questions = self.env['survey.question'].sudo().search([('survey_id', '=', self.id), ('page_id', '=', page_id)])
            questions = self.env['survey.question'].sudo().browse(question_id)
        fake_user_input = self.env['survey.user_input'].new({
            fake_user_input_lines |= self.env['survey.user_input.line'].new({
        leaderboard = self.env['survey.user_input'].search_read([
            input_lines = self.env['survey.user_input.line'].search_read(
        action = self.env['ir.actions.act_window']._for_xml_id('survey.action_survey_user_input')
        action = self.env['ir.actions.act_window']._for_xml_id('survey.action_survey_user_input')
        action = self.env['ir.actions.act_window']._for_xml_id('survey.action_survey_user_input')
        self.env['bus.bus']._sendone(self.access_token, 'end_session', {})
        count_data = self.env['survey.user_input'].sudo().read_group(user_input_domain, ['scoring_success', 'id:count_distinct'], ['scoring_success'])
        goal = self.env['gamification.goal.definition'].create({
        challenge = self.env['gamification.challenge'].create({
        self.env['gamification.challenge.line'].create({
            challenges_to_delete = self.env['gamification.challenge'].search([('reward_id', 'in', badges.ids)])
                survey = self.env['survey.survey'].browse(suvey_id)
        Challenge = self.env['gamification.challenge'].sudo()
        old_answers = self.env['survey.user_input.line'].search([
            return self.env['survey.user_input.line'].create(vals)
        return self.env['survey.user_input.line'].create(vals_list)
        return self.env['survey.user_input.line'].create(vals_list)
        question = self.env['survey.question'].browse(int(question_id))
                    question_answer = self.env['survey.question.answer'].browse(int(suggested_answer_id))
            user_input = self.env['survey.user_input'].browse(user_input_id)
            certification = self.env['survey.survey'].create({
        user_inputs = self.env['survey.user_input'].search([('survey_id', '=', certification.id)])
        certification_email = self.env['mail.mail'].sudo().search([], limit=1, order="create_date desc")
            certification = self.env['survey.survey'].create({
        user_inputs = self.env['survey.user_input'].search([('survey_id', '=', certification.id)])
            self.env['survey.survey'].create({'title': 'Test Survey 2'})
            self.env['survey.question'].create({'title': 'My Page', 'sequence': 0, 'is_page': True, 'survey_id': self.survey.id})
            self.env['survey.question'].create({'title': 'My Question', 'sequence': 1, 'page_id': self.page_0.id})
            self.env['survey.survey'].search([('title', 'ilike', 'Test')])
            self.env['survey.survey'].create({'title': 'Test Survey 2'})
            self.env['survey.question'].create({'title': 'My Page', 'sequence': 0, 'is_page': True, 'survey_id': self.survey.id})
            self.env['survey.question'].create({'title': 'My Question', 'sequence': 1, 'page_id': self.page_0.id})
            self.env['survey.survey'].search([('title', 'ilike', 'Test')])
            self.env['survey.survey'].create({'title': 'Test Survey 2'})
            self.env['survey.question'].create({'title': 'My Page', 'sequence': 0, 'is_page': True, 'survey_id': self.survey.id})
            self.env['survey.question'].create({'title': 'My Question', 'sequence': 1, 'page_id': self.page_0.id})
            self.env['survey.survey'].search([('title', 'ilike', 'Test')])
        survey = self.env['survey.survey'].create({'title': 'Test Survey 2'})
        self.env['survey.question'].create({'title': 'My Page', 'sequence': 0, 'is_page': True, 'survey_id': survey.id})
        self.env['survey.question'].create({'title': 'My Question', 'sequence': 1, 'survey_id': survey.id})
        surveys = self.env['survey.survey'].search([('title', 'ilike', 'Test')])
        survey = self.env['survey.survey'].create({'title': 'Test Survey 2'})
        self.env['survey.question'].create({'title': 'My Page', 'sequence': 0, 'is_page': True, 'survey_id': survey.id})
        self.env['survey.question'].create({'title': 'My Question', 'sequence': 1, 'survey_id': survey.id})
        surveys = self.env['survey.survey'].search([('title', 'ilike', 'Test')])
            self.env['survey.user_input'].create({'survey_id': self.survey.id})
            self.env['survey.user_input.line'].create({'question_id': self.question_num.id, 'answer_type': 'numerical_box', 'value_numerical_box': 3, 'user_input_id': self.answer_0.id})
            self.env['survey.user_input'].search([('survey_id', 'in', [self.survey.id])])
            self.env['survey.user_input.line'].search([('survey_id', 'in', [self.survey.id])])
            self.env['survey.user_input'].browse(self.answer_0.ids).read(['state'])
            self.env['survey.user_input.line'].browse(self.answer_0_0.ids).read(['value_numerical_box'])
            self.env['survey.user_input'].create({'survey_id': self.survey.id})
            self.env['survey.user_input.line'].create({'question_id': self.question_num.id, 'answer_type': 'numerical_box', 'value_numerical_box': 3, 'user_input_id': self.answer_0.id})
            self.env['survey.user_input'].search([('survey_id', 'in', [self.survey.id])])
            self.env['survey.user_input.line'].search([('survey_id', 'in', [self.survey.id])])
            self.env['survey.user_input'].browse(self.answer_0.ids).read(['state'])
            self.env['survey.user_input.line'].browse(self.answer_0_0.ids).read(['value_numerical_box'])
            self.env['survey.user_input'].create({'survey_id': self.survey.id})
            self.env['survey.user_input.line'].create({'question_id': self.question_num.id, 'answer_type': 'numerical_box', 'value_numerical_box': 3, 'user_input_id': self.answer_0.id})
            self.env['survey.user_input'].search([('survey_id', 'in', [self.survey.id])])
            self.env['survey.user_input.line'].search([('survey_id', 'in', [self.survey.id])])
            self.env['survey.user_input'].browse(self.answer_0.ids).read(['state'])
            self.env['survey.user_input.line'].browse(self.answer_0_0.ids).read(['value_numerical_box'])
        survey_own = self.env['survey.survey'].create({'title': 'Other'})
        self.env['survey.question'].create({'title': 'Other', 'sequence': 0, 'is_page': True, 'survey_id': survey_own.id})
        question_own = self.env['survey.question'].create({'title': 'Other Question', 'sequence': 1, 'survey_id': survey_own.id})
        answer_own = self.env['survey.user_input'].create({'survey_id': survey_own.id})
        answer_line_own = self.env['survey.user_input.line'].create({'question_id': question_own.id, 'answer_type': 'numerical_box', 'value_numerical_box': 3, 'user_input_id': answer_own.id})
        answers = self.env['survey.user_input'].search([('survey_id', 'in', [survey_own.id, self.survey.id])])
        answer_lines = self.env['survey.user_input.line'].search([('survey_id', 'in', [survey_own.id, self.survey.id])])
        self.env['survey.user_input'].browse(answer_own.ids).read(['state'])
        self.env['survey.user_input'].browse(self.answer_0.ids).read(['state'])
        self.env['survey.user_input.line'].browse(answer_line_own.ids).read(['value_numerical_box'])
        self.env['survey.user_input.line'].browse(self.answer_0_0.ids).read(['value_numerical_box'])
            answer_other = self.env['survey.user_input'].create({'survey_id': self.survey.id})
            answer_line_other = self.env['survey.user_input.line'].create({'question_id': self.question_num.id, 'answer_type': 'numerical_box', 'value_numerical_box': 3, 'user_input_id': self.answer_0.id})
            survey_other = self.env['survey.survey'].create({'title': 'Other'})
            self.env['survey.question'].create({'title': 'Other', 'sequence': 0, 'is_page': True, 'survey_id': survey_other.id})
            question_other = self.env['survey.question'].create({'title': 'Other Question', 'sequence': 1, 'survey_id': survey_other.id})
        answer_own = self.env['survey.user_input'].create({'survey_id': self.survey.id})
        answer_other = self.env['survey.user_input'].create({'survey_id': survey_other.id})
        answer_line_own = self.env['survey.user_input.line'].create({'question_id': self.question_num.id, 'answer_type': 'numerical_box', 'value_numerical_box': 3, 'user_input_id': answer_own.id})
        answer_line_other = self.env['survey.user_input.line'].create({'question_id': question_other.id, 'answer_type': 'numerical_box', 'value_numerical_box': 3, 'user_input_id': answer_other.id})
        answers = self.env['survey.user_input'].search([('survey_id', 'in', [survey_other.id, self.survey.id])])
        answer_lines = self.env['survey.user_input.line'].search([('survey_id', 'in', [survey_other.id, self.survey.id])])
        self.env['survey.user_input'].browse(answer_own.ids).read(['state'])
        self.env['survey.user_input'].browse(self.answer_0.ids).read(['state'])
        self.env['survey.user_input.line'].browse(answer_line_own.ids).read(['value_numerical_box'])
        self.env['survey.user_input.line'].browse(self.answer_0_0.ids).read(['value_numerical_box'])
        surveys = self.env['survey.survey'].search([
        self.survey_certification = self.env['survey.survey'].create({
                invalid_partners = self.env['res.partner'].search([
                template = self.env['mail.template'].browse(values['template_id'])
        existing_answers = self.env['survey.user_input'].search([
                    'message': self.env['mail.message'].sudo().new(dict(body=mail_values['body_html'], record_name=self.survey_id.title)),
                    'model_description': self.env['ir.model']._get('survey.survey').display_name,
                mail_values['body_html'] = self.env['mail.render.mixin']._replace_local_links(body)
        return self.env['mail.mail'].sudo().create(mail_values)
        self.test_mail_template_automation = self.env['mail.template'].create({
        self.res_partner_1 = self.env['res.partner'].create({'name': 'My Partner'})
        self.env['base.automation'].create([
        self.env['base.automation']._unregister_hook()
        return self.env['base.automation.lead.test'].create(vals)
        mail_automation = self.env['base.automation'].search([('name', '=', 'Base Automation: test send an email')])
        line = self.env['base.automation.line.test'].create({'name': "Line"})
        rule = self.env['base.automation'].search([('name', '=', 'Base Automation: test rule with trigger')])
        partner2 = self.env['res.partner'].create({'name': 'A new partner'})
        access.group_id = self.env['res.groups'].create({
        self.env['base.automation'].create({
            'model_id': self.env['ir.model']._get_id("base.automation.link.test"),
        self.env['base.automation'].create({
            'model_id': self.env['ir.model']._get_id("base.automation.link.test"),
        company1 = self.env['res.partner'].create({
        company2 = self.env['res.partner'].create({
        r = self.env['res.partner'].create({
        self.env['base.automation'].create({
        self.env['base.automation'].create({
        self.users = self.env['res.users'].create([
        self.employees = self.env['hr.employee'].create([{
        self.leave_type = self.env['hr.leave.type'].create({
        self.leaves = self.env['hr.leave'].create([{
        self.env['mail.channel'].search([('id', '!=', channel_general.id)]).unlink()
        channel_channel_public_1 = self.env['mail.channel'].browse(self.env['mail.channel'].channel_create(name='public 1', privacy='public')['id'])
        channel_channel_public_2 = self.env['mail.channel'].browse(self.env['mail.channel'].channel_create(name='public 2', privacy='public')['id'])
        channel_channel_group_1 = self.env['mail.channel'].browse(self.env['mail.channel'].channel_create(name='group 1', privacy='groups')['id'])
        channel_channel_group_2 = self.env['mail.channel'].browse(self.env['mail.channel'].channel_create(name='group 2', privacy='groups')['id'])
        channel_channel_private_1 = self.env['mail.channel'].browse(self.env['mail.channel'].channel_create(name='private 1', privacy='private')['id'])
        channel_channel_private_2 = self.env['mail.channel'].browse(self.env['mail.channel'].channel_create(name='private 2', privacy='private')['id'])
        channel_chat_1 = self.env['mail.channel'].browse(self.env['mail.channel'].channel_get((self.users[0] + self.users[14]).partner_id.ids)['id'])
        channel_chat_2 = self.env['mail.channel'].browse(self.env['mail.channel'].channel_get((self.users[0] + self.users[15]).partner_id.ids)['id'])
        channel_chat_3 = self.env['mail.channel'].browse(self.env['mail.channel'].channel_get((self.users[0] + self.users[2]).partner_id.ids)['id'])
        channel_chat_4 = self.env['mail.channel'].browse(self.env['mail.channel'].channel_get((self.users[0] + self.users[3]).partner_id.ids)['id'])
        channel_group_1 = self.env['mail.channel'].browse(self.env['mail.channel'].create_group((self.users[0] + self.users[12]).partner_id.ids)['id'])
        im_livechat_channel = self.env['im_livechat.channel'].sudo().create({'name': 'support', 'user_ids': [Command.link(self.users[0].id)]})
        channel_livechat_1 = self.env['mail.channel'].browse(im_livechat_channel._open_livechat_mail_channel(anonymous_name='anon 1', previous_operator_id=self.users[0].partner_id.id, user_id=self.users[1].id, country_id=self.env.ref('base.in').id)['id'])
        channel_livechat_2 = self.env['mail.channel'].browse(im_livechat_channel.with_user(self.env.ref('base.public_user'))._open_livechat_mail_channel(anonymous_name='anon 2', previous_operator_id=self.users[0].partner_id.id, country_id=self.env.ref('base.be').id)['id'])
            'menu_id': self.env['ir.model.data']._xmlid_to_res_id('mail.menu_root_discuss'),
                'id': self.env['res.users.settings']._find_or_create_for_user(self.users[0]).id,
        lead = self.env['crm.lead'].sudo().search([
        self.event_product = self.env['product.product'].create({
        self.event_tag_category_1 = self.env['event.tag.category'].create({
        self.event_tag_category_1_tag_1 = self.env['event.tag'].create({
        self.env['event.event'].search(
        self.event = self.env['event.event'].create({
        self.event_customer = self.env['res.partner'].create({
        self.event_speaker = self.env['res.partner'].create({
        self.event_question_1 = self.env['event.question'].create({
        self.event_question_2 = self.env['event.question'].create({
        self.track_0 = self.env['event.track'].create({
        self.track_1 = self.env['event.track'].create({
        self.track_2 = self.env['event.track'].create({
        self.env['event.meeting.room'].create({
        customer_so = self.env['sale.order'].browse(self.customer_so.id)
        t1_registrations = self.env['event.registration'].create(t1_reg_vals)
        self.assertEqual(self.test_rule_order_done.lead_ids, self.env['crm.lead'])
        self.assertEqual(self.test_rule_order_done.lead_ids, self.env['crm.lead'])  # this one still not triggered
        public_so = self.env['sale.order'].create({
        customer_so = self.env['sale.order'].browse(self.customer_so.id)
        self.env['event.registration'].create(mixed_reg_vals)
        customer_so = self.env['sale.order'].browse(self.customer_so.id)
        t1_registrations = self.env['event.registration'].create(t1_reg_vals)
            self.env['event.event'].create({
            self.env['event.stage'].create({
            self.env['event.registration'].search([])
        registration = self.env['event.registration'].create({
        self.env['event.event'].create({
            self.env['event.type'].create({
                    'template_ref': 'mail.template,%i' % self.env['ir.model.data']._xmlid_to_res_id('event.event_reminder')})]
        event_type = self.env['event.type'].create({
                'template_ref': 'mail.template,%i' % self.env['ir.model.data']._xmlid_to_res_id('event.event_reminder')})]
        event = self.env['event.event'].create({
        stage = self.env['event.stage'].create({'name': 'test'})
        registration = self.env['event.registration'].create({'event_id': event.id, 'name': 'Myself'})
            event_config = self.env['res.config.settings'].with_user(self.user_eventmanager).create({
        company_2 = self.env['res.company'].create({'name': 'Company 2'})
        event_company_1, event_company_2 = self.env['event.event'].create([
        registration_company_1, registration_company_2 = self.env['event.registration'].create([
        result = self.env['event.event'].with_user(user_company_1).search([])
        result = self.env['event.registration'].with_user(user_company_1).search([])
        values['alias_model_id'] = self.env['ir.model']._get('mail.test.container').id
        mail = self.env['mail.mail'].sudo().search([('subject', '=', 'About TestingPartner')])
        random_partner = self.env['res.partner'].create({'name': 'Thierry Wololo'})
        before_count = self.env['mail.activity'].search_count([])
        self.assertEqual(self.env['mail.activity'].search_count([]), before_count + 1)
        self.assertEqual(self.env['mail.activity'].search_count([('summary', '=', 'TestNew')]), 1)
        test_activity = self.env['mail.activity'].with_user(self.user_admin).create({
        self.env['mail.activity'].with_user(self.user_employee)._search(
                searched_activity = self.env['mail.activity'].with_user(self.user_employee)._search(
        read_group_result = self.env['mail.activity'].with_user(self.user_employee).read_group(
                self.env['mail.activity'].with_user(self.user_employee).read_group(
                searched_activity = self.env['mail.activity'].with_user(self.user_employee).search(
                self.env['mail.activity'].with_user(self.user_employee).search_read(
                activity = self.env['mail.activity'].create({
            test_record = self.env['mail.test.activity'].browse(self.test_record.id)
            self.assertEqual(test_record.activity_ids, self.env['mail.activity'])
            self.env['mail.activity'].create({
                'res_model_id': self.env['ir.model']._get(test_record._name).id,
            self.assertEqual(test_record.activity_ids, self.env['mail.activity'])
        with Form(self.env['mail.activity'].with_context(default_res_model_id=self.env.ref('base.model_res_partner'))) as ActivityForm:
            self.test_record = self.env['mail.test.activity'].browse(self.test_record.id)
            self.assertEqual(self.test_record.activity_ids, self.env['mail.activity'])
        self.assertEqual(rec.activity_ids, self.env['mail.activity'])
        self.assertEqual(rec.activity_ids, self.env['mail.activity'])
        test_record = self.env['mail.test.activity'].browse(self.test_record.ids)
        activity = self.env['mail.activity'].create({
            'res_model_id': self.env['ir.model']._get_id('mail.test.activity'),
        attachments = self.env['ir.attachment'].create([{
        test_record = self.env['mail.test.activity'].browse(self.test_record.ids)
        first_activity = self.env['mail.activity'].create({
            'res_model_id': self.env['ir.model']._get_id('mail.test.activity'),
        test_record = self.env['mail.test.activity'].browse(self.test_record.ids)
        first_activity = self.env['mail.activity'].create({
            'res_model_id': self.env['ir.model']._get_id('mail.test.activity'),
        record = self.env['mail.test.activity'].create({'name': 'Record'})
            activity_1 = self.env['mail.activity'].create({
        self.env['mail.test.activity'].create([
        origin_1, origin_2 = self.env['mail.test.activity'].search([], limit=2)
            origin_1_activity_1 = self.env['mail.activity'].create({
            origin_2_activity_1 = self.env['mail.activity'].create({
            all_activity_mixin_record = self.env['mail.test.activity'].search([])
            result = self.env['mail.test.activity'].search([('activity_state', '=', 'today')])
            result = self.env['mail.test.activity'].search([('activity_state', 'in', ('today', 'overdue'))])
            result = self.env['mail.test.activity'].search([('activity_state', 'not in', ('today',))])
            result = self.env['mail.test.activity'].search([('activity_state', '=', False)])
            result = self.env['mail.test.activity'].search([('activity_state', 'not in', ('planned', 'overdue', 'today'))])
            result = self.env['mail.test.activity'].search([('activity_state', 'not in', ('today', False))])
            result = self.env['mail.test.activity'].search([('activity_state', 'in', ('today', False))])
        self.env['mail.test.activity'].create([
        origin_1 = self.env['mail.test.activity'].search([], limit=1)
            origin_1_activity_1 = self.env['mail.activity'].create({
            result = self.env['mail.test.activity'].search([('activity_state', '=', 'today')])
        test_record_1 = self.env['mail.test.activity'].with_context(self._test_context).create({'name': 'Test 1'})
            record = self.env['mail.test.activity'].search([('my_activity_date_deadline', '=', date_today)])
        model = self.env['mail.test.activity'].with_context(lang='en_US')
        composer_form = Form(self.env['mail.compose.message'].with_context(self._get_web_context(self.test_record, add_web=True)))
        composer_form = Form(self.env['mail.compose.message'].with_context(
        self.assertEqual(tpl_attachments, self.env['ir.attachment'])
        composer_form = Form(self.env['mail.compose.message'].with_context(self._get_web_context(self.test_records, add_web=True)))
        composer_form = Form(self.env['mail.compose.message'].with_context(ctx))
        attachs = self.env['ir.attachment'].search([('name', 'in', [a['name'] for a in attachment_data])])
        composer = self.env['mail.compose.message'].with_context({
            composer = self.env['mail.compose.message'].with_context(ctx).create({
            composer = self.env['mail.compose.message'].with_context(ctx).create({
            composer = self.env['mail.compose.message'].with_context(ctx).create({
            composer = self.env['mail.compose.message'].with_context(ctx).create({
            composer = self.env['mail.compose.message'].with_context(ctx).create({
        composer = self.env['mail.compose.message'].with_context(
            self.env['mail.compose.message'].with_user(portal_user).with_context(
            self.env['mail.compose.message'].with_user(portal_user).with_context({
        self.env['mail.compose.message'].with_context(
        template = self.env['mail.template'].search([
        self.assertEqual(template.name, "%s: %s" % (self.env['ir.model']._get(self.test_record._name).name, 'Template Subject'))
        composer = self.env['mail.compose.message'].with_context(
        self.assertEqual(self._new_mails.exists(), self.env['mail.mail'], 'Should have deleted mail.mail records')
        composer = self.env['mail.compose.message'].with_context(
        composer = self.env['mail.compose.message'].with_context(
        attachs = self.env['ir.attachment'].search([('name', 'in', [a['name'] for a in attachment_data])])
        composer_form = Form(self.env['mail.compose.message'].with_context(
        new_partners = self.env['res.partner'].search([
        composer_form = Form(self.env['mail.compose.message'].with_context(
            self.assertEqual(message.subtype_id, self.env['mail.message.subtype'])
            self.assertEqual(message.partner_ids, self.env['res.partner'])
        attachs = self.env['ir.attachment'].search([('name', 'in', [a['name'] for a in attachment_data])])
        self.assertEqual(self.test_records.user_id, self.env['res.users'])
        self.assertEqual(self.test_records.message_partner_ids, self.env['res.partner'])
        composer_form = Form(self.env['mail.compose.message'].with_context(
        new_partners = self.env['res.partner'].search([
        composer_form = Form(self.env['mail.compose.message'].with_context(
        self.assertEqual(self._new_mails.exists(), self.env['mail.mail'], 'Should have deleted mail.mail records')
            self.assertEqual(message.subtype_id, self.env['mail.message.subtype'])
            self.assertEqual(message.partner_ids, self.env['res.partner'])
        composer_form = Form(self.env['mail.compose.message'].with_context(
        self.assertEqual(self._new_mails.exists(), self.env['mail.mail'], 'Should have deleted mail.mail records')
            self.assertEqual(record.message_ids, self.env['mail.message'], 'Should have deleted mail.message records')
        composer_form = Form(self.env['mail.compose.message'].with_context(
        composer_form = Form(self.env['mail.compose.message'].with_context(
        composer_form = Form(self.env['mail.compose.message'].with_context(
        composer_form = Form(self.env['mail.compose.message'].with_context(
        record = self.env['mail.test.composer.mixin'].create({
        record = self.env['mail.test.composer.mixin'].create({
        followers = self.env['mail.followers'].search([
        follower = self.env['mail.followers'].search([
        follower = self.env['mail.followers'].search([
        follower = self.env['mail.followers'].search([
        follower = self.env['mail.followers'].search([
        customer = self.env['res.partner'].create({
        document = self.env['mail.test.simple'].browse(self.test_record.id)
        self.assertEqual(document.message_partner_ids, self.env['res.partner'])
        private_address = self.env['res.partner'].sudo().create({
        document = self.env['mail.test.simple'].browse(self.test_record.id)
        sub = self.env['mail.test.track'].with_user(self.user_employee).create({
        container = self.env['mail.test.container'].with_context(self._test_context).create({
        sub1 = self.env['mail.test.track'].with_user(self.user_employee).create({
        sub2 = self.env['mail.test.track'].with_user(self.user_employee).create({
        partner = self.env['res.partner'].create({"name": "demo1", "email": "demo1@test.com"})
        notified_user = self.env['res.users'].create({
        sub = self.env['mail.test.track'].with_user(self.user_employee).with_context({
        mail_message = self.env['mail.message'].search([
        common_partner = self.env['res.partner'].create({"name": "demo1", "email": "demo1@test.com"})
        user_1 = self.env['res.users'].create({'login': 'demo1', 'partner_id': common_partner.id, 'notification_type': 'email'})
        user_2 = self.env['res.users'].create({'login': 'demo2', 'partner_id': common_partner.id, 'notification_type': 'inbox'})
        test = self.env['mail.test.track'].create({"name": "Test Track", "user_id": user_2.id})
        mail_message = self.env['mail.message'].search([
        notif = self.env['mail.notification'].search([
        res = self.env['mail.followers']._get_recipient_data(test, 'comment', subtype.id, pids=common_partner.ids)
        common_partner = self.env['res.partner'].create({"name": "demo1", "email": "demo1@test.com"})
        user_1 = self.env['res.users'].create({'login': 'demo1', 'partner_id': common_partner.id, 'notification_type': 'inbox'})
        test = self.env['mail.test.track'].create({"name": "Test Track", "user_id": user_1.id})
        mail_message = self.env['mail.message'].search([
        mail_message = self.env['mail.message'].search([
        res = self.env['mail.thread'].message_parse(self.from_string(plaintext))
        res = self.env['mail.thread'].message_parse(self.from_string(multipart))
        res = self.env['mail.thread'].message_parse(self.from_string(test_mail_data.MAIL_MULTIPART_MIXED))
        res = self.env['mail.thread'].message_parse(self.from_string(test_mail_data.MAIL_MULTIPART_MIXED_TWO))
        res = self.env['mail.thread'].message_parse(self.from_string(test_mail_data.MAIL_SINGLE_BINARY))
        res = self.env['mail.thread'].message_parse(self.from_string(test_mail_data.MAIL_MULTIPART_WEIRD_FILENAME))
        self.env['mail.thread'].message_parse(self.from_string(test_mail_data.MAIL_NO_FINAL_RECIPIENT))
        res = self.env['mail.thread'].message_parse(self.from_string(test_mail_data.MAIL_NO_BODY))
        self.env['mail.thread'].message_parse(self.from_string(mail))
        res = self.env['mail.thread'].message_parse(self.from_string(mail))
        res = self.env['mail.thread'].message_parse(self.from_string(mail))
        self.env['mail.thread'].message_parse(self.from_string(test_mail_data.MAIL_XHTML))
        record = self.env['mail.test.container'].create({
        self.assertEqual(record.alias_id.alias_model_id, self.env['ir.model']._get('mail.test.container'))
        self.assertEqual(record.alias_id.alias_parent_model_id, self.env['ir.model']._get('mail.test.container'))
                'alias_model_id': self.env['ir.model']._get('mail.test.gateway').id,
        alias = self.env['mail.alias'].create({
            'alias_model_id': self.env['ir.model']._get('mail.test.container').id,
        alias = self.env['mail.alias'].create({
            'alias_model_id': self.env['ir.model']._get('mail.test.container').id,
        alias_model_id = self.env['ir.model']._get('mail.test.gateway').id
        catchall_alias = self.env['ir.config_parameter'].sudo().get_param('mail.catchall.alias')
        bounce_alias = self.env['ir.config_parameter'].sudo().get_param('mail.bounce.alias')
            self.env['mail.alias'].create({'alias_model_id': alias_model_id, 'alias_name': catchall_alias})
            self.env['mail.alias'].create({'alias_model_id': alias_model_id, 'alias_name': bounce_alias})
        new_mail_alias = self.env['mail.alias'].create({
            self.env['ir.config_parameter'].sudo().set_param('mail.catchall.alias', new_mail_alias.alias_name)
            self.env['ir.config_parameter'].sudo().set_param('mail.bounce.alias', new_mail_alias.alias_name)
        record = self.env['mail.test.container'].create({
        self.assertEqual(record2.message_ids[0].author_id, self.env['res.partner'])
        self.assertEqual(record2.message_follower_ids.partner_id, self.env['res.partner'],
        self.assertEqual(record2.message_partner_ids, self.env['res.partner'],
        self.assertEqual(record3.message_ids[0].author_id, self.env['res.partner'])
        self.assertEqual(record3.message_follower_ids.partner_id, self.env['res.partner'],
        self.assertEqual(record3.message_partner_ids, self.env['res.partner'],
        self.assertEqual(record4.message_follower_ids.partner_id, self.env['res.partner'],
        self.assertEqual(record4.message_partner_ids, self.env['res.partner'],
        from_1 = self.env['res.partner'].create({'name': 'Brice Denisse', 'email': 'from.test@example.com'})
        from_3 = self.env['res.partner'].create({'name': 'FOllower Denisse', 'email': 'from.test@example.com'})
        from_1 = self.env['res.partner'].create({'name': 'Brice Denisse', 'email': 'from.test@test.com'})
        self.env['mail.alias'].create({
            'alias_model_id': self.env['ir.model']._get('mail.test.gateway').id
            'alias_parent_model_id': self.env['ir.model']._get('mail.test.gateway').id,
            'alias_parent_model_id': self.env['ir.model']._get('mail.test.gateway').id,
        self.env['ir.config_parameter'].set_param('mail.catchall.domain', '')
        new_alias_2 = self.env['mail.alias'].create({
            'alias_model_id': self.env['ir.model']._get('mail.test.container').id,
        new_simple = self.env['mail.test.simple'].search([('name', '=', 'Test Subject')])
        new_alias_2 = self.env['mail.alias'].create({
            'alias_model_id': self.env['ir.model']._get('mail.test.container').id,
        new_simple = self.env['mail.test.simple'].search([('name', '=', 'Test Subject')])
        new_alias_2 = self.env['mail.alias'].create({
            'alias_model_id': self.env['ir.model']._get('mail.test.container').id,
        new_simple = self.env['mail.test.gateway'].search([('name', '=', 'Test Subject')])
        new_alias_2 = self.env['mail.alias'].create({
            'alias_model_id': self.env['ir.model']._get('mail.test.container').id,
        new_simple = self.env['mail.test.gateway'].search([('name', '=', 'Test Subject')])
        other_record = self.env['mail.test.gateway'].create({
        yet_other_record = self.env['mail.test.gateway'].create({
        test_channel = self.env['mail.channel'].create({
        self.env['mail.alias'].create({
            'alias_model_id': self.env['ir.model']._get('mail.test.container').id,
        self.env['mail.alias'].create({
            'alias_model_id': self.env['ir.model']._get('mail.test.gateway').id,
        self.env['mail.alias'].create({
            'alias_model_id': self.env['ir.model']._get('mail.test.container').id,
        first_record = self.env['mail.test.simple'].with_user(self.user_employee).create({'name': 'Replies to Record'})
        incoming_msg = self.env['mail.message'].search([('message_id', '=', msgID)])
        incoming_msg = self.env['mail.message'].search([('message_id', '=', msgID)])
        alias = self.env["mail.alias"].create({
            "alias_model_id": self.env["ir.model"]._get(target_model).id,
        alias = self.env["mail.alias"].create({
            "alias_model_id": self.env["ir.model"]._get(target_model).id,
        no_of_msg = self.env['mail.message'].search_count([('message_id', 'ilike', '<123?456.diff1@agrolait.com>')])
        record = self.env['mail.test.cc'].create({'email_cc': 'cc1 <cc1@example.com>, cc2@example.com'})
        record = self.env['mail.test.cc'].create({})
        mail = self.env['mail.mail'].sudo().create({
        mail = self.env['mail.mail'].create(base_values)
        mail = self.env['mail.mail'].create(dict(base_values, **{
        self.assertEqual(self.env['ir.mail_server']._get_default_from_address(), 'notifications@test.com')
        mails = self.env['mail.mail'].create([{
        } for _ in range(5)]) | self.env['mail.mail'].create([{
        mails |= self.env['mail.mail'].create([{
        } for _ in range(5)]) | self.env['mail.mail'].create([{
        mails |= self.env['mail.mail'].create([{
        self.partner = self.env['res.partner'].create({
        mail = self.env['mail.mail'].sudo().create({
        message = self.env['mail.message'].create({
        notif = self.env['mail.notification'].search([('res_partner_id', '=', self.partner.id)])
        self.env['ir.mail_server']._patch_method('send_email', send_email)
        self.env['ir.mail_server']._revert_method('send_email')
        record1 = self.env['mail.test.simple'].create({'name': 'Test1'})
        message = self.env['mail.message'].create([{
        company_2 = self.env['res.company'].create({'name': 'Second Test Company'})
        record1 = self.env['mail.test.multi.company'].create({
        self.env['ir.config_parameter'].search([('key', '=', 'mail.catchall.domain')]).unlink()
        self.env['ir.config_parameter'].set_param('mail.catchall.domain', self.alias_domain)
        self.env['ir.config_parameter'].search([('key', '=', 'mail.catchall.alias')]).unlink()
        self.env['ir.config_parameter'].search([('key', '=', 'mail.catchall.domain')]).unlink()
        self.env['ir.config_parameter'].set_param('mail.catchall.domain', self.alias_domain)
        self.env['ir.config_parameter'].search([('key', '=', 'mail.catchall.alias')]).unlink()
        test_record = self.env['mail.test.simple'].create({'name': 'Test', 'email_from': 'ignasse@example.com'})
        test_record = self.env['mail.test.simple'].create({'name': 'Test', 'email_from': 'ignasse@example.com'})
        alias = self.env['mail.alias'].create({
            'alias_model_id': self.env['ir.model']._get('mail.test.simple').id,
            'alias_parent_model_id': self.env['ir.model']._get('mail.test.simple').id,
        msg = self.env['mail.message'].with_user(self.user_employee).create({
        msg1 = self.env['mail.message'].create({
        msg2 = self.env['mail.message'].create({
        msg3 = self.env['mail.message'].create({
        msg4 = self.env['mail.message'].create({
        msg5 = self.env['mail.message'].create({
        msg6 = self.env['mail.message'].create({
        msg7 = self.env['mail.message'].with_user(self.user_employee).create({
        msg8 = self.env['mail.message'].with_user(self.user_employee).create({
        messages = self.env['mail.message'].with_user(self.user_public).search([('subject', 'like', '_ZTest')])
        messages = self.env['mail.message'].with_user(self.user_employee).search([('subject', 'like', '_ZTest'), ('body', 'ilike', 'A')])
        messages = self.env['mail.message'].with_user(self.user_employee).search([('subject', 'like', '_ZTest')])
        messages = self.env['mail.message'].search([('subject', 'like', '_ZTest')])
        messages = self.env['mail.message'].with_user(self.user_portal).search([('subject', 'like', '_ZTest')])
        messages = self.env['mail.message'].with_user(self.user_portal).search([('subject', 'like', '_ZTest')])
        attachment = self.env['ir.attachment'].create({
            self.env['mail.message'].with_user(self.user_public).create({'model': 'mail.channel', 'res_id': self.group_pigs.id, 'body': 'Test'})
            self.env['mail.message'].with_user(self.user_public).create({'model': 'mail.channel', 'res_id': self.group_public.id, 'body': 'Test'})
            self.env['mail.message'].with_user(self.user_employee).create({'model': 'mail.channel', 'res_id': self.group_private.id, 'body': 'Test'})
        Message = self.env['mail.message'].with_user(self.user_employee)
        self.env['mail.message'].with_user(self.user_employee).create({'body': 'Test'})
        self.env['ir.config_parameter'].set_param('mail.catchall.domain', False)
        self.env['mail.message'].with_user(self.user_employee).create({'model': 'mail.channel', 'res_id': self.group_private.id, 'body': 'Test', 'parent_id': self.message.id})
        test_record = self.env['mail.test.simple'].with_context(self._test_context).create({'name': 'Test', 'email_from': 'ignasse@example.com'})
        partner_1 = self.env['res.partner'].create({
        new_mail = self.env['mail.mail'].sudo().search([
        wizard = self.env['mail.resend.message'].with_context({'mail_message_to_resend': message.id}).create({})
            self.env['mail.resend.message'].with_context({'mail_message_to_resend': message.id}).create({}).resend_mail_action()
            self.env['mail.resend.message'].with_context({'mail_message_to_resend': message.id}).create({}).resend_mail_action()
        wizard = self.env['mail.resend.message'].with_context({'mail_message_to_resend': message.id}).create({})
        wizard = self.env['mail.resend.message'].with_context({'mail_message_to_resend': message.id}).create({})
        test_record = self.env['mail.test.simple'].browse(self.test_record.ids)
        test_message = self.env['mail.message'].browse(self.test_message.ids)
        other_company = self.env['res.company'].with_user(self.user_admin).create({'name': 'Company B'})
        test_record = self.env['mail.test.multi.company'].with_user(self.user_admin).create({
        test_record = self.env['mail.test.multi.company'].browse(test_record.id)
        test_record = self.env['mail.test.multi.company'].browse(test_record.id)
        classify_res = self.env[self.test_record._name]._notify_classify_recipients(pdata, 'My Custom Model Name', msg_vals=notify_msg_vals)
        self.assertFalse(self.env['mail.mail'].sudo().search([('mail_message_id', '=', msg.id)]),
        self.assertEqual(len(self.env['mail.mail'].sudo().search([('mail_message_id', '=', msg.id)])), 2)
        _attach_1 = self.env['ir.attachment'].with_user(self.user_employee).create({
        _attach_2 = self.env['ir.attachment'].with_user(self.user_employee).create({
        self.assertEqual(parent_msg.partner_ids, self.env['res.partner'])
        self.assertEqual(parent_msg.partner_ids, self.env['res.partner'])
        self.assertEqual(new_msg.partner_ids, self.env['res.partner'])
        self.assertEqual(msg.partner_ids, self.env['res.partner'])
        self.assertEqual(msg.notified_partner_ids, self.env['res.partner'])
        self.assertEqual(new_note.notified_partner_ids, self.env['res.partner'])
        self.assertEqual(new_note.notified_partner_ids, self.env['res.partner'])
        test_record = self.env['mail.test.simple'].with_context(self._test_context).create({'name': 'Test', 'email_from': 'ignasse@example.com'})
        new_partners = self.env['res.partner'].search([('email', 'in', [email_1, email_2])])
        test_record = self.env['mail.test.simple'].with_context(self._test_context).create({'name': 'Test', 'email_from': 'ignasse@example.com'})
        new_partner = self.env['res.partner'].search([('email', '=', 'test@example.com')])
        test_record = self.env['mail.test.simple'].browse(self.test_record.ids)
        message_id = call_kw(self.env['mail.test.simple'],
        record = self.env['mail.test.ticket'].with_user(self.user_employee).with_context(self._test_context).create({
        self.assertEqual(self.record.message_ids, self.env['mail.message'])
        customer = self.env['res.partner'].create({'name': 'Customer', 'email': 'cust@example.com'})
        self.assertEqual(self.record.message_ids.partner_ids, self.env['res.partner'])
        self.assertEqual(self.record.message_ids.notified_partner_ids, self.env['res.partner'])
        container = self.env['mail.test.container'].with_context(mail_create_nosubscribe=True).create({'name': 'Container'})
        self.assertEqual(self.record.message_ids.partner_ids, self.env['res.partner'])
        self.assertEqual(self.record.message_ids, self.env['mail.message'])
        Model = self.env['mail.test.ticket'].with_user(self.user_employee).with_context(self._test_context)
        company1 = self.env['res.company'].create({'name': 'company1'})
        template = self.env['mail.template'].create({
            'model_id': self.env['ir.model']._get('mail.test.track').id,
            self.env['mail.test.track'].create({
        mt_name_changed = self.env['mail.message.subtype'].create({
        self.env['ir.model.data'].create({
        mail_template = self.env['mail.template'].create({
        cls = type(self.env['mail.test.container'])
        test_mail_record = self.env['mail.test.container'].create({
        container = self.env['mail.test.container'].with_context(mail_create_nosubscribe=True).create({'name': 'Container'})
        record = self.env['mail.test.track.compute'].create({})
        partner = self.env['res.partner'].create({
        record = self.env['mail.test.track.monetary'].with_user(self.user_employee).with_context(self._test_context).create({
        record = self.env['mail.test.ticket'].with_user(self.user_employee).with_context(self._test_context).create({
            'container_id': self.env['mail.test.container'].with_context(mail_create_nosubscribe=True).create({'name': 'Container'}).id
        tracking_values = self.env['mail.tracking.value'].search([('mail_message_id', '=', self.record.message_ids.id)])
        ir_model_field = self.env['ir.model.fields'].search([
        self.user_employee = self.env['res.users'].with_context(self._quick_create_ctx).create({
        self.env['ir.config_parameter'].set_param('mail.bounce.alias', self.alias_bounce)
        self.env['ir.config_parameter'].set_param('mail.catchall.domain', self.alias_domain)
        self.env['ir.config_parameter'].set_param('mail.catchall.alias', self.alias_catchall)
        self.env['ir.config_parameter'].set_param('mail.default.from', self.default_from)
        self.res_partner_3 = self.env['res.partner'].create({
        self.res_partner_4 = self.env['res.partner'].create({
        self.res_partner_10 = self.env['res.partner'].create({
        self.res_partner_12 = self.env['res.partner'].create({
        self.env['mail.performance.thread'].create([
        records = self.env['mail.performance.thread'].search([])
        records = self.env['mail.performance.thread'].search([])
        records = self.env['mail.performance.thread'].search([])
        record = self.env['mail.performance.thread'].create({
            self.env['mail.performance.thread'].create({'name': 'X'})
            self.env['mail.test.simple'].create({'name': 'Test'})
        rec = self.env['mail.test.simple'].create({'name': 'Test'})
        self.customer = self.env['res.partner'].with_context(self._quick_create_ctx).create({
        self.user_test = self.env['res.users'].with_context(self._quick_create_ctx).create({
        self.test_record_full = self.env['mail.test.ticket'].with_context(self._quick_create_ctx).create({
        self.test_template_full = self.env['mail.template'].create({
            'model_id': self.env['ir.model']._get('mail.test.ticket').id,
        record = self.env['mail.test.activity'].create({'name': 'Test'})
        MailActivity = self.env['mail.activity'].with_context({
        record = self.env['mail.test.activity'].create({'name': 'Test'})
        self.assertEqual(record.activity_ids, self.env['mail.activity'])
        test_record = self.env['mail.test.ticket'].browse(self.test_record_full.id)
            composer = self.env['mail.compose.message'].with_context({
        test_record = self.env['mail.test.ticket'].browse(self.test_record_full.id)
            composer = self.env['mail.compose.message'].with_context({
        test_record = self.env['mail.test.ticket'].browse(self.test_record_full.id)
        test_template = self.env['mail.template'].browse(self.test_template_full.id)
            composer = self.env['mail.compose.message'].with_context({
        self.env['res.partner'].sudo().search([('email', '=', 'nopartner.test@example.com')]).unlink()
        record = self.env['mail.test.track'].create({'name': 'Test'})
        record = self.env['mail.test.track'].create({'name': 'Test'})
        record = self.env['mail.test.simple'].create({'name': 'Test'})
        record = self.env['mail.test.simple'].create({'name': 'Test'})
        record = self.env['mail.test.simple'].create({'name': 'Test'})
        record = self.env['mail.test.simple'].create({'name': 'Test'})
        record = self.env['mail.test.simple'].create({'name': 'Test'})
        record = self.env['mail.test.simple'].create({'name': 'Test'})
        record = self.env['mail.test.simple'].create({'name': 'Test'})
        record = self.env['mail.performance.tracking'].create({'name': 'Zizizatestname'})
        test_records_sudo = self.env['mail.test.container'].sudo().create([
            test_records = self.env['mail.test.container'].browse(test_records_sudo.ids)
        self.user_portal = self.env['res.users'].with_context(self._quick_create_ctx).create({
        self.customer = self.env['res.partner'].with_context(self._quick_create_ctx).create({
        self.container = self.env['mail.test.container'].with_context(mail_create_nosubscribe=True).create({
        Partners = self.env['res.partner'].with_context(self._quick_create_ctx)
        message = self.env['mail.message'].sudo().create({
        mail = self.env['mail.mail'].sudo().create({
            self.env['mail.mail'].sudo().browse(mail_ids).send()
        rec = self.env['mail.test.ticket'].create({
        rec = self.env['mail.test.ticket'].create({
        self.assertEqual(rec1.message_ids[0].notified_partner_ids, self.env['res.partner'])
            rec = self.env['mail.test.ticket'].create({
        rec = self.env['mail.test.ticket'].create({
        self.assertEqual(rec1.message_ids[1].notified_partner_ids, self.env['res.partner'])
        container2 = self.env['mail.test.container'].with_context(mail_create_nosubscribe=True).create({
        rec = self.env['mail.test.ticket'].create({
        rec = self.env['mail.test.ticket'].create({
        self.assertEqual(rec1.message_ids[0].subtype_id, self.env['mail.message.subtype'])
        self.assertEqual(rec1.message_ids[1].notified_partner_ids, self.env['res.partner'])
        name_field = self.env['ir.model.fields']._get(self.container._name, 'name')
        customer_id_field = self.env['ir.model.fields']._get(self.container._name, 'customer_id')
        messages = self.env['mail.message'].sudo().create([{
            'subtype_id': self.env['ir.model.data']._xmlid_to_res_id('mail.mt_comment'),
            'subtype_id': self.env['ir.model.data']._xmlid_to_res_id('mail.mt_note'),
            records.append(self.env['mail.test.simple'].create({'name': 'Test'}))
        records.append(self.env['mail.test.track'].create({'name': 'Test'}))
        messages = self.env['mail.message'].create([{
        self.customer = self.env['res.partner'].with_context(self._quick_create_ctx).create({
        self.record = self.env['mail.test.container'].with_context(mail_create_nosubscribe=True).create({
        self.user_follower_email = self.env['res.users'].with_context(self._quick_create_ctx).create({
        self.user_follower_inbox = self.env['res.users'].with_context(self._quick_create_ctx).create({
        self.partner_follower = self.env['res.partner'].with_context(self._quick_create_ctx).create({
        self.user_inbox = self.env['res.users'].with_context(self._quick_create_ctx).create({
        self.user_email = self.env['res.users'].with_context(self._quick_create_ctx).create({
        self.partner = self.env['res.partner'].with_context(self._quick_create_ctx).create({
        self.attachements = self.env['ir.attachment'].with_user(self.env.user).create(self.vals)
        mailing = self.env['mailing.mailing'].create({
            'mailing_model_id': self.env['ir.model']._get('mail.test.sms').id,
        mailing = self.env['mailing.mailing'].create({
            'mailing_model_id': self.env['ir.model']._get('mail.test.sms.bl').id,
            mailing = self.env['mailing.mailing'].create({
                'mailing_model_id': self.env['ir.model']._get('mail.test.sms').id,
        new_record_1 = self.env['mail.test.sms'].create({
        void_record = self.env['mail.test.sms'].create({
        falsy_record_1 = self.env['mail.test.sms'].create({
        falsy_record_2 = self.env['mail.test.sms'].create({
        bl_record_1 = self.env['mail.test.sms'].create({
        self.env['phone.blacklist'].create({'number': '0456110011'})
        nr2_partner = self.env['res.partner'].create({
        new_record_2 = self.env['mail.test.sms'].create({
            [{'partner': self.env['res.partner'], 'number': phone_validation.phone_format(bl_record_1.phone_nbr, 'BE', '32', force_format='E164'),
            [{'partner': self.env['res.partner'], 'number': False,
            [{'partner': self.env['res.partner'], 'number': record.phone_nbr,
        traces = self.env['mailing.trace'].search([('mass_mailing_id', 'in', self.mailing.ids)])
        mailing = self.env['mailing.mailing'].create({
            'mailing_model_id': self.env['ir.model']._get('res.partner').id,
        mailing_test = self.env['mailing.sms.test'].with_user(self.user_marketing).create({
        mailing = self.env['mailing.mailing'].browse(self.mailing.ids)
        mailing = self.env['mailing.mailing'].browse(self.mailing_sms.ids)
            'mailing_model_id': self.env['ir.model']._get('mail.test.sms.partner').id,
        records = self.env['mail.test.sms.partner'].create([
        new_record = self.env['mail.test.sms.partner'].create([
        mailing = self.env['mailing.mailing'].browse(self.mailing_sms.ids)
            'mailing_model_id': self.env['ir.model']._get('mail.test.sms.partner.2many').id,
        self.env['mail.test.sms.partner.2many'].create([
        mailing = self.env['mailing.mailing'].browse(self.mailing_sms.ids)
        self.env['phone.blacklist'].sudo().create({'number': recipients[4].phone_nbr})
            'mailing_model_id': self.env['ir.model']._get('mail.test.sms.bl.optout'),
        channel = self.env['mail.channel'].with_user(self.user_employee).init_odoobot()
        partners = self.env['mail.channel'].channel_fetch_listeners(channel.uuid)
        channel = self.env['mail.channel'].with_user(self.user_employee).init_odoobot()
        kwargs['partner_ids'] = [self.env['ir.model.data']._xmlid_to_res_id("base.partner_root")]
        attachment = self.env['ir.attachment'].with_user(self.user_employee).create({
        last_message = self.env['mail.message'].search([('id', '=', message.id + 1)])
        self.customer = self.env['res.partner'].with_context(self._quick_create_ctx).create({
        self.test_record = self.env['mail.test.sms'].with_context(self._quick_create_ctx).create({
        Partners = self.env['res.partner'].with_context(self._quick_create_ctx)
            partners += self.env['res.partner'].with_context(**self._quick_create_ctx).create({
            records += self.env['mail.test.sms'].with_context(**self._quick_create_ctx).create({
        self.sms_template = self.env['sms.template'].create({
            'model_id': self.env['ir.model']._get('mail.test.sms').id,
        composer = self.env['sms.composer'].with_context(
        composer = self.env['sms.composer'].with_context(
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            record = self.env['mail.test.sms.partner'].create({'customer_id': self.partner_1.id})
            record = self.env['mail.test.sms.partner'].create({'customer_id': False})
        self.assertSMSNotification([{'partner': self.env['res.partner'], 'number': False, 'state': 'exception', 'failure_type': 'sms_number_missing'}], self._test_body, messages)
            record = self.env['mail.test.sms.partner.2many'].create({'customer_ids': [(4, self.partner_1.id)]})
            record = self.env['mail.test.sms.partner.2many'].create({'customer_ids': [(4, self.partner_1.id), (4, self.partner_2.id)]})
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
        self.assertSMSNotification([{'partner': self.env['res.partner'], 'number': False, 'state': 'exception', 'failure_type': 'sms_number_missing'}], self._test_body, messages)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
        sms_template = self.env['sms.template'].create({
            'model_id': self.env['ir.model']._get('mail.test.sms').id,
                test_record = self.env['mail.test.sms'].browse(self.test_record.id)
                test_record = self.env['mail.test.sms'].browse(self.test_record.id)
        sms_template = self.env['sms.template'].create({
            'model_id': self.env['ir.model']._get('mail.test.sms').id,
        self.env['ir.model.data'].create({
                test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
            test_record = self.env['mail.test.sms'].browse(self.test_record.id)
                self.env['mail.test.sms'].browse(self.records.ids)._message_sms_schedule_mass(body=self._test_body, mass_keep_log=False)
                self.env['mail.test.sms'].browse(self.records.ids)._message_sms_schedule_mass(body=self._test_body, mass_keep_log=True)
                self.env['mail.test.sms'].browse(self.records.ids)._message_sms_schedule_mass(template=self.sms_template, mass_keep_log=False)
                self.env['mail.test.sms'].browse(self.records.ids)._message_sms_schedule_mass(template=self.sms_template, mass_keep_log=True)
        self.assertSMSOutgoing(self.env['res.partner'], self.test_numbers_san[0], content='Dear %s this is an SMS.' % self.test_record_2.display_name)
        self.assertSMSOutgoing(self.env['res.partner'], self.test_numbers_san[0], content='Dear %s this is an SMS.' % self.test_record_2.display_name)
            self.env['mail.blacklist'].create([{'email': 'Arya.Stark@example.com'}])
            self.env['mail.blacklist'].create([{'email': 'Arya.Stark@example.com'}])
        self.env['mail.blacklist'].create([{'email': 'Arya.Stark@example.com'}])
        self.bl_rec = self.env['mail.blacklist'].create([
        self.bl_previous = self.env['mail.blacklist'].search([])
        bl_sudo = self.env['mail.blacklist'].sudo()
        added = self.env['mail.blacklist']._add('Arya.Stark@EXAMPLE.com')
        bl_sudo = self.env['mail.blacklist'].sudo()
        added = self.env['mail.blacklist']._remove('Arya.Stark@EXAMPLE.com')
        bl_sudo = self.env['mail.blacklist'].sudo()
        self.env['mail.blacklist'].create([
        bl_sudo = self.env['mail.blacklist'].sudo()
        self.env['mail.blacklist'].create([
        search_res = self.env['mail.blacklist'].search([('email', '=', 'john.snow@example.com')])
        search_res = self.env['mail.blacklist'].search([('email', '=', 'Not A Stark <john.snow@example.com>')])
        search_res = self.env['mail.blacklist'].search([('email', '=', '"John J. Snow" <john.snow@example.com>')])
        search_res = self.env['mail.blacklist'].search([('email', '=', 'Aegon? <john.snow@example.com>')])
        search_res = self.env['mail.blacklist'].search([('email', '=', '"John; \"You know Nothing\" Snow" <john.snow@example.com>')])
        search_res = self.env['mail.blacklist'].search([('email', '=', 'john.SNOW@example.COM>')])
        search_res = self.env['mail.blacklist'].search([('email', 'ilike', 'John')])
        search_res = self.env['mail.blacklist'].search([('email', 'ilike', 'n.SNOW@example.cO>')])
        self.link = self.env['link.tracker'].search_or_create({
        self.click = self.env['link.tracker.click'].create({
        click = self.env['link.tracker.click'].sudo().add_click(
        click = self.env['link.tracker.click'].sudo().add_click(
        record = self.env['mailing.test.blacklist'].create({})
        trace = self.env['mailing.trace'].create({
        click = self.env['link.tracker.click'].sudo().add_click(
        self.env['ir.config_parameter'].set_param('mail.bounce.alias', self.alias_bounce)
        self.env['ir.config_parameter'].set_param('mail.catchall.domain', self.alias_domain)
        self.env['ir.config_parameter'].set_param('mail.catchall.alias', self.alias_catchall)
        self.env['ir.config_parameter'].set_param('mail.default.from', self.default_from)
        self.mm_recs = self.env['mailing.performance'].create(values)
        mailing = self.env['mailing.mailing'].create({
        self.mm_recs = self.env['mailing.performance.blacklist'].create(values)
            self.env['mail.blacklist'].create({
        self.env['mailing.performance.blacklist'].flush()
        mailing = self.env['mailing.mailing'].create({
        website = self.env['website'].search([], limit=1)
        website = self.env['website'].browse(1)
        country1 = self.env['res.country'].create({'name': "My Super Country"})
        self.env['ir.translation'].create(params)
        self.env['ir.translation'].create(params)
        company = self.env['res.company'].create({'name': "Adaa"})
        self.user_portal = self.env['res.users'].with_context({'no_reset_password': True}).create({
        self.env['website.rewrite'].create({
        self.env['website.rewrite'].create({
        rec_published = self.env['test.model'].create({'name': 'name', 'website_published': True})
        rec_unpublished = self.env['test.model'].create({'name': 'name', 'website_published': False})
        cash_journal = self.env['account.journal'].create({'name': 'Cash - Test', 'type': 'cash', 'code': 'CASH - Test'})
        self.env['payment.acquirer'].search([('provider', '=', 'test')]).write({
        a_recv = self.env['account.account'].create({
        a_pay = self.env['account.account'].create({
        product_course_channel_6 = self.env['product.product'].create({
        furniture_survey = self.env['survey.survey'].create({
        slide_channel_demo_6_furn3 = self.env['slide.channel'].create({
            EnglishUoMCateg = self.env['uom.category'].with_context({})
        linked_model_data = self.env['ir.model.data'].search([
        product_uom = self.env['uom.uom'].create({
            self.env['uom.uom'].create({
        category = self.env['uom.category'].create({
            self.env['uom.uom'].create({
        self.env['uom.uom'].create({
        self.env['uom.uom'].create({
            self.env['uom.uom'].create({
        default=lambda self: self.env['utm.stage'].search([], limit=1),
        for url_param, field_name, cookie_name in self.env['utm.mixin'].tracking_fields():
        # To force the call of overridden method, we use self.env['utm.mixin'].tracking_fields() which respects overridden
        res = self.env["ir.actions.actions"]._for_xml_id(action_ref)
        self.env[res["res_model"]].check_access_rights('write')
        IrConfigSudo = self.env['ir.config_parameter'].sudo()
                placeholder_filename = self.env[model]._get_placeholder_filename(field)
        return self.env['ir.qweb']._render(
            **self.env['ir.ui.view']._prepare_qcontext(),
            types = dict(self.env["ir.model.fields"]._fields["ttype"]._description_selection(self.env))
        Comodel = self.env[field.comodel_name].with_context(hierarchical_naming=False)
                    primary, secondary = self.env['base.document.layout'].extract_image_primary_secondary_colors(base64_img)
        self.layout_template1 = self.env['ir.ui.view'].create({
        self.env['ir.model.data'].create({
        self.report_layout1 = self.env['report.layout'].create({
        self.layout_template2 = self.env['ir.ui.view'].create({
        self.env['ir.model.data'].create({
        self.report_layout2 = self.env['report.layout'].create({
        with Form(self.env['base.document.layout']) as doc_layout:
        with Form(self.env['base.document.layout']) as doc_layout:
        with Form(self.env['base.document.layout']) as doc_layout:
        with Form(self.env['base.document.layout']) as doc_layout:
        with Form(self.env['base.document.layout']) as doc_layout:
        with Form(self.env['base.document.layout']) as doc_layout:
    #     with Form(self.env['base.document.layout']) as doc_layout:
        menus = self.env['ir.ui.menu'].load_menus(False)
        menus = self.env['ir.ui.menu'].with_user(user_demo.id).load_menus(False)
        assets = self.env['ir.qweb']._get_asset_content(suite)[0]
        View = self.env['ir.ui.view'].sudo()
            module = self.env['ir.module.module'].search([('name', '=', el.attrib.get('t-install'))])
        return self.value_to_html(self.env['res.partner'].search([('id', '=', ids[0])]), options=options)
                attrs = self.env['ir.qweb.field.datetime'].attributes(record, field_name, options, values)
            lg = self.env['res.lang']._lang_get(self.env.user.lang) or get_lang(self.env)
        lg = self.env['res.lang']._lang_get(self.env.user.lang) or get_lang(self.env)
            lg = self.env['res.lang']._lang_get(self.env.user.lang) or get_lang(self.env)
        lg = self.env['res.lang']._lang_get(self.env.user.lang) or get_lang(self.env)
            item = self.env[model].browse(int(oid))
        converter = self.env[model] if model in self.env else self.env['ir.qweb.field']
        self.env['ir.ui.view'].create(vals)
        current_website = self.env['website'].browse(self._context.get('website_id'))
        record = self.env[model].create({field: value})
        rendered = self.env['ir.qweb']._render(t, {'record': record})
        converter = self.env[model] if model in self.env else self.env['ir.qweb.field']
        subrec1 = self.env['web_editor.converter.test.sub'].create({'name': "Foo"})
        subrec2 = self.env['web_editor.converter.test.sub'].create({'name': "Bar"})
        record = self.env['web_editor.converter.test'].create({field: subrec1.id})
        rendered = self.env['ir.qweb']._render(t, {'record': record})
        converter = self.env[model] if model in self.env else self.env['ir.qweb.field']
        website = self.env['website'].get_current_website(fallback=False)
        website = self.env['website'].get_current_website()
            module.is_installed_on_current_website = module == self.env['website'].get_current_website().theme_id
            records |= self.env[theme_model_name].with_context(active_test=False).browse(imd_ids)
                    imd = self.env['ir.model.data'].search([('model', '=', find._name), ('res_id', '=', find.id)])
                    new_rec = self.env[model_name].create(rec_data)
            self.env['theme.utils'].with_context(website_id=website.id)._post_copy(module)
        self.env['theme.utils'].with_context(website_id=website.id)._reset_default_config()
        website = self.env['website'].get_current_website()
        active_todo = self.env['ir.actions.todo'].search([('state', '=', 'open')], limit=1)
        website = self.env['website'].get_current_website()
        website = self.env['website'].get_current_website()
        themes = self.env['ir.module.module'].with_context(active_test=False).search([
            return self.env['ir.model.data']._xmlid_to_res_id(model_id)
        current_website = self.env['website'].get_current_website(fallback=False)
            website = self.env['website'].browse(options['website_id'])
            view.first_page_id = self.env['website.page'].search([('view_id', '=', view.id)], limit=1)
                for w in self.env['website'].search([('id', '!=', current_website_id)]):
        self = self.with_context(website_id=self.env['website'].get_current_website().id)
            return self.env['website'].viewref(view_id)
        current_website = self.env['website'].browse(self._context.get('website_id'))
            current_website = self.env['website'].browse(self._context.get('website_id'))
                    values['backend_menu_id'] = func and func() or self.env['ir.model.data']._xmlid_to_res_id('website.menu_website_configuration')
            lang_code = self.env['website'].browse(website_id).default_lang_id.code
        res['website_id'] = self.env['website'].get_current_website().id
        current_website = self.env['website'].get_current_website()
            website_specific_view = self.env['ir.ui.view'].search([
            company.website_id = self.env['website'].search([('company_id', '=', company.id)], limit=1)
        action = self.env["ir.actions.actions"]._for_xml_id("website.theme_install_kanban_action")
        return self.env['website'].search([('company_id', '=', self.env.company.id)], limit=1)
        action = self.env["ir.actions.actions"]._for_xml_id("base.action_res_users")
        action['res_id'] = literal_eval(self.env['ir.config_parameter'].sudo().get_param('base.template_portal_user_id', 'False'))
        action = self.env["ir.actions.actions"]._for_xml_id("website.theme_install_kanban_action")
        google_maps_api_key = self.env['website'].get_current_website().google_maps_api_key
        website = self.env['website'].get_current_website()
        current_website = self.env['website'].get_current_website()
        current_website = self.env['website'].get_current_website()
            website_specific_inherit = self.env['ir.ui.view'].with_context(active_test=False).search([
        self.env['web_editor.assets'].make_scss_customization(
        ThemeAsset = self.env['theme.ir.asset'].sudo().with_context(active_test=False)
        website = self.env['website'].get_current_website()
            Asset = self.env['ir.asset'].sudo().with_context(active_test=False)
        website = self.env['website'].get_current_website()
            View = self.env['ir.ui.view'].with_context(active_test=False)
        return self.env['res.lang'].search([]).ids
        lang_code = self.env['ir.default'].get('res.partner', 'lang')
        def_lang_id = self.env['res.lang']._lang_get_id(lang_code)
            menus = self.env['website.menu'].browse(website._get_menu_ids())
        return self.env['website.menu'].search([('website_id', '=', self.id)]).ids
            company = self.env['res.company'].browse(vals.get('company_id'))
            groups = self.env['res.groups'].concat(*(self.env.ref(it) for it in all_user_groups.split(',')))
                company = self.env['res.company'].browse(values['company_id'])
            self.env['ir.qweb'].clear_caches()
            existing_policy_page = self.env['website.page'].search([
                    self.env['website.page'].create({
        attachments_to_unlink = self.env['ir.attachment'].search([
        IrConfigParameter = self.env['ir.config_parameter'].sudo()
        menus = self.env['website.menu'].search([('url', 'in', list(module_data.keys())), ('website_id', '=', self.id)])
        configurator_features = self.env['website.configurator.feature'].search([])
        process_svg = self.env['website.configurator.feature']._process_svg
            self.env['web_editor.assets'].make_scss_customization(url, values)
                self.env['web_editor.assets'].make_scss_customization(url, values)
            features = self.env['website.configurator.feature'].browse(selected_features)
                menu_company = self.env['website.menu'].create({
                    result = self.env['website'].new_page(
            self.env['website'].browse(website.id).configurator_set_menu_links(menu_company, module_data)
                page_view_id = self.env['ir.ui.view'].browse(pages_views[page_code])
                    view_id = self.env['website'].with_context(website_id=website.id).viewref('website.' + snippet)
                    attachment = self.env['ir.attachment'].create({
                    self.env['ir.model.data'].create({
        theme = self.env['ir.module.module'].search([('name', '=', theme_name)])
            attachment = self.env['ir.attachment'].browse(logo_attachment_id)
            parent_view = self.env['website'].with_context(website_id=website.id).viewref(xpath_view)
            self.env['ir.ui.view'].create({
                view_id = self.env['website'].viewref('website.header_call_to_action')
        website = self.env['website'].browse(website.id)
                view_id = self.env['website'].viewref(footer_id)
        home_menu = self.env['website.menu'].search([('website_id', '=', self.id), ('url', '=', '/')])
            page = self.env['website.page'].create(default_page_values)
            menu = self.env['website.menu'].create(default_menu_values)
        while self.env['website.page'].with_context(active_test=False).sudo().search([('url', '=', page_temp)] + domain_static):
        while self.env['website.page'].with_context(active_test=False).sudo().search([('key', '=', key_copy)] + domain_static):
        page = self.env['website.page'].browse(int(page_id))
        website = self.env['website'].browse(self._context.get('website_id'))
        pages = self.env['website.page'].search(website_page_search_dom)
        views = self.env['ir.ui.view'].search(page_search_dom)
        menus = self.env['website.menu'].search(menu_search_dom)
        page = self.env['website.page'].browse(int(page_id))
        website = self.env['website'].browse(self._context.get('website_id'))
        pages = self.env['website.page'].search(website_page_search_dom)
        views = self.env['ir.ui.view'].search(page_search_dom)
            country_id = self.env['res.country'].search([('code', '=', country)], limit=1).id
        return self.env['ir.model.access'].check('ir.ui.view', 'write', False)
        return self.env['ir.model.access'].check('ir.ui.menu', 'read', False)
        View = self.env['ir.ui.view'].sudo()
                domain = [('key', '=', view_id)] + self.env['website'].website_domain(self._context.get('website_id'))
        views = self.env['ir.ui.view'].with_context(active_test=False).sudo().search([('customize_show', '=', True)])
                if 'website_id' in self.env[converter.model]._fields and (not converter.domain or converter.domain == '[]'):
                        query = sitemap_qs2dom(query, r, self.env[converter.model]._rec_name)
        pages = self.env['website.page'].sudo().search(domain, order=order, limit=limit)
            return self.env["ir.actions.actions"]._for_xml_id("website.backend_dashboard")
        return self.env["ir.actions.actions"]._for_xml_id("website.action_website")
            table = self.env[model]._table
            result.append(self.env['website.page']._search_get_detail(self, order, options))
            model = self.env[search_detail['model']]
                    table=sql.Identifier((self.env['ir.ui.view'] if field == 'arch_db' or (field == 'name' and 'arch_db' in fields) else model)._table),
                    view_table=sql.Identifier(self.env['ir.ui.view']._table),
                    names = ['%s,%s' % (self.env['ir.ui.view']._name, field) for field in fields]
            for field in self.env['ir.model.fields'].sudo().search([
        if not self.env['res.users'].has_group('website.group_website_designer'):
                    menu.mega_menu_content = self.env['ir.ui.view']._render_template('website.s_mega_menu_multi_menus')
            for website in self.env['website'].search([]):
            menus_to_remove |= self.env['website.menu'].search([('url', '=', menu.url),
            is_homepage = bool(node.page_id and self.env['website'].browse(website_id).homepage_id.id == node.page_id.id)
        menu = menu_id and self.browse(menu_id) or self.env['website'].browse(website_id).menu_id
                domain = self.env["website"].website_domain(website_id) + [
                page = self.env["website.page"].search(domain, limit=1)
                        self.env['ir.http']._match(menu['url'])
            page.is_homepage = page == self.env['website'].get_current_website().homepage_id
            website = self.env['website'].get_current_website()
            res['group_id'] = self.env['res.groups'].browse(res['groups_id']).name_get()[0]
        website = self.env['website'].browse(website_id)
            url = self.env['website'].get_unique_path(url)
            page_key = self.env['website'].get_unique_key(slugify(data['name']))
        menu = self.env['website.menu'].search([('page_id', '=', int(data['id']))])
                self.env['website.menu'].create({
            self.env['website.rewrite'].create({
                view = self.env['ir.ui.view'].browse(self.view_id.id)
            default['url'] = default.get('url', self.env['website'].get_unique_path(self.url))
        copy_param = dict(name=page_name or page.name, website_id=self.env['website'].get_current_website().id)
            copy_param['url'] = self.env['website'].get_unique_path(page_url)
            menu = self.env['website.menu'].search([('page_id', '=', page_id)], limit=1)
        results = self.env['res.partner'].search_read(
        results = self.env['website.track'].read_group(
        results = self.env['website.track'].read_group([('visitor_id', 'in', self.ids)],
        Visitor = self.env['website.visitor'].sudo()
        last_view = self.env['website.track'].sudo().search(domain, limit=1)
            self.env['website.track'].create(website_track_values)
        delay_days = int(self.env['ir.config_parameter'].sudo().get_param('website.visitor.live.days', 30))
        visitors_to_archive = self.env['website.visitor'].sudo().search([('last_connection_datetime', '<', deadline)])
        self.website = self.env['website'].create({
        lang_fr = self.env['res.lang']._activate_lang('fr_FR')
        without_website_id = self.env['ir.attachment'].create({'name': 'test base url'})
        with_website_id = self.env['res.partner'].create({'name': 'test base url'})
        web_base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')
        company_1 = self.env['res.company'].create({
        company_2 = self.env['res.company'].create({
        website_1 = self.env['website'].create({
        attach = self.env['ir.attachment'].create({'name': 'test base url', 'website_id': website_1.id})
        website_2 = self.env['website'].create({
        web_base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')
        country1 = self.env['res.country'].create({'name': "My Country 1"})
        country2 = self.env['res.country'].create({'name': "My Country 2"})
        country3 = self.env['res.country'].create({'name': "My Country 3"})
        country4 = self.env['res.country'].create({'name': "My Country 4"})
        country5 = self.env['res.country'].create({'name': "My Country 5"})
        country_group_1_2 = self.env['res.country.group'].create({
        country_group_3 = self.env['res.country.group'].create({
        user = self.env['res.users'].create({'website_id': website.id, 'login': 'sad@mail.com', 'name': 'Hope Fully'})
        self.lang_fr = self.env['res.lang']._activate_lang('fr_FR')
        self.page = self.env['website.page'].create({
        self.nb_website = self.env['website'].search_count([])
        top_menu = self.env['website'].get_current_website().menu_id
        website2 = self.env['website'].create({
        specific_page = self.page.copy({'website_id': self.env['website'].get_current_website().id})
        website = self.env['website'].get_current_website()
        t = self.env['ir.ui.view'].create({
        rendered = self.env['ir.qweb']._render(t.id, {'url': 'http://test.external.img/img2.png'})
        demo = self.env['res.users'].search([('login', '=', 'demo')])[0]
        self.env['res.lang']._activate_lang('fr_FR')
            self.env['ir.qweb']._post_processing_att(tag, {attribute: url}, {}),
        websites = self.env['website'].create([
        self.restricted_editor = self.env['res.users'].create({
        website = self.env['website'].search([], limit=1)
        self.env['website.menu'].create({
        website_default = self.env['website'].search([], limit=1)
        new_website = self.env['website'].create({'name': 'New Website'})
        attach = self.env['ir.attachment'].create({
        self.env['ir.asset'].create({
        website_default = self.env['website'].search([], limit=1)
        self.env['ir.ui.view'].create([{
        self.env['ir.attachment'].create({
        lang = self.env['res.lang']._activate_lang('nl_NL')
        self.env['website'].browse(1).write({'language_ids': [(4, lang.id, 0)]})
        self.website = self.env['website'].search([
        untracked_view = self.env['ir.ui.view'].create({
        tracked_view = self.env['ir.ui.view'].create({
        tracked_view_2 = self.env['ir.ui.view'].create({
        [self.untracked_page, self.tracked_page, self.tracked_page_2] = self.env['website.page'].create([
        self.user_portal = self.env['res.users'].search([('login', '=', 'portal')])
            self.env['ir.config_parameter'].sudo().set_param('auth_password_policy.minlength', 4)
            self.partner_portal = self.env['res.partner'].create({
            self.user_portal = self.env['res.users'].create({
        return self.env['website.visitor'].search([], limit=1, order="id DESC")
        if 'parent_id' in self.env['website.visitor']:
        existing_visitors = self.env['website.visitor'].search([])
        existing_tracks = self.env['website.track'].search([])
        new_visitor = self.env['website.visitor'].search([('id', 'not in', existing_visitors.ids)])
        new_track = self.env['website.track'].search([('id', 'not in', existing_tracks.ids)])
            self.env['website.visitor'].search([('id', 'not in', (existing_visitors | visitor_admin).ids)]),
        new_visitors = self.env['website.visitor'].search([('id', 'not in', existing_visitors.ids)])
        new_visitors = self.env['website.visitor'].search([('id', 'not in', existing_visitors.ids)])
        visitor_anonymous = self.env['website.visitor'].with_context(active_test=False).search([('id', '=', visitor_anonymous.id)])
        new_visitors = self.env['website.visitor'].search([('id', 'not in', existing_visitors.ids)])
        visitor_admin = self.env['website.visitor'].search([('partner_id', '=', self.partner_admin.id)])
        new_visitors = self.env['website.visitor'].search([('id', 'not in', existing_visitors.ids)])
        new_visitors = self.env['website.visitor'].search([('id', 'not in', existing_visitors.ids)])
        self.env['ir.config_parameter'].sudo().set_param('website.visitor.live.days', 7)
        old_visitor = self.env['website.visitor'].create({
        self.env['website.visitor']._cron_archive_visitors()
        new_visitor = self.env['website.visitor'].search([('id', '=', new_visitor.id)])
            post_ids = self.env['blog.post'].with_context(active_test=False).search([
            parent_message = self.env['mail.message'].sudo().browse(parent_id)
                    subtype_id=self.env['ir.model.data']._xmlid_to_res_id('website_blog.mt_blog_blog_published'))
        user = access_uid and self.env['res.users'].sudo().browse(access_uid) or self.env.user
        self.user_portal = self.env['res.users'].with_context({'no_reset_password': True}).create({
        attachment = self.env['ir.attachment'].sudo().create({
        self.assertTrue(self.env['mail.message'].sudo().search(
        second_attachment = self.env['ir.attachment'].sudo().create({
        self.assertFalse(self.env['mail.message'].sudo().search(
        action = self.env["ir.actions.actions"]._for_xml_id("website.website_visitor_page_action")
        default=lambda self: self.env['crm.team'].search([], limit=1),
        self.test_partner = self.env['res.partner'].create({
        visitor_sudo = self.env['website.visitor'].sudo().create({
        lead_1 = self.env['crm.lead'].create({
        lead_2 = self.env['crm.lead'].create({
        leads = self.env['crm.lead'].read_group([
            self.env['bus.bus']._sendone(self.env.user.partner_id, 'mail.simple_notification', {
        action = self.env["ir.actions.actions"]._for_xml_id("crm.crm_lead_all_leads")
        action = self.env["ir.actions.actions"]._for_xml_id("crm.crm_lead_opportunities")
        self.env['crm.reveal.view']._clean_reveal_views()
        months_valid = self.env['ir.config_parameter'].sudo().get_param('reveal.lead_month_valid', DEFAULT_REVEAL_MONTH_VALID)
        leads = self.env['crm.lead'].with_context(active_test=False).search(domain)
        self.env['crm.reveal.view'].search([('reveal_ip', 'in', [lead.reveal_ip for lead in leads])]).unlink()
        account_token = self.env['iap.account'].get('reveal')
                self.env['crm.reveal.view'].search([('reveal_ip', '=', res['ip'])]).unlink()
                views = self.env['crm.reveal.view'].search([('reveal_ip', '=', res['ip'])])
            self.env['crm.iap.lead.helpers'].notify_no_more_credit('reveal', self._name, 'reveal.already_notified')
            views = self.env['crm.reveal.view'].search([
            self.env['ir.config_parameter'].sudo().set_param('reveal.already_notified', False)
        endpoint = self.env['ir.config_parameter'].sudo().get_param('reveal.endpoint', DEFAULT_ENDPOINT) + '/iap/clearbit/1/reveal'
        already_created_lead = self.env['crm.lead'].search([('reveal_id', '=', result['clearbit_id'])])
        lead = self.env['crm.lead'].create(lead_vals)
        lead_vals = self.env['crm.iap.lead.helpers'].lead_vals_from_response(self.lead_type, self.team_id.id, self.tag_ids.ids, self.user_id.id, company_data, people_data)
        weeks_valid = self.env['ir.config_parameter'].sudo().get_param('reveal.view_weeks_valid', DEFAULT_REVEAL_VIEW_WEEKS_VALID)
        rules = self.env['crm.reveal.rule']._match_url(website_id, url, country_code, state_code, rules_excluded)
            partner = self.env['res.partner'].browse(partner_id)
                result = self.env['res.partner']._geo_localize(
        partner_ids = self.env['res.partner'].search(
                    self.env['mail.activity'].sudo().create({
            user = self.env['res.users'].sudo().browse(access_uid)
        self.customer_uk = self.env['res.partner'].create({
        self.lead_uk = self.env['crm.lead'].create({
        partner_be = self.env['res.partner'].create({
        partner_uk = self.env['res.partner'].create({
        lead_forwarded = self.env['crm.lead.forward.to.partner'].with_context(context).create({})
        self.grade = self.env['res.partner.grade'].create({
        self.lead_portal = self.env['crm.lead'].with_context(mail_notrack=True).create({
        poor_portal_user = self.env['res.users'].with_context({'no_reset_password': True, 'mail_notrack': True}).create({
        data = self.env['crm.lead'].with_user(self.user_portal).create_opp_portal({
        opportunity = self.env['crm.lead'].browse(data['id'])
        salesmanteam = self.env['crm.team']._get_default_team_id(user_id=self.user_portal.user_id.id)
            leads = self.env['crm.lead'].browse(active_ids)
                partner = self.env['res.partner'].browse(partner_id)
            self.env['crm.lead'].message_subscribe([partner_id])
            portal_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')
        current_visitor = self.env['website.visitor']._get_visitor_from_request(force_create=False)
            events = self.env['event.registration'].sudo().search([
            events = self.env['event.registration'].sudo().search(
                root_menu = self.env['website.menu'].sudo().create({'name': event.name, 'website_id': event.website_id.id})
            page_result = self.env['website'].sudo().new_page(
        website_menu = self.env['website.menu'].sudo().create({
        self.env['website.event.menu'].create({
                search_tags = self.env['event.tag'].search([('id', 'in', tag_ids)])
                begin = self.env['ir.qweb.field.date'].record_to_html(event, 'date_begin', {})
                end = self.env['ir.qweb.field.date'].record_to_html(event, 'date_end', {})
            read_group_res = self.env['event.registration'].read_group(
        all_registrations = self.env['event.registration'].sudo().search([
            children = self.env['website.visitor'].with_context(
                visitor = self.env['website.visitor'].sudo()
                visitor = self.env['website.visitor'].sudo().with_context(active_test=False).search(
        return self.env['event.sponsor.type'].search([], order="sequence desc", limit=1).id
                sponsor.website_image_url = self.env['website'].image_url(sponsor, 'image_256', size=256)
                sponsor.website_image_url = self.env['website'].image_url(sponsor.partner_id, 'image_256', size=256)
                    room_name = self.env['chat.room']._default_name(objname='exhibitor')
                exhibitor_name = values['name'] if values.get('name') else self.env['res.partner'].browse(values['partner_id']).name
        event = self.env['event.event'].create({
        event = self.env['event.event'].create({
        return self.env['sale.order.line'].sudo().search(domain)
        order = self.env['sale.order'].sudo().browse(order_id)
            product = self.env['product.product'].browse(product_id)
            ticket = self.env['event.event.ticket'].browse(event_ticket_id)
            ticket = self.env['event.event.ticket'].search([('product_id', '=', product_id)], limit=1)
            attendees = self.env['event.registration'].search([
        self.event_2 = self.env['event.event'].create({
        self.env['event.event.ticket'].create([{
        self.env['account.journal'].create({'name': 'Cash - Test', 'type': 'cash', 'code': 'CASH - Test'})
        return self.env['event.track.stage'].search([], limit=1).id
                track.website_image_url = self.env['website'].image_url(track, 'website_image', size=1024)
        current_visitor = self.env['website.visitor']._get_visitor_from_request(force_create=False)
            event_track_visitors = self.env['event.track.visitor'].sudo().search_read(
        results = self.env['event.track.visitor'].read_group(
        track_visitors = self.env['event.track.visitor'].sudo().search([
                values['website_cta_url'] = self.env['res.partner']._clean_website(values['website_cta_url'])
            vals['website_cta_url'] = self.env['res.partner']._clean_website(vals['website_cta_url'])
            stage = self.env['event.track.stage'].browse(vals['stage_id'])
                'subtype_id': self.env['ir.model.data']._xmlid_to_res_id('mail.mt_note'),
        visitor_sudo = self.env['website.visitor']._get_visitor_from_request(force_create=force_visitor_create)
        track_visitors = self.env['event.track.visitor'].sudo().search(
            track_visitors += self.env['event.track.visitor'].sudo().create([{
            current_visitor = self.env['website.visitor']._get_visitor_from_request(force_create=False)
                event_track_visitors = self.env['event.track.visitor'].sudo().search_read(
        read_group_res = self.env['forum.post'].read_group(
            forum.count_posts_waiting_validation = self.env['forum.post'].search_count(domain)
            forum.count_flagged_posts = self.env['forum.post'].search_count(domain)
            forum.faq = self.env['ir.ui.view']._render_template('website_forum.faq_accordion', {"forum": forum})
            self.env['forum.post'].with_context(active_test=False).search([('forum_id', 'in', self.ids)]).write({'active': vals['active']})
        tags = self.env['forum.tag'].search([('forum_id', '=', self.id), ('posts_count', '>', 0)])
        for website in self.env['website'].sudo().search([]):
            website.forums_count = self.env['forum.forum'].sudo().search_count(website.website_domain())
        votes = self.env['forum.post.vote'].search_read([('post_id', 'in', self._ids), ('user_id', '=', self._uid)], ['vote', 'post_id'])
        read_group_res = self.env['forum.post.vote'].read_group([('post_id', 'in', self._ids)], ['post_id', 'vote'], ['post_id', 'vote'], lazy=False)
        forum = self.env['forum.forum'].browse(forum_id)
        res['default_opengraph']['og:image'] = res['default_twitter']['twitter:image'] = self.env['website'].image_url(self.create_uid, 'image_1024')
            answers = self.env['forum.post'].with_context(active_test=False).search([('parent_id', 'in', self.ids)])
                    subtype_id=self.env['ir.model.data']._xmlid_to_res_id('website_forum.mt_answer_new'))
                    subtype_id=self.env['ir.model.data']._xmlid_to_res_id('website_forum.mt_question_new'))
                    subtype_id=self.env['ir.model.data']._xmlid_to_res_id('mail.mt_note'))
        comment = self.env['mail.message'].sudo().browse(message_id)
            comment = self.env['mail.message'].sudo().browse(message_id)
                question_followers = self.env['mail.followers'].sudo().search([
                data['date'] = self.env['ir.qweb.field.date'].record_to_html(post, 'write_date', {})
            post = self.env['forum.post'].browse(vals.get('post_id'))
        forum = self.env['forum.forum'].browse(vals.get('forum_id'))
            applicant_job = self.env['hr.job'].sudo().search([('id', '=', values['job_id'])]).name if 'job_id' in values else False
            stage = self.env['hr.recruitment.stage'].sudo().search([
        default=lambda self: self.env["res.lang"].search([("code", "=", self.env.user.lang)], limit=1))
        jitsi_server_domain = self.env['ir.config_parameter'].sudo().get_param(
        results = self.env['mail.channel'].search_read(
        sessions = self.env['mail.channel'].search([('livechat_visitor_id', 'in', self.ids)])
        unavailable_visitors_count = self.env['mail.channel'].search_count([('livechat_visitor_id', 'in', self.ids), ('livechat_active', '=', True)])
            mail_channels = self.env['mail.channel'].create(mail_channel_vals_list)
            channel_members = self.env['mail.channel.partner'].sudo().search([
            self.env['bus.bus']._sendmany(notifications)
        self.operator = self.env['res.users'].create({
        self.livechat_channel = self.env['im_livechat.channel'].create({
        self.visitors = self.env['website.visitor'].create([{
        self.patch(type(self.env['im_livechat.channel']), '_get_available_users', get_available_users)
        self.patch(type(self.env['website.visitor']), '_get_visitor_from_request', get_visitor_from_request)
        res_model_id = self.env['ir.model'].sudo().search([('model', '=', channel._name)], limit=1).id
        rating = self.env['rating.rating'].search([('res_id', '=', channel.id), ('res_model_id', '=', res_model_id)])
        self.env['website.track'].create([{
        history = self.env['mail.channel']._get_visitor_history(self.visitor)
        channel_1 = self.env['mail.channel'].search([('livechat_visitor_id', '=', self.visitor.id), ('livechat_active', '=', True)], limit=1)
        channel_2 = self.env['mail.channel'].search([('livechat_visitor_id', '=', self.visitor.id), ('livechat_active', '=', True)], limit=1)
        channel = self.env['mail.channel'].search([('livechat_visitor_id', '=', self.visitor.id), ('livechat_active', '=', True)], limit=1)
        self.operator_b = self.env['res.users'].create({
        chat_request = self.env['mail.channel'].search([('livechat_visitor_id', '=', self.visitor.id), ('livechat_active', '=', True)])
        channel = self.env['mail.channel'].search([('livechat_visitor_id', '=', self.visitor.id),
        channel = self.env['mail.channel'].search([('livechat_visitor_id', '=', self.visitor.id), ('livechat_active', '=', True)])
        active_channels = self.env['mail.channel'].search([('livechat_visitor_id', '=', self.visitor.id), ('livechat_active', '=', True)])
        self.visitor_tour = self.env['website.visitor'].create({
        channel = self.env['mail.channel'].search([('livechat_visitor_id', '=', self.visitor_tour.id)])
        channel = self.env['mail.channel'].search([('livechat_visitor_id', '=', self.visitor_tour.id)])
        chat_request = self.env['mail.channel'].search([('livechat_visitor_id', '=', self.visitor_tour.id), ('livechat_active', '=', True)])
        channel = self.env['mail.channel'].search([('livechat_visitor_id', '=', self.visitor_tour.id), ('livechat_active', '=', True)])
        chat_request = self.env['mail.channel'].search([('livechat_visitor_id', '=', self.visitor_tour.id), ('livechat_active', '=', True)])
        channel = self.env['mail.channel'].search([('livechat_visitor_id', '=', self.visitor_tour.id), ('livechat_active', '=', True)])
        channel = self.env['mail.channel'].search([('livechat_visitor_id', '=',  self.visitor_tour.id)])
        profile_uuid = self.env['ir.config_parameter'].sudo().get_param('website_profile.uuid')
            self.env['ir.config_parameter'].sudo().set_param('website_profile.uuid', profile_uuid)
            abandoned_carts_data = self.env['sale.order'].read_group([
            confirmed_website_sales = self.env['sale.order'].search([
        return self.env['website'].search(domain, limit=1)
        for website in self.env['website'].search([]):
        if self.company_id and self.company_id != self.env["website"].browse(website_id).company_id:
        company_id = self.env["website"].browse(website_id).company_id.id
                category.parents_and_self = self.env['product.public.category'].browse([int(p) for p in category.parent_path.split('/')[:-1]])
        domain = self.env['website'].sale_product_domain()
        domain = self.env['website'].sale_product_domain()
            current_website = self.env['website'].get_current_website()
            product = (self.env['product.product'].browse(combination_info['product_id']) or self).with_context(context)
            fpos = self.env['account.fiscal.position'].sudo().get_fiscal_position(partner.id)
            combination_info['price'] = self.env['account.tax']._fix_tax_included_price_company(
                combination_info['list_price'] = self.env['account.tax']._fix_tax_included_price_company(
        variant = self.env['product.product'].browse(self._get_first_possible_variant_id())
        res['default_opengraph']['og:image'] = res['default_twitter']['twitter:image'] = self.env['website'].image_url(self, 'image_1024')
                data['price'] = self.env['ir.qweb.field.monetary'].value_to_html(combination_info['price'], monetary_options)
                    data['list_price'] = self.env['ir.qweb.field.monetary'].value_to_html(combination_info['list_price'], monetary_options)
        product = self.env['product.product'].browse(combination['product_id'])
        action = self.env["ir.actions.actions"]._for_xml_id("website_sale.action_open_website_sale_onboarding_payment_acquirer_wizard")
        website = self.env['website'].get_current_website()
        website_ids = self.env['website'].search_read(fields=['id', 'cart_abandoned_delay', 'partner_id'])
        product = self.env['product.product'].browse(product_id)
        return self.env['sale.order.line'].sudo().search(domain)
        product = self.env['product.product'].with_context(product_context).with_company(order.company_id.id).browse(product_id)
                    price = self.env['account.tax']._fix_tax_included_price_company(price, product.taxes_id, order_line[0].tax_id, self.company_id)
                    pu = self.env['account.tax']._fix_tax_included_price_company(pu, product.taxes_id, order_line[0].tax_id, self.company_id)
                    pu = self.env['account.tax']._fix_tax_included_price_company(pu, product.taxes_id, order_line[0].tax_id, self.company_id)
        SaleOrderLineSudo = self.env['sale.order.line'].sudo().with_context(product_context)
        product_with_context = self.env['product.product'].with_context(product_context)
            product_with_context = self.env['product.product'].with_context(product_context).with_company(order.company_id.id)
            for cgroup in self.env['res.country.group'].search([('country_ids.code', '=', country_code)]):
        return self.env['product.pricelist'].browse(pricelists)
            pl = self.env['product.pricelist'].browse(request.session['website_sale_current_pl'])
            self.env['account.payment.term'].sudo().search([('company_id', '=', self.company_id.id)], limit=1)
        salesperson_id = affiliate_id if self.env['res.users'].sudo().browse(affiliate_id).exists() else request.website.salesperson_id.id
            last_sale_order = self.env['sale.order'].sudo().search([('partner_id', '=', partner.id)], limit=1, order="date_order desc, id desc")
        if self.env['ir.config_parameter'].sudo().get_param('sale.use_sale_note'):
        sale_order = self.env['sale.order'].with_company(request.website.company_id.id).sudo().browse(sale_order_id).exists() if sale_order_id else None
                self.env['account.fiscal.position'].sudo()
        if self.env['product.pricelist'].browse(force_pricelist).exists():
            pricelist = self.env['product.pricelist'].browse(pricelist_id).sudo()
            sale_order = self.env['sale.order'].with_company(request.website.company_id.id).with_user(SUPERUSER_ID).create(so_data)
            code_pricelist = self.env['product.pricelist'].sudo().search([('code', '=', code)], limit=1)
            return self.env["ir.actions.actions"]._for_xml_id("website.backend_dashboard")
            result.append(self.env['product.public.category']._search_get_detail(self, order, options))
            result.append(self.env['product.template']._search_get_detail(self, order, options))
        results = self.env['website.track'].read_group(
        if product_id and self.env['product.product'].browse(product_id)._is_variant_possible():
        product_template = self.env['product.template'].create({
        tax = self.env['account.tax'].create({'name': "Test tax", 'amount': 10})
        product_attribute = self.env['product.attribute'].create({
        product_attribute_value_1 = self.env['product.attribute.value'].create({
        product_attribute_value_2 = self.env['product.attribute.value'].create({
        self.env['product.template.attribute.line'].create([{
        product_template_attribute_values = self.env['product.template.attribute.value'] \
        self.product_attribute_1 = self.env['product.attribute'].create({
        product_attribute_value_1 = self.env['product.attribute.value'].create({
        product_attribute_value_2 = self.env['product.attribute.value'].create({
        product_attribute_2 = self.env['product.attribute'].create({
        product_attribute_value_3 = self.env['product.attribute.value'].create({
        product_attribute_value_4 = self.env['product.attribute.value'].create({
        self.product_product_4_product_template = self.env['product.template'].create({
        self.env['product.template.attribute.line'].create([{
        product_attribute_value_7 = self.env['product.attribute.value'].create({
        self.product_product_11_product_template = self.env['product.template'].create({
        self.env['product.template.attribute.line'].create({
        self.product_product_1_product_template = self.env['product.template'].create({
        pricelists = self.env['website'].get_current_website().get_current_pricelist() | self.env.ref('product.list0')
                self.env['product.pricelist.item'].create({
        product_attribute = self.env['product.attribute'].create({
        product_attribute_values = self.env['product.attribute.value'].create([{
        product_template = self.env['product.template'].create({
        self.env['product.template.attribute.line'].create([{
        product_template_attribute_values = self.env['product.template.attribute.value'] \
        product_attribute = self.env['product.attribute'].create({
        product_attribute_values = self.env['product.attribute.value'].create([{
        product_template = self.env['product.template'].create({
        self.env['product.template.attribute.line'].create([{
        product_template_attribute_values = self.env['product.template.attribute.value'] \
        product_attribute_no_variant = self.env['product.attribute'].create({
        product_attribute_value_no_variant = self.env['product.attribute.value'].create({
        product_template = self.env['product.template'].create({
        ptal = self.env['product.template.attribute.line'].create([{
        config = self.env['res.config.settings'].create({})
        product_product_7 = self.env['product.product'].create({
        self.product_attribute_1 = self.env['product.attribute'].create({
        product_attribute_value_1 = self.env['product.attribute.value'].create({
        product_attribute_value_2 = self.env['product.attribute.value'].create({
        self.product_product_11_product_template = self.env['product.template'].create({
        self.env['product.template.attribute.line'].create({
        self.product_product_1_product_template = self.env['product.template'].create({
        self.env['account.journal'].create({'name': 'Cash - Test', 'type': 'cash', 'code': 'CASH - Test'})
        tax_group = self.env['account.tax.group'].create({'name': 'Tax 15%'})
        tax = self.env['account.tax'].create({
        self.product_product_7 = self.env['product.product'].create({
        self.env['res.config.settings'].create({
        self.env['website'].browse(1).write({'google_analytics_key': 'G-XXXXXXXXXXX'})
        return self.env['sale.order'].create({
                'product_id': self.env['product.product'].create({'name': 'Product A', 'list_price': 100}).id,
        self.company_a = self.env['res.company'].create({
        self.company_b = self.env['res.company'].create({
        self.company_c = self.env['res.company'].create({
        eur_pl = self.env['product.pricelist'].create({
        self.env['product.product'].create({
        self.customer = self.env['res.partner'].create({
        self.website0 = self.env['website'].create({
        self.website1 = self.env['website'].create({
        self.website2 = self.env['website'].create({
        self.so0 = self.env['sale.order'].create({
        self.so1 = self.env['sale.order'].create({
        self.so2 = self.env['sale.order'].create({
            mail = self.env["mail.mail"].search([
        product_attribute = self.env['product.attribute'].create({
        attr_values = self.env['product.attribute.value'].create([{
        template = self.env['product.template'].with_context(create_product_product=True).create({
        line = self.env['product.template.attribute.line'].create([{
        product_template_attribute_values = self.env['product.template.attribute.value'].search([('product_tmpl_id', '=', template.id)])
        self.env['product.product'].create({
        product = self.env['product.product'].create({
        product_image = self.env['product.image'].with_context(**additionnal_context).create([{
        product_attribute = self.env['product.attribute'].create({
        attr_values = self.env['product.attribute.value'].create([{
        template = self.env['product.template'].with_context(create_product_product=True).create({
        line = self.env['product.template.attribute.line'].create([{
        (self.env['product.pricelist'].search([]) - self.env.ref('product.list0')).write({'website_id': False, 'active': False})
        self.benelux = self.env['res.country.group'].create({
        self.list_benelux = self.env['product.pricelist'].create({
        item_benelux = self.env['product.pricelist.item'].create({
        self.list_christmas = self.env['product.pricelist'].create({
        item_christmas = self.env['product.pricelist.item'].create({
        list_europe = self.env['product.pricelist'].create({
        item_europe = self.env['product.pricelist.item'].create({
        ca_group = self.env['res.country.group'].create({
        self.env['product.pricelist'].create({
        return self.env['product.pricelist'].browse(pl_ids)
        product = self.env['product.product'].create({
        current_website = self.env['website'].get_current_website()
        promo_pricelist = self.env['product.pricelist'].create({
        so = self.env['sale.order'].create({
        product = self.env['product.product'].create({
        current_website = self.env['website'].get_current_website()
        so = self.env['sale.order'].create({
        return self.env['website'].browse(website_id)
            'website': self.env['website'].browse(website_id),
        return self.env['website']._get_pricelist_available(request, show_visible)
        self.env['ir.property'].search([('res_id', '=', 'res.partner,%s' % self.env.user.partner_id.id)]).unlink()
        c_BENELUX = self.env['res.country.group'].create({
        c_BE = self.env['res.country.group'].create({'name': 'Belgium', 'country_ids': [(6, 0, [self.BE.id])]})
        c_NL = self.env['res.country.group'].create({'name': 'Netherlands', 'country_ids': [(6, 0, [NL.id])]})
        test_company = self.env['res.company'].create({'name': 'Test Company'})
        self.env['product.pricelist'].create({
        self.company2 = self.env['res.company'].create({'name': 'Test Company'})
        self.c1_pl = self.env['product.pricelist'].create({
        self.c2_pl = self.env['product.pricelist'].create({
        irp1 = self.env['ir.property'].with_company(self.company1)._get("property_product_pricelist", "res.partner", self.demo_user.partner_id.id)
        irp2 = self.env['ir.property'].with_company(self.company2)._get("property_product_pricelist", "res.partner", self.demo_user.partner_id.id)
        current_website = self.env['website'].get_current_website()
        self.env['product.pricelist.item'].create({
        tax = self.env['account.tax'].create({'name': "Test tax", 'amount': 15})
        current_website = self.env['website'].get_current_website()
        (self.env['product.pricelist'].search([]) - pricelist).write({'active': False})
        test_product = self.env['product.template'].create({
        pricelist.item_ids = self.env['product.pricelist.item'].create({
        tax15 = self.env['account.tax'].create({'name': "Test tax 15", 'amount': 15})
        tax0 = self.env['account.tax'].create({'name': "Test tax 0", 'amount': 0})
        fpos = self.env['account.fiscal.position'].create({
        self.env['account.fiscal.position.tax'].create({
        current_website = self.env['website'].get_current_website()
        (self.env['product.pricelist'].search([]) - pricelist).write({'active': False})
        tax10 = self.env['account.tax'].create({'name': "Test tax 10", 'amount': 10, 'price_include': True, 'amount_type': 'percent'})
        tax0 = self.env['account.tax'].create({'name': "Test tax 0", 'amount': 0, 'price_include': True, 'amount_type': 'percent'})
        test_product = self.env['product.template'].create({
        pricelist.item_ids = self.env['product.pricelist.item'].create({
        fpos = self.env['account.fiscal.position'].create({
        self.env['account.fiscal.position.tax'].create({
        so = self.env['sale.order'].create({
        sol = self.env['sale.order.line'].create({
        existing_visitors = self.env['website.visitor'].search([])
        existing_tracks = self.env['website.track'].search([])
        product = self.env['product.product'].create({
        new_visitors = self.env['website.visitor'].search([('id', 'not in', existing_visitors.ids)])
        new_tracks = self.env['website.track'].search([('id', 'not in', existing_tracks.ids)])
        new_visitors = self.env['website.visitor'].search([('id', 'not in', existing_visitors.ids)])
        new_tracks = self.env['website.track'].search([('id', 'not in', existing_tracks.ids)])
        product = self.env['product.product'].create({
        new_visitors = self.env['website.visitor'].search([('id', 'not in', existing_visitors.ids)])
        new_tracks = self.env['website.track'].search([('id', 'not in', existing_tracks.ids)])
                self.env['sale.coupon.apply.code'].with_context(active_id=self.id).create({
                    order.website_order_line += self.env['sale.order.line'].new({
        coupon_to_reset = self.env['coupon.coupon'].search([
        public_category = self.env['product.public.category'].create({'name': 'Public Category'})
        large_cabinet = self.env['product.product'].create({
        free_large_cabinet = self.env['product.product'].create({
        ten_percent = self.env['product.product'].create({
        self.env['coupon.program'].search([]).write({'active': False})
        self.env['coupon.program'].create({
        self.env['coupon.program'].create({
        program = self.env['coupon.program'].create({
        self.env['coupon.generate.wizard'].with_context(active_id=program.id).create({}).generate_coupon()
        self.steve = self.env['res.partner'].create({
        self.empty_order = self.env['sale.order'].create({
        order.website_id = self.env['website'].browse(1)
        self.env['sale.order.line'].create({
            'product_id': self.env['product.product'].create({
        self.env['sale.coupon.apply.code'].with_context(active_id=order.id).create({
        program_website_id = self.env['coupon.program'].browse(self.env.context.get('default_program_id')).website_id
                tracker = self.env['link.tracker'].search([('url', '=', target_url)], limit=1)
                    tracker = self.env['link.tracker'].create({'url': target_url})
        return self.env['delivery.carrier'].sudo().search([('website_published', '=', True)]).available_carriers(address)
        office_chair = self.env['product.product'].create({
        self.product_delivery_poste = self.env['product.product'].create({
        self.carrier = self.env['delivery.carrier'].create({
        self.env['delivery.price.rule'].create([{
        self.env['account.journal'].create({'name': 'Cash - Test', 'type': 'cash', 'code': 'CASH - Test'})
        purchases += self.env['sale.order.line'].sudo().search_read(
        pricelists = self.env['website'].get_current_website().get_current_pricelist() | self.env.ref('product.list0')
            product = self.env['product.product'].sudo().browse(combination_info['product_id'])
            website = self.env['website'].get_current_website()
        self.company = self.env['res.company'].create({'name': 'Company C'})
        self.website = self.env['website'].create({'name': 'Website Company C'})
        self.warehouse_1 = self.env['stock.warehouse'].search([('company_id', '=', self.company.id)])
        self.warehouse_2 = self.env['stock.warehouse'].create({
        self.product_A = self.env['product.product'].create({
        self.product_B = self.env['product.product'].create({
        quants = self.env['stock.quant'].with_context(inventory_mode=True).create([{
        quants |= self.env['stock.quant'].with_context(inventory_mode=True).create({
        so = self.env['sale.order'].create({
            product = self.env['product.product'].sudo().browse(combination_info["product_id"])
        to_notify = self.env['product.wishlist'].search([('stock_notification', '=', True)])
                msg = self.env["mail.message"].sudo().new(dict(body=body_html, record_name=product.name))
                full_mail = self.env["mail.render.mixin"]._render_encapsulate(
                mail = self.env["mail.mail"].sudo().create(mail_values)
        wish = self.env['product.wishlist'].create({
        return self in self.env['product.wishlist'].current().mapped('product_id.product_tmpl_id')
        return self in self.env['product.wishlist'].current().mapped('product_id')
        self.env['product.template'].search([]).write({'website_published': False})
        self.product_attribute_1 = self.env['product.attribute'].create({
        product_attribute_value_1 = self.env['product.attribute.value'].create({
        product_attribute_value_2 = self.env['product.attribute.value'].create({
        product_attribute_2 = self.env['product.attribute'].create({
        product_attribute_value_3 = self.env['product.attribute.value'].create({
        product_attribute_value_4 = self.env['product.attribute.value'].create({
        self.product_product_4_product_template = self.env['product.template'].create({
        self.env['product.template.attribute.line'].create([{
        read_group_res = self.env['slide.slide.partner'].sudo().read_group(
            self.env['slide.slide.partner'].search(removed_slide_partner_domain).unlink()
            users = self.env['res.users'].sudo().search([('partner_id', 'in', list(partner_karma.keys()))])
                records = template_to_records.setdefault(template, self.env['slide.channel.partner'])
                    'message': self.env['mail.message'].sudo().new(dict(body=email_values['body_html'], record_name=record.channel_id.name)),
            self.env['mail.mail'].sudo().create(mail_mail_values)
        default=lambda self: self.env['ir.model.data']._xmlid_to_res_id('website_slides.slide_template_published'))
        default=lambda self: self.env['ir.model.data']._xmlid_to_res_id('website_slides.slide_template_shared'))
        default=lambda self: self.env['ir.model.data']._xmlid_to_res_id('website_slides.mail_template_channel_completed'))
        read_group_res = self.env['slide.channel.partner'].sudo().read_group([('channel_id', 'in', self.ids)], ['channel_id'], 'channel_id')
        read_group_res = self.env['slide.channel.partner'].sudo().read_group(['&', ('channel_id', 'in', self.ids), ('completed', '=', True)], ['channel_id'], 'channel_id')
        channel_partners = self.env['slide.channel.partner'].sudo().search([
        keys = ['nbr_%s' % slide_type for slide_type in self.env['slide.slide']._fields['slide_type'].get_values(self.env)]
        read_group_res = self.env['slide.slide'].read_group(
        slide_types = self.env['slide.slide']._fields['slide_type'].get_values(self.env)
        current_user_info = self.env['slide.channel.partner'].sudo().search(
        new_published_slides = self.env['slide.slide'].sudo().search([
        slide_partner_completed = self.env['slide.slide.partner'].sudo().search([
            self._action_add_members(self.env['res.users'].sudo().browse(vals['user_id']).partner_id)
            parent_message = self.env['mail.message'].sudo().browse(parent_id)
        action = self.env["ir.actions.actions"]._for_xml_id("website_slides.slide_channel_partner_action")
            existing = self.env['slide.channel.partner'].sudo().search([
            slide_partners_sudo = self.env['slide.channel.partner'].sudo().create(to_create_values)
        return self.env['slide.channel.partner'].sudo()
        slide_completed = self.env['slide.slide.partner'].sudo().search([
        channel_completed = self.env['slide.channel.partner'].sudo().search([
        users = self.env['res.users'].sudo().search([
            self.env['slide.channel.partner'].sudo().search(removed_channel_partner_domain).unlink()
        action = self.env["ir.actions.actions"]._for_xml_id("website_slides.slide_slide_action")
        action = self.env["ir.actions.actions"]._for_xml_id("website_slides.rating_rating_action_slide_channel")
        partner = self.env['res.partner'].browse(partner_id).exists()
        partner = self.env['res.partner'].browse(partner_id).exists()
        all_categories = self.env['slide.slide'].sudo().search([('channel_id', '=', self.id), ('is_category', '=', True)])
        all_slides = self.env['slide.slide'].sudo().search(base_domain, order=order)
            self.env['slide.slide'].browse([slide_id]).sequence = index + 1
            for i, record in enumerate(self.env['slide.slide'].browse(ids_to_resequence)):
                'sequence': self.env['slide.slide'].browse(ids_to_resequence[-1]).sequence + 1
        self.env['slide.channel.partner'].search([
        slide_partners = self.env['slide.slide.partner'].sudo().search([
        read_group_res = self.env['slide.slide.partner'].sudo().read_group(
        keys = ['nbr_%s' % slide_type for slide_type in self.env['slide.slide']._fields['slide_type'].get_values(self.env)]
        res = self.env['slide.slide'].read_group(
        slide_types = self.env['slide.slide']._fields['slide_type'].get_values(self.env)
        slide_partners = self.env['slide.slide.partner'].sudo().search([
        channel = self.env['slide.channel'].browse(values['channel_id'])
        SlidePartnerSudo = self.env['slide.slide.partner'].sudo()
        SlidePartnerSudo = self.env['slide.slide.partner'].sudo()
        SlidePartnerSudo = self.env['slide.slide.partner'].sudo()
        slide_partners = self.env['slide.slide.partner'].sudo().search([
        key = self.env['website'].get_current_website().website_slide_google_app_key
            access_token = self.env['google.drive.config'].get_access_token()
            params['key'] = self.env['website'].get_current_website().website_slide_google_app_key
        res['default_opengraph']['og:image'] = res['default_twitter']['twitter:image'] = self.env['website'].image_url(self, 'image_1024')
        self.channel_2 = self.env['slide.channel'].with_user(self.user_officer).create({
        self.slide_2_0 = self.env['slide.slide'].with_user(self.user_officer).create({
        self.slide_2_1 = self.env['slide.slide'].with_user(self.user_officer).create({
        membership = self.env['slide.channel.partner'].create({
        self.env['slide.channel.partner'].create({
        self.channel_partner = self.env['slide.channel.partner'].create({
        self.slide_partner = self.env['slide.slide.partner'].create({
        self.assertFalse(self.env['slide.channel.partner'].search([('id', '=', '%d' % id_channel_partner)]))
        self.assertFalse(self.env['slide.slide.partner'].search([('id', '=', '%d' % id_slide_partner)]))
        user_employees = self.env['res.users'].search([('groups_id', 'in', self.ref('base.group_user'))])
        channel = self.env['slide.channel'].with_user(self.user_officer).create({
        new_user = self.env['res.users'].create({
        new_user_2 = self.env['res.users'].create({
        new_user_3 = self.env['res.users'].create({
        other_category = self.env['slide.slide'].with_user(self.user_officer).create({
        self.env['slide.channel'].create({
            signup_allowed = self.env['res.users'].sudo()._get_signup_invitation_scope() == 'b2c'
                invalid_partners = self.env['res.partner'].search([
            template = self.env['mail.template'].browse(values['template_id'])
        self.env['mail.mail'].sudo().create(mail_values)
                    'message': self.env['mail.message'].sudo().new(dict(body=mail_values['body_html'], record_name=self.channel_id.name)),
                    'model_description': self.env['ir.model']._get('slide.channel').display_name,
                mail_values['body_html'] = self.env['mail.render.mixin']._replace_local_links(body)
        action = self.env["ir.actions.actions"]._for_xml_id("website_forum.action_forum_post")
        succeeded_user_inputs = self.env['survey.user_input'].sudo().search([
                        invite_token=self.env['survey.user_input']._generate_invite_token()
        self.user_direction = self.env['res.lang']._lang_get(
            self.env['ir.qweb'].clear_caches()
        return self.env['ir.attachment'].sudo().browse(attachment_ids)
            self.env['bus.bus']._sendone('broadcast', 'bundle_changed', {
                attachments = self.env['ir.attachment'].sudo().search(assets_domain)
        todos = self.env['ir.actions.todo'].search([('action_id', 'in', self.ids)])
                action = self.env[action_model].sudo().browse(action_id)
        assert isinstance(self.env[record._name], type(self))
            fvg = self.env[act.res_model].fields_view_get(act.search_view_id.id, 'search')
                vals['name'] = self.env[vals['res_model']]._description
            self.env[self.model_id.model].browse(self._context.get('active_id')).write(res)
        res = self.env[self.crud_model_id.model].create(res)
            record = self.env[self.model_id.model].browse(self._context.get('active_id'))
                    self.env[action.model_name].check_access_rights("write")
        return [(model.model, model.name) for model in self.env['ir.model'].sudo().search([])]
                    if not self.env[line.col1.relation].browse(value).exists():
                        record = list(self.env[line.col1.relation]._search([], limit=1))
                    record = list(self.env[line.col1.relation]._search([], limit=1))
        action = self.env[action_type].browse(self.action_id.id)
            action.model_id = self.env['ir.model']._get(action.model).id
            names = self.env['ir.model'].name_search(value, operator=operator)
            ir_model = self.env['ir.model'].browse(ir_model_ids)
            model = self.env['ir.model']._get(report.model)
        return self.env['ir.attachment'].search([
            self.env['ir.attachment'].create(attachment_vals)
        IrConfig = self.env['ir.config_parameter'].sudo()
        layout = self.env['ir.ui.view'].browse(self.env['ir.ui.view'].get_view_id('web.minimal_layout'))
        context = self.env['res.users'].context_get()
        user = self.env['res.users'].browse(self.env.uid)
        view_obj = self.env['ir.ui.view'].sudo().with_context(context)
            web_base_url=self.env['ir.config_parameter'].sudo().get_param('web.base.url', default=''),
            record_map = {r.id: r for r in self.env[self.model].browse([res_id for res_id in res_ids if res_id])}
            docs = self.env[self.model].sudo(False).browse(docids)
            action = self.env["ir.actions.actions"]._for_xml_id("web.action_base_document_layout_configurator")
                record = self.env[attachment.res_model].browse(attachment.res_id)
        return self.env['ir.config_parameter'].sudo().get_param('ir_attachment.location', 'file')
        ICP = self.env['ir.config_parameter'].sudo().get_param
            self.env['ir.attachment'].flush(['res_model', 'res_id', 'create_uid', 'public', 'res_field'])
            records = self.env[res_model].browse(res_ids).exists()
            if not self.env[res_model].check_access_rights('read', False):
            allowed = self.env[res_model].with_context(active_test=False).search([('id', 'in', target_ids)])
        return self.env['ir.actions.act_window']._for_xml_id('base.action_attachment')
            self.env['ir.actions.server'].browse(server_action_id).run()
        active = bool(self.env[model].search_count(domain))
        self.env['ir.cron.trigger'].sudo().create([
        field = self.env['ir.model.fields']._get(model_name, field_name)
        field = self.env['ir.model.fields']._get(model_name, field_name)
        field = self.env['ir.model.fields']._get(model_name, field_name)
                current_field_name = self.env[field.comodel_name]._fields[f].string
        ).for_model(self.env[field.comodel_name])
        self.env['ir.model.data']._update_xmlids([
            record = self.env[model].browse(int(id))
                field_attachment = self.env['ir.attachment'].sudo().search_read(domain=[('res_model', '=', model), ('res_id', '=', record.id), ('res_field', '=', field)], fields=['datas', 'mimetype', 'checksum'], limit=1)
        get_param = self.env['ir.config_parameter'].sudo().get_param
        get_param = self.env['ir.config_parameter'].sudo().get_param
            parent_names = list(self.env[model.model]._inherits)
        installed_modules = self.env['ir.module.module'].search([('state', '=', 'installed')])
            model.view_ids = self.env['ir.ui.view'].search([('model', '=', model.model)])
        self.env['ir.model.fields'].search([('relation', 'in', self.mapped('model'))]).unlink()
            self._reflect_model_params(self.env[model_name])
        self.env['ir.model.data']._update_xmlids(data_list)
                rec.selection = str(self.env['ir.model.fields.selection']._get_selection(rec.id))
            self.env['ir.model.fields.selection']._update_selection(rec.model, rec.name, selection)
        installed_modules = self.env['ir.module.module'].search([('state', '=', 'installed')])
        rel1 = self.env[model_name]._table
        rel2 = self.env[comodel_name]._table
        fields = [self.env[record.model]._pop_field(record.name) for record in self]
        views = self.env['ir.ui.view'].search(domain)
            model_data = self.env['ir.model'].browse(vals['model_id'])
            if vals.get('relation') and not self.env['ir.model'].search([('model', '=', vals['relation'])]):
            model_id = self.env['ir.model']._get_id(model_name)
            for field in self.env[model_name]._fields.values():
                    field_name in self.env[parent]._fields
        self.env['ir.model.data']._update_xmlids(data_list)
            attrs['selection'] = self.env['ir.model.fields.selection']._get_selection_data(field_data['id'])
                    field_data['relation_field'] in self.env[field_data['relation']]._fields or
            for field_name, field in self.env[model_name]._fields.items()
        self.env['ir.model.data']._update_xmlids(data_list)
        field_id = self.env['ir.model.fields']._get_ids(model_name)[field_name]
        for field in self.env['ir.model.fields'].browse(field_ids):
                        table=self.env[selection.field_id.model]._table,
                table = self.env[data.model.model]._table    
            self._reflect_model(self.env[model_name])
        self.env['ir.model.data']._update_xmlids(data_list)
            document_kind = self.env['ir.model']._get(model).name or model
                getattr(self.env[model], method)()
                ng = self.env[model].browse(id_name).name_get()
        if self.env[model].search([('id', '=', res_id)]):
        for ir_field in self.env['ir.model.fields'].browse(field_ids):
                    f.model in self.env and self.env[f.model]._log_access
            delete(self.env[model].browse(item[1] for item in items))
        modules = self.env['ir.module.module'].search([('name', 'in', modules_to_remove)])
        delete(self.env['ir.model.constraint'].browse(unique(constraint_ids)))
        constraints = self.env['ir.model.constraint'].search([('module', 'in', modules.ids)])
        delete(self.env['ir.model.fields.selection'].browse(unique(selection_ids)).exists())
        delete(self.env['ir.model.fields'].browse(unique(field_ids)))
        relations = self.env['ir.model.relation'].search([('module', 'in', modules.ids)])
        delete(self.env['ir.model'].browse(unique(model_ids)))
            record = self.env[data.model].browse(data.res_id)
            for inheriting in (self.env[m] for m in Model._inherits_children):
        self.env['ir.ui.view']._create_all_specific_views(modules)
        record = self.env[model].browse(res_id)
            model = self.env['ir.model'].browse(self._context.get('model_id'))
            action_id = self.env['ir.actions.act_window'].create(vals)
            self.env['ir.ui.menu'].create({
        for data in self.env['ir.model.data'].sudo().search_read(domain, ['module', 'name', 'res_id']):
        IrModelData = self.env['ir.model.data'].with_context(active_test=True)
                return self.env[model].browse(imd_models[model]).exists()
        exclusives = self.env['ir.module.category'].search([('exclusive', '=', True)])
        self.env['ir.model.data']._module_data_uninstall(modules_to_remove)
        orphans = self.env['ir.ui.view'].with_context(**{'active_test': False, MODULE_UNINSTALL_FLAG: True}).search(domain)
        config = self.env['ir.module.module'].next() or {}
        menu = self.env['ir.ui.menu'].search([('parent_id', '=', False)])[:1]
        self.env['ir.model.data'].create(module_metadata)
            langs = self.env['res.lang'].get_installed()
        self.env['ir.translation']._load_module_terms(mod_names, filter_lang, overwrite)
            records = self.env['ir.module.category'].search_read(domain, ['display_name'], order="sequence")
                    record['__count'] = self.env['ir.module.module'].search_count(model_domain)
        mods = self.env['ir.module.module'].search([('name', 'in', names)])
        modules = self.env['ir.module.module'].browse(set(value))
        mods = self.env['ir.module.module'].search([('name', 'in', names)])
        modules = self.env['ir.module.module'].browse(set(value))
        limit = self.env['ir.config_parameter'].sudo().get_param('base.profiling_enabled_until', '')
        self.env['ir.config_parameter'].set_param('base.profiling_enabled_until', self.expiration)
                    field_id = self.env['ir.model.fields'].browse(field_id)
            return self.env[model].browse(int(resource_id)).exists()
        field_id = self.env['ir.model.fields']._get(model, name).id
                'type': self.env[model]._fields[name].type,
            return self.env[v[0]].browse(v[1])
        field_id = self.env['ir.model.fields']._get(model, prop_name).id
        field = self.env[model]._fields[name]
        field_id = self.env['ir.model.fields']._get(model, name).id
        field_id = self.env['ir.model.fields']._get(model, name).id
                    'type': self.env[model]._fields[name].type,
        field = self.env[model]._fields[name]
        view_id = self.env['ir.ui.view'].get_view_id(name)
            view_id = self.env['ir.ui.view'].get_view_id(view_name)
            view = self.env['ir.ui.view'].sudo().browse(view_id)
        asset_paths = self.env['ir.asset']._get_asset_paths(bundle=bundle, css=True, js=True)
        converter = self.env[model] if model in self.env else self.env['ir.qweb.field']
        converter = self.env[model] if model in self.env else self.env['ir.qweb.field']
            precision = self.env['decimal.precision'].precision_get(options['decimal_precision'])
                company = self.env['res.company'].browse(company_id)
        barcode = self.env['ir.actions.report'].barcode(
        return self.env['ir.qweb']._render('base.contact', val, **template_options)
            query = self.env[model_name].sudo()._where_calc(dom, active_test=False)
        return [], [], ['"%s"' % self.env[model_name]._table]
        description = self.env['ir.model']._get(model).name or model
        seq_date = self.env['ir.sequence.date_range'].search(
        date_range = self.env['ir.sequence.date_range'].search([('sequence_id', '=', self.id), ('date_from', '>=', date), ('date_from', '<=', date_to)], order='date_from desc', limit=1)
        date_range = self.env['ir.sequence.date_range'].search([('sequence_id', '=', self.id), ('date_to', '>=', date_from), ('date_to', '<=', date)], order='date_to desc', limit=1)
        seq_date_range = self.env['ir.sequence.date_range'].sudo().create({
        seq_date = self.env['ir.sequence.date_range'].search([('sequence_id', '=', self.id), ('date_from', '<=', dt), ('date_to', '>=', dt)], limit=1)
        return self.env['res.lang'].get_installed()
        fields = self.env['ir.model.fields'].sudo().search([('model', '=', model_name)])
        fields = self.env['ir.model.fields'].sudo().search([('model', '=', model_name)])
        field = self.env['ir.model.fields']._get(model_name, field_name)
            records = self.env[mname].browse(ids)
        if any(self.env[model]._fields[field].translate for model, ids in self.env.all.towrite.items() for record_id, fields in ids.items() for field in fields):
        if not self.env['res.lang'].search_count([('code', '!=', main_lang)]):
        record = self.env[model].with_context(lang=main_lang).browse(id)
        fields = self.env['ir.model.fields'].search([('model', '=', model_name)])
            mods = [x['name'] for x in self.env['ir.module.module'].sudo().search_read(
        langs = self.env['res.lang']._lang_get(lang)
        messages = self.env['ir.translation'].sudo().search_read([
            'multi_lang': len(self.env['res.lang'].sudo().get_installed()) > 1,
        menuitems = self.env['ir.model.data'].sudo().search([
                return m.group('prefix') + str(self.env['ir.model.data']._xmlid_to_res_id(xmlid))
        for data in self.env['ir.model.data'].sudo().search_read(domain, ['res_id'], order='id desc'):
        data = self.env['ir.model.data'].sudo().search(domain)
        for data in self.env['ir.model.data'].sudo().search_read(domain, ['module', 'name', 'res_id']):
        custom_view = self.env['ir.ui.view.custom'].search([('ref_id', 'in', self.ids)])
        e = expression(domain, self.env['ir.ui.view'])
                    comodel = self.env[field.comodel_name].sudo(False)
        model = self.env[model_name].with_context(lang=None)
                    model, action_id = self.env['ir.model.data']._xmlid_to_res_model_res_id(name, raise_if_not_found=False)
                action = self.env['ir.actions.actions'].browse(action_id).exists()
                    if not self.env['ir.model.data']._xmlid_to_res_id(group.strip(), raise_if_not_found=False):
        return view and view.id or self.env['ir.model.data']._xmlid_to_res_id(template, raise_if_not_found=True)
        xmlid = self.env['ir.model.data'].sudo().search_read(domain, ['module', 'name'])[0]
        return self.env[engine]._render(self.id, qcontext)
            user_id=self.env["res.users"].browse(self.env.user.id),
        return self.env['ir.translation'].translate_fields('ir.ui.view', self.id, 'arch_db')
        partner = self.env['res.partner'].create({
            currency = self.env['res.currency'].browse(vals['currency_id'])
            currency = self.env['res.currency'].browse(values['currency_id'])
        return self.env['res.config.settings'].open_company()
            docids = self.env[active_model].browse(active_ids)
            return (self.env['ir.actions.report'].search([('report_name', '=', report_name)], limit=1)
        action = self.env["ir.actions.actions"]._for_xml_id("base.action_open_base_onboarding_company")
            main_company = self.env['res.company'].sudo().search([], limit=1, order="id")
        return self.env['ir.module.module'].search([('name', 'in', selectable),
        can_install_modules = self.env['ir.module.module'].check_access_rights(
        ModuleSudo = self.env['ir.module.module'].sudo()
        IrConfigParameter = self.env['ir.config_parameter'].sudo()
                        value = self.env[field.comodel_name].browse(int(value)).exists().id
        IrDefault = self.env['ir.default'].sudo()
        IrConfigParameter = self.env['ir.config_parameter'].sudo()
        config = self.env['res.config'].next() or {}
        actions = self.env['ir.actions.act_window'].search([('res_model', '=', self._name)], limit=1)
        action = self.env['ir.actions.act_window'].search([('res_model', '=', self._name)], limit=1)
        return self.env[model_name].fields_get([field_name])[field_name]['string']
                address_fields = self.env['res.partner']._formatting_address_fields() + ['state_code', 'state_name', 'country_code', 'country_name', 'company_name']
        self.env['res.currency.rate'].flush(['rate', 'currency_id', 'company_id', 'name'])
        company = self.env['res.company'].browse(self._context.get('company_id')) or self.env.company
        last_rate = self.env['res.currency.rate']._get_last_rates_for_companies(company)
        company = self.env['res.company'].browse(self._context.get('company_id')) or self.env.company
        company = self.env['res.company'].browse(self._context.get('company_id')) or self.env.company
            currency_name = (self.env['res.company'].browse(self._context.get('company_id')) or self.env.company).currency_id.name
        last_rate = self.env['res.currency.rate']._get_last_rates_for_companies(self.company_id | self.env.company)
        last_rate = self.env['res.currency.rate']._get_last_rates_for_companies(self.company_id | self.env.company)
                    lang_id = self.env['res.lang']._search([('code', '=', self._context['lang'])], access_rights_uid=name_get_uid)
                'company_currency_name': (self.env['res.company'].browse(self._context.get('company_id')) or self.env.company).currency_id.name,
                'rate_currency_name': self.env['res.currency'].browse(self._context.get('active_id')).name or 'Unit',
            mods = self.env['ir.module.module'].search([('state', '=', 'installed')])
            if self.env['res.users'].search_count([('lang', 'in', lang_codes)]):
            if self.env['res.partner'].search_count([('lang', 'in', lang_codes)]):
            self.env['ir.default'].discard_values('res.partner', 'lang', lang_codes)
            self.env['ir.translation'].search([('lang', '=', language.code)]).unlink()
    return self.env['res.lang'].get_installed()
                Partner = self.env['res.partner'].with_context(no_address_format=True)
                        self.env['ir.ui.view'].postprocess_and_fields(sub_view_node, model=self._name)
        return self.env['res.partner.category'].browse(self._context.get('category_id'))
        lang_count = len(self.env['res.lang'].get_installed())
        super_partner = self.env['res.users'].browse(SUPERUSER_ID).partner_id
        if self.env['res.partner'].search_count([('barcode', '=', self.barcode)]) > 1:
            users = self.env['res.users'].sudo().search([('partner_id', 'in', self.ids)])
                if self.env['res.users'].sudo(False).check_access_rights('write', raise_exception=False):
                    company = self.env['res.company'].browse(company_id)
                self.env['res.users'].check_access_rights('write')
        users = self.env['res.users'].sudo().search([('partner_id', 'in', self.ids)])
        if self.env['res.users'].sudo(False).check_access_rights('write', raise_exception=False):
                category=self.env['res.partner.category'].browse(self.env.context['category_id']).name,
            self.env['ir.model.access'].call_cache_clearing_methods()
            self.env['res.users'].has_group.clear_cache(self.env['res.users'])
        default_user_id = self.env['ir.model.data']._xmlid_to_res_id('base.default_user', raise_if_not_found=False)
        return self.env['res.users'].browse(default_user_id).sudo().groups_id if default_user_id else []
        user_group_id = self.env['ir.model.data']._xmlid_to_res_id('base.group_user')
        self.companies_count = self.env['res.company'].sudo().search_count([])
        user_types_groups = self.env['res.groups'].search(
            self.env['ir.model.access'].call_cache_clearing_methods()
        self.env['res.users.log'].create({}) # populated by defaults
        cfg = self.env['ir.config_parameter'].sudo()
        self.env['ir.actions.actions'].clear_caches()
        self.env['ir.actions.actions'].clear_caches()
        self.env['ir.actions.actions'].clear_caches()
            res.append((self.env['ir.module.category'], 'boolean', others, (100,'Other')))
            self.env["res.groups"]._update_user_groups_view()
        self.env["res.groups"]._update_user_groups_view()
        group_multi_company_id = self.env['ir.model.data']._xmlid_to_res_id(
                sel_groups = self.env['res.groups'].sudo().browse(get_selection_groups(f))
        for app, kind, gs, category_name in self.env['res.groups'].sudo().get_groups_by_application():
            for user in self.env['res.users'].browse(user_ids)
        if self.env['res.users.apikeys']._check_credentials(scope='rpc', key=password) == self.env.uid:
        k = self.env['res.users.apikeys']._generate(None, self.sudo().name)
            return 'company_%s_%s' % (counter, self.env['res.currency'].browse(values['currency_id']).name)
        active_currencies = self.env['res.currency'].search([('active', '=', True)]).ids
                self.env['res.currency'].browse(values['currency_id']).name
        company_ids = self.env['res.company'].search([
            ('currency_id', populate.randomize(self.env['res.currency'].search([('active', '=', True)]).ids)),
                ('country_id', populate.randomize([False] + self.env['res.country'].search([]).ids)),
        states = self.env['res.country.state'].search([])
            ('title', populate.randomize(self.env['res.partner.title'].search([]).ids)),
            ('tz', populate.randomize([tz for tz in self.env['res.partner']._fields['tz'].get_values(self.env)])),
        companies_partners = collections.defaultdict(lambda: self.env['res.partner'])
            partner_factories = self.env['res.partner']._populate_factories()
        self.user_demo = self.env['res.users'].search([('login', '=', 'demo')])
            self.env['ir.config_parameter'].sudo().set_param('auth_password_policy.minlength', 4)
            self.partner_demo = self.env['res.partner'].create({
            self.user_demo = self.env['res.users'].create({
        self.user_demo = self.env['res.users'].search([('login', '=', 'demo')])
            self.env['ir.config_parameter'].sudo().set_param('auth_password_policy.minlength', 4)
            self.partner_demo = self.env['res.partner'].create({
            self.user_demo = self.env['res.users'].create({
        self.user_portal = self.env['res.users'].search([('login', '=', 'portal')])
            self.env['ir.config_parameter'].sudo().set_param('auth_password_policy.minlength', 4)
            self.partner_portal = self.env['res.partner'].create({
            self.user_portal = self.env['res.users'].with_context(no_reset_password=True).create({
        currency = self.env['res.currency'].with_user(self.user_demo)
        extension = self.env["ir.ui.view"].create({
        partner = self.env['res.partner'].browse(1).with_user(self.user_demo)
        partner = self.env['res.partner'].with_user(self.user_demo)
        company = self.env['res.company'].with_user(self.user_demo)
        company = self.env['res.company'].with_user(self.user_demo)
        company = self.env['res.company'].with_user(self.user_demo)
        company = self.env['res.company'].with_user(self.user_demo)
        rule1 = self.env['ir.rule'].create({
        partners_demo = self.env['res.partner'].with_user(self.user_demo)
        rule2 = self.env['ir.rule'].create({
        rule3 = self.env['ir.rule'].create({
        group_test = self.env['res.groups'].create({
        self.env['ir.rule'].search([('groups', '=', False)]).unlink()
        partners = self.env['res.partner'].search(domain)
        partners1 = self.env['res.partner'].search([('id', 'in', self.partners.ids)], offset=5)
        partners2 = self.env['res.partner'].search([('id', 'in', self.partners.ids)])[5:]
        partners1 = self.env['res.partner'].search([('id', 'in', self.partners.ids)], order='id asc', limit=5)
        partners2 = self.env['res.partner'].search([('id', 'in', self.partners.ids)], order='id asc')[:5]
        partners1 = self.env['res.partner'].search([('id', 'in', self.partners.ids)], order='id asc', offset=3, limit=7)
        partners2 = self.env['res.partner'].search([('id', 'in', self.partners.ids)], order='id asc')[3:10]
        count2 = self.env['res.partner'].search([], count=True)
        partners = self.env['res.partner'].search(domain)
        partners2 = self.env['res.partner'].search(domain)
        partner = self.env['res.partner'].search([('parent_id', '=', False), ('id', 'in', self.partners.ids)])[0]
        partners = self.env['res.partner'].search([('name', 'ilike', 'g'), ('id', 'in', self.partners.ids)])
        partners = self.env['res.partner'].search([('name', 'ilike', 'g'), ('id', 'in', self.partners.ids)])
        partners = self.env['res.partner'].search([('name', 'ilike', 'j'), ('id', 'in', self.partners.ids)])
        demo = self.env['res.users'].create({
        demo_partner = self.env['res.partner'].search([('name', '=', 'Landon Roberts')]).with_user(demo)
        partners = self.env['res.partner'].search([('id', 'in', self.partners.ids)], limit=models.PREFETCH_MAX)
        partners = self.env['res.partner'].search([('id', 'in', self.partners.ids)], limit=models.PREFETCH_MAX)
        ps = self.env['res.partner'].search([('name', 'ilike', 'a'), ('id', 'in', self.partners.ids)])
        p0 = self.env['res.partner'].browse()
        p1 = self.env['res.partner'].search([('name', 'ilike', 'a'), ('id', 'in', self.partners.ids)], limit=1).ensure_one()
        ps = self.env['res.partner'].search([('name', 'ilike', 'a'), ('id', 'in', self.partners.ids)])
        pa = self.env['res.partner'].search([('name', 'ilike', 'a'), ('id', 'in', self.partners.ids)])
        pb = self.env['res.partner'].search([('name', 'ilike', 'b'), ('id', 'in', self.partners.ids)])
        ms = self.env['ir.ui.menu'].search([])
        ps = self.env['res.partner'].search([('id', 'in', self.partners.ids)])
        partner = self.env['res.partner'].find_or_create(test_string)
        partner = self.env['res.partner'].browse(
            self.env['res.partner'].with_context(
        partner = self.env['res.partner'].browse(
            self.env['res.partner'].with_context(
        title_sir = self.env['res.partner.title'].create({'name': 'Sir...'})
        title_lady = self.env['res.partner.title'].create({'name': 'Lady...'})
        test_partner = self.env['res.partner'].create({'name':'test partner'})
        test_user = self.env['res.users'].create({
        all_groups = self.env['res.groups'].search([])
        a = self.env['res.groups'].create({'name': 'A'})
        b = self.env['res.groups'].create({'name': 'B'})
        c = self.env['res.groups'].create({'name': 'G', 'implied_ids': [Command.set((a + b).ids)]})
        d = self.env['res.groups'].create({'name': 'D', 'implied_ids': [Command.set(c.ids)]})
        a = self.env['res.groups'].with_context(lang='en_US').create({'name': 'A'})
        user = self.env['res.users'].browse(SUPERUSER_ID)
        self.env['res.partner'].create({'name': 'test_per_class_teardown_partner'})
        partners = self.env['res.partner'].search([('name', '=', 'test_per_class_teardown_partner')])
        partners = self.env['res.partner'].search([('name', '=', 'test_per_class_teardown_partner')])
        pid, _ = self.env['res.partner'].name_create('Mr Blue')
        self.env['ir.model.data'].create({'name': 'test_partner_blue',
        partners = self.env['res.partner'].search([('name', '=', 'test_per_class_teardown_partner')])
        self.env['res.partner'].create({'name': 'test_per_class_teardown_partner'})
        partners = self.env['res.partner'].search([('name', '=', 'test_per_class_teardown_partner')])
        partners = self.env['res.partner'].search([('name', '=', 'test_per_class_teardown_partner')])
        pid, _ = self.env['res.partner'].name_create('Mr Yellow')
        self.env['ir.model.data'].create({'name': 'test_partner_yellow',
        self.record = self.env['res.partner'].create({'name': 'Foo'})
        Partner = self.env['res.partner'].with_user(self.user_demo)
        self.env['ir.rule'].search([]).unlink()
        self.env['ir.rule'].create({
            'model_id': self.env['ir.model']._get('res.partner').id,
        Bank = self.env['res.partner.bank'].with_user(self.user_demo)
        currency = self.env['res.currency'].search([], limit=1)
        company2 = self.env['res.company'].create({'name': 'Acme 2'})
        companies = self.env['res.company'].search([])
        categories = self.env['res.partner.category'].search([])
        self.env['res.lang']._activate_lang('fr_FR')
        self.env['res.partner'].search([('name', '=', 'Pepper Street')]).country_id = self.env.ref('base.be')
        Country = self.env['res.country'].with_context(lang='fr_FR')
        countries = self.env['res.country'].search(domain)
        self.env['res.users'].search([('name', '=', 'test')])
        obj1 = self.env['res.bank'].create({'name': 'c0'})
        obj2 = self.env['res.bank'].create({'name': 'c1', 'city': 'Ljósálfaheimr'})
        obj3 = self.env['res.bank'].create({'name': 'c2', 'city': 'York'})
        obj4 = self.env['res.bank'].create({'name': 'c3', 'city': 'Springfield'})
            self.env['res.bank'].search([
            self.env['res.bank'].search([
        self.env['res.lang']._activate_lang('fr_FR')
        Model = self.env['res.partner.title'].with_context(lang='fr_FR')
        Model = self.env['res.users'].with_user(self.env.ref('base.user_admin'))
        self.env['ir.rule'].search([]).unlink()
        self.env['ir.rule'].create([{
            'model_id': self.env['ir.model']._get('res.users').id,
            'model_id': self.env['ir.model']._get('res.partner').id,
        self.Partner = self.env['res.partner'].with_context(active_test=False)
        self.User = self.env['res.users'].with_context(active_test=False)
        self.company = self.env['res.company'].browse(1)
        self.Partner = self.env['res.partner'].with_context(active_test=False)
        self.User = self.env['res.users'].with_context(active_test=False)
        self.company = self.env['res.company'].browse(1)
        partner_form = Form(self.env['res.partner'])
        if hasattr(self.env['res.partner'], 'property_account_payable_id'):
            property_account_payable_id = self.env['account.account'].create({
            property_account_receivable_id = self.env['account.account'].create({
        user_form = Form(self.env['res.users'])
        company_form = Form(self.env['res.company'])
        group_form = Form(self.env['res.groups'])
        bank_form = Form(self.env['res.bank'])
        country_form = Form(self.env['res.country'])
        lang_form = Form(self.env['res.lang'])
        self.test_country = self.env['res.country'].create({
        self.test_partner = self.env['res.partner'].create({
        self.action = self.env['ir.actions.server'].create({
        category = self.env['res.partner.category'].search([('name', 'ilike', 'TestingPartner')])
        group0 = self.env['res.groups'].create({'name': 'country group'})
        r = self.env['ir.actions.todo'].create({
        model = self.env['ir.model'].search([('model', '=', self.MODEL)])
        field = self.env['ir.model.fields'].create({
        self.assertIn(name, self.env[self.MODEL]._fields)
        return self.env['ir.ui.view'].create({
        self.assertIn('x_foo', self.env[self.MODEL]._fields)
        self.assertIn('x_foo', self.env[self.MODEL]._fields)
        model = self.env['ir.model']._get(self.MODEL)
        comodel = self.env['ir.model']._get(self.COMODEL)
        m2o_field = self.env['ir.model.fields'].create({
        o2m_field = self.env['ir.model.fields'].create({
        comodel = self.env['ir.model'].search([('model', '=', self.COMODEL)])
        dependant = self.env['ir.model.fields'].create({
        custom_binary = self.env[self.MODEL]._fields['x_image']
        countries = self.env['res.country'].search([('code', '!=', False)], limit=100)
        partners = self.env['res.partner'].create([
        self.env['ir.model.fields'].create({
            'model_id': self.env['ir.model']._get_id('res.partner'),
            self.env['ir.model.fields'].create({
                'model_id': self.env['ir.model']._get_id('res.partner'),
        model = self.env['ir.model'].search([('model', '=', self.MODEL)])
        field = self.env['ir.model.fields'].create({
        self.env['ir.config_parameter'].set_param('ir_attachment.location', 'db')
        rule = self.env['ir.rule'].create({
        self.env['ir.config_parameter'].set_param('base.image_autoresize_max_px', '1024x768')
        self.env['ir.config_parameter'].set_param('base.image_autoresize_quality', '50')
        self.env['ir.config_parameter'].set_param('base.image_autoresize_max_px', '0')
        self.env['ir.config_parameter'].set_param('base.image_autoresize_max_px', '10000x10000')
        self.env['ir.config_parameter'].set_param('base.image_autoresize_quality', '50')
        self.env['ir.config_parameter'].search([('key', 'ilike', 'base.image_autoresize%')]).unlink()
        self.env['ir.config_parameter'].set_param('base.image_autoresize_max_px', '1024x768')
        self.env['ir.config_parameter'].set_param('base.image_autoresize_quality', '0')
        self.env['ir.config_parameter'].set_param('base.image_autoresize_quality', '50')
        self.env['ir.config_parameter'].set_param('base.image_autoresize_max_px', '0')
            model=self.env['ir.cron.trigger'].sudo(),
        self.cron = self.env['ir.cron'].create({
        self.test_partner = self.env['res.partner'].create({
        self.test_partner2 = self.env['res.partner'].create({
        title = self.env['res.partner.title'].create({'name': 'President'})
        company_a = self.env["res.company"].create({"name": "C_A"})
        company_b = self.env["res.company"].create({"name": "C_B"})
        multi_company_user = self.env['res.users'].create({
        IrDefault = self.env["ir.default"].with_user(multi_company_user)
        attachment = self.env['ir.attachment'].create({
        status, headers, content = self.env['ir.http'].binary_content(
        attachment = self.env['ir.attachment'].create({
        status, headers, content = self.env['ir.http'].binary_content(
        partner = self.env['res.partner'].create({
        status, headers, content = self.env['ir.http'].binary_content(
        prop = self.env['ir.property'].create({
            'fields_id': self.env['ir.model.fields'].search([], limit=1).id,
        status, headers, content = self.env['ir.http'].binary_content(
        attachment = self.env['ir.attachment'].create({
            status, _, _ = self.env['ir.http'].with_user(public_user).binary_content(
        return self.env['ir.model.data'].search(domain)
        foo, bar = self.env['res.users']._load_records([{
        self.env['ir.model'].create({
            self.env['ir.model'].create({
            self.assertEqual(self.env['x_bananas']._order, order)
            bananas = self.env['x_bananas'].search([])
        groups = self.env['x_bananas'].read_group(domain=[],
        record = self.env['x_bananas'].create({'x_name': "Ifan Ben-Mezd"})
        self.env['ir.model.fields']._get('x_bananas', 'x_name').unlink()
        record = self.env['x_bananas'].browse(record.id)
        self.env['ir.model.fields'].create({
            'model_id': self.env['ir.model'].search([('model', '=', 'res.partner')]).id,
        self.env['res.partner'].create({'name': 'foo'}).x_foo_bar_baz
        c1 = self.env['res.partner.category'].create({'name': 'W'})
        c2 = self.env['res.partner.category'].create({'name': 'Y'})
        user = self.env['res.users'].create({
        p1 = self.env['res.partner'].create({'name': 'W'})
        p2 = self.env['res.partner'].create({'name': 'Y'})
        user = self.env['res.users'].create({
        partner_model = self.env['ir.model'].search([('model','=','res.partner')])
        self.env['ir.rule'].create({
        partners = self.env['res.partner'].with_user(user).search([])
        partner = self.env['res.partner'].create({'name': 'MyPartner1'})
        p1 = self.env['res.partner'].create({'name': 'W'})
        user = self.env['res.users'].create({
        user = self.env['res.users'].create({
        p1 = self.env['res.partner'].with_user(user).create({'name': 'Zorro'})
        self.env['ir.property'].with_user(user)._set_multi("ref", "res.partner", {p1.id: "Nain poilu"})
        p1_prop = self.env['ir.property'].with_user(user)._get("ref", "res.partner", res_id=p1.id)
        p1_prop = self.env['ir.property'].with_user(user)._get("ref", "res.partner", res_id=p1.id)
            record = self.env['res.bank'].create(vals)
        records = self.env['res.bank'].create([])
        records = self.env['res.bank'].create(vals_list)
        foo, bar = self.env['res.country'].create(vals_list)
        defaults = self.env['res.users'].default_get(['partner_id'])
        partners_before = self.env['res.partner'].search([])
        user_foo = self.env['res.users'].create({'name': 'Foo', 'login': 'foo'})
        partner_foo = self.env['res.partner'].create({'name': 'Foo'})
        partners_before = self.env['res.partner'].search([])
        user_foo = self.env['res.users'].create({'partner_id': partner_foo.id, 'login': 'foo'})
        partners_after = self.env['res.partner'].search([])
        user_foo = self.env['res.users'].create({'name': 'Foo', 'login': 'foo'})
        user_foo = self.env['res.users'].create({
        user_foo = self.env['res.users'].create({'login': 'foo', 'name': 'Foo', 'signature': 'Foo'})
        partner_bar = self.env['res.partner'].create({'name': 'Bar'})
        partners_before = self.env['res.partner'].search([])
        partners_after = self.env['res.partner'].search([])
        self.assertEqual(self.env['ir.profile'].search([('id', '=', self.test_profile.id)]), self.test_profile)
            self.env['ir.profile'].search([])
        template = self.env['ir.ui.view'].create({
        child_template = self.env['ir.ui.view'].create({
        rendered = self.env['ir.qweb']._render(template.id, values)
            self.env['ir.qweb']._render(template.id, values)
            rendered = self.env['ir.qweb']._render(template.id, values)
                self.env['res.partner'].create({'name': 'snail%s' % i})
            self.env['res.partner'].flush()
        #self.assertIn("self.env['res.partner'].create({", first_query['stack'][0][3])
        company = self.env['res.company'].create({'name': "My Test Company"})
        company = self.env['res.company'].create({'name': s})
        view1 = self.env['ir.ui.view'].create({
        view = self.env['ir.ui.view'].create({
        view1 = self.env['ir.ui.view'].create({
        view1 = self.env['ir.ui.view'].create({
        view1 = self.env['ir.ui.view'].create({
        view1 = self.env['ir.ui.view'].create({
        view1 = self.env['ir.ui.view'].create({
        view1 = self.env['ir.ui.view'].create({
        view1 = self.env['ir.ui.view'].create({
        view1 = self.env['ir.ui.view'].create({
        view1 = self.env['ir.ui.view'].create({
        view1 = self.env['ir.ui.view'].create({
        view1 = self.env['ir.ui.view'].create({
        view1 = self.env['ir.ui.view'].create({
        view1 = self.env['ir.ui.view'].create({
        view1 = self.env['ir.ui.view'].create({
        view2 = self.env['ir.ui.view'].create({
        view1 = self.env['ir.ui.view'].create({
        view2 = self.env['ir.ui.view'].create({
        view1 = self.env['ir.ui.view'].create({
        lang = self.env['res.lang']._activate_lang(other_lang)
        view1 = self.env['ir.ui.view'].create({
        self.env['ir.model.data'].create({
        view2 = self.env['ir.ui.view'].create({
        partner = self.env['res.partner'].create({
        view = self.env['ir.ui.view'].create({
        t = self.env['ir.ui.view'].create({
            self.env['ir.qweb']._render(t.id, values)
        t = self.env['ir.ui.view'].create({
        rendered = self.env['ir.qweb']._render(t.id)
        t = self.env['ir.ui.view'].create({
        rendered = self.env['ir.qweb']._render(t.id)
        t = self.env['ir.ui.view'].create({
        rendered = self.env['ir.qweb']._render(t.id, values)
        t = self.env['ir.ui.view'].create({
        rendered = self.env['ir.qweb']._render(t.id, values)
        t = self.env['ir.ui.view'].create({
        rendered = self.env['ir.qweb']._render(t.id, values)
        t = self.env['ir.ui.view'].create({
        rendered = self.env['ir.qweb']._render(t.id, values)
        t = self.env['ir.ui.view'].create({
        rendered = self.env['ir.qweb']._render(t.id, values)
        t = self.env['ir.ui.view'].create({
        rendered = self.env['ir.qweb']._render(t.id, values)
        t = self.env['ir.ui.view'].create({
        rendered = self.env['ir.qweb']._render(t.id)
        t = self.env['ir.ui.view'].create({
        rendered = self.env['ir.qweb']._render(t.id, {'a': 1, 'b': 2})
        t = self.env['ir.ui.view'].create({
        rendered = self.env['ir.qweb']._render(t.id, values)
        t = self.env['ir.ui.view'].create({
        rendered = self.env['ir.qweb']._render(t.id, values)
        t = self.env['ir.ui.view'].create({
        rendered = self.env['ir.qweb']._render(t.id, values)
        t = self.env['ir.ui.view'].create({
        rendered = self.env['ir.qweb']._render(t.id, values)
        t = self.env['ir.ui.view'].create({
        rendered = self.env['ir.qweb']._render(t.id, values)
        view1 = self.env['ir.ui.view'].create({
        t = self.env['ir.ui.view'].create({
        rendered = self.env['ir.qweb']._render(t.id, {})
        t = self.env['ir.ui.view'].create({
        ref = self.env['ir.ui.view'].create({
        rendered = self.env['ir.qweb']._render(t.id, {})
        result = self.env['ir.qweb']._render(ref.id, {})
        t = self.env['ir.ui.view'].create({
        rendered = self.env['ir.qweb']._render(t.id)
        t = self.env['ir.ui.view'].create({
            self.env['ir.qweb']._render(t.id)
            self.env['ir.qweb']._render(t.id)
        t = self.env['ir.ui.view'].create({
            self.env['ir.qweb']._render(t.id)
            self.env['ir.qweb']._render(t.id)
        t = self.env['ir.ui.view'].create({
        rendered = html.fromstring(self.env['ir.qweb']._render(t.id))
        t = self.env['ir.ui.view'].create({
        rendered = html.fromstring(self.env['ir.qweb']._render(t.id))
        t = self.env['ir.ui.view'].create({
        rendered = html.fromstring(self.env['ir.qweb']._render(t.id))
        t = self.env['ir.ui.view'].create({
        rendered = self.env['ir.qweb']._render(t.id)
        t = self.env['ir.ui.view'].create({
        rendered = self.env['ir.qweb']._render(t.id, {'__keep_empty_lines': True})
        view1 = self.env['ir.ui.view'].create({
        self.expected_name = self.env[model_name].fields_get([field_name])[field_name]['string']
        all_config_settings = self.env['ir.model'].search([('name', 'like', 'config.settings')])
            self.env[config_settings.name].create({}).execute()
        f = Form(self.env['res.users'], view='base.view_users_form')
        app = self.env['ir.module.category'].create({'name': 'Foo'})
        group1, group2, group0 = self.env['res.groups'].create([
            for name in self.env['res.users'].fields_get()
        user = self.env['res.users'].create({'name': 'foo', 'login': 'foo'})
        self.env['ir.model.fields'].create({
        self.env['ir.model.fields'].create({
        translation_fr = self.env['ir.translation'].search([
        translation_fr = self.env['ir.translation'].search([
        padawans = self.env['res.partner.category'].create({'name': 'Padawans'})
        padawans = self.env['res.partner.category'].create({'name': 'Padawan'})
        self.env['ir.translation'].create({
                self.env['ir.translation'].create({
        self.env['ir.translation'].translate_fields('res.partner.category', padawans.id, 'name')
        translations = self.env['ir.translation'].search([
        cheese = self.env['res.partner.category'].create({'name': 'Cheese'})
        self.env['ir.translation'].translate_fields('res.partner.category', cheese.id, 'name')
        translations = self.env['ir.translation'].search([('name', '=', 'res.partner.category,name'), ('res_id', '=', cheese.id)], order='lang')
        translation_fr = self.env['ir.translation'].search([
        langs = self.env['res.lang'].get_installed()
        translations = self.env['ir.translation'].search([
        langs = self.env['res.lang'].get_installed()
        translation = self.env['ir.translation'].create({
        self.env['res.lang']._activate_lang('fr_FR')
        self.env['res.partner'].with_context(active_test=False).search([]).write({'lang': 'fr_FR'})
        langs = self.env['res.lang'].get_installed()
        translations = self.env['ir.translation'].search([
        self.env['res.lang']._activate_lang('fr_FR')
        langs = self.env['res.lang'].get_installed()
        self.env['ir.translation'].create({
        translations = self.env['ir.translation'].search([
        self.env['res.lang']._activate_lang('fr_FR')
        self.env['res.lang']._activate_lang('es_ES')
        self.env['res.partner'].with_context(active_test=False).search([]).write({'lang': 'fr_FR'})
        langs = self.env['res.lang'].get_installed()
        translations = self.env['ir.translation'].search([
        self.env['res.lang']._activate_lang('fr_FR')
        langs = self.env['res.lang'].get_installed()
        translations = self.env['ir.translation'].search([
        translations = self.env['ir.translation'].search([
        self.env['ir.translation'].translate_fields('res.country', belgium.id, 'vat_label')
        en_translation = self.env['ir.translation'].search([
        field = self.env['ir.model']._fields['state']
        ir_field = self.env['ir.model.fields']._get('ir.model', 'state')
        fg = self.env['ir.model'].fields_get(['state'])
        fg = self.env['ir.model'].with_context(lang='fr_FR').fields_get(['state'])
        self.env['res.lang']._activate_lang('fr_FR')
        ir_model_field = self.env['ir.model.fields']._get('ir.model', 'name')
        self.env['ir.translation'].create({
        model = self.env['ir.model'].with_context(lang='fr_FR')
        view = self.env['ir.ui.view'].create({
                self.env['ir.translation'].create({
        self.patch(type(self.env['ir.ui.view']).arch_db, 'translate', html_translate)
        translations = self.env['ir.translation'].search([
        translations = self.env['ir.translation'].search([
        view = self.env["ir.ui.view"].create({
        group0, group1 = self.env['res.groups']._load_records([
        self.test_user = self.env['res.users'].create({
            'partner_id': self.env['res.partner'].create({
        Users = self.env['res.users'].with_user(self.test_user)
        grp_test_portal = self.env['res.groups']._load_records([
        grp_test_internal1 = self.env['res.groups']._load_records([
        grp_test_internal2 = self.env['res.groups']._load_records([
        portal_user = self.env['res.users'].create({
            portal_user = self.env['res.users'].create({
        grp_test_portal = self.env["res.groups"].create({"name": "implied by portal"})
        portal_user = self.env['res.users'].create({
        grp_fail = self.env["res.groups"].create(
        grp_test = self.env['res.groups']._load_records([
            self.env['res.users'].create({
        test_user = self.env['res.users'].create({
        grp_test = self.env["res.groups"].create(
        test_user = self.env['res.users'].create({
        group_U = self.env["res.groups"].create({"name": "U", "implied_ids": [Command.set([self.grp_internal.id])]})
        node = self.env['ir.ui.view'].locate_node(
        node = self.env['ir.ui.view'].locate_node(
        node = self.env['ir.ui.view'].locate_node(
        node = self.env['ir.ui.view'].locate_node(
        node = self.env['ir.ui.view'].locate_node(
        node = self.env['ir.ui.view'].locate_node(
        node = self.env['ir.ui.view'].locate_node(
        node = self.env['ir.ui.view'].locate_node(
        node = self.env['ir.ui.view'].locate_node(
        node = self.env['ir.ui.view'].locate_node(
        self.env['res.lang']._activate_lang('fr_FR')
        self.env['ir.translation']._upsert_translations([{
        self.env['res.lang']._activate_lang('fr_FR')
        self.env['ir.translation'].create({
        field = self.env['ir.ui.view']._fields['inherit_id']
        field = self.env['ir.ui.view']._fields['inherit_id']
        field = self.env['ir.ui.view']._fields['inherit_id']
        field = self.env['ir.ui.view']._fields['inherit_id']
        field = self.env['ir.ui.view']._fields['inherit_id']
        field = self.env['ir.ui.view']._fields['inherit_id']
        arch = self.env['res.partner'].fields_view_get(view_id=partner_view.id)['arch']
        arch = self.env['res.partner'].fields_view_get(view_id=partner_view.id)['arch']
        view = self.env['ir.ui.view'].create({
        self.env['ir.translation'].create([
        translations = self.env['ir.translation'].search([
        translations = self.env['ir.translation'].search([
        view = self.env["ir.ui.view"].create({
        content1 = self.env['ir.qweb'].with_context(check_view_ids=[view1.id, view2.id])._render(view1.id)
        content2 = self.env['ir.qweb'].with_context(check_view_ids=[view1.id, view2.id])._render(view2.id)
        content1 = self.env['ir.qweb'].with_context(check_view_ids=[view1.id, view2.id])._render('base.dummy')
        content2 = self.env['ir.qweb'].with_context(check_view_ids=[view1.id, view2.id])._render('base.dummy_ext')
        content1 = self.env['ir.qweb'].with_context(check_view_ids=[view1.id, view2.id, view3.id])._render(view1.id)
        content3 = self.env['ir.qweb'].with_context(check_view_ids=[view1.id, view2.id, view3.id])._render(view3.id)
        content1 = self.env['ir.qweb'].with_context(check_view_ids=[view1.id, view2.id, view3.id])._render('base.dummy')
        content3 = self.env['ir.qweb'].with_context(check_view_ids=[view1.id, view2.id, view3.id])._render('base.dummy_primary_ext')
            self.env['ir.ui.view'].search([("model", '=', "res.partner"), ('type', '=', 'form')])
        self.env['res.partner'].fields_view_get(view_type='form')
            self.env['ir.ui.view'].fields_view_get(view_type='form')
        views = self.env['ir.ui.view'].with_context(lang=None).search([])
        r = self.env['res.users'].create({
        ids = self.env['ir.attachment'].create({'name': 'n', 'raw': b'\x01\02\03'}).ids
        u = self.env['res.users'].create({
            lang = self.env['res.lang'].browse(self._context.get('active_id'))
        return [[code, name] for code, _, name, *_ in self.env['res.lang'].get_available()]
        mods = self.env['ir.module.module'].search([('state', '=', 'installed')])
        self.env['res.lang']._activate_lang(self.lang)
            Model = self.env[model] if model in self.env else None
        records = self.env['ir.model.fields'].search([('ttype', '=', 'reference')])
        if extra_checks and 'account.move.line' in self.env and self.env['account.move.line'].sudo().search([('partner_id', 'in', [partner.id for partner in src_partners])]):
            self.env[model].search_count([(field, 'in', aggr_ids)])
        return self.env['res.partner'].browse(partner_ids).sorted(
            partners = self.env['res.partner'].search([('id', 'in', aggr_ids)])
            self.env['base.partner.merge.line'].create({
        self.portal_user = self.env['res.users'].create({
        self.internal_user_partner = self.env['res.partner'].create({'name': 'I'})
        self.document = self.env['test_access_right.ticket'].create({
        no_access_user = self.env['res.users'].create({
        document = self.env['test_access_right.ticket'].with_user(no_access_user)
        self.group0 = self.env['res.groups'].create({'name': "Group 0"})
        self.group1 = self.env['res.groups'].create({'name': "Group 1"})
        self.group2 = self.env['res.groups'].create({'name': "Group 2"})
        self.user = self.env['res.users'].create({
        record = self.env['test_access_right.some_obj'].create({'val': 5})
        partner_demo = self.env['res.partner'].create({
        user2 = self.env['res.users'].create({
        m = self.env['ir.model'].search([('model', '=', 'test_access_right.some_obj')])
        self.record = self.env['test_access_right.some_obj'].create({'val': 5})
        self.model = self.env['ir.model'].search([('model', '=', 'test_access_right.some_obj')])
        self.record = self.env['test_access_right.some_obj'].create({
        res = self.env['ir.rule'].create({
        p = self.env['test_access_right.parent'].create({'obj_id': self.record.id})
        p = self.env['test_access_right.parent'].create({'obj_id': self.record.id})
        self.record = self.env['test_access_right.some_obj'].create({
        self.env['ir.rule'].create({
        self.env['ir.rule'].create({
        self.env['ir.rule'].create({
        container_admin = self.env['test_access_right.container'].create({'some_ids': [Command.set(ids)]})
        action3 = self.env['ir.actions.report'].search([('groups_id', '=', False)], limit=1)
                                 = self.env['ir.model']._get('res.partner')
        self.env['res.lang']._activate_lang('ar_SY')
        user_direction = self.env['res.lang']._lang_get(lang or self.env.user.lang).direction
        return self.env['ir.attachment'].search(domain)
        self.env['ir.asset'].create({
        self.env['ir.asset'].create({
        css_bundles = self.env['ir.attachment'].search([
            css_bundles = self.env['ir.attachment'].search([
        css_bundles = self.env['ir.attachment'].search([
        self.env['ir.asset'].create({
        css_bundles = self.env['ir.attachment'].search([
        css_bundle = self.env['ir.attachment'].search([
        html = self.env['ir.ui.view']._render_template('test_assetsbundle.template2')
        attachments = self.env['ir.attachment'].search([('url', '=like', '/web/assets/%-%/test_assetsbundle.bundle4.%')])
        html = self.env['ir.ui.view']._render_template('test_assetsbundle.template2', {"debug": "assets"})
        attachments = self.env['ir.attachment'].search([('url', '=like', '%/test_assetsbundle.bundle4.js')])
        self.env['ir.ui.view'].create({
        attach = self.env['ir.attachment'].create({
        self.env['ir.asset'].create({
        files, _ = self.env['ir.qweb']._get_asset_content(self.stylebundle_name)
            self.env['ir.attachment'].flush(['checksum', 'write_date'])
            self.env['ir.attachment'].invalidate_cache(['write_date'])
        view = self.env['ir.ui.view'].create({
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.manifest1.min.js')], order='create_date DESC', limit=1)
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.manifest2.min.js')], order='create_date DESC', limit=1)
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.manifest3.min.js')], order='create_date DESC', limit=1)
        self.env['ir.asset'].create({
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.manifest4.min.js')], order='create_date DESC', limit=1)
        self.env['ir.asset'].create({
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.irasset1.min.js')], order='create_date DESC', limit=1)
        self.env['ir.asset'].create({
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.manifest1')], order='create_date DESC', limit=1)
        self.env['ir.asset'].create({
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.manifest4')], order='create_date DESC', limit=1)
        self.env['ir.asset'].create({
        self.env['ir.asset'].create({
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.manifest4')], order='create_date DESC', limit=1)
        self.env['ir.asset'].create({
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.manifest5')], order='create_date DESC', limit=1)
        self.env['ir.asset'].create({
        self.env['ir.asset'].create({
        self.env['ir.asset'].create({
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.manifest2.js')], order='create_date DESC', limit=1)
        self.env['ir.asset'].create({
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.manifest4')], order='create_date DESC', limit=1)
        self.env['ir.asset'].create({
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.irasset_include1')], order='create_date DESC', limit=1)
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.manifest6')], order='create_date DESC', limit=1)
        self.env['ir.asset'].create({
        self.env['ir.asset'].create({
        self.env['ir.asset'].create({
        self.env['ir.asset'].create({
        self.env['ir.asset'].create({
        self.env['ir.asset'].create({
        self.env['ir.asset'].create({
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.irasset_include1')], order='create_date DESC', limit=1)
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_other.mockmanifest1')], order='create_date DESC', limit=1)
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.manifest4')], order='create_date DESC', limit=1)
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.manifest4')], order='create_date DESC', limit=1)
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.manifest4')], order='create_date DESC', limit=1)
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.manifest4')], order='create_date DESC', limit=1)
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.manifest4')], order='create_date DESC', limit=1)
        self.env['ir.asset'].create({
        self.env['ir.asset'].create({
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.irasset2')], order='create_date DESC', limit=1)
        self.env['ir.asset'].create({
        self.env['ir.asset'].create({
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.irasset2')], order='create_date DESC', limit=1)
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.bundle4')], order='create_date DESC', limit=1)
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.bundle4')], order='create_date DESC', limit=1)
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.bundle4')], order='create_date DESC', limit=1)
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.bundle4')], order='create_date DESC', limit=1)
        self.env['ir.asset'].create({
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.bundle4')], order='create_date DESC', limit=1)
        self.env['ir.asset'].create({
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.bundle4')], order='create_date DESC', limit=1)
        self.env['ir.asset'].create({
        self.env['ir.asset'].create({
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.bundle4')], order='create_date DESC', limit=2)
        self.env['ir.asset'].create({
        self.env['ir.asset'].create({
        self.env['ir.asset'].create({
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.manifest4')], order='create_date DESC', limit=1)
        self.env['ir.asset'].create({
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.manifest4')], order='create_date DESC', limit=1)
        self.env['ir.asset'].create({
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.irassetsec')], order='create_date DESC', limit=1)
        self.env['ir.asset'].create({
        files = self.env['ir.asset']._get_asset_paths('test_assetsbundle.irassetsec', addons=self.installed_modules, xml=False)
        self.env['ir.asset'].create({
        self.env['ir.asset'].create({
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.irassetsec')], order='create_date DESC', limit=1)
        self.env['ir.asset'].create({
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.irassetsec')], order='create_date DESC', limit=1)
        self.env['ir.asset'].create({
        files = self.env['ir.asset']._get_asset_paths('test_assetsbundle.irassetsec', addons=self.installed_modules, xml=False)
        self.env['ir.asset'].create({
        files = self.env['ir.asset']._get_asset_paths('test_assetsbundle.irassetsec', addons=self.installed_modules, xml=False)
        self.env['ir.attachment'].create({
        self.env['ir.asset'].create({
        attach = self.env['ir.attachment'].search([('name', 'ilike', 'test_assetsbundle.irasset_custom_attach')], order='create_date DESC', limit=1)
        r = self.env['test_convert.usered'].search([])
        r = self.env['test_convert.usered'].search([])
        r = self.env['test_convert.usered'].search([])
        r = self.env['test_convert.usered'].search([])
        r = self.env['test_convert.usered'].search([])
        r = self.env['test_convert.usered'].search([])
        self.env['res.lang'].browse(1).write({'grouping': '[3,0]'})
        self.env['res.lang']._activate_lang('fr_FR')
        self.env['res.lang']._activate_lang('fr_FR')
        self.env['ir.model.data'].create({
        self.env['res.lang']._activate_lang('fr_FR')
        ir_field = self.env['ir.model.fields']._get('export.selection', 'value')
        record = self.env['export.integer'].create({'value': 42})
        record = self.env['export.integer'].create({'value': 42})
        record = self.env['export.integer'].create({'value': 42})
        m2o = self.env['export.integer'].create({'value': 42}).id
        records = self.env['export.one2many.child'].search([])
        xid = self.env['ir.model.data'].create({
            self.env['ir.model.data'].create({
        rid = self.env['export.integer'].create({'value': 42}).id
        self.env['ir.model.data'].clear_caches()
        self.env['res.lang']._activate_lang(code)
        record1 = self.env['export.integer'].create({'value': 42})
        record2 = self.env['export.integer'].create({'value': 36})
        record = self.env['export.integer'].create({'value': 42})
        record = self.env['export.integer'].create({'value': 42})
        record1 = self.env['export.integer'].create({'value': 42})
        record2 = self.env['export.integer'].create({'value': 42})
        record1 = self.env['export.integer'].create({'value': 42})
        record2 = self.env['export.integer'].create({'value': 36})
        id1 = self.env['export.many2many.other'].create({'value': 3, 'str': 'record0'}).id
        id2 = self.env['export.many2many.other'].create({'value': 44, 'str': 'record1'}).id
        id3 = self.env['export.many2many.other'].create({'value': 84, 'str': 'record2'}).id
        id4 = self.env['export.many2many.other'].create({'value': 9, 'str': 'record3'}).id
        id5 = self.env['export.many2many.other'].create({'value': 99, 'str': 'record4'}).id
        record0 = self.env['export.many2many.other'].create({'value': 3, 'str': 'record0'})
        record1 = self.env['export.many2many.other'].create({'value': 44, 'str': 'record1'})
        record2 = self.env['export.many2many.other'].create({'value': 84, 'str': 'record2'})
        record3 = self.env['export.many2many.other'].create({'value': 9, 'str': 'record3'})
        record0 = self.env['export.many2many.other'].create({'value': 3, 'str': 'record0'})
        record1 = self.env['export.many2many.other'].create({'value': 44, 'str': 'record1'})
        record2 = self.env['export.many2many.other'].create({'value': 84, 'str': 'record2'})
        record3 = self.env['export.many2many.other'].create({'value': 9, 'str': 'record3'})
        id1 = self.env['export.many2many.other'].create({'value': 3, 'str': 'record0'}).id
        id2 = self.env['export.many2many.other'].create({'value': 44, 'str': 'record1'}).id
        id3 = self.env['export.many2many.other'].create({'value': 84, 'str': 'record2'}).id
        id4 = self.env['export.many2many.other'].create({'value': 9, 'str': 'record3'}).id
        id1 = self.env['export.one2many.child'].create({'str': 'Bf', 'value': 109}).id
        id2 = self.env['export.one2many.child'].create({'str': 'Me', 'value': 262}).id
        id1 = self.env['export.one2many.child'].create({'str': 'Bf', 'value': 109}).id
        id2 = self.env['export.one2many.child'].create({'str': 'Me', 'value': 262}).id
        id1 = self.env['export.one2many.child'].create({'str': 'Bf', 'value': 109}).id
        id2 = self.env['export.one2many.child'].create({'str': 'Me', 'value': 262}).id
        result = self.env['res.partner'].load(['name', 'mobile', 'email', 'image_1920'], data)
        result = self.env['res.partner'].load(fnames, data)
        self.env['ir.model.data'].clear_caches()
        self.env['ir.model.data'].clear_caches()
        rec = self.env[self.model_name].browse(r['ids'])
        parent = self.env['export.inherits.parent'].create({'value_parent': 0})
        rec = self.env[self.model_name].browse(r['ids'])
        parent = self.env['export.inherits.parent'].create({'value_parent': 0})
        pid = self.env['ir.model.data'].create({
        rec = self.env[self.model_name].browse(r['ids'])
        parent = self.env['export.inherits.parent'].create({'value_parent': 0})
        pid = self.env['ir.model.data'].create({
        rec = self.env[self.model_name].browse(r['ids'])
        parent = self.env['export.inherits.parent'].create({'value_parent': 0})
        child = self.env[self.model_name].create({
        self.env['ir.model.data'].create({
        parent = self.env['export.inherits.parent'].create({'value_parent': 0})
        child = self.env[self.model_name].create({
        pid, cid = self.env['ir.model.data'].create([{
        daughter = self.env['test.inherit.daughter'].create({'partner_id': partner_demo.id})
        partners = self.env['res.partner'].search([('daughter_ids', 'like', 'not existing daugther')])
        partners = self.env['res.partner'].search([('daughter_ids', 'not like', 'not existing daugther')])
        partners = self.env['res.partner'].search([('daughter_ids', '!=', False)])
        partners = self.env['res.partner'].search([('daughter_ids', 'in', daughter.ids)])
        record = self.env['test.inherit.property'].create({'name': "Stuff"})
        record = self.env['test.inherit.property'].create({'name': "Stuff"})
        field = self.env['test_new_api.selection']._fields['state']
        ir_field = self.env['ir.model.fields']._get('test_new_api.selection', 'state')
        pallet = self.env['test.pallet'].create({
        unit = self.env['test.unit'].create({
        pallet = self.env['test.pallet'].with_context(ctx).create({
        self.assertTrue(self.env['test.box']._fields['readonly_name'])
        self.env['res.lang']._activate_lang('fr_FR')
        pallet_en = self.env['test.pallet'].create({'name': 'Bread'})
        Unit = type(self.env['test.unit'])
        Box = type(self.env['test.box'])
        Pallet = type(self.env['test.pallet'])
        unit_foo = self.env['test.unit'].create({'name': 'foo'})
        boxes = self.env['test.box'].create([{'unit_id': unit_foo.id}] * 5)
        unit_bar = self.env['test.unit'].create({'name': 'bar'})
        a_expense = self.env['account.account'].create({
        a_recv = self.env['account.account'].create({
        a_pay = self.env['account.account'].create({
        a_sale = self.env['account.account'].create({
        bnk = self.env['account.account'].create({
        self.expenses_journal = self.env['account.journal'].create({
        self.bank_journal = self.env['account.journal'].create({
        self.sales_journal = self.env['account.journal'].create({
        return self.env['res.lang'].get_installed()
        models = self.env['ir.model'].sudo().search([('state', '!=', 'manual')])
            bar.foo = self.env['test_new_api.foo'].search([('name', '=', bar.name)], limit=1)
        records = self.env['test_new_api.foo'].browse(value)
        depends = self.env['ir.config_parameter'].get_param('test_new_api.full_name', '')
            rec.name = self.env[rec.res_model].browse(rec.res_id).display_name
            self.address_id = self.env['res.partner'].sudo().create({
        self.company_a = self.env['res.company'].create({
        self.company_b = self.env['res.company'].create({
        self.parent_company_a_id = self.env['test_new_api.model_parent'].create({
        self.parent_company_b_id = self.env['test_new_api.model_parent'].create({
        self.company_c = self.env['res.company'].create({
        self.test_user = self.env['res.users'].create({
        m1 = self.env['test_new_api.model_child'].create({'company_id': self.company_a.id})
        self.env['test_new_api.model_child'].create({
            self.env['test_new_api.model_child'].create({
        self.env['test_new_api.model_child_nocheck'].create({
        child = self.env['test_new_api.model_child'].create({
        for falsy in [False, None, 0, '', self.env['res.company'], []]:
        user = self.env['res.users'].create({
        with common.Form(self.env['test_new_api.model_private_address_onchange'].with_user(user)) as form:
        User = self.env['res.users'].with_context(context)
        self.env['ir.model.fields'].create({
        records = self.env['test_new_api.message'].search([])
        records = self.env['test_new_api.message'].search([])
        cat = self.env['test_new_api.category'].create({'name': 'Foo'})
        field = self.env['test_new_api.message']._fields['size']
        field = self.env['test_new_api.message']._fields['name']
        field = self.env['test_new_api.compute.onchange']._fields['baz']
        field = self.env['test_new_api.compute.onchange']._fields['line_ids']
        field = self.env['test_new_api.compute.onchange']._fields['tag_ids']
        self.env['ir.model.fields'].create({
        field = self.env['test_new_api.message']._fields['x_bool_false_computed']
        self.patch(type(self.env["ir.model.fields"]), "_check_depends", lambda self: True)
        self.env["ir.model.fields"].create(
        self.env["ir.model.fields"].create(
        self.env["ir.model.fields"].create(
        self.env["ir.model.fields"].create(
        fields = self.env["test_new_api.foo"]._fields
        self.env["ir.model"].create({
        field = type(self.env['test_new_api.discussion']).display_name
        field = self.env['test_new_api.category']._fields['dummy']
        for message in self.env['test_new_api.message'].search([]):
        message1 = self.env['test_new_api.message'].create({})
        record = self.env['test_new_api.mixed'].create({})
        discussion3 = self.env['test_new_api.discussion'].create({
        self.env['ir.rule'].create({
            'model_id': self.env['ir.model'].search([('model', '=', 'res.users')]).id,
        a = self.env['test_new_api.recursive'].create({'name': 'A'})
        b = self.env['test_new_api.recursive'].create({'name': 'B', 'parent': a.id})
        c = self.env['test_new_api.recursive'].create({'name': 'C', 'parent': b.id})
        d = self.env['test_new_api.recursive'].create({'name': 'D', 'parent': c.id})
        foo = self.env['test_new_api.recursive.tree'].create({'name': 'foo'})
        record = self.env['test_new_api.cascade'].create({'foo': "Hi"})
        self.env['ir.config_parameter'].set_param('test_new_api.full_name', 'name1,name2')
        self.env['base'].flush()
        model = self.env['test_new_api.compute.inverse'].with_context(log=log)
        model = self.env['test_new_api.multi_compute_inverse'].with_context(log=log)
        foo = self.env['test_new_api.category'].create({'name': 'Foo'})
        user = self.env['res.users'].create({'name': 'Foo', 'login': 'foo'})
        country1 = self.env['res.country'].create({'name': 'test country'})
        country2 = self.env['res.country'].create({'name': 'other country'})
        company = self.env['res.company'].create({
            messages0 = self.env['test_new_api.message'].search(
            messages1 = self.env['test_new_api.message'].browse()
            self.env['test_new_api.message'].create({'discussion': discussion.id, 'body': 'Whatever'})
        self.env['test_new_api.message'].create({'discussion': discussion.id, 'body': 'Whatever'})
        model = self.env['test_new_api.compute.inverse'].with_context(log=log, log_constraint=True)
        records = self.env['test_new_api.compute.unassigned'].create([{}, {}])
        record = self.env['test_new_api.mixed'].create({})
        description = self.env['test_new_api.mixed'].fields_get()['number2']
        currency = self.env['res.currency'].with_context(active_test=False)
        record = self.env['test_new_api.multi.tag'].create({'name': 'Foo'})
        record = self.env['test_new_api.mixed'].create({})
        record = self.env['test_new_api.mixed'].create({})
        record = self.env['test_new_api.mixed'].create({})
        for language in self.env['res.lang'].search([]):
        record = self.env['test_new_api.mixed'].create({})
            record.reference = self.env['ir.model'].search([], limit=1)
        search_on_related = self.env['test_new_api.message'].search([('discussion_name', '=', 'Bar')])
        search_on_regular = self.env['test_new_api.message'].search([('discussion.name', '=', 'Bar')])
        record = self.env['test_new_api.related'].create({'name': 'A'})
        foo = self.env['test_new_api.foo'].create({'name': 'A', 'value1': 1, 'value2': 2})
        oof = self.env['test_new_api.foo'].create({'name': 'B', 'value1': 1, 'value2': 2})
        bar = self.env['test_new_api.bar'].create({'name': 'A'})
        left = self.env['test_new_api.trigger.left'].create({})
        right = self.env['test_new_api.trigger.right'].create({})
        middle = self.env['test_new_api.trigger.middle'].create({
        for user in self.env['res.users'].search([]):
        company1 = self.env['res.company'].create({'name': 'A'})
        company2 = self.env['res.company'].create({'name': 'B'})
        user0 = self.env['res.users'].create({
        user1 = self.env['res.users'].create({
        user2 = self.env['res.users'].create({
        tag0 = self.env['test_new_api.multi.tag'].create({'name': 'Qux'})
        tag1 = self.env['test_new_api.multi.tag'].create({'name': 'Quux'})
        tag2 = self.env['test_new_api.multi.tag'].create({'name': 'Quuz'})
        self.env['ir.property']._set_default('foo', 'test_new_api.company', 'default')
        self.env['ir.property']._set_default('foo', 'test_new_api.company', 'default1', company1)
        self.env['ir.property']._set_default('tag_id', 'test_new_api.company', tag0)
        accesses = self.env['ir.model.access'].search([('model_id.model', '=', 'ir.property')])
        record = self.env['test_new_api.company'].create({
        rule = self.env['ir.rule'].create({
            'model_id': self.env['ir.model']._get_id(record._name),
        company_record = self.env['test_new_api.company'].create({'foo': 'ABC'})
        attribute_record = self.env['test_new_api.company.attr'].create({
        company_records = self.env['test_new_api.company'].search([('foo', '=', 'DEF')])
        new_msg = self.env['test_new_api.message'].new({'body': "XXX"})
        cat1 = self.env['test_new_api.category'].create({'name': "Cat1"})
        cat2 = self.env['test_new_api.category'].create({'name': "Cat2"})
        msg0 = self.env['test_new_api.message'].create({'body': "XXX"})
        msg1 = self.env['test_new_api.message'].create({'body': "WWW"})
        cat0 = self.env['test_new_api.category'].create({'name': 'AAA'})
        cat1 = self.env['test_new_api.category'].create({'name': 'DDD'})
        new_disc = self.env['test_new_api.discussion'].new({
        new_email = self.env['test_new_api.emailmessage'].new({'body': "XXX"})
        new_email = self.env['test_new_api.emailmessage'].new({'message': msg0.id})
        email = self.env['test_new_api.emailmessage'].new({'body': 'XXX'})
        tag = self.env['test_new_api.multi.tag'].create({'name': 'Foo'})
        rec = self.env['test_new_api.multi'].create({
        move = self.env['test_new_api.move'].create({
        move = self.env['test_new_api.move'].create({})
        line = self.env['test_new_api.move_line'].create({'move_id': move.id, 'quantity': 1})
        partner = self.env['res.partner'].create({
        multi = self.env['test_new_api.multi'].new()
        defaults = self.env['test_new_api.message'].default_get(fields)
        defaults = self.env['test_new_api.mixed'].default_get(['number'])
        messages = self.env['test_new_api.message'].search(
        tag = self.env['test_new_api.multi.tag'].create({'name': 'bar'})
        record = self.env['test_new_api.multi'].create({'tags': tag.ids})
        move1 = self.env['test_new_api.move'].create({})
        move2 = self.env['test_new_api.move'].create({})
        line = self.env['test_new_api.move_line'].create({'move_id': move1.id})
        move1 = self.env['test_new_api.move'].create({})
        move2 = self.env['test_new_api.move'].create({})
        line = self.env['test_new_api.move_line'].create({'move_id': move1.id})
        moves = self.env['test_new_api.move'].search([('line_ids', 'in', line.id)])
        moves = self.env['test_new_api.move'].search([('line_ids', 'in', line.id)])
        self.env['res.lang']._activate_lang('fr_FR')
        self.env['test_new_api.binary_svg'].with_user(
            self.env['test_new_api.binary_svg'].with_user(
        self.env['test_new_api.binary_svg'].create({
            self.env['test_new_api.binary_svg'].with_user(
        record = self.env['test_new_api.binary_svg'].create({
        attachment = self.env['ir.attachment'].search([
        record = self.env['test_new_api.binary_svg'].with_user(
        attachment = self.env['ir.attachment'].search([
        attachment = self.env['ir.attachment'].search([
        record = self.env['test_new_api.model_image'].create({
        record = self.env['test_new_api.model_image'].create({
        record = self.env['test_new_api.model_image'].create({
        record = self.env['test_new_api.model_image'].with_context(image_no_postprocess=True).create({
        record = self.env['test_new_api.model_binary'].create({'binary': binary_value})
        record_no_bin_size = self.env['test_new_api.model_binary'].with_context(bin_size=False).create({'binary': binary_value})
        record = self.env['test_new_api.model_binary'].browse(record.id)
        record_bin_size = self.env['test_new_api.model_binary'].with_context(bin_size=True).create({'binary': binary_value})
        record = self.env['test_new_api.model_binary'].browse(record.id)
        record = self.env['test_new_api.model_binary'].create({'binary': binary_value})
        record = self.env['test_new_api.model_binary'].create({})
        belgium, congo = self.env['test_new_api.country'].create([
        cities = self.env['test_new_api.city'].create([
        tag = self.env['test_new_api.multi.tag'].create({})
        record = self.env['test_new_api.multi.line'].create({
        user = self.env['res.users'].create({'name': "user", 'login': "user"})
        self.env['ir.rule'].create({
            'model_id': self.env['ir.model']._get(record._name).id,
        self.env['ir.rule'].create({
            'model_id': self.env['ir.model']._get(record._name).id,
        field = self.env['test_new_api.multi.line']._fields['tags']
        field = self.env['test_new_api.multi.line2']._fields['tags']
        record_a = self.env['test_new_api.model_a'].create({'name': 'a'})
        record_b = self.env['test_new_api.model_b'].create({'name': 'b'})
        record_a = self.env['test_new_api.model_a'].create({'name': 'a'})
        record_b = self.env['test_new_api.model_b'].create({'name': 'b'})
        lines = self.env['test_new_api.multi.line'].create([{
        model_id = self.env['ir.model']._get_id('res.partner')
        field = self.env['ir.model.fields'].create({
        record = self.env['test_new_api.discussion'].create({'name': 'Booba'})
        field = self.env['test_new_api.req_m2o']._fields['foo']
        field = self.env['test_new_api.req_m2o']._fields['bar']
        field = self.env['test_new_api.req_m2o_transient']._fields['foo']
        field = self.env['test_new_api.req_m2o_transient']._fields['bar']
        self.env['ir.model.fields.selection'].search([
        self.env['ir.model.fields.selection'].search([
        rec1 = self.env[self.MODEL_REQUIRED].create({'my_selection': 'foo'})
        rec2 = self.env[self.MODEL_REQUIRED].create({'my_selection': 'bar'})
        rec3 = self.env[self.MODEL_REQUIRED].create({'my_selection': 'baz'})
        rec1 = self.env[self.MODEL_BASE].create({'my_selection': 'foo'})
        rec2 = self.env[self.MODEL_BASE].create({'my_selection': 'bar'})
        rec3 = self.env[self.MODEL_BASE].create({'my_selection': 'quux'})
        rec1 = self.env[self.MODEL_BASE].create({'my_selection': 'foo'})
        rec2 = self.env[self.MODEL_BASE].create({'my_selection': 'bar'})
        rec3 = self.env[self.MODEL_BASE].create({'my_selection': 'ham'})
        rec1 = self.env[self.MODEL_REQUIRED].create({'my_selection': 'foo'})
        rec2 = self.env[self.MODEL_REQUIRED].create({'my_selection': 'bar'})
        rec3 = self.env[self.MODEL_REQUIRED].create({'my_selection': 'eggs'})
        rec1 = self.env[self.MODEL_REQUIRED].create({'my_selection': 'foo'})
        rec2 = self.env[self.MODEL_REQUIRED].create({'my_selection': 'bar'})
        rec3 = self.env[self.MODEL_REQUIRED].create({'my_selection': 'bacon'})
        rec1 = self.env[self.MODEL_REQUIRED].create({'my_selection': 'foo'})
        rec2 = self.env[self.MODEL_REQUIRED].create({'my_selection': 'eevee'})
        rec3 = self.env[self.MODEL_REQUIRED].create({'my_selection': 'pikachu'})
        rec = self.env[self.MODEL_REQUIRED].create({'my_selection': 'knickers'})
        rec = self.env[self.MODEL_NONSTORED].create({})
        rec = self.env[self.MODEL_REQUIRED].create({'my_selection': 'foo'})
        rec = self.env[self.MODEL_WRITE_OVERRIDE].create({'my_selection': 'divinity'})
        task = self.env['test_new_api.model_shared_cache_compute_parent'].create({
        self.env['test_new_api.model_shared_cache_compute_line'].create({
        self.env['base'].flush()
        partner1 = self.env['res.partner'].create({'name': 'A partner'})
        multi = self.env['test_new_api.multi'].create({'partner': partner1.id})
        partner2 = self.env['res.partner'].create({'name': 'A second partner'})
        self.env['ir.default'].set('test_new_api.foo', 'value2', 666, condition='value1=42')
        partner = self.env['res.partner'].create({
        with common.Form(self.env['test_new_api.multi']) as form:
        foo, bar = self.env['test_new_api.multi.tag'].create([{'name': 'Foo'}, {'name': 'Bar'}])
        view = self.env['ir.ui.view'].create({
        form = Form(self.env['test_new_api.payment'], view)
        tag_foo, tag_bar = self.env['test_new_api.multi.tag'].create([
        form = common.Form(self.env['test_new_api.compute.onchange'])
        form = common.Form(self.env['test_new_api.compute.onchange'].with_context(
        form = Form(self.env['test_new_api.compute.onchange'].with_context(default_foo="oof"))
        record = self.env['test_new_api.model_parent_m2o'].create({
        record = self.env['test_new_api.compute_editable'].create({'line_ids': [(0, 0, {'value': 7})]})
        record = self.env['test_new_api.one2many'].create({'name': 'foo'})
        self.multi = self.env["test_new_api.multi"].create({
        book_model_id = self.env['ir.model'].search([('model', '=', self.Book._name)]).id
        movie_model_id = self.env['ir.model'].search([('model', '=', self.Movie._name)]).id
        self.multi = self.env["test_new_api.multi"].new({
        self.multi = self.env["test_new_api.multi"].new({
        self.env['base.partner.merge.automatic.wizard']._merge((p1 + p2).ids, p1)
        record0 = self.env['test_new_api.attachment.host'].create({})
        attachment = self.env['test_new_api.attachment'].create({
            record1 = self.env['test_new_api.attachment.host'].create({})
        parent = self.env['test_new_api.model_parent_m2o'].create({
        parent = self.env['test_new_api.model_parent_m2o'].create({'name': 'parent'})
        child = self.env['test_new_api.model_child_m2o'].create({'name': 'A', 'parent_id': parent.id})
        container = self.env['test_new_api.compute.container'].create({'name': 'Foo'})
        member = self.env['test_new_api.compute.member'].create({'name': 'Foo'})
        order = self.env['test_new_api.order'].create({
        _, precision = self.env['decimal.precision.test']._fields[name].get_digits(self.env) or (None, None)
            record = self.env['decimal.precision.test'].new({name: value})
        self.env['decimal.precision'].create({
        self.env['decimal.precision'].create({
        ir_models = self.env['ir.model'].search([('model', 'in', list(model_names))])
                            relation = self.env['ir.model.relation'].search([('name', '=', field.relation)])
        self.env['res.lang']._activate_lang('fr_FR')
        records = self.env['test_performance.base'].search([])
        records = self.env['test_performance.base'].search([])
        records = self.env['test_performance.base'].search([])
        records = self.env['test_performance.base'].search([])
        rec1 = self.env['test_performance.base'].create({'name': 'X'})
        rec2 = self.env['test_performance.base'].create({'name': 'X'})
        rec = self.env['test_performance.base'].create({'name': 'Y'})
        rec1 = self.env['test_performance.base'].create({'name': 'X'})
        rec2 = self.env['test_performance.base'].create({'name': 'X'})
            self.env['test_performance.base'].create({'name': 'X'})
            self.env['test_performance.base'].create({
            self.env['test_performance.base'].create({'name': 'X'})
            self.env['test_performance.base'].create({
        tags = self.env['test_performance.tag'].create([{'name': val} for val in range(10)])
            self.env['test_performance.base'].create({
            self.env['test_performance.base'].create({
            self.env['test_performance.base'].create({
        initial_records = self.env['test_performance.base'].search([])
        records = self.env['test_performance.base'].search([])
        all_records = self.env['test_performance.base'].search([])
        partners = self.env['res.partner'].search([('id', 'in', all_records.mapped('partner_id').ids)])
        self.assertFalse(self.env['ir.property']._get('property_eggs', 'test_performance.bacon'))
        self.env['ir.property']._set_default("property_eggs", "test_performance.bacon", eggs)
        self.assertEqual(eggs, self.env['ir.property']._get('property_eggs', 'test_performance.bacon'))
        recs = self.env['test_performance.base'].create([
            ('state', populate.cartesian([False] + self.env['test.populate']._fields['state'].get_values(self.env))),
        records = self.env[model].browse(new)
                ir_model = self.env['ir.model'].search([('model', '=', model._name)])
        f = Form(self.env['test_testing_utilities.a'])
        f = Form(self.env['test_testing_utilities.a'])
        f = Form(self.env['test_testing_utilities.req_bool'])
        f2 = Form(self.env['test_testing_utilities.req_bool'])
        f = Form(self.env['test_testing_utilities.readonly'])
        f = Form(self.env['test_testing_utilities.a'], view='test_testing_utilities.non_normalized_attrs')
        f = Form(self.env['test_testing_utilities.a'], view='test_testing_utilities.non_normalized_attrs')
        f = Form(self.env['test_testing_utilities.d'])
        r1 = self.env['test_testing_utilities.m2o'].create({'name': "A"})
        r2 = self.env['test_testing_utilities.m2o'].create({'name': "B"})
        f = Form(self.env['test_testing_utilities.c'])
        temp = self.env['test_testing_utilities.readonly'].create({})
        f = Form(self.env['test_testing_utilities.e'])
        f = Form(self.env['test_testing_utilities.e'])
        f = Form(self.env['test_testing_utilities.e'])
        f = Form(self.env['test_testing_utilities.e'])
        r1 = self.env['test_testing_utilities.m2o'].create({'name': "A"})
        r2 = self.env['test_testing_utilities.m2o'].create({'name': "B"})
        f = Form(self.env['test_testing_utilities.f'])
        r = self.env['test_testing_utilities.g'].create({
        f = Form(self.env['test_testing_utilities.e'], view='test_testing_utilities.attrs_using_m2m')
        f.m2m.add(self.env['test_testing_utilities.sub2'].create({'name': 'ok'}))
        f = Form(self.env['test_testing_utilities.parent'], view='test_testing_utilities.o2m_parent')
        f = Form(self.env['test_testing_utilities.parent'], view='test_testing_utilities.o2m_parent_ed')
        f = Form(self.env['test_testing_utilities.parent'], view='test_testing_utilities.o2m_parent_inline')
        f = Form(self.env['test_testing_utilities.default'])
        f = Form(self.env['test_testing_utilities.default'])
        f = Form(self.env['test_testing_utilities.parent'])
        f = Form(self.env['test_testing_utilities.parent'])
        f = Form(self.env['test_testing_utilities.parent'])
        r = self.env['test_testing_utilities.parent'].create({
        f = Form(self.env['o2m_readonly_subfield_parent'])
        f = Form(self.env['test_testing_utilities.onchange_parent'], view='test_testing_utilities.m2o_onchange_view')
        f = Form(self.env['test_testing_utilities.onchange_count'])
        Form(self.env['test_testing_utilities.recursive'], view='test_testing_utilities.o2m_recursive_relation_view')
        Model = self.env['test_testing_utilities.parent'].with_context(
        create = self.env['test_testing_utilities.sub'].create
        f = Form(self.env['test_testing_utilities.parent'], view='test_testing_utilities.o2m_widget_m2m')
        f = Form(self.env['o2m_changes_children'])
        product0 = self.env['ttu.product'].create({}).id
        product1 = self.env['ttu.product'].create({}).id
        product2 = self.env['ttu.product'].create({}).id
        obj = self.env['ttu.root'].create({
        product0 = self.env['ttu.product'].create({}).id
        product1 = self.env['ttu.product'].create({}).id
        product2 = self.env['ttu.product'].create({}).id
        product4 = self.env['ttu.product'].create({})
        obj = self.env['ttu.root'].create({
        r = self.env['o2m_changes_parent'].create({
        r = self.env['test_testing_utilities.a'].create({
        r = self.env['test_testing_utilities.d'].create({
        sub = self.env['test_testing_utilities.sub2'].create({'name': 'a'})
        r = self.env['test_testing_utilities.f'].create({
        r = self.env['test_testing_utilities.f'].create({
        self.env['ir.attachment'].create([{
        self.env['res.lang']._activate_lang('fr_FR')
        translations = self.env['ir.translation'].search([
        field = self.env['ir.model.fields'].search([('model', '=', 'test.translation.import'), ('name', '=', 'name')])
        self.env['res.lang']._activate_lang('fr_FR')
        translations = self.env['ir.translation'].search([
        self.env['res.lang']._activate_lang('fr_FR')
        self.env['res.lang']._activate_lang('fr_BE')
        translations = self.env['ir.translation'].search([
        translations = self.env['ir.translation'].search([
        translations = self.env['ir.translation'].search([
        self.env['res.lang']._activate_lang('fr_FR')
        ids = self.env['ir.translation'].search([
        ids = self.env['ir.translation'].search([
        ids = self.env['ir.translation'].search([
            self.env['res.lang']._activate_lang('fr_FR')
        translation = self.env['ir.translation'].search_count([('src', '=', 'Efgh'), ('value', '=', '')])
        translation = self.env['ir.translation'].search_count([('src', '=', 'Efgh'), ('value', '=', '')])
        import_tlh = self.env["base.language.import"].create({
        tlh_lang = self.env['res.lang']._lang_get('tlh')
        trans_count = self.env['ir.translation'].search_count([('lang', '=', 'tlh')])
        import_tlh = self.env["base.language.import"].create({
        import_tlh = self.env["base.language.import"].create({
        dot_lang = self.env['res.lang']._lang_get('dot')
        trans_count = self.env['ir.translation'].search_count([('lang', '=', 'dot')])
        import_tlh = self.env["base.language.import"].create({
        self.env['ir.translation'].create({
        export = self.env["base.language.export"].create({
        translation = self.env['ir.translation'].create({
        translation = self.env['ir.translation'].create({
            self.env["base.language.install"].create({'lang': 'fr_FR', 'overwrite': True}).lang_install()
        self.env["base.update.translations"].create({'lang': 'fr_FR'}).act_update()
        translations = self.env["ir.translation"].search([
        export = self.env["base.language.export"].create({
        import_fr = self.env["base.language.import"].create({
        import_translation = self.env["ir.translation"].search([
        export = self.env["base.language.export"].create({
        self.env["ir.translation"].search([
        import_fr = self.env["base.language.import"].create({
        secret = self.env['ir.config_parameter'].sudo().get_param('database.secret')
        secret = self.env['ir.config_parameter'].sudo().get_param('database.secret')
            defaults = self.env['ir.default'].get_model_defaults(self._name, condition)
        self.env['ir.model.data'].invalidate_cache(fnames=fields)
                for record, xid in self.env[model].browse(ids).__ensure_xml_id():
                    model_fields = self.env[comodel]._fields
                comodel = self.env[fields[relfield].comodel_name]
            field_names.update(self.env['ir.translation'].get_field_string(self._name))
        convert = self.env['ir.fields.converter'].for_model(self)
        ir_defaults = self.env['ir.default'].get_model_defaults(self._name)
            defaults.update(self.env[model].default_get(names))
            result['filters'] = self.env['ir.filters'].get_filters(self._name, options.get('action_id'))
        View = self.env['ir.ui.view'].sudo()
        view = self.env['ir.ui.view'].sudo().browse(view_id)
            bindings = self.env['ir.actions.actions'].get_bindings(self._name)
                    collect_models_to_avoid(self.env[parent_mname])
            groups = self.env[field.comodel_name].browse([value[0] for value in values])
            m2x_records = self.env[self._fields[field].comodel_name].browse(ids_set)
            for name, field in self.env[parent_model_name]._fields.items()
            self.env['ir.model.fields']._add_manual_fields(self)
            self.env[parent]._setup_base()
                description = self.env['ir.model']._get(self._name).name
                raise self.env['ir.rule']._make_access_error('read', forbidden)
        IrModelData = self.env['ir.model.data'].sudo()
        return self.env['ir.config_parameter'].sudo().get_param('web.base.url')
                    'company_id' in self.env[field.comodel_name]:
                field = self.env['ir.model.fields']._get(self._name, name)
        return self.env['ir.model.access'].check(self._name, operation, raise_exception)
            raise self.env['ir.rule']._make_access_error(operation, forbidden)
        dom = self.env['ir.rule']._compute_domain(self._name, operation)
            Data = self.env['ir.model.data'].sudo().with_context({})
            Defaults = self.env['ir.default'].sudo()
            Property = self.env['ir.property'].sudo()
            Attachment = self.env['ir.attachment'].sudo()
                        description = self.env['ir.model']._get(self._name).name
                    irprop_def = self.env['ir.property']._get(key, self._name)
                    parent = self.env[model_name].browse(data['stored'][parent_name])
                parents = self.env[model_name].create([
        imd = self.env['ir.model.data'].sudo()
        domain = list(domain) + (self.env['ir.rule']._compute_domain(self._name, 'read') or [])
                field = self.env[model_name]._fields.get(fname)
                    # `self.env['stock.picking'].search([('product_id', '=', product.id)])`
                    self.env[field.comodel_name]._flush_search([], seen=seen)
                    models.append(self.env[model_name])
            self.env[model_name].flush(field_names)
                    blacklist.update(set(self.env[parent_model]._fields) - whitelist)
                    blacklist_given_fields(self.env[parent_model])
        for data in self.env['ir.model.data'].sudo().search_read(domain, ['module', 'name', 'res_id'], order='id'):
                process(self.env[model_name], id_vals)
                    process(self.env[model_name], id_vals)
                    self.env[field.comodel_name].flush([field.inverse_name])
            user = self.env['res.users'].sudo().search([('login', '=', login)])
        self.env['base'].flush()
            Users = self.env['res.users'].with_context(active_test=False)
    self.env['base'].flush()
    self.env['base'].flush()
        f = Form(self.env['sale.order'])
                modcnt = self.env['ir.module.module'].search_count([('name', '=', module), ('state', '=', 'installed')])
        report = self.env['ir.actions.report']._load_records([data], self.mode == 'update')
            res['binding_model_id'] = self.env['ir.model']._get(binding_model).id
        self.env['ir.actions.act_window']._load_records([data], self.mode == 'update')
        menu = self.env['ir.ui.menu']._load_records([data], self.mode == 'update')
            record = self.env['ir.model.data']._load_xmlid(xid)
        return self.env['ir.model.data']._xmlid_to_res_model_res_id(id_str, raise_if_not_found=raise_if_not_found)
# Warning: better use self.env['ir.translation']._get_source if you can
            for m in self.env['ir.module.module'].search_read([('state', '=', 'installed')], fields=['name'])
            return self.env["_unknown"].browse()
        if not self.env[model]._translate:
            return self.env[model].browse()
        records = self.env[model].browse(res_ids).exists()