browse
self.env['ir.model.data'].sudo().search([('name', '=', '%d_%s' % (company.id, xml_id)), ('model', '=', 'account.account'), ('module', '=like', 'l10n%')], limit=1).res_id
***************************************************************************************
search
[('user_type_id', '=', self.env.ref(user_type_id).id), ('company_id', '=', company.id)]
***************************************************************************************
search
[('company_id', '=', company.id)]
***************************************************************************************
search
[('type', '=', 'bank'), ('company_id', '=', cid)]
***************************************************************************************
flush
['account_id', 'journal_id']
***************************************************************************************
flush
['currency_id']
***************************************************************************************
flush
['currency_id', 'default_account_id', 'suspense_account_id']
***************************************************************************************
flush
['payment_type']
***************************************************************************************
flush
['payment_method_id', 'payment_account_id']
***************************************************************************************
flush
['journal_id', 'payment_account_id']
***************************************************************************************
search_count
[('account_id', 'in', self.ids), ('full_reconcile_id', '=', False), '|', ('matched_debit_ids', '!=', False), ('matched_credit_ids', '!=', False)]
***************************************************************************************
search
[('account_id', 'in', self.ids)]
***************************************************************************************
flush
self.env['account.group']._fields
***************************************************************************************
flush
self.env['account.account']._fields
***************************************************************************************
flush
self.env['account.group']._fields
***************************************************************************************
browse
res[0]
***************************************************************************************
browse
res[1]
***************************************************************************************
browse
[r[0] for r in rows]
***************************************************************************************
_adapt_accounts_for_account_groups
self
***************************************************************************************
search_count
['|', ('invoice_repartition_line_ids.account_id', '=', record.id), ('refund_repartition_line_ids.account_id', '=', record.id)]
***************************************************************************************
search
[('account_id', '=', self.id), ('move_id', '=', opening_move.id), (field, '!=', False), (field, '!=', 0.0)]
***************************************************************************************
search
[('code', '=', default['code']), ('company_id', '=', default.get('company_id', False) or self.company_id.id)]
***************************************************************************************
search
[('account_id', 'in', self.ids)]
***************************************************************************************
search
['|', ('invoice_repartition_line_ids.account_id', '=', self.id), ('refund_repartition_line_ids.account_id', '=', self.id)]
***************************************************************************************
search
[('group_id', '=', record.id)]
***************************************************************************************
search
[('parent_id', '=', record.id)]
***************************************************************************************
search_count
[('account_id', '=', account.id), ('currency_id', 'not in', (False, vals['currency_id']))]
***************************************************************************************
search
[('company_id', 'in', self.company_id.ids)]
***************************************************************************************
search
[('name', '=like', '_' + escaped_tag_name), ('country_id', '=', country_id), ('applicability', '=', 'taxes')]
***************************************************************************************
read_group
domain['move_id:count_distinct']['analytic_account_id']
***************************************************************************************
read_group
domain['move_id:count_distinct']['analytic_account_id']
***************************************************************************************
browse
self.env.context['account_id']
***************************************************************************************
search
[('journal_id', '=', self[0].journal_id.id)]
***************************************************************************************
browse
to_browse_ids
***************************************************************************************
create
line_vals_list
***************************************************************************************
search
[('company_id', '=', self.company_id.id), ('acc_number', '=', self.account_number)]
***************************************************************************************
search
[('type', '=', journal_type), ('company_id', '=', company_id)]
***************************************************************************************
_for_xml_id
'account.action_view_account_bnk_stmt_check'
***************************************************************************************
browse
vals['statement_id']
***************************************************************************************
create
{'acc_number': self.account_number, 'partner_id': self.partner_id.id, 'company_id': self.company_id.id}
***************************************************************************************
create
{'name': statement.name and _('Bank Statement %s.pdf', statement.name) or _('Bank Statement.pdf'), 'type': 'binary', 'raw': content, 'res_model': statement._name, 'res_id': statement.id}
***************************************************************************************
browse
bnk_stmt_id
***************************************************************************************
create
st_line_vals
***************************************************************************************
next_by_code
'account.reconcile'
***************************************************************************************
search
[('code', 'in', list(method_information.keys()))]
***************************************************************************************
flush
['account_id', 'journal_id']
***************************************************************************************
flush
['account_id', 'journal_id']
***************************************************************************************
flush
['payment_method_id', 'journal_id']
***************************************************************************************
flush
['code']
***************************************************************************************
search
[('code', 'like', journal_code_base + '%'), ('company_id', '=', company.id)]
***************************************************************************************
search
[('company_id', '=', company.id)]
***************************************************************************************
search
[('sanitized_acc_number', '=', sanitize_account_number(acc_number)), ('company_id', '=', self.company_id.id)]
***************************************************************************************
browse
attachment_ids
***************************************************************************************
check_access_rights
'read'
***************************************************************************************
_where_calc
domain
***************************************************************************************
browse
account_ids
***************************************************************************************
browse
account_ids
***************************************************************************************
check_access_rights
'read'
***************************************************************************************
_where_calc
domain
***************************************************************************************
search
last_statement_domain
***************************************************************************************
browse
method_ids
***************************************************************************************
search
[('journal_id', '=', journal.id), ('state', '=', 'draft')]
***************************************************************************************
browse
vals['company_id']
***************************************************************************************
_get
'account.move'
***************************************************************************************
_get
'account.journal'
***************************************************************************************
search
[('journal_id', '=', journal.id)]
***************************************************************************************
browse
vals['company_id']
***************************************************************************************
search
[('journal_id', '=', self.id), ('state', '=', 'posted'), ('secure_sequence_number', '!=', 0)]
***************************************************************************************
_search_new_account_code
companydigitsliquidity_account_prefix
***************************************************************************************
create
{'acc_number': acc_number, 'bank_id': bank_id, 'company_id': self.company_id.id, 'currency_id': self.currency_id.id, 'partner_id': self.company_id.partner_id.id}
***************************************************************************************
create
{}
***************************************************************************************
browse
vals['bank_account_id']
***************************************************************************************
create
default_account_vals
***************************************************************************************
create
vals
***************************************************************************************
search
[('journal_id', '=', self.id), ('state', '=', 'open')]
***************************************************************************************
create
{}
***************************************************************************************
_for_xml_id
action_name
***************************************************************************************
_for_xml_id
action_ref
***************************************************************************************
_for_xml_id
f'account.{action_name}'
***************************************************************************************
_for_xml_id
'account.action_bank_statement_tree'
***************************************************************************************
browse
result.get('currency')
***************************************************************************************
flush
['amount_residual', 'currency_id', 'move_type', 'invoice_date', 'company_id', 'journal_id', 'date', 'state', 'payment_state']
***************************************************************************************
read_group
[('journal_id', '=', self.id), ('to_check', '=', True)]['amount_total']'journal_id'
***************************************************************************************
browse
result.get('company_id')
***************************************************************************************
search
domain
***************************************************************************************
get_invoice_types
True
***************************************************************************************
read_group
[('journal_id', '=', self.id), ('to_check', '=', True)]['amount_total']'journal_id'
***************************************************************************************
_get_conversion_rate
*key
***************************************************************************************
get_fiscal_position
self.partner_id.id
***************************************************************************************
browse
tax_vals['tax_repartition_line_id']
***************************************************************************************
flush
['ref', 'move_type', 'invoice_date', 'journal_id', 'company_id', 'partner_id', 'commercial_partner_id']
***************************************************************************************
flush
['company_id']
***************************************************************************************
flush
['commercial_partner_id']
***************************************************************************************
flush
self.env['account.move.line']._fields
***************************************************************************************
flush
['journal_id']
***************************************************************************************
create
move_vals_list
***************************************************************************************
_for_xml_id
'account.action_view_account_move_reversal'
***************************************************************************************
browse
line_id
***************************************************************************************
browse
partial_id
***************************************************************************************
search
[('reversed_entry_id', '=', self.id)]
***************************************************************************************
_for_xml_id
'account.action_move_journal_line'
***************************************************************************************
_get_update_invoice_from_attachment_decoders
self
***************************************************************************************
create
partials_vals_list
***************************************************************************************
create
sorted_lines._prepare_reconciliation_partials()
***************************************************************************************
create
analytic_line_vals
***************************************************************************************
_for_xml_id
'account.action_account_moves_all_a'
***************************************************************************************
_for_xml_id
'account.account_automatic_entry_wizard_action'
***************************************************************************************
search
currency_domain
***************************************************************************************
search
domain
***************************************************************************************
browse
company_id
***************************************************************************************
browse
self._context['default_journal_id']
***************************************************************************************
browse
taxes_map_entry['grouping_dict']['currency_id']
***************************************************************************************
search
domain
***************************************************************************************
search
domain
***************************************************************************************
browse
vals['move_id']
***************************************************************************************
browse
vals['account_id']
***************************************************************************************
fields_get
tracking_fields
***************************************************************************************
browse
self._context.get('default_journal_id') or self._context['journal_id']
***************************************************************************************
browse
exchange_diff_move_vals['journal_id']
***************************************************************************************
create
exchange_diff_move_vals
***************************************************************************************
create
{'exchange_move_id': exchange_move and exchange_move.id, 'partial_reconcile_ids': [(6, 0, involved_partials.ids)], 'reconciled_line_ids': [(6, 0, involved_lines.ids)]}
***************************************************************************************
new
copied_vals
***************************************************************************************
browse
tax_vals['tax_repartition_line_id']
***************************************************************************************
browse
tax_repartition_line_id
***************************************************************************************
search
[('reversed_entry_id', '=', move.id), ('state', '=', 'posted'), ('move_type', '=', reverse_type)]
***************************************************************************************
browse
tax_result['id']
***************************************************************************************
browse
line_vals['tax_repartition_line_id']
***************************************************************************************
browse
tax_res['id']
***************************************************************************************
browse
vals.get('partner_id')
***************************************************************************************
browse
tax_ids
***************************************************************************************
new
{'line_ids': self._context['line_ids']}
***************************************************************************************
browse
self._context.get('default_journal_id') or self._context['journal_id']
***************************************************************************************
search
[('tax_cash_basis_origin_move_id', '=', move.id)]
***************************************************************************************
search
domain
***************************************************************************************
search_count
domain
***************************************************************************************
browse
tax_result['tax_ids']
***************************************************************************************
browse
vals['journal_id']
***************************************************************************************
_get_default_tax_account
refund_repartition_line
***************************************************************************************
browse
line_vals['tax_ids'][0][2]
***************************************************************************************
browse
line[2]['account_id']
***************************************************************************************
_field_will_change
linevalsfield_name
***************************************************************************************
_field_will_change
linevalsfield_name
***************************************************************************************
_field_will_change
linevalsfield_name
***************************************************************************************
_get
self._namechanged_field
***************************************************************************************
search_count
domain2
***************************************************************************************
browse
tax_ids
***************************************************************************************
browse
tax_res['id']
***************************************************************************************
_get_cash_basis_tax_line_grouping_key_from_record
line
***************************************************************************************
_get_cash_basis_tax_line_grouping_key_from_record
line
***************************************************************************************
browse
values['tax_repartition_line_id']
***************************************************************************************
browse
line_vals['tax_ids'][0][2]
***************************************************************************************
browse
line[2]['partner_id']
***************************************************************************************
browse
vals.get('product_id')
***************************************************************************************
_get_cash_basis_base_line_grouping_key_from_record
line
***************************************************************************************
_get_cash_basis_base_line_grouping_key_from_record
line
***************************************************************************************
browse
values['account_id']
***************************************************************************************
browse
vals.get('product_id')
***************************************************************************************
browse
vals.get('product_id')
***************************************************************************************
check_access_rights
'read'
***************************************************************************************
_where_calc
domain
***************************************************************************************
_apply_ir_rules
query
***************************************************************************************
search
[('amount_type', '=', 'group')]
***************************************************************************************
search
[('tax_cash_basis_rec_id', 'in', self.ids)]
***************************************************************************************
browse
tax_ids
***************************************************************************************
browse
tax_ids
***************************************************************************************
create
moves_to_create
***************************************************************************************
_get_conversion_rate
counterpart_line.company_currency_idsource_line.currency_idcounterpart_line.company_idcounterpart_line.date
***************************************************************************************
_search_default_journal
('bank', 'cash')
***************************************************************************************
_get_default_line_name
_('Internal Transfer') if self.is_internal_transfer else payment_display_name['%s-%s' % (self.payment_type, self.partner_type)]self.amountself.currency_idself.date
***************************************************************************************
get_sale_types
True
***************************************************************************************
browse
res.get('invoice_ids', [])
***************************************************************************************
browse
res.get('invoice_ids', [])
***************************************************************************************
browse
vals['journal_id']
***************************************************************************************
search
[('company_id', '=', pay.company_id.id), ('internal_type', '=', 'receivable'), ('deprecated', '=', False)]
***************************************************************************************
search
[('company_id', '=', pay.company_id.id), ('internal_type', '=', 'payable'), ('deprecated', '=', False)]
***************************************************************************************
search_count
[('payment_method_line_id', '=', line.id)]
***************************************************************************************
browse
vals['payment_account_id']
***************************************************************************************
browse
vals_list['payment_account_id']
***************************************************************************************
search
method_domain
***************************************************************************************
create
[{'name': method.name, 'payment_method_id': method.id, 'journal_id': journal.id} for journal in journals]
***************************************************************************************
search
[('invoice_payment_term_id', 'in', self.ids)]
***************************************************************************************
browse
self.env.context['currency_id']
***************************************************************************************
_for_xml_id
'account.action_move_journal_line'
***************************************************************************************
read_group
[('reconcile_model_id', 'in', self.ids)]['reconcile_model_id']'reconcile_model_id'
***************************************************************************************
browse
tax_res['id']
***************************************************************************************
flush
self.env[model_name]._fields
***************************************************************************************
get_fiscal_position
partner_id
***************************************************************************************
_lang_get
self.env.user.lang
***************************************************************************************
browse
partner_map[st_line.id]
***************************************************************************************
browse
company_id
***************************************************************************************
search
[('company_id', '=', company.id), ('tax_group_id', 'not in', all_configured_groups_ids), ('country_id', 'in', countries.ids)]
***************************************************************************************
browse
context.get('journal_id')
***************************************************************************************
browse
currency_id
***************************************************************************************
browse
product_id
***************************************************************************************
browse
partner_id
***************************************************************************************
search
domain
***************************************************************************************
browse
vals['report_id']
***************************************************************************************
_get_tax_tags
tag_namecountry.id
***************************************************************************************
browse
tag_ids_to_delete
***************************************************************************************
_get_tax_tags
tag_name_postponedcountry_id
***************************************************************************************
_get_tax_tags
line.tag_namevals['country_id']
***************************************************************************************
create
{'name': _('Bank Suspense Account'), 'code': self.env['account.account']._search_new_account_code(company, code_digits, company.bank_account_code_prefix or ''), 'user_type_id': self.env.ref('account.data_account_type_current_liabilities').id, 'company_id': company.id}
***************************************************************************************
search
[('company_id', '=', company.id)]
***************************************************************************************
search
[('code', '=like', self.transfer_account_code_prefix + '%'), ('company_id', '=', company.id)]
***************************************************************************************
_load_records
data_list
***************************************************************************************
_load_records
account_data_listupdate
***************************************************************************************
search
[('chart_template_id', '=', self.id)]
***************************************************************************************
search
[('model_id', '=', account_reconcile_model.id)]
***************************************************************************************
search
[('chart_template_id', '=', self.id)]
***************************************************************************************
search
[('chart_template_id', '=', self.id)]
***************************************************************************************
search
[('country_id', '=', country.id), ('company_id', '=', company.id)]
***************************************************************************************
search
[('country_id', '=', country.id)]
***************************************************************************************
with_company
company
***************************************************************************************
search
[('code', '=', new_code), ('chart_template_id', 'in', chart_templates.ids)]
***************************************************************************************
search
[('company_id', '=', company.id)]
***************************************************************************************
create
{'name': _('Outstanding Receipts'), 'code': self.env['account.account']._search_new_account_code(company, self.code_digits, company.bank_account_code_prefix or ''), 'reconcile': True, 'user_type_id': account_type_current_assets.id, 'company_id': company.id}
***************************************************************************************
create
{'name': _('Outstanding Payments'), 'code': self.env['account.account']._search_new_account_code(company, self.code_digits, company.bank_account_code_prefix or ''), 'reconcile': True, 'user_type_id': account_type_current_assets.id, 'company_id': company.id}
***************************************************************************************
create
{'name': _('Cash Difference Loss'), 'code': self.env['account.account']._search_new_account_code(company, self.code_digits, '999'), 'user_type_id': self.env.ref('account.data_account_type_expenses').id, 'tag_ids': [(6, 0, self.env.ref('account.account_tag_investing').ids)], 'company_id': company.id}
***************************************************************************************
create
{'name': _('Cash Difference Gain'), 'code': self.env['account.account']._search_new_account_code(company, self.code_digits, '999'), 'user_type_id': self.env.ref('account.data_account_type_revenue').id, 'tag_ids': [(6, 0, self.env.ref('account.account_tag_investing').ids)], 'company_id': company.id}
***************************************************************************************
search
[('type_tax_use', 'in', ('sale', 'all')), ('company_id', '=', company.id)]
***************************************************************************************
search
[('type_tax_use', 'in', ('purchase', 'all')), ('company_id', '=', company.id)]
***************************************************************************************
create
{'name': acc['acc_name'], 'type': acc['account_type'], 'company_id': company.id, 'currency_id': acc.get('currency_id', self.env['res.currency']).id, 'sequence': 10}
***************************************************************************************
_search_new_account_code
existing_account.company_idlen(existing_account.code)existing_account.code[:-2]
***************************************************************************************
create
{'name': f'{existing_account.name} - {additional_label}', 'code': new_code, 'user_type_id': existing_account.user_type_id.id, 'company_id': existing_account.company_id.id}
***************************************************************************************
_search_new_account_code
companycode_digitscompany.bank_account_code_prefix or ''
***************************************************************************************
browse
request.allowed_company_ids[0]
***************************************************************************************
_search_new_account_code
companydigitsprefix
***************************************************************************************
search
search_domain
***************************************************************************************
_load_records
[{'xml_id': 'account.%s' % xml_id if '.' not in xml_id else xml_id, 'values': record, 'noupdate': True} for (xml_id, record) in data.items()]
***************************************************************************************
_search_new_account_code
companyself.code_digitscompany.bank_account_code_prefix or ''
***************************************************************************************
_search_new_account_code
companyself.code_digitscompany.bank_account_code_prefix or ''
***************************************************************************************
_search_new_account_code
companyself.code_digits'999'
***************************************************************************************
_search_new_account_code
companyself.code_digits'999'
***************************************************************************************
browse
vals.get('account_id')
***************************************************************************************
search
[('code', 'like', old_code), ('internal_type', '=', 'liquidity'), ('company_id', '=', self.id)]
***************************************************************************************
create
{'company_id': company.id}
***************************************************************************************
search
[('company_id', '=', self.id), ('user_type_id', '=', unaffected_earnings_type.id)]
***************************************************************************************
search
[('code', '=', str(code)), ('company_id', '=', self.id)]
***************************************************************************************
create
{'code': str(code), 'name': _('Undistributed Profits/Losses'), 'user_type_id': unaffected_earnings_type.id, 'company_id': self.id}
***************************************************************************************
_for_xml_id
'account.action_open_account_onboarding_sale_tax'
***************************************************************************************
_for_xml_id
'account.action_open_account_onboarding_create_invoice'
***************************************************************************************
search
[('company_id', '=', self.id)]
***************************************************************************************
search
[('company_id', '=', self.id)]
***************************************************************************************
search
[('company_id', '=', record.id), ('foreign_vat', '!=', False)]
***************************************************************************************
search
[('company_id', 'in', self.ids), ('state', '=', 'draft'), ('date', '<=', values['fiscalyear_lock_date'])]
***************************************************************************************
search
[('company_id', 'in', self.ids), ('is_reconciled', '=', False), ('date', '<=', values['fiscalyear_lock_date']), ('move_id.state', 'in', ('draft', 'posted'))]
***************************************************************************************
search
[('type', '=', 'general'), ('company_id', '=', self.id)]
***************************************************************************************
create
{'ref': _('Opening Journal Entry'), 'company_id': self.id, 'journal_id': default_journal.id, 'date': opening_date}
***************************************************************************************
search_count
[('state', '=', 'posted'), ('journal_id', '=', journal.id)]
***************************************************************************************
search
[('state', '=', 'posted'), ('journal_id', '=', journal.id), ('secure_sequence_number', '!=', 0)]
***************************************************************************************
search
[('company_id', '=', company.id)]
***************************************************************************************
create
{'name': _('Automatic Balancing Line'), 'move_id': self.account_opening_move_id.id, 'account_id': balancing_account.id, 'debit': credit_diff, 'credit': debit_diff}
***************************************************************************************
browse
res_ids
***************************************************************************************
_try_instantiating_foreign_taxes
self.country_idself.company_id
***************************************************************************************
read_group
domain['price_subtotal']['partner_id']
***************************************************************************************
check_access_rights
'write'
***************************************************************************************
read_group
[('partner_id', 'in', self.ids)]['partner_id']['partner_id']
***************************************************************************************
_for_xml_id
'account.action_move_out_invoice_type'
***************************************************************************************
search
[('move_type', 'in', ['out_invoice', 'out_refund']), ('partner_id', 'child_of', self.commercial_partner_id.id), ('state', '=', 'posted')]
***************************************************************************************
search
[('country_id', '=', record.country_id.id)]
***************************************************************************************
search
[('chart_template_id.country_id', '=', record.country_id.id)]
***************************************************************************************
search_count
similar_fpos_domain
***************************************************************************************
existing_accounting
self.company_id
***************************************************************************************
search
[('company_id', '=', self.env.company.id), ('tax_exigibility', '=', 'on_payment')]
***************************************************************************************
search_count
['|', ('currency_id', '=', self.id), ('company_currency_id', '=', self.id)]
***************************************************************************************
_get
record._name
***************************************************************************************
search
[('chart_template_id', '!=', False), ('id', 'in', self.env.registry.populated_models['res.company'])]
***************************************************************************************
search
[('company_id', 'in', company_ids.ids), ('type', 'in', ('cash', 'bank'))]
***************************************************************************************
search
['|', ('company_id', '=', company_id), ('company_id', '=', False), ('id', 'in', self.env.registry.populated_models['res.partner'])]
***************************************************************************************
browse
values['statement_id']
***************************************************************************************
browse
values['statement_id']
***************************************************************************************
browse
values['statement_id']
***************************************************************************************
search
[('active', '=', True)]
***************************************************************************************
search
[('chart_template_id', '!=', False), ('id', 'in', self.env.registry.populated_models['res.company'])]
***************************************************************************************
search
[('active', '=', True)]
***************************************************************************************
search
[('chart_template_id', '!=', False), ('id', 'in', self.env.registry.populated_models['res.company'])]
***************************************************************************************
search
domain
***************************************************************************************
search
[('company_id', '=', company_id), ('type', '=', journal_type)]
***************************************************************************************
search
['|', ('company_id', '=', company_id), ('company_id', '=', False), ('id', 'in', self.env.registry.populated_models['res.partner'])]
***************************************************************************************
browse
currency_id
***************************************************************************************
search
[('active', '=', True)]
***************************************************************************************
search
[('chart_template_id', '!=', False), ('id', 'in', self.env.registry.populated_models['res.company'])]
***************************************************************************************
search
['|', ('company_id', '=', company_id), ('company_id', '=', False), ('id', 'in', self.env.registry.populated_models['res.partner'])]
***************************************************************************************
search
[('company_id', '=', company_id), ('type', 'in', ('cash', 'bank'))]
***************************************************************************************
search
[('journal_id', '=', journal), ('payment_method_id.payment_type', '=', payment_type), ('code', 'not in', need_bank_account + other_blacklist)]
***************************************************************************************
search
[('chart_template_id', '!=', False), ('id', 'in', self.env.registry.populated_models['res.company'])]
***************************************************************************************
search
domain
***************************************************************************************
browse
values['model_id']
***************************************************************************************
search
[]
***************************************************************************************
search
[('currency_id', '=', currency_id)]
***************************************************************************************
browse
self.env.company.id
***************************************************************************************
browse
docids
***************************************************************************************
_get_query_currency_table
{'multi_company': True, 'date': {'date_to': fields.Date.today()}}
***************************************************************************************
browse
ids
***************************************************************************************
browse
ids
***************************************************************************************
browse
data['form']['journal_ids']
***************************************************************************************
browse
data['form']['company_id'][0]
***************************************************************************************
with_context
data['form'].get('used_context', {})
***************************************************************************************
apply_inheritance_specs
xml_treediff_xml_tree
***************************************************************************************
create
{'journal_id': bank_journal.id, 'date': time.strftime('%Y') + '-07-15', 'name': 'payment' + invoice_record.name, 'line_ids': [(0, 0, {'payment_ref': 'payment', 'partner_id': self.partner_agrolait_id, 'amount': amount, 'amount_currency': amount_currency, 'foreign_currency_id': currency_id})]}
***************************************************************************************
create
{'move_type': 'entry', 'date': '2019-01-01', 'line_ids': [(0, 0, {'name': 'line_debit', 'account_id': self.company_data['default_account_revenue'].id}), (0, 0, {'name': 'line_credit', 'account_id': self.company_data['default_account_revenue'].id})]}
***************************************************************************************
create
{'move_type': 'entry', 'date': '2019-01-01', 'line_ids': [(0, 0, {'account_id': account.id, 'currency_id': self.currency_data['currency'].id, 'debit': 100.0, 'credit': 0.0, 'amount_currency': 200.0}), (0, 0, {'account_id': account.id, 'currency_id': self.currency_data['currency'].id, 'debit': 0.0, 'credit': 100.0, 'amount_currency': -200.0})]}
***************************************************************************************
create
{'move_type': 'entry', 'date': '2019-01-01', 'line_ids': [(0, 0, {'account_id': account.id, 'currency_id': self.currency_data['currency'].id, 'debit': 100.0, 'credit': 0.0, 'amount_currency': 200.0}), (0, 0, {'account_id': account.id, 'currency_id': self.currency_data['currency'].id, 'debit': 0.0, 'credit': 50.0, 'amount_currency': -100.0}), (0, 0, {'account_id': self.company_data['default_account_expense'].id, 'currency_id': self.currency_data['currency'].id, 'debit': 0.0, 'credit': 50.0, 'amount_currency': -100.0})]}
***************************************************************************************
create
{'move_type': 'entry', 'date': '2019-01-01', 'line_ids': [(0, 0, {'name': 'line_debit', 'account_id': self.company_data['default_account_revenue'].id, 'analytic_account_id': self.test_analytic_account.id, 'analytic_tag_ids': [(6, 0, self.test_analytic_tag.ids)]}), (0, 0, {'name': 'line_credit', 'account_id': self.company_data['default_account_revenue'].id})]}
***************************************************************************************
create
{'name': 'BNK1', 'date': '2019-01-02', 'journal_id': self.company_data['default_journal_bank'].id, 'line_ids': [(0, 0, {'payment_ref': '/', 'amount': 100.0})]}
***************************************************************************************
create
{'name': 'BNK2', 'date': '2019-01-10', 'journal_id': self.company_data['default_journal_bank'].id, 'line_ids': [(0, 0, {'payment_ref': '/', 'amount': 50.0})]}
***************************************************************************************
create
{'name': 'BNK3', 'date': '2019-01-15', 'journal_id': self.company_data['default_journal_bank'].id, 'line_ids': [(0, 0, {'payment_ref': '/', 'amount': 25.0})], 'balance_end_real': 200.0}
***************************************************************************************
create
{'name': 'BNK4', 'date': '2019-01-03', 'journal_id': self.company_data['default_journal_bank'].id, 'line_ids': [(0, 0, {'payment_ref': '/', 'amount': 100.0})]}
***************************************************************************************
create
{'name': 'BNK1_1', 'date': '2019-01-01', 'journal_id': self.company_data['default_journal_bank'].id, 'line_ids': [(0, 0, {'payment_ref': '/', 'amount': 100.0})], 'balance_end_real': 100.0}
***************************************************************************************
create
{'name': 'BNK1_2', 'date': '2019-01-10', 'journal_id': self.company_data['default_journal_bank'].id, 'line_ids': [(0, 0, {'payment_ref': '/', 'amount': 50.0})]}
***************************************************************************************
create
{'name': 'BNK2_1', 'date': '2019-01-02', 'journal_id': self.company_data['default_journal_cash'].id, 'line_ids': [(0, 0, {'payment_ref': '/', 'amount': 20.0})], 'balance_end_real': 20.0}
***************************************************************************************
create
{'name': 'BNK2_2', 'date': '2019-01-12', 'journal_id': self.company_data['default_journal_cash'].id, 'line_ids': [(0, 0, {'payment_ref': '/', 'amount': 10.0})]}
***************************************************************************************
create
{'name': 'test_statement', 'date': '2019-01-01', 'journal_id': self.company_data['default_journal_cash'].id, 'balance_end_real': 100.0}
***************************************************************************************
create
{'name': 'test_statement', 'date': '2019-01-01', 'journal_id': journal.id, 'line_ids': [(0, 0, {'date': '2019-01-01', 'payment_ref': 'line_1', 'partner_id': self.partner_a.id, 'foreign_currency_id': foreign_currency and foreign_currency.id, 'amount': amount, 'amount_currency': amount_currency})]}
***************************************************************************************
create
{'name': 'test_statement', 'date': '2019-01-01', 'journal_id': self.bank_journal_2.id, 'line_ids': [(0, 0, {'date': '2019-01-01', 'payment_ref': 'line_1', 'partner_id': self.partner_a.id, 'foreign_currency_id': self.currency_2.id, 'amount': 0.0, 'amount_currency': 10.0})]}
***************************************************************************************
create
{'name': 'test_statement', 'date': '2019-01-01', 'journal_id': self.bank_journal_2.id, 'line_ids': [(0, 0, {'date': '2019-01-01', 'payment_ref': 'line_1', 'partner_id': self.partner_a.id, 'foreign_currency_id': self.currency_2.id, 'amount': 10.0, 'amount_currency': 0.0})]}
***************************************************************************************
create
{'name': 'test_statement', 'date': '2019-01-01', 'journal_id': self.bank_journal_2.id, 'line_ids': [(0, 0, {'date': '2019-01-01', 'payment_ref': 'line_1', 'partner_id': self.partner_a.id, 'foreign_currency_id': self.currency_1.id, 'amount': 0.0, 'amount_currency': 10.0})]}
***************************************************************************************
create
{'name': 'test_statement', 'date': '2019-01-01', 'journal_id': self.bank_journal_2.id, 'line_ids': [(0, 0, {'date': '2019-01-01', 'payment_ref': 'line_1', 'partner_id': self.partner_a.id, 'foreign_currency_id': self.currency_1.id, 'amount': 10.0, 'amount_currency': 0.0})]}
***************************************************************************************
create
{'name': 'test_statement', 'date': '2019-01-01', 'journal_id': self.bank_journal_2.id, 'line_ids': [(0, 0, {'date': '2019-01-01', 'payment_ref': 'line_1', 'partner_id': self.partner_a.id, 'foreign_currency_id': self.currency_3.id, 'amount': 0.0, 'amount_currency': 10.0})]}
***************************************************************************************
create
{'name': 'test_statement', 'date': '2019-01-01', 'journal_id': self.bank_journal_2.id, 'line_ids': [(0, 0, {'date': '2019-01-01', 'payment_ref': 'line_1', 'partner_id': self.partner_a.id, 'foreign_currency_id': self.currency_3.id, 'amount': 10.0, 'amount_currency': 0.0})]}
***************************************************************************************
create
{**statement_vals, 'line_ids': [(0, 0, statement_line_vals)]}
***************************************************************************************
create
{'name': 'test_statement', 'date': '2019-01-01', 'journal_id': journal.id, 'line_ids': [(0, 0, {'date': '2019-01-01', 'payment_ref': 'line_1', 'partner_id': self.partner_a.id, 'foreign_currency_id': foreign_currency and foreign_currency.id, 'amount': amount, 'amount_currency': amount_currency})]}
***************************************************************************************
create
[{'move_type': move_type, 'invoice_date': fields.Date.from_string('2016-01-01'), 'date': fields.Date.from_string('2016-01-01'), 'partner_id': self.partner_a.id, 'currency_id': counterpart_currency.id, 'invoice_line_ids': [(0, None, {'name': 'counterpart line, same amount', 'account_id': self.company_data['default_account_revenue'].id, 'quantity': 1, 'price_unit': abs(counterpart_amount)})]}, {'move_type': move_type, 'invoice_date': fields.Date.from_string('2016-01-01'), 'date': fields.Date.from_string('2016-01-01'), 'partner_id': self.partner_a.id, 'currency_id': counterpart_currency.id, 'invoice_line_ids': [(0, None, {'name': 'counterpart line, lower amount', 'account_id': self.company_data['default_account_revenue'].id, 'quantity': 1, 'price_unit': abs(counterpart_amount / 2)})]}, {'move_type': move_type, 'invoice_date': fields.Date.from_string('2016-01-01'), 'date': fields.Date.from_string('2016-01-01'), 'partner_id': self.partner_a.id, 'currency_id': counterpart_currency.id, 'invoice_line_ids': [(0, None, {'name': 'counterpart line, bigger amount', 'account_id': self.company_data['default_account_revenue'].id, 'quantity': 1, 'price_unit': abs(counterpart_amount * 2)})]}]
***************************************************************************************
create
{'move_type': 'entry', 'date': fields.Date.from_string('2016-01-01'), 'line_ids': [(0, None, {'name': 'counterpart of the whole move', 'account_id': random_acc_1.id, 'debit': 0.0, 'credit': 1030.0}), (0, None, {'name': 'test line 1 - receivable account', 'account_id': receivable_acc_1.id, 'currency_id': self.currency_2.id, 'debit': 500.0, 'credit': 0.0, 'amount_currency': 1500.0}), (0, None, {'name': 'test line 2 - another receivable account', 'account_id': receivable_acc_2.id, 'currency_id': self.currency_2.id, 'debit': 500.0, 'credit': 0.0, 'amount_currency': 1500.0}), (0, None, {'name': 'test line 3 - payment transfer account', 'account_id': payment_account.id, 'currency_id': self.currency_2.id, 'debit': 30.0, 'credit': 0.0, 'amount_currency': 90.0})]}
***************************************************************************************
create
{'name': 'test_statement', 'date': '2017-01-01', 'journal_id': self.bank_journal_2.id, 'line_ids': [(0, 0, {'date': '2019-01-01', 'payment_ref': 'line_1', 'partner_id': self.partner_a.id, 'amount': 7541.66})]}
***************************************************************************************
create
{'amount': 7767.7, 'date': '2019-01-01', 'currency_id': self.currency_2.id, 'payment_type': 'inbound', 'partner_type': 'customer'}
***************************************************************************************
create
{'name': 'analytic_account'}
***************************************************************************************
create
{**statement_vals, 'line_ids': [(0, 0, statement_line_vals)]}
***************************************************************************************
message_new
message_parsed{'move_type': 'in_invoice', 'journal_id': self.journal.id}
***************************************************************************************
message_new
message_parsed{'move_type': 'in_invoice', 'journal_id': self.journal.id}
***************************************************************************************
message_new
message_parsed{'move_type': 'in_invoice', 'journal_id': self.journal.id}
***************************************************************************************
message_new
message_parsed{'move_type': 'in_invoice', 'journal_id': self.journal.id}
***************************************************************************************
search
[('company_id', '=', self.company_data['company'].id)]
***************************************************************************************
create
{'move_type': 'entry', 'date': '2019-01-01', 'journal_id': self.company_data['default_journal_sale'].id}
***************************************************************************************
create
move_vals
***************************************************************************************
create
{'line_ids': [(0, 0, {'name': 'debit', 'account_id': self.company_data['default_account_revenue'].id, 'debit': 100.0, 'credit': 0.0}), (0, 0, {'name': 'credit', 'account_id': self.company_data['default_account_expense'].id, 'debit': 0.0, 'credit': 100.0})]}
***************************************************************************************
create
{'amount': 100.0, 'payment_type': 'inbound', 'partner_type': 'customer', 'payment_method_line_id': first_method.id}
***************************************************************************************
create
move_vals
***************************************************************************************
create
{'name': 'Multi method', 'code': 'multi', 'payment_type': 'inbound'}
***************************************************************************************
search
[('inbound_payment_method_line_ids.code', '=', 'multi')]
***************************************************************************************
create
{'move_type': 'out_invoice', 'journal_id': journal.id, 'partner_id': self.partner_a.id, 'invoice_date': '2019-01-21', 'date': '2019-01-21', 'invoice_line_ids': [(0, 0, {'product_id': self.product_a.id, 'quantity': 40.0, 'name': 'product test 1', 'discount': 10.0, 'price_unit': 2.27})]}
***************************************************************************************
create
{'move_type': 'out_refund', 'journal_id': journal.id, 'partner_id': self.partner_a.id, 'invoice_date': '2019-01-21', 'date': '2019-01-21', 'invoice_line_ids': [(0, 0, {'product_id': self.product_a.id, 'quantity': 1.0, 'name': 'product test 1', 'price_unit': 13.3})]}
***************************************************************************************
create
{'amount': 10.0, 'payment_type': 'outbound', 'partner_type': 'customer', 'partner_id': self.partner_a.id}
***************************************************************************************
create
{'journal_id': self.company_data['default_journal_bank'].id, 'date': '2016-01-01', 'line_ids': [(0, 0, {'payment_ref': 'test', 'amount': 10.0})]}
***************************************************************************************
create
[{'move_type': 'entry', 'line_ids': [(0, None, {'name': 'move 1 receivable line', 'account_id': self.company_data['default_account_receivable'].id, 'debit': 1000.0, 'credit': 0.0}), (0, None, {'name': 'move 1 counterpart line', 'account_id': self.company_data['default_account_expense'].id, 'debit': 0.0, 'credit': 1000.0})]}, {'move_type': 'entry', 'line_ids': [(0, None, {'name': 'move 2 receivable line', 'account_id': self.company_data['default_account_receivable'].id, 'debit': 0.0, 'credit': 2000.0}), (0, None, {'name': 'move 2 counterpart line', 'account_id': self.company_data['default_account_expense'].id, 'debit': 2000.0, 'credit': 0.0})]}]
***************************************************************************************
create
{'name': 'Oopo'}
***************************************************************************************
create
[{'name': 'Jean', 'company_id': company.id}, {'name': 'Paulus'}]
***************************************************************************************
create
{'name': 'Belouga'}
***************************************************************************************
create
{'name': 'included_tax_line', 'amount_type': 'percent', 'amount': 20, 'price_include': True, 'include_base_amount': False}
***************************************************************************************
create
{'move_type': 'in_invoice', 'partner_id': self.partner_a.id, 'invoice_date': fields.Date.from_string('2019-01-01'), 'currency_id': self.currency_data['currency'].id, 'invoice_payment_term_id': self.pay_terms_a.id, 'invoice_line_ids': [{}]}
***************************************************************************************
create
{'name': '10% incl', 'type_tax_use': 'purchase', 'amount_type': 'percent', 'amount': 10, 'price_include': True, 'include_base_amount': True}
***************************************************************************************
create
{'name': '15% excl', 'type_tax_use': 'purchase', 'amount_type': 'percent', 'amount': 15}
***************************************************************************************
create
{'name': 'fiscal_pos_a', 'tax_ids': [(0, None, {'tax_src_id': tax_price_include.id, 'tax_dest_id': tax_price_exclude.id})]}
***************************************************************************************
create
{'name': 'product', 'uom_id': self.env.ref('uom.product_uom_unit').id, 'standard_price': 110.0, 'supplier_taxes_id': [(6, 0, tax_price_include.ids)]}
***************************************************************************************
create
{'name': '10% incl', 'type_tax_use': 'purchase', 'amount_type': 'percent', 'amount': 10, 'price_include': True, 'include_base_amount': True}
***************************************************************************************
create
{'name': '20% incl', 'type_tax_use': 'purchase', 'amount_type': 'percent', 'amount': 20, 'price_include': True, 'include_base_amount': True}
***************************************************************************************
create
{'name': 'fiscal_pos_a', 'tax_ids': [(0, None, {'tax_src_id': tax_price_include_1.id, 'tax_dest_id': tax_price_include_2.id})]}
***************************************************************************************
create
{'name': 'product', 'uom_id': self.env.ref('uom.product_uom_unit').id, 'standard_price': 110.0, 'supplier_taxes_id': [(6, 0, tax_price_include_1.ids)]}
***************************************************************************************
browse
reversal['res_id']
***************************************************************************************
browse
reversal['res_id']
***************************************************************************************
browse
reversal['res_id']
***************************************************************************************
browse
reversal['res_id']
***************************************************************************************
create
{'move_type': 'in_invoice', 'partner_id': self.partner_a.id, 'invoice_date': fields.Date.from_string('2019-01-01'), 'currency_id': self.currency_data['currency'].id, 'invoice_payment_term_id': self.pay_terms_a.id, 'invoice_line_ids': [Command.create({'product_id': self.product_line_vals_1['product_id'], 'product_uom_id': self.product_line_vals_1['product_uom_id'], 'price_unit': self.product_line_vals_1['price_unit'], 'tax_ids': [Command.set(self.product_line_vals_1['tax_ids'])]}), Command.create({'product_id': self.product_line_vals_2['product_id'], 'product_uom_id': self.product_line_vals_2['product_uom_id'], 'price_unit': self.product_line_vals_2['price_unit'], 'tax_ids': [Command.set(self.product_line_vals_2['tax_ids'])]})]}
***************************************************************************************
create
{'move_type': 'in_invoice', 'partner_id': self.partner_a.id, 'invoice_date': fields.Date.from_string('2019-01-01'), 'currency_id': self.currency_data['currency'].id, 'invoice_payment_term_id': self.pay_terms_a.id, 'invoice_line_ids': [Command.create({'product_id': self.product_line_vals_1['product_id'], 'product_uom_id': self.product_line_vals_1['product_uom_id'], 'price_unit': self.product_line_vals_1['price_unit'], 'tax_ids': [Command.set(self.product_line_vals_1['tax_ids'])]})]}
***************************************************************************************
create
{'move_type': 'in_invoice', 'partner_id': self.partner_a.id, 'invoice_date': fields.Date.from_string('2019-01-01'), 'currency_id': self.currency_data['currency'].id, 'invoice_payment_term_id': self.pay_terms_a.id, 'invoice_line_ids': [Command.create({'product_id': self.product_line_vals_1['product_id'], 'product_uom_id': self.product_line_vals_1['product_uom_id'], 'price_unit': self.product_line_vals_1['price_unit'], 'tax_ids': [Command.set(self.product_line_vals_1['tax_ids'])]}), Command.create({'product_id': self.product_line_vals_2['product_id'], 'product_uom_id': self.product_line_vals_2['product_uom_id'], 'price_unit': self.product_line_vals_2['price_unit'], 'tax_ids': [Command.set(self.product_line_vals_2['tax_ids'])]})]}
***************************************************************************************
create
{'move_type': 'in_invoice', 'partner_id': self.partner_a.id, 'invoice_date': fields.Date.from_string('2019-01-01'), 'currency_id': self.currency_data['currency'].id, 'invoice_payment_term_id': self.pay_terms_a.id, 'invoice_line_ids': [Command.create({'product_id': self.product_line_vals_1['product_id'], 'product_uom_id': self.product_line_vals_1['product_uom_id'], 'price_unit': self.product_line_vals_1['price_unit'], 'quantity': -self.product_line_vals_1['quantity'], 'tax_ids': [Command.set(self.product_line_vals_1['tax_ids'])]}), Command.create({'product_id': self.product_line_vals_2['product_id'], 'product_uom_id': self.product_line_vals_2['product_uom_id'], 'price_unit': self.product_line_vals_2['price_unit'], 'quantity': -self.product_line_vals_2['quantity'], 'tax_ids': [Command.set(self.product_line_vals_2['tax_ids'])]})]}
***************************************************************************************
create
{'move_type': 'in_invoice', 'date': '2017-01-01', 'partner_id': self.partner_a.id, 'invoice_date': fields.Date.from_string('2017-01-01'), 'currency_id': self.currency_data['currency'].id, 'invoice_payment_term_id': self.pay_terms_a.id, 'invoice_line_ids': [(0, None, {'name': self.product_line_vals_1['name'], 'product_id': self.product_line_vals_1['product_id'], 'product_uom_id': self.product_line_vals_1['product_uom_id'], 'quantity': self.product_line_vals_1['quantity'], 'price_unit': self.product_line_vals_1['price_unit'], 'tax_ids': self.product_line_vals_1['tax_ids']}), (0, None, {'name': self.product_line_vals_2['name'], 'product_id': self.product_line_vals_2['product_id'], 'product_uom_id': self.product_line_vals_2['product_uom_id'], 'quantity': self.product_line_vals_2['quantity'], 'price_unit': self.product_line_vals_2['price_unit'], 'tax_ids': self.product_line_vals_2['tax_ids']})]}
***************************************************************************************
create
{'name': 'Accrual Expense Account', 'code': '234567', 'user_type_id': self.env.ref('account.data_account_type_expenses').id, 'reconcile': True}
***************************************************************************************
create
{'name': 'Accrual Revenue Account', 'code': '765432', 'user_type_id': self.env.ref('account.data_account_type_expenses').id, 'reconcile': True}
***************************************************************************************
browse
wizard_res['domain'][0][2]
***************************************************************************************
create
{'move_type': 'in_refund', 'partner_id': self.partner_a.id, 'invoice_date': fields.Date.from_string('2019-01-01'), 'currency_id': self.currency_data['currency'].id, 'invoice_payment_term_id': self.pay_terms_a.id, 'invoice_line_ids': [Command.create({'product_id': self.product_line_vals_1['product_id'], 'product_uom_id': self.product_line_vals_1['product_uom_id'], 'price_unit': self.product_line_vals_1['price_unit'], 'tax_ids': [Command.set(self.product_line_vals_1['tax_ids'])]}), Command.create({'product_id': self.product_line_vals_2['product_id'], 'product_uom_id': self.product_line_vals_2['product_uom_id'], 'price_unit': self.product_line_vals_2['price_unit'], 'tax_ids': [Command.set(self.product_line_vals_2['tax_ids'])]})]}
***************************************************************************************
create
{'move_type': 'in_refund', 'partner_id': self.partner_a.id, 'invoice_date': fields.Date.from_string('2019-01-01'), 'currency_id': self.currency_data['currency'].id, 'invoice_payment_term_id': self.pay_terms_a.id, 'invoice_line_ids': [Command.create({'product_id': self.product_line_vals_1['product_id'], 'product_uom_id': self.product_line_vals_1['product_uom_id'], 'price_unit': self.product_line_vals_1['price_unit'], 'tax_ids': [Command.set(self.product_line_vals_1['tax_ids'])]})]}
***************************************************************************************
_get_query_tax_details_from_domain
domain
***************************************************************************************
create
{'name': 'tax_20_affect', 'amount_type': 'percent', 'amount': 20.0, 'include_base_amount': True}
***************************************************************************************
create
{'name': 'tax_10', 'amount_type': 'percent', 'amount': 10.0}
***************************************************************************************
create
{'name': 'tax_5', 'amount_type': 'percent', 'amount': 5.0}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': '2019-01-01', 'invoice_line_ids': [Command.create({'name': 'line1', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': 1000.0, 'tax_ids': [Command.set((tax_20_affect + tax_10 + tax_5).ids)]}), Command.create({'name': 'line2', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': 1000.0, 'tax_ids': [Command.set(tax_10.ids)]}), Command.create({'name': 'line3', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': 1000.0, 'tax_ids': [Command.set(tax_10.ids)]}), Command.create({'name': 'line4', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': 2000.0, 'tax_ids': [Command.set((tax_20_affect + tax_10).ids)]})]}
***************************************************************************************
create
{'name': 'tax_group', 'amount_type': 'group', 'children_tax_ids': [Command.set((tax_20_affect + tax_10 + tax_5).ids)]}
***************************************************************************************
create
[{'name': 'tax_10_affect_%s' % i, 'amount_type': 'percent', 'amount': 10.0, 'include_base_amount': True} for i in range(3)]
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': '2019-01-01', 'invoice_line_ids': [Command.create({'name': 'line1', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': 1000.0, 'tax_ids': [Command.set(taxes_10_affect.ids)]}), Command.create({'name': 'line2', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': 1000.0, 'tax_ids': [Command.set((taxes_10_affect[0] + taxes_10_affect[2]).ids)]})]}
***************************************************************************************
create
{'name': 'eco_tax', 'amount_type': 'fixed', 'amount': 5.0, 'include_base_amount': True}
***************************************************************************************
create
{'name': 'tax_20', 'amount_type': 'percent', 'amount': 20.0}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': '2019-01-01', 'invoice_line_ids': [Command.create({'name': 'line1', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': 95.0, 'tax_ids': [Command.set((eco_tax + tax_20).ids)]})]}
***************************************************************************************
create
{'name': 'eco_tax', 'amount_type': 'percent', 'amount': 10.0, 'include_base_amount': True}
***************************************************************************************
create
{'name': 'tax_20', 'amount_type': 'percent', 'amount': 20.0}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': '2019-01-01', 'invoice_line_ids': [Command.create({'name': 'line1', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': 100.0, 'tax_ids': [Command.set((tax_10 + tax_20).ids)]}), Command.create({'name': 'line1', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': 100.0, 'tax_ids': [Command.set(tax_10.ids)]})]}
***************************************************************************************
create
{'name': 'Affecting', 'amount': 42, 'amount_type': 'percent', 'type_tax_use': 'sale', 'include_base_amount': True, 'sequence': 0}
***************************************************************************************
create
{'name': 'Affected', 'amount': 10, 'amount_type': 'percent', 'type_tax_use': 'sale', 'sequence': 1}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': '2021-08-01', 'invoice_line_ids': [Command.create({'name': 'affecting', 'account_id': self.company_data['default_account_revenue'].id, 'quantity': 1.0, 'price_unit': 100.0, 'tax_ids': affecting_tax.ids}), Command.create({'name': 'affected', 'account_id': self.company_data['default_account_revenue'].id, 'quantity': 1.0, 'price_unit': 100.0, 'tax_ids': affected_tax.ids}), Command.create({'name': 'affecting + affected', 'account_id': self.company_data['default_account_revenue'].id, 'quantity': 1.0, 'price_unit': 100.0, 'tax_ids': (affecting_tax + affected_tax).ids})]}
***************************************************************************************
create
{'name': 'tax_50', 'amount_type': 'percent', 'amount': 50.0}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': '2019-01-01', 'invoice_line_ids': [Command.create({'name': 'line%s' % i, 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': 0.01, 'tax_ids': [Command.set(tax_50.ids)]}) for i in range(7)]}
***************************************************************************************
create
{'name': 'tax_20_affect', 'amount_type': 'percent', 'amount': 20.0, 'include_base_amount': True}
***************************************************************************************
create
{'name': 'tax_10', 'amount_type': 'percent', 'amount': 10.0}
***************************************************************************************
create
{'name': 'fixed_tax', 'amount_type': 'fixed', 'amount': 10.0}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': '2019-01-01', 'invoice_line_ids': [Command.create({'name': 'line1', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': 100.0, 'quantity': 5, 'tax_ids': [Command.set(fixed_tax.ids)]}), Command.create({'name': 'line2', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': 100.0, 'quantity': 9, 'tax_ids': [Command.set(fixed_tax.ids)]}), Command.create({'name': 'line3', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': 100.0, 'quantity': -4, 'tax_ids': [Command.set(fixed_tax.ids)]})]}
***************************************************************************************
create
{'name': 'percent_tax', 'amount_type': 'percent', 'amount': 10.0}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': '2019-01-01', 'invoice_line_ids': [Command.create({'name': 'line1', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': 500.0, 'tax_ids': [Command.set(percent_tax.ids)]}), Command.create({'name': 'line2', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': 900.0, 'tax_ids': [Command.set(percent_tax.ids)]}), Command.create({'name': 'line3', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': -400.0, 'tax_ids': [Command.set(percent_tax.ids)]})]}
***************************************************************************************
create
{'name': 'fixed_tax', 'amount_type': 'fixed', 'amount': 10.0}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': '2019-01-01', 'invoice_line_ids': [Command.create({'name': 'line1', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': 500.0, 'tax_ids': [Command.set(fixed_tax.ids)]}), Command.create({'name': 'line2', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': 900.0, 'tax_ids': [Command.set(fixed_tax.ids)]}), Command.create({'name': 'line3', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': -400.0, 'tax_ids': [Command.set(fixed_tax.ids)]})]}
***************************************************************************************
create
{'name': 'percent_tax', 'amount_type': 'percent', 'amount': 10.0}
***************************************************************************************
create
{'date': '2019-01-01', 'line_ids': [Command.create({'name': 'base1', 'debit': 1000.0, 'credit': 0.0, 'account_id': self.company_data['default_account_revenue'].id, 'tax_ids': [Command.set(percent_tax.ids)]}), Command.create({'name': 'base2', 'debit': 10000.0, 'credit': 0.0, 'account_id': self.company_data['default_account_revenue'].id, 'tax_ids': [Command.set(percent_tax.ids)]}), Command.create({'name': 'tax1', 'debit': 100.0, 'credit': 0.0, 'account_id': self.company_data['default_account_revenue'].id, 'tax_repartition_line_id': tax_rep.id}), Command.create({'name': 'tax1', 'debit': 1000.0, 'credit': 0.0, 'account_id': self.company_data['default_account_revenue'].id, 'tax_repartition_line_id': tax_rep.id}), Command.create({'name': 'balance', 'debit': 0.0, 'credit': 12100.0, 'account_id': self.company_data['default_account_receivable'].id})]}
***************************************************************************************
create
{'name': 'percent_tax', 'amount_type': 'percent', 'amount': 10.0}
***************************************************************************************
create
{'date': '2019-01-01', 'line_ids': [Command.create({'name': 'base1', 'debit': 1200.0, 'credit': 0.0, 'amount_currency': 2400.0, 'account_id': self.company_data['default_account_revenue'].id, 'currency_id': self.currency_data['currency'].id, 'tax_ids': [Command.set(percent_tax.ids)]}), Command.create({'name': 'base2', 'debit': 12000.0, 'credit': 0.0, 'amount_currency': 6000.0, 'account_id': self.company_data['default_account_revenue'].id, 'currency_id': self.currency_data['currency'].id, 'tax_ids': [Command.set(percent_tax.ids)]}), Command.create({'name': 'tax1', 'debit': 120.0, 'credit': 0.0, 'amount_currency': 360.0, 'account_id': self.company_data['default_account_revenue'].id, 'currency_id': self.currency_data['currency'].id, 'tax_repartition_line_id': tax_rep.id}), Command.create({'name': 'tax1', 'debit': 1200.0, 'credit': 0.0, 'amount_currency': 200.0, 'account_id': self.company_data['default_account_revenue'].id, 'currency_id': self.currency_data['currency'].id, 'tax_repartition_line_id': tax_rep.id}), Command.create({'name': 'balance', 'debit': 0.0, 'credit': 14520.0, 'account_id': self.company_data['default_account_receivable'].id})]}
***************************************************************************************
create
{'name': 'percent_tax', 'amount_type': 'percent', 'amount': 10.0}
***************************************************************************************
create
{'name': 'tax_group', 'amount_type': 'group', 'children_tax_ids': [Command.set(percent_tax.ids)]}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': '2019-01-01', 'invoice_line_ids': [Command.create({'name': 'line1', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': 1000.0, 'tax_ids': [Command.set(percent_tax.ids)]}), Command.create({'name': 'line2', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': 1000.0, 'tax_ids': [Command.set(tax_group.ids)]})]}
***************************************************************************************
create
{'name': 'percent_tax', 'amount_type': 'percent', 'amount': 10.0}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': '2019-01-01', 'invoice_line_ids': [Command.create({'name': 'line1', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': 1000.0, 'tax_ids': [Command.set(percent_tax.ids)]})]}
***************************************************************************************
create
{'name': 'percent_tax', 'amount_type': 'percent', 'amount': 10.0, 'tax_exigibility': 'on_payment', 'cash_basis_transition_account_id': self.company_data['default_account_assets'].id}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': '2019-01-01', 'invoice_line_ids': [Command.create({'name': 'line1', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': 1000.0, 'tax_ids': [Command.set(percent_tax.ids)]})]}
***************************************************************************************
create
{'name': '10% incl', 'type_tax_use': 'sale', 'amount_type': 'percent', 'amount': 10, 'price_include': True, 'include_base_amount': True}
***************************************************************************************
create
{'name': '15% excl', 'type_tax_use': 'sale', 'amount_type': 'percent', 'amount': 15}
***************************************************************************************
create
{'name': 'fiscal_pos_a', 'tax_ids': [(0, None, {'tax_src_id': tax_price_include.id, 'tax_dest_id': tax_price_exclude.id})]}
***************************************************************************************
create
{'name': 'product', 'uom_id': self.env.ref('uom.product_uom_unit').id, 'lst_price': 110.0, 'taxes_id': [(6, 0, tax_price_include.ids)]}
***************************************************************************************
create
{'name': '10% incl', 'type_tax_use': 'sale', 'amount_type': 'percent', 'amount': 10, 'price_include': True, 'include_base_amount': True}
***************************************************************************************
create
{'name': '20% incl', 'type_tax_use': 'sale', 'amount_type': 'percent', 'amount': 20, 'price_include': True, 'include_base_amount': True}
***************************************************************************************
create
{'name': 'fiscal_pos_a', 'tax_ids': [(0, None, {'tax_src_id': tax_price_include_1.id, 'tax_dest_id': tax_price_include_2.id})]}
***************************************************************************************
create
{'name': 'product', 'uom_id': self.env.ref('uom.product_uom_unit').id, 'lst_price': 110.0, 'taxes_id': [(6, 0, tax_price_include_1.ids)]}
***************************************************************************************
search
[('name', '=', decimal_precision_name)]
***************************************************************************************
create
{'move_type': 'out_invoice', 'invoice_date': '2017-01-01', 'date': '2017-01-01', 'partner_id': self.partner_a.id, 'currency_id': self.currency_data['currency'].id, 'invoice_line_ids': [(0, 0, {'name': 'test line', 'price_unit': 0.025, 'quantity': 1, 'account_id': self.company_data['default_account_revenue'].id})]}
***************************************************************************************
create
{'move_type': 'out_invoice', 'invoice_date': '2017-01-01', 'date': '2017-01-01', 'partner_id': self.partner_a.id, 'currency_id': self.currency_data['currency'].id}
***************************************************************************************
create
{'name': '21%', 'amount': 21.0, 'price_include': True, 'include_base_amount': True}
***************************************************************************************
create
{'move_type': 'out_invoice', 'invoice_date': '2017-01-01', 'date': '2017-01-01', 'partner_id': self.partner_a.id, 'invoice_line_ids': [(0, 0, {'name': 'test line', 'price_unit': 100.0, 'account_id': self.company_data['default_account_revenue'].id, 'tax_ids': [(6, 0, tax.ids)]})]}
***************************************************************************************
create
{'name': 'product', 'lst_price': 100.0, 'property_account_income_id': self.company_data['default_account_revenue'].id, 'taxes_id': [(6, 0, tax.ids)]}
***************************************************************************************
create
{'name': 'fiscal_position'}
***************************************************************************************
create
{'name': 'Tax 5.5% price included', 'amount': 5.5, 'amount_type': 'percent', 'price_include': True}
***************************************************************************************
create
{'name': 'test_analytic_tag'}
***************************************************************************************
create
{'name': 'test_analytic_account', 'partner_id': self.invoice.partner_id.id, 'code': 'TEST'}
***************************************************************************************
create
{'name': 'test_analytic_account1', 'code': 'TEST1'}
***************************************************************************************
browse
reversal['res_id']
***************************************************************************************
browse
reversal['res_id']
***************************************************************************************
browse
reversal['res_id']
***************************************************************************************
browse
reversal['res_id']
***************************************************************************************
search
[('move_type', '=', 'out_refund'), ('company_id', '=', self.invoice.company_id.id)]
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': fields.Date.from_string('2019-01-01'), 'currency_id': self.currency_data['currency'].id, 'invoice_payment_term_id': self.pay_terms_a.id, 'invoice_line_ids': [(0, None, {'product_id': self.product_a.id, 'product_uom_id': self.product_a.uom_id.id, 'quantity': 1.0, 'price_unit': 1000.0, 'tax_ids': [(6, 0, self.product_a.taxes_id.ids)]}), (0, None, {'product_id': self.product_b.id, 'product_uom_id': self.product_b.uom_id.id, 'quantity': 1.0, 'price_unit': 200.0, 'tax_ids': [(6, 0, self.product_b.taxes_id.ids)]})]}
***************************************************************************************
create
{'name': 'partner_a_child', 'parent_id': self.partner_a.id}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': partner_a_child.id, 'invoice_date': fields.Date.from_string('2019-01-01'), 'currency_id': self.currency_data['currency'].id, 'invoice_payment_term_id': self.pay_terms_a.id, 'invoice_line_ids': [Command.create({'product_id': self.product_line_vals_1['product_id'], 'product_uom_id': self.product_line_vals_1['product_uom_id'], 'price_unit': self.product_line_vals_1['price_unit'], 'tax_ids': [Command.set(self.product_line_vals_1['tax_ids'])]}), Command.create({'product_id': self.product_line_vals_2['product_id'], 'product_uom_id': self.product_line_vals_2['product_uom_id'], 'price_unit': self.product_line_vals_2['price_unit'], 'tax_ids': [Command.set(self.product_line_vals_2['tax_ids'])]})]}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': fields.Date.from_string('2019-01-01'), 'currency_id': self.currency_data['currency'].id, 'invoice_payment_term_id': self.pay_terms_a.id, 'invoice_line_ids': [Command.create({'product_id': self.product_line_vals_1['product_id'], 'product_uom_id': self.product_line_vals_1['product_uom_id'], 'price_unit': self.product_line_vals_1['price_unit'], 'tax_ids': [Command.set(self.product_line_vals_1['tax_ids'])]})]}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_line_ids': [(0, None, {'name': 'test_out_invoice_write_2', 'quantity': 1.0, 'price_unit': 2000})]}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': fields.Date.from_string('2016-01-01'), 'date': fields.Date.from_string('2015-01-01'), 'currency_id': self.currency_data['currency'].id, 'invoice_payment_term_id': self.pay_terms_a.id, 'invoice_line_ids': [(0, None, {'name': self.product_line_vals_1['name'], 'product_id': self.product_line_vals_1['product_id'], 'product_uom_id': self.product_line_vals_1['product_uom_id'], 'quantity': self.product_line_vals_1['quantity'], 'price_unit': self.product_line_vals_1['price_unit'], 'tax_ids': self.product_line_vals_1['tax_ids']}), (0, None, {'name': self.product_line_vals_2['name'], 'product_id': self.product_line_vals_2['product_id'], 'product_uom_id': self.product_line_vals_2['product_uom_id'], 'quantity': self.product_line_vals_2['quantity'], 'price_unit': self.product_line_vals_2['price_unit'], 'tax_ids': self.product_line_vals_2['tax_ids']})]}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': fields.Date.from_string('2019-01-01'), 'currency_id': self.currency_data['currency'].id, 'invoice_payment_term_id': self.pay_terms_a.id, 'invoice_line_ids': [Command.create({'product_id': self.product_line_vals_1['product_id'], 'product_uom_id': self.product_line_vals_1['product_uom_id'], 'price_unit': self.product_line_vals_1['price_unit'], 'tax_ids': [Command.set(self.product_line_vals_1['tax_ids'])]}), Command.create({'product_id': self.product_line_vals_2['product_id'], 'product_uom_id': self.product_line_vals_2['product_uom_id'], 'price_unit': self.product_line_vals_2['price_unit'], 'tax_ids': [Command.set(self.product_line_vals_2['tax_ids'])]})]}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': fields.Date.from_string('2019-01-01'), 'currency_id': self.currency_data['currency'].id, 'invoice_payment_term_id': self.pay_terms_a.id, 'invoice_line_ids': [Command.create({'product_id': self.product_line_vals_1['product_id'], 'product_uom_id': self.product_line_vals_1['product_uom_id'], 'price_unit': self.product_line_vals_1['price_unit'], 'quantity': -self.product_line_vals_1['quantity'], 'tax_ids': [Command.set(self.product_line_vals_1['tax_ids'])]}), Command.create({'product_id': self.product_line_vals_2['product_id'], 'product_uom_id': self.product_line_vals_2['product_uom_id'], 'price_unit': self.product_line_vals_2['price_unit'], 'quantity': -self.product_line_vals_2['quantity'], 'tax_ids': [Command.set(self.product_line_vals_2['tax_ids'])]})]}
***************************************************************************************
create
[{'name': 'Test tag %s' % i, 'applicability': 'taxes', 'country_id': country.id} for i in range(8)]
***************************************************************************************
create
[{'name': 'Test tax include_base_amount = %s' % include_base_amount, 'amount': 10.0, 'include_base_amount': include_base_amount, 'invoice_repartition_line_ids': [(0, 0, {'factor_percent': 100, 'repartition_type': 'base', 'tag_ids': [(6, 0, tags[i * 4].ids)]}), (0, 0, {'factor_percent': 100, 'repartition_type': 'tax', 'tag_ids': [(6, 0, tags[i * 4 + 1].ids)]})], 'refund_repartition_line_ids': [(0, 0, {'factor_percent': 100, 'repartition_type': 'base', 'tag_ids': [(6, 0, tags[i * 4 + 2].ids)]}), (0, 0, {'factor_percent': 100, 'repartition_type': 'tax', 'tag_ids': [(6, 0, tags[i * 4 + 3].ids)]})]} for (i, include_base_amount) in enumerate((True, False))]
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': fields.Date.from_string('2019-01-01'), 'invoice_payment_term_id': self.pay_terms_a.id, 'invoice_line_ids': [(0, 0, {'product_id': self.product_a.id, 'price_unit': 1000.0, 'tax_ids': [(6, 0, taxes.ids)]})]}
***************************************************************************************
create
{'move_type': 'out_invoice', 'date': '2017-01-01', 'partner_id': self.partner_a.id, 'invoice_date': fields.Date.from_string('2017-01-01'), 'currency_id': self.currency_data['currency'].id, 'invoice_payment_term_id': self.pay_terms_a.id, 'invoice_line_ids': [(0, None, {'name': self.product_line_vals_1['name'], 'product_id': self.product_line_vals_1['product_id'], 'product_uom_id': self.product_line_vals_1['product_uom_id'], 'quantity': self.product_line_vals_1['quantity'], 'price_unit': self.product_line_vals_1['price_unit'], 'tax_ids': self.product_line_vals_1['tax_ids']}), (0, None, {'name': self.product_line_vals_2['name'], 'product_id': self.product_line_vals_2['product_id'], 'product_uom_id': self.product_line_vals_2['product_uom_id'], 'quantity': self.product_line_vals_2['quantity'], 'price_unit': self.product_line_vals_2['price_unit'], 'tax_ids': self.product_line_vals_2['tax_ids']})]}
***************************************************************************************
create
{'name': 'zero_balance_payment_term', 'line_ids': [(0, 0, {'value': 'percent', 'value_amount': 100.0, 'sequence': 10, 'days': 0, 'option': 'day_after_invoice_date'}), (0, 0, {'value': 'balance', 'value_amount': 0.0, 'sequence': 20, 'days': 0, 'option': 'day_after_invoice_date'})]}
***************************************************************************************
create
{'name': 'zero_balance_tax', 'amount_type': 'percent', 'amount': 0.0}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': fields.Date.from_string('2019-01-01'), 'invoice_payment_term_id': zero_balance_payment_term.id, 'invoice_line_ids': [(0, None, {'name': 'whatever', 'quantity': 1.0, 'price_unit': 1000.0, 'tax_ids': [(6, 0, zero_balance_tax.ids)]})]}
***************************************************************************************
create
{'name': '2019-01-01', 'rate': 0.14, 'currency_id': self.currency_data['currency'].id, 'company_id': self.company_data['company'].id}
***************************************************************************************
create
{'move_type': 'out_invoice', 'invoice_date': '2019-01-01', 'date': '2019-01-01', 'partner_id': self.partner_a.id, 'currency_id': self.currency_data['currency'].id, 'invoice_payment_term_id': self.env.ref('account.account_payment_term_immediate').id, 'invoice_line_ids': [(0, 0, {'name': 'line1', 'price_unit': 38.73553, 'quantity': 38.0}), (0, 0, {'name': 'line2', 'price_unit': 4083.19, 'quantity': 222.0}), (0, 0, {'name': 'line3', 'price_unit': 49.45257, 'quantity': 35.0}), (0, 0, {'name': 'line4', 'price_unit': 17.99, 'quantity': 1.0})]}
***************************************************************************************
create
{'move_type': 'out_invoice', 'invoice_date': '2019-01-01', 'date': '2019-01-01', 'partner_id': self.partner_a.id, 'invoice_payment_term_id': self.env.ref('account.account_payment_term_immediate').id}
***************************************************************************************
create
{'name': 'product', 'uom_id': self.env.ref('uom.product_uom_unit').id, 'lst_price': 1000.0, 'standard_price': 800.0, 'company_id': False}
***************************************************************************************
create
{'name': 'partner', 'company_id': False}
***************************************************************************************
create
{'name': 'test_out_invoice_multi_company', 'code': 'XXXXX', 'type': 'sale', 'company_id': self.company_data_2['company'].id}
***************************************************************************************
create
{'move_type': 'out_invoice', 'invoice_date': '2017-01-01', 'date': '2017-01-01', 'partner_id': partner.id, 'journal_id': journal.id, 'invoice_line_ids': [(0, 0, {'product_id': product.id, 'price_unit': 1000.0})]}
***************************************************************************************
create
{'move_type': 'out_invoice', 'invoice_date': '2017-01-01', 'invoice_date_due': '2017-01-01', 'date': '2017-01-01', 'partner_id': self.partner_a.id, 'currency_id': self.currency_data['currency'].id, 'invoice_line_ids': [(0, None, {'product_id': self.product_a.id, 'product_uom_id': self.product_a.uom_id.id, 'quantity': 1.0, 'price_unit': 1000.0, 'tax_ids': [(6, 0, self.product_a.taxes_id.ids)]})]}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': fields.Date.from_string('2016-01-01'), 'currency_id': self.currency_data['currency'].id, 'invoice_payment_term_id': self.pay_terms_a.id, 'invoice_line_ids': [Command.create({'product_id': self.product_line_vals_1['product_id'], 'product_uom_id': self.product_line_vals_1['product_uom_id'], 'price_unit': self.product_line_vals_1['price_unit'], 'tax_ids': [Command.set(self.product_line_vals_1['tax_ids'])]}), Command.create({'product_id': self.product_line_vals_2['product_id'], 'product_uom_id': self.product_line_vals_2['product_uom_id'], 'price_unit': self.product_line_vals_2['price_unit'], 'tax_ids': [Command.set(self.product_line_vals_2['tax_ids'])]})]}
***************************************************************************************
search
[('name', '=', self.env['account.move.line']._fields['price_unit']._digits)]
***************************************************************************************
search
[('name', '=', self.env['account.move.line']._fields['price_unit']._digits)]
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'Accrual Expense Account', 'code': '234567', 'user_type_id': self.env.ref('account.data_account_type_expenses').id, 'reconcile': True}
***************************************************************************************
create
{'name': 'Accrual Revenue Account', 'code': '765432', 'user_type_id': self.env.ref('account.data_account_type_expenses').id, 'reconcile': True}
***************************************************************************************
browse
wizard_res['domain'][0][2]
***************************************************************************************
create
{'move_type': 'out_refund', 'partner_id': self.partner_a.id, 'invoice_date': fields.Date.from_string('2019-01-01'), 'currency_id': self.currency_data['currency'].id, 'invoice_payment_term_id': self.pay_terms_a.id, 'invoice_line_ids': [Command.create({'product_id': self.product_line_vals_1['product_id'], 'product_uom_id': self.product_line_vals_1['product_uom_id'], 'price_unit': self.product_line_vals_1['price_unit'], 'tax_ids': [Command.set(self.product_line_vals_1['tax_ids'])]}), Command.create({'product_id': self.product_line_vals_2['product_id'], 'product_uom_id': self.product_line_vals_2['product_uom_id'], 'price_unit': self.product_line_vals_2['price_unit'], 'tax_ids': [Command.set(self.product_line_vals_2['tax_ids'])]})]}
***************************************************************************************
create
{'move_type': 'out_refund', 'partner_id': self.partner_a.id, 'invoice_date': fields.Date.from_string('2019-01-01'), 'currency_id': self.currency_data['currency'].id, 'invoice_payment_term_id': self.pay_terms_a.id, 'invoice_line_ids': [Command.create({'product_id': self.product_line_vals_1['product_id'], 'product_uom_id': self.product_line_vals_1['product_uom_id'], 'price_unit': self.product_line_vals_1['price_unit'], 'tax_ids': [Command.set(self.product_line_vals_1['tax_ids'])]})]}
***************************************************************************************
create
[{'move_type': 'out_invoice', 'date': '2017-01-01', 'invoice_date': '2017-01-01', 'partner_id': self.partner_a.id, 'invoice_line_ids': [(0, 0, {'name': 'aaaa', 'price_unit': 100.0})]}, {'move_type': 'in_invoice', 'date': '2017-01-01', 'invoice_date': '2017-01-01', 'partner_id': self.partner_a.id, 'invoice_line_ids': [(0, 0, {'name': 'aaaa', 'price_unit': 100.0})]}]
***************************************************************************************
create
{'move_type': 'out_invoice', 'date': '2017-01-01', 'invoice_date': '2017-01-01', 'partner_id': self.partner_a.id, 'currency_id': self.curr_1.id, 'invoice_line_ids': [(0, 0, {'name': '/', 'price_unit': 2500.0})]}
***************************************************************************************
create
{'move_type': 'in_invoice', 'date': '2017-01-01', 'invoice_date': '2017-01-01', 'partner_id': self.partner_a.id, 'currency_id': self.curr_1.id, 'invoice_line_ids': [(0, 0, {'name': '/', 'price_unit': 2500.0})]}
***************************************************************************************
create
{'move_type': 'out_invoice', 'date': '2017-01-01', 'invoice_date': '2017-01-01', 'partner_id': self.partner_a.id, 'currency_id': self.curr_2.id, 'invoice_line_ids': [(0, 0, {'name': '/', 'price_unit': 7500.0})]}
***************************************************************************************
create
{'move_type': 'in_invoice', 'date': '2017-01-01', 'invoice_date': '2017-01-01', 'partner_id': self.partner_a.id, 'currency_id': self.curr_2.id, 'invoice_line_ids': [(0, 0, {'name': '/', 'price_unit': 7500.0})]}
***************************************************************************************
browse
list(current_amounts.keys())
***************************************************************************************
create
{'move_type': 'entry', 'date': '2016-01-01', 'line_ids': [(0, 0, {'debit': 1000.0, 'credit': 0.0, 'account_id': account_id}), (0, 0, {'debit': 200.0, 'credit': 0.0, 'account_id': account_id}), (0, 0, {'debit': 0.0, 'credit': 300.0, 'account_id': account_id}), (0, 0, {'debit': 0.0, 'credit': 400.0, 'account_id': account_id}), (0, 0, {'debit': 0.0, 'credit': 500.0, 'account_id': account_id})]}
***************************************************************************************
create
[{'move_type': 'entry', 'date': '2016-01-01', 'line_ids': [(0, 0, {'debit': 1200.0, 'credit': 0.0, 'amount_currency': 3600.0, 'account_id': account_id, 'currency_id': currency_id}), (0, 0, {'debit': 120.0, 'credit': 0.0, 'amount_currency': 360.0, 'account_id': account_id, 'currency_id': currency_id}), (0, 0, {'debit': 0.0, 'credit': 1320.0, 'account_id': account_id})]}, {'move_type': 'entry', 'date': '2017-01-01', 'line_ids': [(0, 0, {'debit': 0.0, 'credit': 240.0, 'amount_currency': -480.0, 'account_id': account_id, 'currency_id': currency_id}), (0, 0, {'debit': 0.0, 'credit': 720.0, 'amount_currency': -1440.0, 'account_id': account_id, 'currency_id': currency_id}), (0, 0, {'debit': 0.0, 'credit': 1020.0, 'amount_currency': -2040.0, 'account_id': account_id, 'currency_id': currency_id}), (0, 0, {'debit': 1980.0, 'credit': 0.0, 'account_id': account_id})]}]
***************************************************************************************
create
[{'move_type': 'entry', 'date': '2016-01-01', 'line_ids': [(0, 0, {'debit': 1200.0, 'credit': 0.0, 'amount_currency': 3600.0, 'account_id': account_id, 'currency_id': currency1_id}), (0, 0, {'debit': 780.0, 'credit': 0.0, 'amount_currency': 2340.0, 'account_id': account_id, 'currency_id': currency1_id}), (0, 0, {'debit': 0.0, 'credit': 1980.0, 'account_id': account_id})]}, {'move_type': 'entry', 'date': '2017-01-01', 'line_ids': [(0, 0, {'debit': 0.0, 'credit': 240.0, 'amount_currency': -960.0, 'account_id': account_id, 'currency_id': currency2_id}), (0, 0, {'debit': 0.0, 'credit': 720.0, 'amount_currency': -2880.0, 'account_id': account_id, 'currency_id': currency2_id}), (0, 0, {'debit': 0.0, 'credit': 1020.0, 'amount_currency': -4080.0, 'account_id': account_id, 'currency_id': currency2_id}), (0, 0, {'debit': 1980.0, 'credit': 0.0, 'account_id': account_id})]}]
***************************************************************************************
create
{'name': '2018-01-01', 'rate': 8.0, 'currency_id': currency1_id, 'company_id': self.company_data['company'].id}
***************************************************************************************
create
{'name': '2018-01-01', 'rate': 2.0, 'currency_id': currency2_id, 'company_id': self.company_data['company'].id}
***************************************************************************************
create
[{'move_type': 'entry', 'date': '2018-01-01', 'line_ids': [(0, 0, {'debit': 1200.0, 'credit': 0.0, 'amount_currency': 9600.0, 'account_id': account_id, 'currency_id': currency1_id}), (0, 0, {'debit': 960.0, 'credit': 0.0, 'amount_currency': 1920.0, 'account_id': account_id, 'currency_id': currency2_id}), (0, 0, {'debit': 0.0, 'credit': 2160.0, 'account_id': account_id})]}, {'move_type': 'entry', 'date': '2017-01-01', 'line_ids': [(0, 0, {'debit': 0.0, 'credit': 1200.0, 'amount_currency': -4800.0, 'account_id': account_id, 'currency_id': currency2_id}), (0, 0, {'debit': 0.0, 'credit': 960.0, 'amount_currency': -1920.0, 'account_id': account_id, 'currency_id': currency1_id}), (0, 0, {'debit': 2160.0, 'credit': 0.0, 'account_id': account_id})]}]
***************************************************************************************
create
{'move_type': 'entry', 'date': '2016-01-01', 'line_ids': [(0, 0, {'debit': 1200.0, 'credit': 0.0, 'amount_currency': 3600.0, 'account_id': self.company_data['default_account_receivable'].id, 'currency_id': self.currency_data['currency'].id}), (0, 0, {'debit': 0.0, 'credit': 1200.0, 'account_id': self.company_data['default_account_revenue'].id})]}
***************************************************************************************
create
{'move_type': 'entry', 'date': '2017-01-01', 'line_ids': [(0, 0, {'debit': 0.0, 'credit': 1800.0, 'amount_currency': -3600.0, 'account_id': self.company_data['default_account_receivable'].id, 'currency_id': self.currency_data['currency'].id}), (0, 0, {'debit': 1800.0, 'credit': 0.0, 'account_id': self.company_data['default_account_revenue'].id})]}
***************************************************************************************
create
{'move_type': 'entry', 'date': '2016-01-01', 'line_ids': [(0, 0, {'debit': 1200.0, 'credit': 0.0, 'amount_currency': 7200.0, 'account_id': self.company_data['default_account_receivable'].id, 'currency_id': self.currency_data_2['currency'].id}), (0, 0, {'debit': 0.0, 'credit': 1200.0, 'account_id': self.company_data['default_account_revenue'].id})]}
***************************************************************************************
create
{'move_type': 'entry', 'date': '2017-01-01', 'line_ids': [(0, 0, {'debit': 0.0, 'credit': 1200.0, 'amount_currency': -2400.0, 'account_id': self.company_data['default_account_receivable'].id, 'currency_id': self.currency_data['currency'].id}), (0, 0, {'debit': 1200.0, 'credit': 0.0, 'account_id': self.company_data['default_account_revenue'].id})]}
***************************************************************************************
create
{'move_type': 'entry', 'date': '2016-01-01', 'line_ids': [(0, 0, {'debit': 0.0, 'credit': 100.0, 'account_id': self.company_data['default_account_revenue'].id, 'tax_ids': [(6, 0, (self.cash_basis_tax_a_third_amount + self.cash_basis_tax_tiny_amount).ids)]}), (0, 0, {'debit': 0.0, 'credit': 33.33, 'account_id': self.cash_basis_transfer_account.id, 'tax_repartition_line_id': self.cash_basis_tax_a_third_amount.invoice_repartition_line_ids.filtered(lambda line: line.repartition_type == 'tax').id}), (0, 0, {'debit': 0.0, 'credit': 0.01, 'account_id': self.cash_basis_transfer_account.id, 'tax_repartition_line_id': self.cash_basis_tax_tiny_amount.invoice_repartition_line_ids.filtered(lambda line: line.repartition_type == 'tax').id}), (0, 0, {'debit': 44.45, 'credit': 0.0, 'account_id': self.extra_receivable_account_1.id}), (0, 0, {'debit': 44.45, 'credit': 0.0, 'account_id': self.extra_receivable_account_2.id}), (0, 0, {'debit': 44.45, 'credit': 0.0, 'account_id': self.extra_receivable_account_2.id}), (0, 0, {'debit': 0.0, 'credit': 0.01, 'account_id': self.extra_payable_account_1.id})]}
***************************************************************************************
create
{'move_type': 'entry', 'date': '2017-01-01', 'line_ids': [(0, 0, {'debit': 0.0, 'credit': 33.34, 'account_id': self.extra_receivable_account_1.id}), (0, 0, {'debit': 0.0, 'credit': 11.11, 'account_id': self.extra_receivable_account_1.id}), (0, 0, {'debit': 0.0, 'credit': 88.89, 'account_id': self.extra_receivable_account_2.id}), (0, 0, {'debit': 0.0, 'credit': 0.01, 'account_id': self.extra_receivable_account_2.id}), (0, 0, {'debit': 0.01, 'credit': 0.0, 'account_id': self.extra_payable_account_1.id}), (0, 0, {'debit': 133.34, 'credit': 0.0, 'account_id': self.company_data['default_account_revenue'].id})]}
***************************************************************************************
create
{'move_type': 'entry', 'date': '2016-01-01', 'line_ids': [(0, 0, {'debit': 0.0, 'credit': 33.34, 'amount_currency': -100.0, 'currency_id': currency_id, 'account_id': self.company_data['default_account_revenue'].id, 'tax_ids': [(6, 0, taxes.ids)]}), (0, 0, {'debit': 0.0, 'credit': 11.1, 'amount_currency': -33.33, 'currency_id': currency_id, 'account_id': self.cash_basis_transfer_account.id, 'tax_repartition_line_id': self.cash_basis_tax_a_third_amount.invoice_repartition_line_ids.filtered(lambda line: line.repartition_type == 'tax').id}), (0, 0, {'debit': 0.0, 'credit': 0.01, 'amount_currency': -0.01, 'currency_id': currency_id, 'account_id': self.cash_basis_transfer_account.id, 'tax_repartition_line_id': self.cash_basis_tax_tiny_amount.invoice_repartition_line_ids.filtered(lambda line: line.repartition_type == 'tax').id}), (0, 0, {'debit': 14.82, 'credit': 0.0, 'amount_currency': 44.45, 'currency_id': currency_id, 'account_id': self.extra_receivable_account_1.id}), (0, 0, {'debit': 14.82, 'credit': 0.0, 'amount_currency': 44.45, 'currency_id': currency_id, 'account_id': self.extra_receivable_account_2.id}), (0, 0, {'debit': 14.82, 'credit': 0.0, 'amount_currency': 44.45, 'currency_id': currency_id, 'account_id': self.extra_receivable_account_2.id}), (0, 0, {'debit': 0.0, 'credit': 0.01, 'amount_currency': -0.01, 'currency_id': currency_id, 'account_id': self.extra_payable_account_1.id})]}
***************************************************************************************
create
{'move_type': 'entry', 'date': '2017-01-01', 'line_ids': [(0, 0, {'debit': 0.0, 'credit': 16.67, 'amount_currency': -33.34, 'currency_id': currency_id, 'account_id': self.extra_receivable_account_1.id}), (0, 0, {'debit': 0.0, 'credit': 5.6, 'amount_currency': -11.11, 'currency_id': currency_id, 'account_id': self.extra_receivable_account_1.id}), (0, 0, {'debit': 0.0, 'credit': 44.45, 'amount_currency': -88.89, 'currency_id': currency_id, 'account_id': self.extra_receivable_account_2.id}), (0, 0, {'debit': 0.0, 'credit': 0.01, 'amount_currency': -0.01, 'currency_id': currency_id, 'account_id': self.extra_receivable_account_2.id}), (0, 0, {'debit': 0.01, 'credit': 0.0, 'amount_currency': 0.01, 'currency_id': currency_id, 'account_id': self.extra_payable_account_1.id}), (0, 0, {'debit': 66.72, 'credit': 0.0, 'account_id': self.company_data['default_account_revenue'].id})]}
***************************************************************************************
create
{'move_type': 'entry', 'date': '2016-01-01', 'line_ids': [(0, 0, {'debit': 0.0, 'credit': 100.0, 'amount_currency': -300.0, 'currency_id': currency_id, 'account_id': self.company_data['default_account_revenue'].id, 'tax_ids': [(6, 0, self.cash_basis_tax_a_third_amount.ids)]}), (0, 0, {'debit': 0.0, 'credit': 33.33, 'amount_currency': -100.0, 'currency_id': currency_id, 'account_id': self.cash_basis_transfer_account.id, 'tax_repartition_line_id': self.cash_basis_tax_a_third_amount.invoice_repartition_line_ids.filtered(lambda line: line.repartition_type == 'tax').id}), (0, 0, {'debit': 133.33, 'credit': 0.0, 'amount_currency': 400.0, 'currency_id': currency_id, 'account_id': self.extra_receivable_account_1.id})]}
***************************************************************************************
create
{'move_type': 'entry', 'date': '2017-01-01', 'line_ids': [(0, 0, {'debit': 0.0, 'credit': 201.0, 'amount_currency': -402.0, 'currency_id': currency_id, 'account_id': self.extra_receivable_account_1.id}), (0, 0, {'debit': 201.0, 'credit': 0.0, 'account_id': self.company_data['default_account_revenue'].id})]}
***************************************************************************************
create
{'move_type': 'entry', 'date': '2017-01-01', 'line_ids': [(0, 0, {'debit': 1.0, 'credit': 0.0, 'amount_currency': 2.0, 'currency_id': currency_id, 'account_id': self.extra_receivable_account_1.id}), (0, 0, {'debit': 0.0, 'credit': 1.0, 'account_id': self.company_data['default_account_revenue'].id})]}
***************************************************************************************
create
{'move_type': 'entry', 'date': '2016-01-01', 'line_ids': [(0, 0, {'debit': 0.0, 'credit': 200.0, 'amount_currency': -100.0, 'currency_id': currency_id, 'account_id': self.company_data['default_account_revenue'].id, 'tax_ids': [(6, 0, self.cash_basis_tax_a_third_amount.ids)]}), (0, 0, {'debit': 0.0, 'credit': 20.0, 'amount_currency': -10.0, 'currency_id': currency_id, 'account_id': self.cash_basis_transfer_account.id, 'tax_repartition_line_id': self.cash_basis_tax_a_third_amount.invoice_repartition_line_ids.filtered(lambda line: line.repartition_type == 'tax').id}), (0, 0, {'debit': 220.0, 'credit': 0.0, 'amount_currency': 110.0, 'currency_id': currency_id, 'account_id': self.extra_receivable_account_1.id})]}
***************************************************************************************
search
[('tax_cash_basis_rec_id', 'in', partial_rec.ids)]
***************************************************************************************
create
{'move_type': 'entry', 'date': '2016-01-01', 'line_ids': [(0, 0, {'debit': 0.0, 'credit': 200.0, 'amount_currency': -100.0, 'currency_id': currency_id, 'account_id': self.company_data['default_account_revenue'].id, 'tax_ids': [(6, 0, self.cash_basis_tax_a_third_amount.ids)]}), (0, 0, {'debit': 0.0, 'credit': 20.0, 'amount_currency': -10.0, 'currency_id': currency_id, 'account_id': self.cash_basis_transfer_account.id, 'tax_repartition_line_id': self.cash_basis_tax_a_third_amount.invoice_repartition_line_ids.filtered(lambda line: line.repartition_type == 'tax').id}), (0, 0, {'debit': 220.0, 'credit': 0.0, 'amount_currency': 110.0, 'currency_id': currency_id, 'account_id': self.extra_receivable_account_1.id})]}
***************************************************************************************
search
[('tax_cash_basis_rec_id', 'in', caba_inv.line_ids.matched_credit_ids.ids)]
***************************************************************************************
create
{'move_type': 'entry', 'date': '2016-01-01', 'line_ids': [(0, 0, {'debit': 0.0, 'credit': 100.0, 'account_id': self.company_data['default_account_revenue'].id, 'tax_ids': [(6, 0, self.cash_basis_tax_a_third_amount.ids)]}), (0, 0, {'debit': 0.0, 'credit': 33.33, 'account_id': self.cash_basis_transfer_account.id, 'tax_repartition_line_id': self.cash_basis_tax_a_third_amount.invoice_repartition_line_ids.filtered(lambda line: line.repartition_type == 'tax').id}), (0, 0, {'debit': 133.33, 'credit': 0.0, 'account_id': self.extra_receivable_account_1.id})]}
***************************************************************************************
create
{'move_type': 'entry', 'date': '2016-01-01', 'line_ids': [(0, 0, {'debit': 0.0, 'credit': 133.33, 'account_id': self.extra_receivable_account_1.id}), (0, 0, {'debit': 133.33, 'credit': 0.0, 'account_id': self.company_data['default_account_revenue'].id})]}
***************************************************************************************
create
{'move_type': 'entry', 'date': '2016-01-01', 'line_ids': [(0, 0, {'debit': 0.0, 'credit': 100.0, 'account_id': self.company_data['default_account_revenue'].id, 'tax_ids': [(6, 0, self.cash_basis_tax_a_third_amount.ids)]}), (0, 0, {'debit': 0.0, 'credit': 33.33, 'account_id': self.cash_basis_transfer_account.id, 'tax_repartition_line_id': self.cash_basis_tax_a_third_amount.invoice_repartition_line_ids.filtered(lambda line: line.repartition_type == 'tax').id}), (0, 0, {'debit': 133.33, 'credit': 0.0, 'account_id': self.extra_receivable_account_1.id})]}
***************************************************************************************
create
{'move_type': 'out_refund', 'partner_id': self.partner_a.id, 'invoice_date': '2016-01-01', 'date': '2016-01-01', 'line_ids': [(0, 0, {'debit': 100.0, 'credit': 0.0, 'account_id': self.company_data['default_account_revenue'].id, 'tax_ids': [(6, 0, self.cash_basis_tax_a_third_amount.ids)]}), (0, 0, {'debit': 33.33, 'credit': 0.0, 'account_id': self.cash_basis_transfer_account.id, 'tax_repartition_line_id': self.cash_basis_tax_a_third_amount.refund_repartition_line_ids.filtered(lambda line: line.repartition_type == 'tax').id}), (0, 0, {'debit': 0.0, 'credit': 133.33, 'account_id': self.extra_receivable_account_1.id})]}
***************************************************************************************
create
{'move_type': 'entry', 'date': '2016-01-01', 'line_ids': [(0, 0, {'debit': 0.0, 'credit': 100.0, 'account_id': self.company_data['default_account_revenue'].id, 'tax_ids': [(6, 0, base_taxes.ids)]}), (0, 0, {'debit': 0.0, 'credit': 33.33, 'account_id': self.cash_basis_transfer_account.id, 'tax_repartition_line_id': self.cash_basis_tax_a_third_amount.invoice_repartition_line_ids.filtered(lambda line: line.repartition_type == 'tax').id}), (0, 0, {'debit': 0.0, 'credit': 0.01, 'account_id': self.cash_basis_transfer_account.id, 'tax_repartition_line_id': self.cash_basis_tax_tiny_amount.invoice_repartition_line_ids.filtered(lambda line: line.repartition_type == 'tax').id}), (0, 0, {'debit': 133.34, 'credit': 0.0, 'account_id': self.extra_receivable_account_1.id})]}
***************************************************************************************
create
{'move_type': 'entry', 'date': '2017-01-01', 'line_ids': [(0, 0, {'debit': 0.0, 'credit': 133.34, 'account_id': self.extra_receivable_account_1.id}), (0, 0, {'debit': 133.34, 'credit': 0.0, 'account_id': self.company_data['default_account_revenue'].id})]}
***************************************************************************************
create
{'name': 'tax 20%', 'type_tax_use': 'purchase', 'company_id': self.company_data['company'].id, 'amount': 20, 'tax_exigibility': 'on_invoice', 'invoice_repartition_line_ids': [(0, 0, {'factor_percent': 100, 'repartition_type': 'base'}), (0, 0, {'factor_percent': 100, 'repartition_type': 'tax', 'account_id': self.tax_account_1.id})], 'refund_repartition_line_ids': [(0, 0, {'factor_percent': 100, 'repartition_type': 'base'}), (0, 0, {'factor_percent': 100, 'repartition_type': 'tax', 'account_id': self.tax_account_1.id})]}
***************************************************************************************
search
[('tax_cash_basis_rec_id', '=', partial_rec.id)]
***************************************************************************************
create
{'name': 'Misc move', 'journal_id': self.company_data['default_journal_misc'].id, 'line_ids': [(0, 0, {'name': 'line 1', 'account_id': self.tax_account_1.id, 'credit': 300}), (0, 0, {'name': 'line 2', 'account_id': self.company_data['default_account_expense'].id, 'debit': 300})]}
***************************************************************************************
create
{'name': 'test_analytic_account'}
***************************************************************************************
search
[('tax_cash_basis_rec_id', '=', partial_rec.id)]
***************************************************************************************
search
[('tax_cash_basis_rec_id', '=', partial_rec.id)]
***************************************************************************************
search
[('tax_cash_basis_rec_id', '=', partial_rec.id)]
***************************************************************************************
create
{'name': 'Misc move', 'journal_id': self.company_data['default_journal_misc'].id, 'line_ids': [(0, 0, {'name': 'line 1', 'account_id': self.tax_account_1.id, 'credit': 150}), (0, 0, {'name': 'line 2', 'account_id': self.company_data['default_account_expense'].id, 'debit': 150})]}
***************************************************************************************
create
{'move_type': 'in_invoice', 'partner_id': self.partner_a.id, 'invoice_date': '2019-01-01', 'date': '2019-01-01', 'invoice_line_ids': [(0, 0, {'name': 'line', 'account_id': self.company_data['default_account_expense'].id, 'price_unit': 1000.0, 'tax_ids': [(6, 0, self.cash_basis_tax_a_third_amount.ids)]})]}
***************************************************************************************
create
{'name': 'Bretonnia', 'code': 'wh'}
***************************************************************************************
create
{'name': 'Fiscal Position to the Holy Grail', 'country_id': test_country.id, 'foreign_vat': 'WH1234'}
***************************************************************************************
create
{'name': 'tax_1', 'amount': 33.3333, 'company_id': self.company_data['company'].id, 'cash_basis_transition_account_id': self.cash_basis_transfer_account.id, 'tax_exigibility': 'on_payment', 'country_id': test_country.id, 'invoice_repartition_line_ids': [(0, 0, {'factor_percent': 100, 'repartition_type': 'base'}), (0, 0, {'factor_percent': 100, 'repartition_type': 'tax'})], 'refund_repartition_line_ids': [(0, 0, {'factor_percent': 100, 'repartition_type': 'base'}), (0, 0, {'factor_percent': 100, 'repartition_type': 'tax'})]}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': '2021-07-01', 'fiscal_position_id': foreign_vat_fpos.id, 'invoice_line_ids': [Command.create({'name': 'test', 'price_unit': 100, 'tax_ids': [Command.set(foreign_caba_tax.ids)]})]}
***************************************************************************************
search
[('tax_cash_basis_origin_move_id', '=', invoice.id)]
***************************************************************************************
create
{'line_ids': [(0, 0, {'debit': 100.0 / 3, 'account_id': self.company_data['default_account_revenue'].id}), (0, 0, {'credit': 100.0 / 3, 'account_id': self.company_data['default_account_revenue'].id})]}
***************************************************************************************
create
{'amount': 50.0, 'payment_type': 'inbound', 'partner_type': 'customer', 'destination_account_id': copy_receivable.id}
***************************************************************************************
create
{'amount': 100.0, 'payment_type': 'inbound', 'partner_type': 'customer'}
***************************************************************************************
create
{'amount': 100.0, 'payment_type': 'inbound', 'partner_type': 'customer'}
***************************************************************************************
create
{'amount': 100.0, 'payment_type': 'outbound', 'partner_type': 'supplier'}
***************************************************************************************
create
{'amount': 100.0, 'payment_type': 'outbound', 'partner_type': 'supplier'}
***************************************************************************************
create
{'amount': 50.0, 'is_internal_transfer': True, 'destination_journal_id': self.company_data['default_journal_cash'].id}
***************************************************************************************
create
{'amount': 50.0, 'is_internal_transfer': True, 'payment_type': 'inbound', 'destination_journal_id': self.company_data['default_journal_cash'].id}
***************************************************************************************
search
[('payment_type', '=', 'outbound')]
***************************************************************************************
create
{'amount': 50.0, 'payment_type': 'inbound', 'partner_type': 'customer', 'partner_id': self.partner_a.id, 'journal_id': self.company_data['default_journal_bank'].id}
***************************************************************************************
create
{'amount': 50.0, 'payment_type': 'inbound', 'partner_type': 'customer', 'destination_account_id': self.company_data['default_account_receivable'].id}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_line_ids': [(0, 0, {'name': '50 to pay', 'price_unit': 50.0, 'quantity': 1, 'account_id': self.company_data['default_account_revenue'].id})]}
***************************************************************************************
create
{'name': 'test_statement', 'journal_id': self.company_data['default_journal_bank'].id, 'line_ids': [(0, 0, {'payment_ref': '50 to pay', 'partner_id': self.partner_a.id, 'amount': 50.0})]}
***************************************************************************************
create
{'amount': 5.0, 'payment_type': 'inbound', 'partner_type': 'customer', 'journal_id': bank_journal.id}
***************************************************************************************
create
{'name': 'test'}
***************************************************************************************
create
{'acc_number': 'BE43798822936101', 'partner_id': self.partner_a.id, 'bank_id': test_bank.id}
***************************************************************************************
create
{'acc_number': 'BE85812541345906', 'partner_id': self.partner_a.id, 'bank_id': test_bank.id}
***************************************************************************************
create
{'move_type': 'out_invoice', 'date': '2019-01-01', 'invoice_line_ids': [(0, 0, {'name': 'invoice_line', 'quantity': 1.0, 'price_unit': 100.0, 'tax_ids': [(6, 0, self.company_data['default_tax_sale'].ids)]})]}
***************************************************************************************
create
{'name': 'SRC', 'amount': 0.0}
***************************************************************************************
create
{'name': 'DST1', 'amount': 0.0}
***************************************************************************************
create
{'name': 'DST2', 'amount': 0.0}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': '2019-01-01', 'invoice_line_ids': invoice_lines_vals}
***************************************************************************************
create
{'name': 'tax_10', 'amount_type': 'percent', 'amount': 10.0, 'tax_group_id': self.tax_group1.id}
***************************************************************************************
create
{'name': 'tax_20', 'amount_type': 'percent', 'amount': 20.0, 'tax_group_id': self.tax_group2.id}
***************************************************************************************
create
{'name': 'tax_0', 'amount_type': 'percent', 'amount': 0.0}
***************************************************************************************
create
{'name': 'tax_10', 'amount_type': 'percent', 'amount': 10.0, 'tax_group_id': self.tax_group1.id, 'price_include': True, 'include_base_amount': True}
***************************************************************************************
create
{'name': 'tax_20', 'amount_type': 'percent', 'amount': 20.0, 'tax_group_id': self.tax_group2.id}
***************************************************************************************
create
{'name': 'tax_10', 'amount_type': 'percent', 'amount': 10.0, 'tax_group_id': self.tax_group1.id, 'include_base_amount': True}
***************************************************************************************
create
{'name': 'tax_20', 'amount_type': 'percent', 'amount': 20.0, 'tax_group_id': self.tax_group1.id}
***************************************************************************************
create
{'name': 'tax_30', 'amount_type': 'percent', 'amount': 30.0, 'tax_group_id': self.tax_group2.id, 'include_base_amount': True}
***************************************************************************************
create
{'name': 'tax_10', 'amount_type': 'percent', 'amount': 10.0, 'tax_group_id': self.tax_group_sub1.id}
***************************************************************************************
create
{'name': 'tax_25', 'amount_type': 'percent', 'amount': 25.0, 'tax_group_id': self.tax_group_sub2.id}
***************************************************************************************
create
{'name': 'tax_42', 'amount_type': 'percent', 'amount': 42.0, 'tax_group_id': self.tax_group1.id}
***************************************************************************************
create
{'name': 'tax_10', 'amount_type': 'percent', 'amount': 10.0, 'tax_group_id': self.tax_group_sub3.id}
***************************************************************************************
create
{'name': 'tax_25', 'amount_type': 'percent', 'amount': -25.0, 'tax_group_id': self.tax_group_sub2.id}
***************************************************************************************
create
{'name': 'tax_42', 'amount_type': 'percent', 'amount': 42.0, 'tax_group_id': self.tax_group_sub1.id}
***************************************************************************************
create
{'name': 'tax_30', 'amount_type': 'percent', 'amount': 30.0, 'tax_group_id': self.tax_group1.id}
***************************************************************************************
create
vals
***************************************************************************************
create
{'name': tag_name, 'applicability': 'taxes', 'country_id': self.env.company.country_id.id}
***************************************************************************************
create
{'name': 'test1', 'code': 'test1', 'user_type_id': user_type.id}
***************************************************************************************
create
{'name': 'test2', 'code': 'test2', 'user_type_id': user_type.id}
***************************************************************************************
create
{'name': 'Tax with account', 'amount_type': 'fixed', 'type_tax_use': 'sale', 'amount': 42, 'invoice_repartition_line_ids': [(0, 0, {'factor_percent': 100, 'repartition_type': 'base', 'tag_ids': [(4, inv_base_tag.id, 0)]}), (0, 0, {'factor_percent': 10, 'repartition_type': 'tax', 'account_id': account_1.id, 'tag_ids': [(4, inv_tax_tag_10.id, 0)]}), (0, 0, {'factor_percent': 90, 'repartition_type': 'tax', 'account_id': account_2.id, 'tag_ids': [(4, inv_tax_tag_90.id, 0)]})], 'refund_repartition_line_ids': [(0, 0, {'factor_percent': 100, 'repartition_type': 'base', 'tag_ids': [(4, ref_base_tag.id, 0)]}), (0, 0, {'factor_percent': 10, 'repartition_type': 'tax', 'tag_ids': [(4, ref_tax_tag.id, 0)]}), (0, 0, {'factor_percent': 90, 'repartition_type': 'tax', 'account_id': account_1.id, 'tag_ids': [(4, ref_tax_tag.id, 0)]})]}
***************************************************************************************
create
{'name': 'tax', 'type_tax_use': 'sale', 'amount_type': 'division', 'amount': 100, 'price_include': True, 'include_base_amount': True}
***************************************************************************************
create
{'name': 'tax', 'type_tax_use': 'sale', 'amount_type': 'percent', 'amount': 10, 'invoice_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0, 'tag_ids': [(6, 0, self.base_tag_pos.ids)]}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 100.0, 'tag_ids': [(6, 0, self.tax_tag_pos.ids)]})], 'refund_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0, 'tag_ids': [(6, 0, self.base_tag_neg.ids)]}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 100.0, 'tag_ids': [(6, 0, self.tax_tag_neg.ids)]})]}
***************************************************************************************
create
{'name': 'tax', 'type_tax_use': 'purchase', 'amount_type': 'percent', 'amount': 10, 'invoice_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0, 'tag_ids': [(6, 0, self.base_tag_pos.ids)]}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 100.0, 'tag_ids': [(6, 0, self.tax_tag_pos.ids)]})], 'refund_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0, 'tag_ids': [(6, 0, self.base_tag_neg.ids)]}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 100.0, 'tag_ids': [(6, 0, self.tax_tag_neg.ids)]})]}
***************************************************************************************
create
{'name': '2018-01-01', 'rate': 1.1726, 'currency_id': self.currency_data['currency'].id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'currency_id': self.currency_data['currency'].id, 'invoice_date': '2018-01-01', 'date': '2018-01-01', 'invoice_line_ids': [(0, 0, {'name': 'xxxx', 'quantity': 20000, 'price_unit': 2.82, 'tax_ids': [(6, 0, self.percent_tax_1.ids)]})]}
***************************************************************************************
create
{'name': '2018-01-01', 'rate': 0.654065014, 'currency_id': self.currency_data['currency'].id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'sequence': 1, 'name': 'child1_%s' % tax_type, 'type_tax_use': 'none', 'amount_type': 'percent', 'amount': 5, 'invoice_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0, 'tag_ids': [(6, 0, self.base_tag_pos.ids)]}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 100.0, 'tag_ids': [(6, 0, self.tax_tag_pos.ids)]})], 'refund_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 100.0})]}
***************************************************************************************
create
{'sequence': 2, 'name': 'child2_%s' % tax_type, 'type_tax_use': 'none', 'amount_type': 'percent', 'amount': 10, 'invoice_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 100.0})], 'refund_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0, 'tag_ids': [(6, 0, self.base_tag_neg.ids)]}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 100.0, 'tag_ids': [(6, 0, self.tax_tag_neg.ids)]})]}
***************************************************************************************
create
{'name': 'group_%s' % tax_type, 'type_tax_use': tax_type, 'amount_type': 'group', 'amount': 10, 'children_tax_ids': [(6, 0, [child1_sale_tax.id, child2_sale_tax.id])]}
***************************************************************************************
create
{'name': 'an attachment', 'access_token': self.env['ir.attachment']._generate_access_token()}
***************************************************************************************
create
{'attachment_ids': [(6, 0, attachment.ids)]}
***************************************************************************************
create
{'name': '%s-07-01' % time.strftime('%Y'), 'rate': 1.5289, 'currency_id': self.currency_usd_id}
***************************************************************************************
create
{'name': 'test'}
***************************************************************************************
create
{'journal_id': self.bank_journal_euro.id, 'date': '%s-01-01' % time.strftime('%Y'), 'line_ids': [(0, 0, {'payment_ref': 'test', 'partner_id': partner.id, 'amount': 40.0, 'date': '%s-01-01' % time.strftime('%Y')})]}
***************************************************************************************
create
{'journal_id': self.bank_journal_usd_id, 'date': time.strftime('%Y-%m-%d'), 'line_ids': [(0, 0, {'name': 'half payment', 'partner_id': self.partner_agrolait_id, 'amount': 1.0, 'date': time.strftime('%Y-%m-%d')}), (0, 0, {'name': 'second half payment', 'partner_id': self.partner_agrolait_id, 'amount': 1.0, 'date': time.strftime('%Y-%m-%d')})]}
***************************************************************************************
search
[('move_id', 'in', move_ids), ('account_id', '=', self.account_rcv.id), ('reconciled', '=', False)]
***************************************************************************************
create
{'name': 'dest_journal_id', 'type': 'bank'}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-' + '07' + '-01', 'rate': 0.5, 'currency_id': self.currency_usd_id, 'company_id': self.company.id}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-' + '08' + '-01', 'rate': 0.75, 'currency_id': self.currency_usd_id, 'company_id': self.company.id}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-' + '09' + '-01', 'rate': 0.8, 'currency_id': self.currency_usd_id, 'company_id': self.company.id}
***************************************************************************************
create
{'payment_type': 'outbound', 'amount': 25, 'currency_id': self.currency_usd_id, 'journal_id': self.bank_journal_euro.id, 'company_id': self.company.id, 'date': time.strftime('%Y') + '-' + '07' + '-01', 'partner_id': self.partner_agrolait_id, 'payment_method_line_id': self.inbound_payment_method_line.id, 'partner_type': 'supplier'}
***************************************************************************************
create
{'payment_type': 'outbound', 'amount': 50, 'currency_id': self.currency_usd_id, 'journal_id': self.bank_journal_euro.id, 'company_id': self.company.id, 'date': time.strftime('%Y') + '-' + '08' + '-01', 'partner_id': self.partner_agrolait_id, 'payment_method_line_id': self.outbound_payment_method_line.id, 'partner_type': 'supplier'}
***************************************************************************************
create
{'payment_type': 'outbound', 'amount': 25, 'currency_id': self.currency_usd_id, 'journal_id': self.bank_journal_euro.id, 'company_id': self.company.id, 'date': time.strftime('%Y') + '-' + '09' + '-01', 'partner_id': self.partner_agrolait_id, 'payment_method_line_id': self.outbound_payment_method_line.id, 'partner_type': 'supplier'}
***************************************************************************************
create
{'payment_type': 'inbound', 'payment_method_line_id': self.inbound_payment_method_line.id, 'partner_type': 'customer', 'partner_id': self.partner_agrolait_id, 'amount': 100, 'currency_id': self.currency_usd_id, 'journal_id': self.bank_journal_usd.id}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-07-01', 'rate': 1.0, 'currency_id': self.currency_usd_id, 'company_id': self.company.id}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-08-01', 'rate': 0.5, 'currency_id': self.currency_usd_id, 'company_id': self.company.id}
***************************************************************************************
create
{'payment_type': 'inbound', 'payment_method_line_id': self.inbound_payment_method_line.id, 'partner_type': 'customer', 'partner_id': self.partner_agrolait_id, 'amount': 111, 'currency_id': self.currency_usd_id, 'journal_id': self.bank_journal_usd.id, 'date': time.strftime('%Y') + '-08-01'}
***************************************************************************************
create
{'payment_method_line_id': self.inbound_payment_method_line.id, 'payment_type': 'inbound', 'partner_type': 'customer', 'partner_id': self.partner_agrolait_id, 'journal_id': self.bank_journal_usd.id, 'date': '2018-06-04', 'amount': 666}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-07-01', 'rate': 1.0, 'currency_id': self.currency_usd_id, 'company_id': self.company.id}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-08-01', 'rate': 0.5, 'currency_id': self.currency_usd_id, 'company_id': self.company.id}
***************************************************************************************
create
{'payment_type': 'inbound', 'payment_method_line_id': self.inbound_payment_method_line.id, 'partner_type': 'customer', 'partner_id': self.partner_agrolait_id, 'amount': 111, 'currency_id': self.currency_usd_id, 'journal_id': self.bank_journal_usd.id, 'date': time.strftime('%Y') + '-08-01'}
***************************************************************************************
search
[('journal_id', '=', exchange_move.journal_id.id), ('ref', 'ilike', exchange_move.name)]
***************************************************************************************
create
{'name': 'turlututu', 'type': 'bank', 'company_id': self.env.company.id}
***************************************************************************************
create
{'currency_id': self.currency_usd_id, 'name': time.strftime('%Y') + '-01-01', 'rate': 2}
***************************************************************************************
create
{'currency_id': self.currency_usd_id, 'name': time.strftime('%Y') + '-01-02', 'rate': 1}
***************************************************************************************
create
{'name': 'Pay in 2 installments', 'line_ids': [(0, 0, {'value': 'percent', 'value_amount': 50}), (0, 0, {'value': 'balance', 'days': 14})]}
***************************************************************************************
create
{'date': time.strftime('%Y') + '-07-15', 'payment_type': 'inbound', 'payment_method_line_id': self.inbound_payment_method_line.id, 'partner_type': 'customer', 'partner_id': self.partner_agrolait_id, 'amount': 25, 'currency_id': self.currency_usd_id, 'journal_id': self.bank_journal_usd.id}
***************************************************************************************
create
{'name': 'general1', 'journal_id': self.general_journal.id}
***************************************************************************************
create
{'name': 'general2', 'journal_id': self.general_journal.id}
***************************************************************************************
create
{'name': 'general3', 'journal_id': self.general_journal.id}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-07-01', 'rate': 1.0, 'currency_id': self.currency_euro_id, 'company_id': company.id}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-07-01', 'rate': 1.1106, 'currency_id': self.currency_usd_id, 'company_id': self.company.id}
***************************************************************************************
create
{'date': time.strftime('%Y') + '-07-15', 'payment_method_line_id': self.inbound_payment_method_line.id, 'payment_type': 'inbound', 'partner_type': 'customer', 'partner_id': inv1.partner_id.id, 'amount': 200.0, 'journal_id': self.bank_journal_euro.id, 'company_id': company.id}
***************************************************************************************
create
{'partner_id': inv1.partner_id.id, 'date': time.strftime('%Y') + '-07-01', 'journal_id': self.bank_journal_euro.id, 'line_ids': [(0, False, {'credit': 160.16, 'account_id': inv1_receivable.account_id.id, 'name': 'Balance WriteOff'}), (0, False, {'debit': 160.16, 'account_id': self.diff_expense_account.id, 'name': 'Balance WriteOff'})]}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-07-01', 'rate': 1.0, 'currency_id': self.currency_euro_id, 'company_id': company.id}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-07-01', 'rate': 1.1106, 'currency_id': self.currency_usd_id, 'company_id': company.id}
***************************************************************************************
create
{'payment_method_line_id': self.inbound_payment_method_line.id, 'payment_type': 'inbound', 'partner_type': 'customer', 'partner_id': inv1.partner_id.id, 'amount': 372.1, 'date': time.strftime('%Y') + '-07-01', 'journal_id': self.bank_journal_euro.id, 'company_id': company.id}
***************************************************************************************
create
{'partner_id': inv1.partner_id.id, 'date': time.strftime('%Y') + '-07-01', 'journal_id': self.bank_journal_euro.id, 'line_ids': [(0, False, {'credit': 17.78, 'account_id': inv1_receivable.account_id.id, 'name': 'Balance WriteOff'}), (0, False, {'debit': 17.78, 'account_id': self.diff_expense_account.id, 'name': 'Balance WriteOff'})]}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-07-01', 'rate': 1.0, 'currency_id': self.currency_euro_id, 'company_id': company.id}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-07-01', 'rate': 1.0, 'currency_id': self.currency_usd_id, 'company_id': company.id}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-07-15', 'rate': 1.1106, 'currency_id': self.currency_usd_id, 'company_id': company.id}
***************************************************************************************
create
{'date': time.strftime('%Y') + '-07-15', 'payment_method_line_id': self.inbound_payment_method_line.id, 'payment_type': 'inbound', 'partner_type': 'customer', 'partner_id': inv1.partner_id.id, 'amount': 372.1, 'journal_id': self.bank_journal_euro.id, 'company_id': company.id, 'currency_id': self.currency_euro_id}
***************************************************************************************
create
{'partner_id': inv1.partner_id.id, 'date': time.strftime('%Y') + '-07-15', 'journal_id': self.bank_journal_usd.id, 'line_ids': [(0, False, {'credit': 83.31, 'account_id': inv1_receivable.account_id.id, 'name': 'Balance WriteOff'}), (0, False, {'debit': 83.31, 'account_id': self.diff_expense_account.id, 'name': 'Balance WriteOff'})]}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-07-01', 'rate': 1.0, 'currency_id': self.currency_euro_id, 'company_id': company.id}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-07-01', 'rate': 1.0, 'currency_id': self.currency_usd_id, 'company_id': company.id}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-07-01', 'rate': 1.0, 'currency_id': self.currency_euro_id, 'company_id': company.id}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-07-01', 'rate': 1.1106, 'currency_id': self.currency_usd_id, 'company_id': company.id}
***************************************************************************************
create
{'name': 'foreign0', 'symbol': 'F0'}
***************************************************************************************
browse
self.currency_usd_id
***************************************************************************************
create
{'name': time.strftime('%Y') + '-07-01', 'rate': 1.0, 'currency_id': self.currency_euro_id, 'company_id': company.id}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-07-01', 'rate': 1.0, 'currency_id': foreign_0.id, 'company_id': company.id}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-07-01', 'rate': 1.1106, 'currency_id': foreign_1.id, 'company_id': company.id}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-07-01', 'rate': 1.0, 'currency_id': self.currency_euro_id, 'company_id': company.id}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-07-01', 'rate': 1.1106, 'currency_id': self.currency_usd_id, 'company_id': company.id}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-07-01', 'rate': 1.0, 'currency_id': self.currency_euro_id, 'company_id': company.id}
***************************************************************************************
create
{'name': time.strftime('%Y') + '-07-01', 'rate': 1.1106, 'currency_id': self.currency_usd_id, 'company_id': company.id}
***************************************************************************************
create
{'partner_id': inv1.partner_id.id, 'date': time.strftime('%Y') + '-07-15', 'journal_id': self.bank_journal_usd.id, 'line_ids': [(0, False, {'credit': 0.05, 'account_id': inv1_receivable.account_id.id, 'name': 'Balance WriteOff'}), (0, False, {'debit': 0.05, 'account_id': self.diff_expense_account.id, 'name': 'Balance WriteOff'})]}
***************************************************************************************
create
vals
***************************************************************************************
create
{'name': 'Consulting Services'}
***************************************************************************************
create
{'name': 'The Only One'}
***************************************************************************************
create
{'name': 'Test', 'country_id': belgium.id, 'auto_apply': True, 'tax_ids': [Command.create({'tax_src_id': self.tax21.id, 'tax_dest_id': self.tax12.id})]}
***************************************************************************************
create
{'name': 'Bernard Gagnant'}
***************************************************************************************
create
{'name': 'Bernard Perdant'}
***************************************************************************************
create
{'name': 'test_match_multi_currencies', 'code': 'xxxx', 'type': 'bank', 'currency_id': self.currency_data['currency'].id}
***************************************************************************************
create
{'name': 'test_match_multi_currencies', 'rule_type': 'invoice_matching', 'match_partner': True, 'match_partner_ids': [(6, 0, partner.ids)], 'allow_payment_tolerance': True, 'payment_tolerance_type': 'percentage', 'payment_tolerance_param': 5.0, 'match_same_currency': False, 'company_id': self.company_data['company'].id, 'past_months_limit': False}
***************************************************************************************
create
{'name': 'test_match_multi_currencies', 'journal_id': journal.id, 'line_ids': [(0, 0, {'journal_id': journal.id, 'date': '2016-01-01', 'payment_ref': 'line', 'partner_id': partner.id, 'foreign_currency_id': self.currency_data_2['currency'].id, 'amount': 300.0, 'amount_currency': 900.0})]}
***************************************************************************************
create
{'move_type': 'entry', 'date': '2017-01-01', 'journal_id': self.company_data['default_journal_misc'].id, 'line_ids': [(0, 0, {'account_id': self.company_data['default_account_receivable'].id, 'partner_id': partner.id, 'currency_id': self.currency_data['currency'].id, 'debit': 100.0, 'credit': 0.0, 'amount_currency': 200.0}), (0, 0, {'account_id': self.company_data['default_account_receivable'].id, 'partner_id': partner.id, 'currency_id': self.currency_data_2['currency'].id, 'debit': 14.0, 'credit': 0.0, 'amount_currency': 280.0}), (0, 0, {'account_id': self.company_data['default_account_revenue'].id, 'debit': 0.0, 'credit': 114.0})]}
***************************************************************************************
create
{'name': 'Bernard Gagnant'}
***************************************************************************************
create
{'amount': amount, 'payment_type': 'inbound', 'partner_type': 'customer', 'partner_id': partner.id, 'ref': memo, 'destination_account_id': self.company_data['default_account_receivable'].id}
***************************************************************************************
create
[{'name': f'Journal{i}', 'code': f'J{i}', 'type': 'general'} for i in range(2)]
***************************************************************************************
search
[]
***************************************************************************************
create
[{'name': 'Journal0', 'code': 'J0', 'type': 'general'}]
***************************************************************************************
create
[{'journal_id': journals[i].id, 'line_ids': [(0, 0, {'account_id': account.id, 'name': 'line'})], 'date': '2010-01-01'} for i in range(2)]
***************************************************************************************
create
[{'journal_id': journals[journal_index].id, 'line_ids': [(0, 0, {'account_id': account.id, 'name': 'line'})], 'date': f'2010-{month}-01'} for (journal_index, month) in [(1, 1), (0, 1), (1, 2), (1, 1)]]
***************************************************************************************
create
{}
***************************************************************************************
create
{'name': 'oobO'}
***************************************************************************************
with_user
user.id
***************************************************************************************
create
{'name': 'test_advanced_taxes_computation_0_1', 'amount_type': 'percent', 'amount': 10, 'price_include': True, 'include_base_amount': True, 'sequence': 1, 'invoice_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0})], 'refund_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0})]}
***************************************************************************************
create
{'name': 'test_advanced_taxes_computation_0_2', 'amount_type': 'percent', 'amount': 10, 'sequence': 2, 'invoice_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0})], 'refund_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0})]}
***************************************************************************************
create
{'name': 'test_advanced_taxes_computation_0_3', 'amount_type': 'percent', 'amount': 10, 'price_include': True, 'sequence': 3, 'invoice_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0})], 'refund_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0})]}
***************************************************************************************
create
{'name': 'test_advanced_taxes_computation_0_4', 'amount_type': 'percent', 'amount': 10, 'sequence': 4, 'invoice_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0})], 'refund_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0})]}
***************************************************************************************
create
{'name': 'test_advanced_taxes_computation_0_5', 'amount_type': 'percent', 'amount': 10, 'price_include': True, 'sequence': 5, 'invoice_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0})], 'refund_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0})]}
***************************************************************************************
create
{'name': 'test_intracomm_taxes_computation_0_1', 'amount_type': 'percent', 'amount': 21, 'invoice_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 100.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': -100.0})], 'refund_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 100.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': -100.0})]}
***************************************************************************************
create
{'name': 'test_rounding_issues_0', 'amount_type': 'percent', 'amount': 3, 'invoice_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0})], 'refund_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0})]}
***************************************************************************************
create
{'name': 'test_advanced_taxes_repartition_lines_computation_1', 'amount_type': 'percent', 'amount': 3, 'invoice_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': -50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 25.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 25.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': -25.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': -25.0})], 'refund_repartition_line_ids': [(0, 0, {'repartition_type': 'base', 'factor_percent': 100.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': -50.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 25.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': 25.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': -25.0}), (0, 0, {'repartition_type': 'tax', 'factor_percent': -25.0})]}
***************************************************************************************
create
[{'name': 'test_is_base_affected%s' % i, 'amount_type': 'percent', 'amount': amount, 'include_base_amount': include_base_amount, 'is_base_affected': is_base_affected, 'sequence': i} for (i, amount, include_base_amount, is_base_affected) in [(0, 6, True, True), (1, 6, True, False), (2, 10, False, True)]]
***************************************************************************************
create
{'name': 'tax_10_fix', 'amount_type': 'fixed', 'amount': 10.0, 'include_base_amount': True}
***************************************************************************************
create
{'name': 'tax_21', 'amount_type': 'percent', 'amount': 21.0, 'price_include': True, 'include_base_amount': True}
***************************************************************************************
search
domain
***************************************************************************************
create
{'name': 'Test tax', 'amount_type': 'percent', 'amount': 25, 'type_tax_use': 'sale', 'country_id': self.tax_report_1.country_id.id, 'invoice_repartition_line_ids': [(0, 0, {'factor_percent': 100, 'repartition_type': 'base'}), (0, 0, {'factor_percent': 100, 'repartition_type': 'tax', 'tag_ids': [(6, 0, self.tax_report_line_1_55.tag_ids[0].ids)]})], 'refund_repartition_line_ids': [(0, 0, {'factor_percent': 100, 'repartition_type': 'base'}), (0, 0, {'factor_percent': 100, 'repartition_type': 'tax'})]}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'date': '1992-12-22', 'invoice_line_ids': [(0, 0, {'quantity': 1, 'price_unit': 42, 'tax_ids': [(6, 0, test_tax.ids)]})]}
***************************************************************************************
search
[('id', 'in', previous_tag_ids)]
***************************************************************************************
search
domain
***************************************************************************************
search
[('tax_ids', '!=', False), ('company_id', '=', self.env.company.id)]
***************************************************************************************
search
[('move_type', '!=', 'entry')]
***************************************************************************************
browse
transfer_move_id
***************************************************************************************
browse
transfer_move_id
***************************************************************************************
browse
transfer_move_id
***************************************************************************************
browse
transfer_move_id
***************************************************************************************
with_context
context
***************************************************************************************
with_context
context
***************************************************************************************
with_context
context
***************************************************************************************
with_context
context
***************************************************************************************
browse
self.env.context['active_ids']
***************************************************************************************
create
move_vals
***************************************************************************************
create
move_vals
***************************************************************************************
_move_dict_to_preview_vals
moverecord.company_id.currency_id
***************************************************************************************
create
{'composition_mode': 'comment' if len(res_ids) == 1 else 'mass_mail'}
***************************************************************************************
browse
active_ids
***************************************************************************************
browse
res_ids
***************************************************************************************
browse
self.env.context.get('active_ids')
***************************************************************************************
create
{'composition_mode': 'comment' if len(res_ids) == 1 else 'mass_mail', 'template_id': self.template_id.id}
***************************************************************************************
search
[('id', 'in', self.env.context.get('active_ids')), ('partner_id.email', '=', False)]
***************************************************************************************
browse
self.env.context['active_ids']
***************************************************************************************
search
[('company_id', '=', record.company_id.id), ('type', 'in', record.move_ids.journal_id.mapped('type'))]
***************************************************************************************
search
[('company_id', '=', record.company_id.id)]
***************************************************************************************
create
moves_vals_list
***************************************************************************************
create
payment_vals_list
***************************************************************************************
browse
(id for lines in common_params_group.values() for id in lines.ids)
***************************************************************************************
search
company_domain + bank_domain
***************************************************************************************
search
company_domain + no_bank_domain
***************************************************************************************
browse
self._context.get('active_ids', [])
***************************************************************************************
browse
self._context.get('active_ids', [])
***************************************************************************************
search
company_domain + currency_domain + bank_domain
***************************************************************************************
search
company_domain + currency_domain + no_bank_domain
***************************************************************************************
search
[('company_id', '=', self.company_id.id)]
***************************************************************************************
search
[]
***************************************************************************************
search
[('company_id', '=', self.company_id.id)]
***************************************************************************************
search
[('type', 'in', ['sale', 'purchase'])]
***************************************************************************************
browse
self.env.context['active_ids']
***************************************************************************************
_get_sequence_format_param
record.first_name
***************************************************************************************
search
[('type', '=', 'purchase'), ('company_id', '=', self.env.company.id)]
***************************************************************************************
search
[('type', '=', 'purchase')]
***************************************************************************************
_action_list_view_bill
bill_ids
***************************************************************************************
browse
self._context['active_ids']
***************************************************************************************
search
[('type', '=', 'purchase')]
***************************************************************************************
search
[('journal_id', '=', purchase_journal.id)]
***************************************************************************************
_run_wkhtmltopdf
bodies
***************************************************************************************
create
{'type': 'binary', 'name': 'INV-%s-0001.pdf' % invoice_date.strftime('%Y-%m'), 'res_model': 'mail.compose.message', 'datas': base64.encodebytes(sample_pdf)}
***************************************************************************************
search
[('name', '=', 'Deco Addict')]
***************************************************************************************
create
{'move_type': 'in_invoice', 'partner_id': partner.id, 'ref': 'INV/%s/0001' % invoice_date.strftime('%Y/%m'), 'invoice_date': invoice_date, 'invoice_date_due': invoice_date + timedelta(days=30), 'journal_id': purchase_journal.id, 'invoice_line_ids': [Command.create({'name': '[FURN_8999] Three-Seat Sofa', 'quantity': 5, 'price_unit': 1500}), Command.create({'name': '[FURN_8220] Four Person Desk', 'quantity': 5, 'price_unit': 2350})]}
***************************************************************************************
create
{'email_alias': email_alias}
***************************************************************************************
_prepare_html
self.preview_invoice
***************************************************************************************
create
{'name': 'Deco Addict', 'is_company': True}
***************************************************************************************
browse
context.get('active_ids')
***************************************************************************************
search
domain
***************************************************************************************
browse
self._context['active_ids']
***************************************************************************************
search
[('type', '=', 'general'), ('company_id', '=', self.company_id.id)]
***************************************************************************************
create
move_vals
***************************************************************************************
_move_dict_to_preview_vals
record._compute_move_vals()[0]record.company_id.currency_id
***************************************************************************************
with_company
self.company_id
***************************************************************************************
browse
active_ids
***************************************************************************************
search
[('type', '=', 'bank'), ('bank_account_id', '=', False), ('id', '!=', self.default_linked_journal_id())]
***************************************************************************************
search
[('type', '=', 'bank'), ('bank_account_id', '=', False)]
***************************************************************************************
get_next_bank_cash_default_code
'bank'self.env.company
***************************************************************************************
create
{'name': record.new_journal_name, 'code': new_journal_code, 'type': 'bank', 'company_id': company.id, 'bank_account_id': record.res_partner_bank_id.id}
***************************************************************************************
search
[('bic', '=', vals['bank_bic'])]
***************************************************************************************
create
{'name': vals['bank_bic'], 'bic': vals['bank_bic']}
***************************************************************************************
create
vals
***************************************************************************************
_for_xml_id
'account.action_move_line_form'
***************************************************************************************
search
[('type', '=', 'general')]
***************************************************************************************
search_count
domain_checks_to_print
***************************************************************************************
browse
r['journal_id']
***************************************************************************************
create
[{'move_type': 'in_invoice', 'partner_id': self.partner_a.id, 'date': '2017-01-01', 'invoice_date': '2017-01-01', 'invoice_line_ids': [(0, 0, {'product_id': self.product_a.id, 'price_unit': 100.0})]} for i in range(nb_invoices_to_test)]
***************************************************************************************
create
[{'move_type': 'out_refund', 'partner_id': self.partner_a.id, 'date': '2017-01-01', 'invoice_date': '2017-01-01', 'invoice_line_ids': [(0, 0, {'product_id': self.product_a.id, 'price_unit': 100.0})]} for i in range(nb_invoices_to_test)]
***************************************************************************************
create
{'move_type': 'in_invoice', 'partner_id': self.partner_a.id, 'date': '2016-01-01', 'invoice_date': '2016-01-01', 'invoice_line_ids': [(0, 0, {'product_id': self.product_a.id, 'price_unit': 100.0})]}
***************************************************************************************
browse
self.env.context['payment_ids']
***************************************************************************************
read_group
[('debit_origin_id', 'in', self.ids)]['debit_origin_id']['debit_origin_id']
***************************************************************************************
search
[('debit_origin_id', '=', invoice.id)]
***************************************************************************************
search
[('debit_origin_id', '=', invoice.id)]
***************************************************************************************
browse
self.env.context['active_ids']
***************************************************************************************
browse
list(invoice_ids_to_cancel)
***************************************************************************************
search
[]
***************************************************************************************
search
domain
***************************************************************************************
search
domain
***************************************************************************************
search
expression.AND(domains)
***************************************************************************************
search
[('name', '=', code.upper())]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[('move_id.journal_id', 'in', self.ids), ('edi_format_id', 'in', diff_edi_format_ids.ids), ('state', 'in', ('to_cancel', 'to_send'))]
***************************************************************************************
create
edi_document_vals_list
***************************************************************************************
create
edi_document_vals_list
***************************************************************************************
browse
row['tax_id']
***************************************************************************************
browse
edi_formats.ids
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
browse
row['group_tax_id']
***************************************************************************************
browse
res_ids
***************************************************************************************
search
[('attachment_id', 'in', self.ids)]
***************************************************************************************
browse
res_ids
***************************************************************************************
create
{'move_type': 'in_invoice', 'journal_id': self.company_data['default_journal_purchase'].id}
***************************************************************************************
create
{'name': filename, 'datas': base64.encodebytes(file), 'res_id': invoice.id, 'res_model': 'account.move'}
***************************************************************************************
create
{'name': filename, 'datas': base64.encodebytes(file), 'res_model': 'account.move'}
***************************************************************************************
browse
action_vals['res_id']
***************************************************************************************
create
{'edi_format_id': edi_format.id, 'move_id': move.id, 'state': state}
***************************************************************************************
create
[{'move_type': 'out_invoice', 'invoice_date': '2019-01-01', 'date': '2019-01-01', 'partner_id': self.partner_a.id, 'invoice_line_ids': [Command.create({'product_id': self.product_a.id})]} for i in range(4)]
***************************************************************************************
create
{'name': xml_name, 'raw': xml_content.encode(), 'mimetype': 'application/xml'}
***************************************************************************************
browse
self.env.context['default_journal_id']
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
get_param
'account_edi_proxy_client.demo'False
***************************************************************************************
get_param
'account_edi_proxy_client.demo'False
***************************************************************************************
get_param
'account_edi_proxy_client.edi_server_url'DEFAULT_SERVER_URL
***************************************************************************************
get_param
'account_edi_proxy_client.edi_server_url'DEFAULT_SERVER_URL
***************************************************************************************
create
{'name': xml_name, 'raw': xml_content.encode(), 'res_model': 'account.move', 'res_id': invoice.id, 'mimetype': 'application/xml'}
***************************************************************************************
search
[('code', '=', elements[0].text)]
***************************************************************************************
create
{'name': name, 'res_id': invoice.id, 'res_model': 'account.move', 'datas': text + '=' * (len(text) % 3), 'type': 'binary', 'mimetype': 'application/pdf'}
***************************************************************************************
create
val_list
***************************************************************************************
_for_xml_id
'account.action_move_in_invoice_type'
***************************************************************************************
search
[('vehicle_id', '=', vehicle.id), ('move_id.state', '!=', 'cancel')]
***************************************************************************************
_get_report_from_name
'account_test.report_accounttest'
***************************************************************************************
browse
self.ids
***************************************************************************************
search
[('reconciled', '=', True)]
***************************************************************************************
_search
[('name', operator, name)]
***************************************************************************************
_index
pdf'application/pdf'
***************************************************************************************
get_param
'web.base.url'
***************************************************************************************
browse
provider
***************************************************************************************
_for_xml_id
'base.action_res_users'
***************************************************************************************
check_access_rights
'write'
***************************************************************************************
search_read
[('share', '=', False), ('create_uid.email', '!=', False), ('create_date', '>=', datetime_min), ('create_date', '<=', datetime_max), ('log_ids', '=', False)]['create_uid', 'name', 'login']
***************************************************************************************
_signup_retrieve_partner
token
***************************************************************************************
_sendone
invite_partner'res.users/connection'{'username': user.name, 'partnerId': user.partner_id.id}
***************************************************************************************
create
{'user_id': self.id, 'secret': secret}
***************************************************************************************
create
{'name': 'Rule Test #1', 'barcode_nomenclature_id': self.nomenclature.id, 'encoding': 'ean8', 'pattern': '........'}
***************************************************************************************
create
{'name': 'Rule Test #1', 'barcode_nomenclature_id': self.nomenclature.id, 'encoding': 'ean8'}
***************************************************************************************
create
{'name': 'Rule Test #2', 'barcode_nomenclature_id': self.nomenclature.id, 'encoding': 'ean8', 'pattern': '{NNNNNNNN}'}
***************************************************************************************
create
{'name': 'Rule Test #1', 'barcode_nomenclature_id': self.nomenclature.id, 'encoding': 'ean8', 'pattern': '11.....{N}'}
***************************************************************************************
create
{'name': 'Rule Test #1', 'barcode_nomenclature_id': self.nomenclature.id, 'encoding': 'ean8', 'pattern': '66{NN}....'}
***************************************************************************************
create
{'name': 'Rule Test #3', 'barcode_nomenclature_id': self.nomenclature.id, 'encoding': 'ean13', 'pattern': '1........{NND}.'}
***************************************************************************************
create
{'name': 'Rule Test #1', 'barcode_nomenclature_id': self.nomenclature.id, 'encoding': 'ean13', 'pattern': '.....{NNNDDDD}.', 'sequence': 3}
***************************************************************************************
create
{'name': 'Rule Test #2', 'barcode_nomenclature_id': self.nomenclature.id, 'encoding': 'ean13', 'pattern': '22......{NNDD}.', 'sequence': 2}
***************************************************************************************
browse
self.ref('barcodes_gs1_nomenclature.default_gs1_nomenclature')
***************************************************************************************
create
{'name': 'GS1 Nomenclature - Test', 'is_gs1_nomenclature': True}
***************************************************************************************
with_context
default_barcode_rule_vals
***************************************************************************************
with_context
default_barcode_rule_vals
***************************************************************************************
create
{'name': 'Test', 'country_id': be_id, 'street': 'Chaussee de Namur, 40/2b'}
***************************************************************************************
create
{'name': 'Test', 'country_id': be_id, 'street': 'Chaussee de Namur, 40/2b'}
***************************************************************************************
create
company_values
***************************************************************************************
create
company_values
***************************************************************************************
create
partner_values
***************************************************************************************
create
partner_values
***************************************************************************************
_get_actions
self['on_create', 'on_create_or_write']
***************************************************************************************
_get_actions
self['on_write', 'on_create_or_write']
***************************************************************************************
_get_actions
self['on_write', 'on_create_or_write']
***************************************************************************************
_get_actions
self['on_unlink']
***************************************************************************************
browse
action_rule_id
***************************************************************************************
with_context
context
***************************************************************************************
create
{'name': 'Force Archived Contacts', 'trigger': 'on_create_or_write', 'model_id': self.env.ref('base.model_res_partner').id, 'type': 'ir.actions.server', 'trigger_field_ids': [(6, 0, [self.env.ref('base.field_res_partner__name').id])], 'fields_lines': [(0, 0, {'col1': self.env.ref('base.field_res_partner__active').id, 'evaluation_type': 'equation', 'value': 'False'})]}
***************************************************************************************
create
{'name': 'Bilbo Baggins'}
***************************************************************************************
create
{'name': 'Force Archived Filters', 'trigger': 'on_create_or_write', 'model_id': self.env.ref('base.model_ir_filters').id, 'type': 'ir.actions.server', 'trigger_field_ids': [(6, 0, [self.env.ref('base.field_ir_filters__name').id])], 'fields_lines': [(0, 0, {'col1': self.env.ref('base.field_ir_filters__active').id, 'evaluation_type': 'equation', 'value': 'False'})]}
***************************************************************************************
with_user
self.env.ref('base.user_demo').id
***************************************************************************************
create
{'name': 'Force Archived Filters', 'trigger': 'on_change', 'model_id': self.env.ref('base.model_ir_filters').id, 'type': 'ir.actions.server', 'on_change_field_ids': [(6, 0, [self.env.ref('base.field_ir_filters__name').id])], 'state': 'code', 'code': "action = {'value': {'active': False}}"}
***************************************************************************************
with_user
self.env.ref('base.user_demo').id
***************************************************************************************
create
{'name': 'Test template', 'partner_to': '${object.id}', 'lang': '${object.lang}', 'auto_delete': True, 'model_id': self.ref('base.model_res_partner')}
***************************************************************************************
create
{'email': 'testuser@testuser.com', 'groups_id': [(6, 0, [self.ref('base.group_user'), self.ref('base.group_partner_manager')])], 'name': 'Test User', 'login': 'testuser', 'password': 'testuser'}
***************************************************************************************
create
{'name': 'Test', 'active': True, 'trigger': 'on_change', 'on_change_field_ids': (4, self.ref('mail.field_mail_compose_message__template_id')), 'state': 'code', 'model_id': self.env.ref('mail.model_mail_compose_message').id}
***************************************************************************************
browse
int(prov_id)
***************************************************************************************
search
[]
***************************************************************************************
set_param
'base_geolocalize.geo_provider'google_map
***************************************************************************************
search_read
[('res_model', '=', self.res_model)]['column_name', 'field_name']
***************************************************************************************
_lang_get
self.env.user.lang
***************************************************************************************
search
[('symbol', '=', split_value[currency_index].strip())]
***************************************************************************************
get_fields_tree
'base_import.tests.models.' + field
***************************************************************************************
get_fields_tree
'base_import.tests.models.' + field
***************************************************************************************
_get_mapping_suggestion
'f0'[{'name': 'f0'}][]{}
***************************************************************************************
_get_mapping_suggestion
'some field'[{'name': 'bob', 'string': 'Some Field'}][]{}
***************************************************************************************
_get_mapping_suggestion
'should not be'[{'name': 'bob', 'string': 'wheee'}][]{}
***************************************************************************************
_get_mapping_suggestion
'bobe'[{'name': 'bob', 'type': 'char'}]['char']{}
***************************************************************************************
_get_mapping_suggestion
'f0/f1'[f][]{}
***************************************************************************************
_get_mapping_suggestion
'f0/f2'[f][]{}
***************************************************************************************
create
{'res_model': 'base_import.tests.models.preview', 'file': u'Name,Some Value,value\nchhagan,10,1\nmagan,20,2\n'.encode('utf-8'), 'file_type': 'text/csv', 'file_name': 'data.csv'}
***************************************************************************************
search_read
[('res_model', '=', 'base_import.tests.models.preview')]['column_name', 'field_name']
***************************************************************************************
create
{'res_model': 'res.users', 'file': u'로그인,언어\nbob,1\n'.encode('euc_kr'), 'file_type': 'text/csv', 'file_name': 'kr_data.csv'}
***************************************************************************************
create
{'res_model': 'base_import.tests.models.preview', 'file': b'name,Some Value,Counter\nfoo,,\nbar,,4\nqux,5,6\n', 'file_type': 'text/csv'}
***************************************************************************************
create
{'res_model': 'base_import.tests.models.preview', 'file': file_content, 'file_type': 'application/vnd.ms-excel'}
***************************************************************************************
create
{'res_model': 'base_import.tests.models.preview', 'file': file_content, 'file_type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'}
***************************************************************************************
create
{'res_model': 'base_import.tests.models.preview', 'file': file_content, 'file_type': 'application/vnd.oasis.opendocument.spreadsheet'}
***************************************************************************************
create
{'res_model': 'base_import.tests.models.preview', 'file': b'name,Some Value,Counter\nfoo,1,2\nbar,3,4\nqux,5,6\n', 'file_type': 'text/csv'}
***************************************************************************************
create
{'res_model': 'res.partner', 'file': u'name,date,create_date\n"foo","2013年07月18日","2016-10-12 06:06"\n'.encode('utf-8'), 'file_type': 'text/csv'}
***************************************************************************************
create
{'res_model': 'res.partner', 'file': u'name,parent_id/id,parent_id/date,parent_id/credit_limit\n"foo","__export__.res_partner_1","2017年10月12日","5,69"\n'.encode('utf-8'), 'file_type': 'text/csv'}
***************************************************************************************
create
{'res_model': 'base_import.tests.models.preview', 'file': b'name,Some Value,Counter\nfoo,1,2\nbar,3,4\nqux,5,6\n', 'file_type': 'text/csv'}
***************************************************************************************
create
{'res_model': 'base_import.tests.models.preview', 'file': b'name,Some Value,Counter\nfoo,1,2\n,3,\n,5,6\n', 'file_type': 'text/csv'}
***************************************************************************************
create
{'res_model': 'base_import.tests.models.preview', 'file': b'name,Some Value\nfoo,1\n\nbar,2\n     \n\t \n', 'file_type': 'text/csv'}
***************************************************************************************
create
{'res_model': 'base_import.tests.models.preview', 'file': b'name,Some Value,Counter\nfoo,1,2\n', 'file_type': 'text/csv'}
***************************************************************************************
create
{'res_model': 'base_import.tests.models.preview', 'file': b'name,Some Value,Counter\nfoo,1,2\n', 'file_type': 'text/csv'}
***************************************************************************************
create
{'res_model': 'base_import.tests.models.preview', 'file': output.getvalue(), 'file_type': 'text/csv'}
***************************************************************************************
search
[]
***************************************************************************************
create
{'res_model': 'res.partner', 'file': 'foo,US,person\n\nfoo1,Invalid Country,person\n\nfoo2,US,persons\n', 'file_type': 'text/csv'}
***************************************************************************************
search
[]
***************************************************************************************
create
{'res_model': 'res.partner', 'file': 'foo,US,0,person\n\nfoo1,Invalid Country,0,person\n\nfoo2,US,False Value,person\n\nfoo3,US,0,persons\n', 'file_type': 'text/csv'}
***************************************************************************************
create
{'res_model': 'base_import.tests.models.preview', 'file_type': 'text/csv'}
***************************************************************************************
create
{'res_model': 'base_import.tests.models.o2m', 'file_type': 'text/csv', 'file_name': 'things.csv', 'file': f.getvalue()}
***************************************************************************************
search
[]
***************************************************************************************
create
{'res_model': 'res.partner', 'file_type': 'text/csv', 'file_name': 'clients.csv', 'file': b'name,email\na,a@example.com\nb,b@example.com\n,\nc,c@example.com\nd,d@example.com\ne,e@example.com\nf,f@example.com\ng,g@example.com\n'}
***************************************************************************************
create
{'res_model': 'ir.attachment', 'file': fout.getvalue(), 'file_type': 'text/csv'}
***************************************************************************************
_get_mapping_suggestions
[]{}[]
***************************************************************************************
_get_mapping_suggestions
['foo', 'bar', 'baz', 'qux']{(0, 'foo'): ['int'], (1, 'bar'): ['char'], (2, 'baz'): ['text'], (3, 'qux'): ['many2one']}{}
***************************************************************************************
_get_mapping_suggestions
'foo bar baz qux/corge'.split(){(0, 'foo'): ['int'], (1, 'bar'): ['char'], (2, 'baz'): ['text'], (3, 'qux/corge'): ['text']}[{'name': 'bar', 'string': 'Bar', 'type': 'char'}, {'name': 'bob', 'string': 'Baz', 'type': 'text'}, {'name': 'qux', 'string': 'Qux', 'type': 'many2one', 'fields': [{'name': 'corge', 'type': 'text', 'fields': []}]}]
***************************************************************************************
_get_mapping_suggestion
value[1]model_fields_info['char']{}
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
create
{'res_model': 'base_import.tests.models.complex', 'file_name': 'f', 'file_type': 'text/csv', 'file': contents}
***************************************************************************************
create
{'res_model': 'base_import.tests.models.float'}
***************************************************************************************
_for_xml_id
'base.action_res_users'
***************************************************************************************
create
{'name': 'oobO'}
***************************************************************************************
with_user
self.user.id
***************************************************************************************
create
{'name': 'My Last Company'}
***************************************************************************************
create
{'name': 'My User'}
***************************************************************************************
create
{'login': 'My User', 'company_id': company.id, 'company_ids': [(4, company.id)], 'partner_id': partner.id}
***************************************************************************************
create
{'name': 'New User'}
***************************************************************************************
create
{'login': 'My First New User', 'company_id': company.id, 'company_ids': [(4, company.id)], 'partner_id': new_partner.id}
***************************************************************************************
create
{'name': 'New User'}
***************************************************************************************
create
{'login': 'My Second New User', 'company_id': company.id, 'company_ids': [(4, company.id)], 'partner_id': new_partner.id}
***************************************************************************************
create
{}
***************************************************************************************
search
domain
***************************************************************************************
_run_vat_test
record.foreign_vatrecord.country_id
***************************************************************************************
_build_vat_error_message
record.country_id.code.lower()record.foreign_vatfp_label
***************************************************************************************
browse
country_id
***************************************************************************************
search
[('code', '=', vat_country_code.upper())]
***************************************************************************************
search
[('name', '=', 'Europe')]
***************************************************************************************
browse
self.env.context['company_id']
***************************************************************************************
browse
self.env.context['company_id']
***************************************************************************************
search
[('code', '=ilike', country_code)]
***************************************************************************************
browse
country_id
***************************************************************************************
create
{'name': 'Dummy partner', 'country_id': self.env.ref('base.pe').id}
***************************************************************************************
create
{'name': 'Test', 'country_id': self.env.ref('base.mx').id, 'vat': 'RORO790707I47'}
***************************************************************************************
create
{'name': 'World Company', 'country_id': self.env.ref('base.be').id, 'vat': 'ATU12345675', 'company_type': 'company'}
***************************************************************************************
create
{'name': 'Sylvestre', 'parent_id': company.id, 'company_type': 'person'}
***************************************************************************************
create
{'name': 'John Dex'}
***************************************************************************************
search
[('user_id', '=', self.env.uid), ('ref_id', '=', view_id)]
***************************************************************************************
search
domain
***************************************************************************************
_xmlid_to_res_id
'calendar.calendar_template_meeting_reminder'
***************************************************************************************
browse
result
***************************************************************************************
browse
event_ids
***************************************************************************************
browse
events_by_alarm.keys()
***************************************************************************************
browse
alert['alarm_id']
***************************************************************************************
browse
alert['event_id']
***************************************************************************************
search
[('partner_id', 'in', tuple(partner_ids))]
***************************************************************************************
browse
event_id
***************************************************************************************
_sendmany
notifications
***************************************************************************************
default_get
recurrence_fields
***************************************************************************************
search
[('category', '=', 'meeting')]
***************************************************************************************
_notify_next_alarm
partner_ids
***************************************************************************************
_xmlid_to_res_id
'calendar.calendar_template_meeting_update'
***************************************************************************************
browse
partner_id
***************************************************************************************
create
recurrence_vals
***************************************************************************************
_get_id
self.env.context['active_model']
***************************************************************************************
browse
active_id
***************************************************************************************
_sendone
self.env.user.partner_id'mail.simple_notification'{'title': _('Private Event Excluded'), 'message': _('Grouping by %s is not allowed on private events.', ', '.join([self._fields[field_name].string for field_name in private_fields]))}
***************************************************************************************
search
[('event_id', 'in', self.ids), ('partner_id', 'in', removed_partner_ids)]
***************************************************************************************
_notify_next_alarm
events_to_notify.partner_ids.ids
***************************************************************************************
search
[('user_id', '=', self.env.user.id), ('partner_id', 'in', self.attendee_ids.partner_id.ids), ('partner_checked', '=', True)]
***************************************************************************************
_get_id
self.env.context['default_res_model']
***************************************************************************************
browse
self.res_id
***************************************************************************************
read_group
[('recurrence_id', 'in', self.ids)]['start:min']['recurrence_id']
***************************************************************************************
_lang_get
self.env.user.lang
***************************************************************************************
search
[('id', 'in', self.calendar_event_ids.ids), ('start', '>=', dtstart)]
***************************************************************************************
_for_xml_id
'calendar.action_calendar_event'
***************************************************************************************
browse
meeting_ids
***************************************************************************************
_for_xml_id
'calendar.action_calendar_event'
***************************************************************************************
browse
self.env.context.get('uid', self.env.uid)
***************************************************************************************
search
[('id', 'in', events)]
***************************************************************************************
search_read
self._systray_get_calendar_event_domain()['id', 'start', 'name', 'allday', 'attendee_status']
***************************************************************************************
with_user
user
***************************************************************************************
with_user
self.raoul
***************************************************************************************
with_user
self.raoul
***************************************************************************************
with_user
self.raoul
***************************************************************************************
with_user
self.raoul
***************************************************************************************
with_user
self.raoul
***************************************************************************************
create
{'name': "Doom's day", 'start': datetime(2019, 10, 25, 8, 0), 'stop': datetime(2019, 10, 27, 18, 0), 'partner_ids': [(4, self.partner.id)]}
***************************************************************************************
create
{'name': "Doom's day", 'start': datetime(2019, 10, 25, 8, 0), 'stop': datetime(2019, 10, 27, 18, 0)}
***************************************************************************************
create
{'name': 'Xavier'}
***************************************************************************************
search
[('category', '=', 'meeting')]
***************************************************************************************
create
{'name': 'Test'}
***************************************************************************************
create
{'name': 'Meeting', 'category': 'meeting'}
***************************************************************************************
create
{'summary': 'Meeting with partner', 'activity_type_id': activty_type.id, 'res_model_id': self.env['ir.model']._get_id('res.partner'), 'res_id': self.env['res.partner'].create({'name': 'A Partner'}).id}
***************************************************************************************
create
{'name': 'Meeting with partner', 'activity_ids': [(6, False, activity_id.ids)], 'start': '2018-11-12 21:00:00', 'stop': '2018-11-13 00:00:00'}
***************************************************************************************
create
{'name': 'Meeting', 'category': 'meeting'}
***************************************************************************************
create
{'summary': 'Meeting with partner', 'activity_type_id': activty_type.id, 'res_model_id': self.env['ir.model']._get_id('res.partner'), 'res_id': self.env['res.partner'].create({'name': 'A Partner'}).id}
***************************************************************************************
create
{'name': 'All Day', 'start': '2018-10-16 00:00:00', 'start_date': '2018-10-16', 'stop': '2018-10-18 00:00:00', 'stop_date': '2018-10-18', 'allday': True, 'activity_ids': [(6, False, activity_id.ids)]}
***************************************************************************************
create
{'name': 'Meeting Test', 'category': 'meeting'}
***************************************************************************************
search
[('name', '=', test_name)]
***************************************************************************************
create
{'name': 'testuser0', 'email': u'bob@example.com'}
***************************************************************************************
create
{'name': 'testuser1', 'email': u'alice@example.com'}
***************************************************************************************
_get_id
'res.partner'
***************************************************************************************
_get_id
'res.partner'
***************************************************************************************
create
{'name': 'testuser2', 'email': u'marc@example.com'}
***************************************************************************************
create
{'name': 'testuser3', 'email': u'carl@example.com'}
***************************************************************************************
create
{'name': 'testuser4', 'email': u'alain@example.com'}
***************************************************************************************
with_context
calendar_action['context']
***************************************************************************************
create
{'name': 'A Partner'}
***************************************************************************************
create
{'name': 'A Partner'}
***************************************************************************************
with_user
test_user
***************************************************************************************
with_user
self.user_demo
***************************************************************************************
with_company
web_company
***************************************************************************************
create
{'name': "Doom's day", 'start': datetime(2019, 10, 25, 8, 0), 'stop': datetime(2019, 10, 27, 18, 0), 'partner_ids': [(4, self.partner.id)]}
***************************************************************************************
create
{'name': 'Alarm', 'alarm_type': 'notification', 'interval': 'minutes', 'duration': 30}
***************************************************************************************
create
{'name': 'Alarm', 'alarm_type': 'email', 'interval': 'minutes', 'duration': 20}
***************************************************************************************
search
[('base_event_id', '=', self.event.id)]
***************************************************************************************
search
[('base_event_id', '=', self.event.id)]
***************************************************************************************
_lang_get
self.env.user.lang
***************************************************************************************
search
[('base_event_id', '=', self.event.id)]
***************************************************************************************
search
[('base_event_id', '=', self.event.id)]
***************************************************************************************
search
[('base_event_id', '=', self.event.id)]
***************************************************************************************
search
[('base_event_id', '=', self.event.id)]
***************************************************************************************
search
[('base_event_id', '=', self.event.id)]
***************************************************************************************
search
[('base_event_id', '=', self.event.id)]
***************************************************************************************
search
[('base_event_id', '=', self.event.id)]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[('day', '=', 25)]
***************************************************************************************
create
{'name': 'Recurrent Event', 'start_date': datetime(2019, 10, 22), 'stop_date': datetime(2019, 10, 24), 'recurrency': True, 'rrule_type': 'weekly', 'tue': True, 'interval': 1, 'count': 3, 'event_tz': 'Etc/GMT-4', 'allday': True}
***************************************************************************************
_xmlid_to_res_id
'base.group_partner_manager'
***************************************************************************************
create
{'name': name, 'start': datetime.combine(event_date, time(12, 0, 0)), 'stop': datetime.combine(event_date, time(14, 0, 0))}
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
_xmlid_to_res_id
'calendar_sms.sms_template_data_calendar_reminder'
***************************************************************************************
browse
list(alarms_by_event.keys())
***************************************************************************************
read_group
[('program_id', 'in', self.ids)]['program_id']['program_id']
***************************************************************************************
create
values
***************************************************************************************
create
{'program_id': program.id, 'partner_id': partner_id}
***************************************************************************************
search_count
domain
***************************************************************************************
search
[('reward_id', '=', reward.id)]
***************************************************************************************
browse
docids
***************************************************************************************
browse
self.env.context.get('active_id')
***************************************************************************************
search
ast.literal_eval(self.partners_domain)
***************************************************************************************
create
vals
***************************************************************************************
create
vals
***************************************************************************************
search_count
domain
***************************************************************************************
search
[]
***************************************************************************************
read_group
[('res_model', '=', self._name), ('user_id', '=', self.env.uid)]['res_id', 'date_deadline:min']['res_id']
***************************************************************************************
search
search_domain
***************************************************************************************
_for_xml_id
'calendar.action_calendar_event'
***************************************************************************************
search_read
[('opportunity_id', '=', self.id)]['start', 'stop', 'allday']
***************************************************************************************
_for_xml_id
'crm.crm_lead_opportunities'
***************************************************************************************
search
[('alias_name', '!=', False), ('alias_name', '!=', ''), ('alias_model_id.model', '=', 'crm.lead'), ('alias_parent_model_id.model', '=', 'crm.team'), ('alias_force_thread_id', '=', False)]
***************************************************************************************
search
[('res_model', '=', self._name), ('res_id', 'in', opportunities.ids)]
***************************************************************************************
search
[('opportunity_id', 'in', opportunities.ids)]
***************************************************************************************
search
[('variable', 'in', list(leads_fields))]
***************************************************************************************
search
pending_lead_domain
***************************************************************************************
search
[('team_id', '=', False)]
***************************************************************************************
search_read
[]['sequence', 'name', 'id']
***************************************************************************************
_clean_website
vals['website']
***************************************************************************************
browse
vals['stage_id']
***************************************************************************************
search
[('is_won', '=', True)]
***************************************************************************************
search_read
[('code', '=', self.env.user.lang)]['week_start']
***************************************************************************************
search
['|', ('team_id', '=', merged_data['team_id']), ('team_id', '=', False)]
***************************************************************************************
browse
partner_id
***************************************************************************************
search
[('email', '=', self.email_from)]
***************************************************************************************
search
[('is_won', '=', True)]
***************************************************************************************
search_read
['&', ('variable', 'in', leads_pls_fields), '|', ('team_id', 'in', pls_leads.mapped('team_id').ids), ('team_id', '=', False)]
***************************************************************************************
_clean_website
vals['website']
***************************************************************************************
search
[('name', 'ilike', '%' + customer_potential_name + '%')]
***************************************************************************************
has_group
'crm.group_use_lead'
***************************************************************************************
browse
defaults['team_id']
***************************************************************************************
browse
subset_ids
***************************************************************************************
search_count
[]
***************************************************************************************
read_group
[('team_id', 'in', self.ids), ('type', '=', 'lead'), ('user_id', '=', False)]['team_id']['team_id']
***************************************************************************************
read_group
[('team_id', 'in', self.ids), ('probability', '<', 100), ('type', '=', 'opportunity')]['expected_revenue:sum', 'team_id']['team_id']
***************************************************************************************
read_group
[('team_id', 'in', self.ids), ('probability', '<', 100), ('type', '=', 'opportunity'), ('date_deadline', '<', fields.Date.to_string(fields.Datetime.now()))]['expected_revenue', 'team_id']['team_id']
***************************************************************************************
search
[('team_id', 'in', self.ids)]
***************************************************************************************
_for_xml_id
'crm.crm_lead_action_pipeline'
***************************************************************************************
_for_xml_id
'crm.crm_lead_action_forecast'
***************************************************************************************
_get
'crm.lead'
***************************************************************************************
search
lead_domain
***************************************************************************************
_for_xml_id
'crm.crm_case_form_view_salesteams_opportunity'
***************************************************************************************
_render_template
'crm.crm_action_helper'
***************************************************************************************
search
['&', '|', ('use_leads', '=', True), ('use_opportunities', '=', True), ('assignment_optout', '=', False)]
***************************************************************************************
browse
lead_unlink_ids
***************************************************************************************
search
domain
***************************************************************************************
browse
lead_unlink_ids
***************************************************************************************
search
lead_domain
***************************************************************************************
search
domain
***************************************************************************************
search_count
[('create_date', '>=', start), ('create_date', '<', end), ('company_id', '=', company.id)]
***************************************************************************************
search_count
[('type', '=', 'opportunity'), ('probability', '=', '100'), ('date_closed', '>=', start), ('date_closed', '<', end), ('company_id', '=', company.id)]
***************************************************************************************
search
[]
***************************************************************************************
search
[('name', 'in', names), ('model', '=', 'crm.lead')]
***************************************************************************************
search
[('field_id', 'in', fields.ids)]
***************************************************************************************
search
[('assignment_optout', '=', False)]
***************************************************************************************
_for_xml_id
'crm.crm_lead_opportunities'
***************************************************************************************
browse
self.env.context.get('active_id')
***************************************************************************************
_for_xml_id
view
***************************************************************************************
create
leads_data + dups_data
***************************************************************************************
create
{'name': 'Lead1 Email Customer', 'email': lead.email_from}
***************************************************************************************
create
{'name': 'Duplicate: same email_from', 'type': 'lead', 'team_id': lead.team_id.id, 'email_from': lead.email_from, 'probability': lead.probability}
***************************************************************************************
create
{'name': 'Duplicate: email_normalize comparison', 'type': 'lead', 'team_id': lead.team_id.id, 'stage_id': lead.stage_id.id, 'email_from': 'CUSTOMER WITH NAME <%s>' % lead.email_normalized.upper(), 'probability': lead.probability}
***************************************************************************************
create
{'name': 'Duplicate: customer ID', 'type': 'lead', 'team_id': lead.team_id.id, 'partner_id': customer.id, 'probability': lead.probability}
***************************************************************************************
search
member._get_lead_month_domain()
***************************************************************************************
create
[{'name': 'AutoPartner_%04d' % x, 'email': tools.formataddr(('AutoPartner_%04d' % x, 'partner_email_%04d@example.com' % x))} for x in range(partner_count)]
***************************************************************************************
create
{'name': 'Duplicate: lost opportunity', 'type': 'opportunity', 'team_id': lead.team_id.id, 'stage_id': lead.stage_id.id, 'email_from': lead.email_from, 'probability': lead.probability}
***************************************************************************************
browse
[cid for cid in country_ids if cid]
***************************************************************************************
search
[('id', 'in', test_leads.ids)]
***************************************************************************************
search
[('id', 'in', test_leads.ids)]
***************************************************************************************
browse
[test_leads[lid].id for lid in expected_ids_asc]
***************************************************************************************
browse
[test_leads[lid].id for lid in expected_ids_desc]
***************************************************************************************
search
_domain
***************************************************************************************
search
_domain
***************************************************************************************
search
_domain
***************************************************************************************
search
_domain
***************************************************************************************
search
_domain
***************************************************************************************
search
_domain
***************************************************************************************
search
_domain
***************************************************************************************
search
_domain
***************************************************************************************
_get
'crm.lead'
***************************************************************************************
with_user
self.user_sales_leads
***************************************************************************************
with_user
self.user_sales_manager
***************************************************************************************
create
lead_data
***************************************************************************************
new
lead_data
***************************************************************************************
create
lead_data
***************************************************************************************
create
{'name': 'TestLead', 'contact_name': 'Raoulette TestContact', 'email_from': '"Raoulette TestContact" <raoulette@test.example.com>'}
***************************************************************************************
create
{'name': 'Empty partner', 'country_id': other_country.id}
***************************************************************************************
create
lead_data
***************************************************************************************
create
{'name': 'TestLead', 'partner_id': self.contact_company.id}
***************************************************************************************
create
{'name': 'TestLead', 'partner_id': self.contact_company.id}
***************************************************************************************
create
{'name': 'Empty partner', 'is_company': True, 'mobile': '123456789', 'title': self.env.ref('base.res_partner_title_mister').id, 'function': 'My function'}
***************************************************************************************
create
lead_data
***************************************************************************************
create
{'name': 'Test', 'contact_name': 'Test Contact', 'email_from': self.test_email, 'phone': self.test_phone}
***************************************************************************************
create
{'name': 'NoContact Partner', 'phone': '', 'email': '', 'mobile': ''}
***************************************************************************************
create
{'name': 'Test', 'country_id': self.country_ref.id, 'email_from': self.test_email, 'phone': self.test_phone}
***************************************************************************************
create
{'name': 'TestAlias', 'use_leads': True, 'use_opportunities': True, 'alias_name': 'test.alias'}
***************************************************************************************
create
{'name': 'Lead 1', 'country_id': self.env.ref('base.be').id, 'phone': '+32485001122'}
***************************************************************************************
create
{'name': 'Lead 2', 'country_id': self.env.ref('base.be').id, 'phone': '0032485001122'}
***************************************************************************************
create
{'name': 'Lead 3', 'country_id': self.env.ref('base.be').id, 'phone': 'hello'}
***************************************************************************************
create
{'name': 'Lead 3', 'country_id': self.env.ref('base.be').id, 'phone': '+32485112233'}
***************************************************************************************
create
[{'name': 'Lead %s' % index, 'country_id': self.env.ref('base.be').id, 'phone': number} for (index, number) in enumerate(numbers)]
***************************************************************************************
create
{'name': 'Lead 1', 'country_id': self.env.ref('base.us').id, 'phone': self.test_phone_data[0]}
***************************************************************************************
search
[('phone_mobile_search', 'like', '')]
***************************************************************************************
search
[('phone_mobile_search', 'like', 'c')]
***************************************************************************************
search
[('phone_mobile_search', 'like', '+')]
***************************************************************************************
search
[('phone_mobile_search', 'like', '5')]
***************************************************************************************
search
[('phone_mobile_search', 'like', '42')]
***************************************************************************************
search
[('phone_mobile_search', 'like', '+32485001122')]
***************************************************************************************
search
[('phone_mobile_search', 'like', '0032485001122')]
***************************************************************************************
search
[('phone_mobile_search', 'like', '485001122')]
***************************************************************************************
search
[('phone_mobile_search', 'like', '1122')]
***************************************************************************************
search
[('phone_mobile_search', 'like', 'hello')]
***************************************************************************************
search
[('phone_mobile_search', 'like', 'Hello')]
***************************************************************************************
search
[('phone_mobile_search', 'like', 'hello123')]
***************************************************************************************
search
[('phone_mobile_search', 'like', '0499223311')]
***************************************************************************************
search
[('phone_mobile_search', 'like', '0499/223311')]
***************************************************************************************
search
[('phone_mobile_search', 'like', '0499/22.33.11')]
***************************************************************************************
search
[('phone_mobile_search', 'like', '0499/22 33 11')]
***************************************************************************************
search
[('phone_mobile_search', 'like', '0499/223 311')]
***************************************************************************************
create
{'name': 'My state', 'country_id': self.country_ref.id, 'code': 'MST'}
***************************************************************************************
search
[('id', 'in', leads.ids)]
***************************************************************************************
search
[('id', 'in', leads.ids)]
***************************************************************************************
search
[('id', 'in', leads.ids)]
***************************************************************************************
search
[('id', 'in', leads.ids)]
***************************************************************************************
search
[('partner_id', 'in', (self.contact_1 | self.contact_2).ids), ('id', 'in', leads.ids)]
***************************************************************************************
search
[('id', 'in', leads.ids)]
***************************************************************************************
search
[('id', 'in', leads.ids)]
***************************************************************************************
create
{'name': 'Sales Team 3', 'sequence': 15, 'alias_name': False, 'use_leads': True, 'use_opportunities': True, 'company_id': False, 'user_id': False, 'assignment_domain': [('country_id', '!=', False)]}
***************************************************************************************
create
{'user_id': self.user_sales_manager.id, 'crm_team_id': sales_team_3.id, 'assignment_max': 60, 'assignment_domain': False}
***************************************************************************************
create
{'user_id': self.user_sales_leads.id, 'crm_team_id': sales_team_3.id, 'assignment_max': 60, 'assignment_domain': False}
***************************************************************************************
create
{'user_id': self.user_sales_salesman.id, 'crm_team_id': sales_team_3.id, 'assignment_max': 15, 'assignment_domain': [('probability', '>=', 10)]}
***************************************************************************************
search
[('id', 'in', leads.ids)]
***************************************************************************************
search
[('id', 'in', leads.ids)]
***************************************************************************************
create
{'name': 'Sales Team Dupe', 'sequence': 15, 'alias_name': False, 'use_leads': True, 'use_opportunities': True, 'company_id': False, 'user_id': False, 'assignment_domain': '[]'}
***************************************************************************************
create
{'user_id': self.user_sales_salesman.id, 'crm_team_id': sales_team_dupe.id, 'assignment_max': 10, 'assignment_domain': '[]'}
***************************************************************************************
create
{'name': 'Master', 'type': 'opportunity', 'probability': 50, 'partner_id': self.contact_1.id, 'team_id': self.sales_team_1.id, 'user_id': self.user_sales_manager.id}
***************************************************************************************
create
{'name': 'Dupe', 'type': 'lead', 'email_from': 'Duplicate Email <%s>' % master_opp.email_normalized, 'probability': 10, 'team_id': False, 'user_id': False}
***************************************************************************************
create
{'crm_use_auto_assignment': True, 'crm_auto_assignment_action': 'auto', 'crm_auto_assignment_interval_number': 19, 'crm_auto_assignment_interval_type': 'hours'}
***************************************************************************************
browse
self.sales_team_1.ids
***************************************************************************************
browse
self.sales_team_1.ids
***************************************************************************************
browse
self.sales_teams.ids
***************************************************************************************
browse
self.sales_teams.ids
***************************************************************************************
browse
sales_teams.ids
***************************************************************************************
browse
self.sales_team_1.ids
***************************************************************************************
browse
self.lead_1.ids
***************************************************************************************
create
{'name': 'Amy Wong', 'email': '"Amy, PhD Student, Wong" Tiny <AMY.WONG@test.example.com>'}
***************************************************************************************
browse
self.lead_1.ids
***************************************************************************************
create
{'name': 'Amy Wong', 'email': '"Amy, PhD Student, Wong" Tiny <AMY.WONG@test.example.com>'}
***************************************************************************************
browse
self.lead_1.ids
***************************************************************************************
create
[{'name': 'Duplicate lead: same email_from, lost', 'type': 'lead', 'email_from': test_lead.email_from, 'probability': 0, 'active': False}, {'name': 'Duplicate lead: same email_from, proba 0 but not lost', 'type': 'lead', 'email_from': test_lead.email_from, 'probability': 0, 'active': True}, {'name': 'Duplicate opp: same email_from, won', 'type': 'opportunity', 'email_from': test_lead.email_from, 'probability': 100, 'stage_id': self.stage_team1_won.id}, {'name': 'Duplicate opp: same email_from, proba 100 but not won', 'type': 'opportunity', 'email_from': test_lead.email_from, 'probability': 100, 'stage_id': self.stage_team1_2.id}]
***************************************************************************************
create
{'name': 'Different Name', 'email': 'Wong AMY <AMY.WONG@test.example.com>'}
***************************************************************************************
create
{'name': 'LEAD', 'type': 'lead', 'email_from': 'test@company2.com'}
***************************************************************************************
create
{'name': 'Empty partner'}
***************************************************************************************
create
{'name': 'LEAD', 'partner_id': partner.id, 'type': 'lead', 'email_from': 'demo@test.com', 'street': 'my street', 'city': 'my city'}
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_id': lead.id, 'active_ids': lead.ids}
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_id': lead.id, 'active_ids': lead.ids}
***************************************************************************************
create
{'name': 'Dup-%02d-%s' % (x + 1, self.lead_1.name), 'type': 'lead', 'user_id': False, 'team_id': self.lead_1.team_id.id, 'contact_name': 'Duplicate %02d of %s' % (x + 1, self.lead_1.contact_name), 'email_from': self.lead_1.email_from, 'probability': 10}
***************************************************************************************
with_context
{'default_lead_id': other_lead.id}
***************************************************************************************
with_context
{'default_lead_id': other_lead.id, 'active_model': 'crm.lead', 'active_id': self.lead_1.id}
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_id': self.lead_1.id, 'active_ids': self.lead_1.ids}
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_id': self.lead_1.id, 'active_ids': self.lead_1.ids}
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_id': self.lead_1.id, 'active_ids': self.lead_1.ids}
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_id': self.lead_1.id, 'active_ids': self.lead_1.ids}
***************************************************************************************
with_user
SUPERUSER_ID
***************************************************************************************
with_user
SUPERUSER_ID
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_id': lead.id, 'active_ids': lead.ids}
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_id': self.lead_1.id, 'active_ids': self.lead_1.ids}
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_id': self.lead_1.id, 'active_ids': self.lead_1.ids}
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_id': self.lead_1.id, 'active_ids': self.lead_1.ids}
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_id': self.lead_1.id, 'active_ids': self.lead_1.ids}
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_id': self.lead_1.id, 'active_ids': (self.lead_1 | lead_w_partner | lead_w_contact | lead_w_email_lost).ids}
***************************************************************************************
create
{'name': 'casa depapel', 'street': 'wrong street'}
***************************************************************************************
create
{'name': 'Asa Depape'}
***************************************************************************************
browse
test_leads.ids
***************************************************************************************
browse
test_leads.ids
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_ids': self.leads.ids, 'active_id': self.leads.ids[0]}
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_ids': self.leads.ids}
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_ids': lead.ids, 'active_id': lead.ids[0]}
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_ids': self.leads.ids, 'active_id': self.leads.ids[0]}
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_ids': test_leads.ids}
***************************************************************************************
create
{'name': 'My company', 'email': 'mycompany@company.com', 'is_company': True, 'street': '57th Street', 'city': 'New New York', 'country_id': self.env.ref('base.us').id, 'zip': '12345'}
***************************************************************************************
create
{'name': 'Dave', 'email': 'dave@odoo.com', 'mobile': '+1 202 555 0123', 'phone': False, 'parent_id': company.id, 'is_company': False, 'street': 'Pearl street', 'city': 'California', 'country_id': self.env.ref('base.us').id, 'zip': '95826'}
***************************************************************************************
create
{'name': 'Eve', 'email': 'eve@odoo.com', 'mobile': '+1 202 555 3210', 'phone': False, 'parent_id': company.id, 'is_company': False, 'street': 'Wall street', 'city': 'New York', 'country_id': self.env.ref('base.us').id, 'zip': '54321'}
***************************************************************************************
create
{'name': 'Lead 1', 'type': 'lead', 'partner_name': 'Alice', 'email_from': 'alice@odoo.com'}
***************************************************************************************
create
{'name': 'Opportunity 1', 'type': 'opportunity', 'email_from': 'alice@odoo.com'}
***************************************************************************************
create
{'name': 'Opportunity 2', 'type': 'opportunity', 'email_from': 'alice@odoo.com'}
***************************************************************************************
create
{'name': 'Lead 2', 'type': 'lead', 'partner_name': 'Alice Doe'}
***************************************************************************************
create
{'name': 'Opportunity 3', 'type': 'opportunity', 'partner_name': 'Alice Doe'}
***************************************************************************************
create
{'name': 'Opportunity 4', 'type': 'opportunity', 'partner_name': 'Bob Doe'}
***************************************************************************************
create
{'name': 'Opportunity 5', 'type': 'opportunity', 'partner_name': 'Bob Doe', 'email_from': 'bob@odoo.com'}
***************************************************************************************
create
{'name': 'Opportunity 6', 'type': 'opportunity', 'email_from': 'bob@mymail.com'}
***************************************************************************************
create
{'name': 'Opportunity 7', 'type': 'opportunity', 'email_from': 'alice@mymail.com'}
***************************************************************************************
create
{'name': 'Opportunity 8', 'type': 'opportunity', 'probability': 0, 'active': False, 'email_from': 'alice@mymail.com'}
***************************************************************************************
create
{'name': 'Opportunity 9', 'type': 'opportunity', 'contact_name': 'charlie'}
***************************************************************************************
create
{'name': 'Opportunity 10', 'type': 'opportunity', 'contact_name': 'Charlie Chapelin'}
***************************************************************************************
create
{'name': 'Opportunity 8', 'type': 'opportunity', 'partner_id': partner_1.id}
***************************************************************************************
create
{'name': 'Lead 3', 'type': 'lead', 'partner_id': partner_2.id}
***************************************************************************************
create
{'name': 'Lead 1', 'type': 'lead', 'email_from': 'mail"1@mymail.com'}
***************************************************************************************
create
{'name': 'Opportunity 1', 'type': 'opportunity', 'email_from': 'mail2@mymail.com'}
***************************************************************************************
create
{'name': 'Opportunity 2', 'type': 'lead', 'email_from': 'odoo.com'}
***************************************************************************************
create
{'name': 'Opportunity 3', 'type': 'opportunity', 'email_from': 'odoo.com'}
***************************************************************************************
create
{'name': 'Opportunity 3', 'type': 'opportunity', 'email_from': 'myodoo.com'}
***************************************************************************************
create
{'name': 'Test Reason'}
***************************************************************************************
create
{'name': 'Test Reason'}
***************************************************************************************
with_context
{'active_ids': lead.ids}
***************************************************************************************
with_context
{'active_ids': lead.ids}
***************************************************************************************
browse
res['res_id']
***************************************************************************************
browse
result['res_id']
***************************************************************************************
browse
result['res_id']
***************************************************************************************
browse
(self.lead_1 + self.lead_w_partner + self.lead_w_partner_company).ids
***************************************************************************************
browse
(self.lead_1 + self.lead_w_partner + self.lead_w_partner_company).ids
***************************************************************************************
browse
(self.lead_1 + self.lead_w_partner + self.lead_w_partner_company).ids
***************************************************************************************
browse
(self.lead_1 + self.lead_w_partner + self.lead_w_partner_company).ids
***************************************************************************************
create
[{'name': '%02d.txt' % idx, 'datas': base64.b64encode(b'Att%02d' % idx), 'res_model': 'crm.lead', 'res_id': self.lead_w_email.id} for idx in range(4)]
***************************************************************************************
browse
self.lead_1.ids
***************************************************************************************
create
{'name': 'Meeting with partner', 'activity_ids': [(4, activity.id)], 'start': '2021-06-12 21:00:00', 'stop': '2021-06-13 00:00:00', 'res_model_id': self.env['ir.model']._get('crm.crm_lead').id, 'res_id': lead_1.id, 'opportunity_id': lead_1.id}
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_ids': self.leads.ids, 'active_id': False}
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_ids': self.leads.ids, 'active_id': False}
***************************************************************************************
browse
self.leads.ids
***************************************************************************************
browse
self.lead_w_partner_company.ids
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_ids': self.leads.ids, 'active_id': False}
***************************************************************************************
_get
'crm.crm_lead'
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_ids': leads.ids, 'active_id': False}
***************************************************************************************
create
{'name': 'L1', 'team_id': False, 'user_id': False}
***************************************************************************************
create
{'name': 'L2', 'team_id': self.team_company2.id, 'user_id': False}
***************************************************************************************
create
{'name': 'No company', 'team_id': self.sales_team_1.id, 'user_id': False}
***************************************************************************************
create
{'name': 'Test Progressive Setup', 'user_id': False, 'team_id': False}
***************************************************************************************
create
{'name': 'Test Sales Team', 'alias_name': 'test_sales_team'}
***************************************************************************************
create
{'name': 'new_company'}
***************************************************************************************
search
[('model', '=', 'crm.team')]
***************************************************************************************
search
[('model', '=', 'crm.lead')]
***************************************************************************************
create
{'name': 'crm team 0', 'company_id': company0.id}
***************************************************************************************
create
{'name': 'crm team 1', 'company_id': company1.id}
***************************************************************************************
create
{'alias_name': 'sale_team_0', 'alias_model_id': crm_lead_model.id, 'alias_parent_model_id': crm_team_model.id, 'alias_parent_thread_id': crm_team0.id, 'alias_defaults': "{'type': 'opportunity', 'team_id': %s}" % crm_team0.id}
***************************************************************************************
create
{'alias_name': 'sale_team_1', 'alias_model_id': crm_lead_model.id, 'alias_parent_model_id': crm_team_model.id, 'alias_parent_thread_id': crm_team1.id, 'alias_defaults': "{'type': 'opportunity', 'team_id': %s}" % crm_team1.id}
***************************************************************************************
message_process
'crm.lead'new_message0
***************************************************************************************
message_process
'crm.lead'new_message1
***************************************************************************************
browse
crm_lead0_id
***************************************************************************************
browse
crm_lead1_id
***************************************************************************************
create
{'name': 'Lead 1  - user_NY_en_US'}
***************************************************************************************
create
{'name': 'Lead 2 - user_NY_en_US'}
***************************************************************************************
create
{'name': 'Lead 1 - user_UTC_pt_PT'}
***************************************************************************************
create
{'name': 'Lead 2 - user_UTC_pt_PT'}
***************************************************************************************
create
{'name': 'SuperLead', 'partner_id': self.contact_1.id}
***************************************************************************************
with_context
calendar_action['context']
***************************************************************************************
search
[]
***************************************************************************************
browse
self.pls_team.ids
***************************************************************************************
create
{'name': 'blup'}
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[('is_won', '=', True)]
***************************************************************************************
create
[{'name': 'Team Test 1'}, {'name': 'Team Test 2'}, {'name': 'Team Test 3'}]
***************************************************************************************
create
[{'name': 'Tag_test_1'}, {'name': 'Tag_test_2'}]
***************************************************************************************
create
[{'name': 'Team Test'}]
***************************************************************************************
search
[('team_id', '=', False)]
***************************************************************************************
create
{'name': 'Temporary CRM User', 'login': 'temp_crm_user', 'password': 'temp_crm_user', 'groups_id': [(6, 0, [self.ref('base.group_user'), self.ref('sales_team.group_sale_salesman')])]}
***************************************************************************************
search
[('id', 'in', leads.ids)]
***************************************************************************************
search
[('id', 'in', leads.ids)]
***************************************************************************************
search
[('id', 'in', leads.ids)]
***************************************************************************************
search
[('id', 'in', leads.ids)]
***************************************************************************************
create
{'name': 'Sales Team 3', 'sequence': 15, 'alias_name': False, 'use_leads': True, 'use_opportunities': True, 'company_id': False, 'user_id': False, 'assignment_domain': [('country_id', '!=', False)]}
***************************************************************************************
create
{'user_id': self.user_sales_manager.id, 'crm_team_id': sales_team_3.id, 'assignment_max': 60, 'assignment_domain': False}
***************************************************************************************
create
{'user_id': self.user_sales_leads.id, 'crm_team_id': sales_team_3.id, 'assignment_max': 60, 'assignment_domain': False}
***************************************************************************************
create
{'user_id': self.user_sales_salesman.id, 'crm_team_id': sales_team_3.id, 'assignment_max': 15, 'assignment_domain': [('probability', '>=', 10)]}
***************************************************************************************
search
[('id', 'in', leads.ids)]
***************************************************************************************
search
[('id', 'in', leads.ids)]
***************************************************************************************
browse
self.sales_teams.ids
***************************************************************************************
browse
self.sales_teams.ids
***************************************************************************************
browse
sales_teams.ids
***************************************************************************************
browse
self.env.context.get('active_ids')
***************************************************************************************
search
[('name', 'in', names), ('model', '=', 'crm.lead')]
***************************************************************************************
search
[('field_id', 'in', fields.ids)]
***************************************************************************************
browse
self._context.get('active_ids', [])
***************************************************************************************
browse
self._context.get('active_ids', [])
***************************************************************************************
_get_lead_duplicates
convert.partner_idconvert.lead_id.partner_id.email if convert.lead_id.partner_id.email else convert.lead_id.email_from
***************************************************************************************
browse
record_ids
***************************************************************************************
search
[('code', '=', iap_data['country_code'].upper())]
***************************************************************************************
search
[('code', '=', iap_data['state_code']), ('country_id', '=', country.id)]
***************************************************************************************
_request_enrich
lead_emails
***************************************************************************************
get_credits_url
'reveal'
***************************************************************************************
browse
self.leads.ids
***************************************************************************************
browse
self.leads.ids
***************************************************************************************
search
[('service_name', '=', service_name)]
***************************************************************************************
search_read
[]['create_uid']
***************************************************************************************
search_read
[('id', 'in', list(uids))]['email']
***************************************************************************************
search
[('code', '=', state_code), ('country_id', '=', country_id)]
***************************************************************************************
search
[('code', '=', company_data['country_code'])]
***************************************************************************************
get
'reveal'
***************************************************************************************
create
lead_vals_list
***************************************************************************************
lead_vals_from_response
self.lead_typeself.team_id.idself.tag_ids.idsself.user_id.idcompany_datapeople_data
***************************************************************************************
_for_xml_id
'crm.crm_lead_all_leads'
***************************************************************************************
_for_xml_id
'crm.crm_lead_opportunities'
***************************************************************************************
read_group
[('lead_mining_request_id', 'in', self.ids)]['lead_mining_request_id']['lead_mining_request_id']
***************************************************************************************
search
[('country_id', 'in', countries.ids)]
***************************************************************************************
next_by_code
'crm.iap.lead.mining.request'
***************************************************************************************
browse
self.test_request.ids
***************************************************************************************
browse
self.test_request.ids
***************************************************************************************
browse
self.test_request.ids
***************************************************************************************
browse
self.test_request.ids
***************************************************************************************
browse
self.test_request.ids
***************************************************************************************
create
{'name': html2plaintext(key[5:]), 'partner_id': customers[0].id if customers else False, 'user_id': False, 'team_id': False, 'description': description, 'referred': partner.name, 'source_id': utm_source and utm_source.id}
***************************************************************************************
create
{'name': 'Chat with Visitor', 'channel_partner_ids': [(4, self.user_anonymous.partner_id.id)]}
***************************************************************************************
create
{'name': 'Chat with Visitor', 'channel_partner_ids': [(4, self.env.ref('base.public_partner').id)]}
***************************************************************************************
create
{'name': 'Chat with Visitor', 'channel_partner_ids': [(4, self.user_portal.partner_id.id)]}
***************************************************************************************
create
{'name': 'Lead 1', 'country_id': self.env.ref('base.us').id, 'phone': self.test_phone_data[0]}
***************************************************************************************
search
[('order_id', 'in', self.ids), ('is_delivery', '=', True)]
***************************************************************************************
search
[('delivery_type', '=', self.package_carrier_type)]
***************************************************************************************
browse
new_picking
***************************************************************************************
_for_xml_id
'delivery.act_delivery_trackers_url'
***************************************************************************************
search
[('result_package_id', '=', package.id), ('picking_id', '=', self.env.context['picking_id'])]
***************************************************************************************
search
[('res_model', '=', 'stock.picking'), ('res_id', '=', picking.id), ('name', 'like', '%s%%' % picking.carrier_id.get_return_label_prefix())]
***************************************************************************************
create
{'name': 'My Test Customer'}
***************************************************************************************
create
{'name': 'A product to deliver'}
***************************************************************************************
create
{'name': 'Normal Delivery Charges', 'type': 'service', 'list_price': 10.0, 'categ_id': self.env.ref('delivery.product_category_deliveries').id}
***************************************************************************************
create
{'name': 'Normal Delivery Charges', 'fixed_price': 10, 'delivery_type': 'fixed', 'product_id': self.product_delivery_normal.id}
***************************************************************************************
create
{'name': 'Another Customer'}
***************************************************************************************
create
{'name': "Another Customer's Address", 'parent_id': self.partner_4.id}
***************************************************************************************
create
{'name': 'Zizizaproduct'}
***************************************************************************************
with_context
{'default_order_id': self.sale_normal_delivery_charges.id, 'default_carrier_id': self.normal_delivery.id}
***************************************************************************************
with_context
{'default_order_id': self.delivery_sale_order_cost.id, 'default_carrier_id': self.free_delivery.id}
***************************************************************************************
with_context
{'default_order_id': self.sale_prepaid.id, 'default_carrier_id': self.normal_delivery.id}
***************************************************************************************
_update_available_quantity
self.product_awself.stock_location20.0
***************************************************************************************
_update_available_quantity
self.product_bwself.stock_location20.0
***************************************************************************************
create
{'partner_id': self.env['res.partner'].create({'name': 'A partner'}).id, 'picking_type_id': self.warehouse.out_type_id.id, 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'carrier_id': self.test_carrier.id}
***************************************************************************************
create
{'product_id': self.product_aw.id, 'product_uom_id': self.uom_kg.id, 'picking_id': picking_ship.id, 'qty_done': 5, 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id}
***************************************************************************************
create
{'product_id': self.product_bw.id, 'product_uom_id': self.uom_kg.id, 'picking_id': picking_ship.id, 'qty_done': 5, 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id}
***************************************************************************************
with_context
pack_action_ctx
***************************************************************************************
create
{'name': 'A partner'}
***************************************************************************************
search
['|', ('company_id', '=', False), ('company_id', '=', rec.order_id.company_id.id)]
***************************************************************************************
browse
defaults.get('picking_id')
***************************************************************************************
_render_encapsulate
'digest.digest_mail_layout'rendered_body
***************************************************************************************
search
[('user_ids', '!=', user.id), '|', ('group_id', 'in', user.groups_id.ids), ('group_id', '=', False)]
***************************************************************************************
search_count
[('company_id', '=', company.id), ('login_date', '>=', start), ('login_date', '<', end)]
***************************************************************************************
search_count
[('create_date', '>=', start), ('create_date', '<', end), ('subtype_id', '=', discussion_subtype_id), ('message_type', 'in', ['comment', 'email'])]
***************************************************************************************
_render_template
'digest.digest_mail_main''digest.digest'self.ids
***************************************************************************************
_get
self._namefield_name
***************************************************************************************
create
{'name': 'My Digest', 'kpi_mail_message_total': True}
***************************************************************************************
search
[('type', '!=', 'private')]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
_render_template
'event.event_default_descripton'
***************************************************************************************
_search
domain
***************************************************************************************
_search
domain
***************************************************************************************
search
[]
***************************************************************************************
search
[('pipe_end', '=', True)]
***************************************************************************************
search
[('date_end', '<', fields.Datetime.now()), ('stage_id.pipe_end', '=', False)]
***************************************************************************************
flush
['event_id', 'state']
***************************************************************************************
browse
template_id
***************************************************************************************
_get
'mail.template'
***************************************************************************************
_get
'mail.template'
***************************************************************************************
create
new
***************************************************************************************
send_email
email
***************************************************************************************
browse
contact_id
***************************************************************************************
flush
['event_id', 'event_ticket_id', 'state']
***************************************************************************************
_for_xml_id
'event.action_event_view'
***************************************************************************************
search_count
[('registration_ids.partner_id', 'child_of', partner.ids)]
***************************************************************************************
with_user
self.user_eventmanager
***************************************************************************************
with_user
self.user_eventuser
***************************************************************************************
with_user
self.user_eventuser
***************************************************************************************
with_user
self.user_eventmanager
***************************************************************************************
with_user
self.user_eventuser
***************************************************************************************
with_user
self.user_eventuser
***************************************************************************************
browse
self.event_type_complex.id
***************************************************************************************
create
{'name': 'Event Update Type', 'date_begin': FieldsDatetime.to_string(datetime.today() + timedelta(days=1)), 'date_end': FieldsDatetime.to_string(datetime.today() + timedelta(days=15)), 'event_mail_ids': False}
***************************************************************************************
create
{'name': 'Type Default', 'auto_confirm': True, 'event_type_mail_ids': False}
***************************************************************************************
create
{'name': 'Type Mails', 'auto_confirm': False, 'event_type_mail_ids': [Command.clear(), Command.create({'notification_type': 'mail', 'interval_nbr': 77, 'interval_unit': 'days', 'interval_type': 'after_event', 'template_ref': 'mail.template,%i' % self.env['ir.model.data']._xmlid_to_res_id('event.event_reminder')})]}
***************************************************************************************
create
{'name': 'Event', 'date_begin': FieldsDatetime.to_string(datetime.today() + timedelta(days=1)), 'date_end': FieldsDatetime.to_string(datetime.today() + timedelta(days=15)), 'event_type_id': event_type_default.id}
***************************************************************************************
browse
self.event_type_complex.id
***************************************************************************************
create
{'name': 'Event Update Type Note', 'date_begin': FieldsDatetime.to_string(datetime.today() + timedelta(days=1)), 'date_end': FieldsDatetime.to_string(datetime.today() + timedelta(days=15))}
***************************************************************************************
create
{'name': 'Type Default', 'auto_confirm': True}
***************************************************************************************
create
{'name': 'Type Tickets', 'auto_confirm': False}
***************************************************************************************
create
{'name': 'Event', 'date_begin': FieldsDatetime.to_string(datetime.today() + timedelta(days=1)), 'date_end': FieldsDatetime.to_string(datetime.today() + timedelta(days=15)), 'event_type_id': event_type_default.id}
***************************************************************************************
create
{'name': 'Event Update Type', 'date_begin': FieldsDatetime.to_string(datetime.today() + timedelta(days=1)), 'date_end': FieldsDatetime.to_string(datetime.today() + timedelta(days=15))}
***************************************************************************************
create
{'model_id': self.env['ir.model']._get('event.registration').id, 'name': 'test template'}
***************************************************************************************
create
{'model_id': self.env['ir.model']._get('res.partner').id, 'name': 'test template'}
***************************************************************************************
create
{'name': 'TestTicket', 'event_id': event.id}
***************************************************************************************
create
{'name': 'Albert Test', 'event_id': event.id}
***************************************************************************************
create
{'name': 'Test Event 1', 'date_begin': datetime(2020, 1, 25, 8, 0, 0), 'date_end': datetime(2020, 2, 1, 18, 0, 0)}
***************************************************************************************
_search
[('is_ongoing', '=', True)]
***************************************************************************************
_search
[('is_ongoing', '=', True)]
***************************************************************************************
create
{'name': 'Test Event 2', 'date_begin': datetime(2020, 1, 25, 8, 0, 0), 'date_end': datetime(2020, 1, 28, 8, 0, 0)}
***************************************************************************************
_search
[('is_ongoing', '=', False)]
***************************************************************************************
_search
[('is_ongoing', '=', False)]
***************************************************************************************
create
{'name': 'Event Update Type', 'event_type_id': event_type.id, 'date_begin': FieldsDatetime.to_string(datetime.today() + timedelta(days=1)), 'date_end': FieldsDatetime.to_string(datetime.today() + timedelta(days=15))}
***************************************************************************************
create
{'event_id': event.id, 'name': 'reg_draft'}
***************************************************************************************
create
{'event_id': event.id, 'name': 'reg_done'}
***************************************************************************************
browse
self.event_0.ids
***************************************************************************************
browse
self.event_customer.id
***************************************************************************************
browse
self.event_0.ids
***************************************************************************************
browse
self.event_customer.id
***************************************************************************************
create
{'name': 'Testing fields computation', 'has_seats_limitation': True, 'seats_max': 30}
***************************************************************************************
create
{'event_id': event.id, 'name': 'reg_open'}
***************************************************************************************
search
[('model', '=', 'event.registration')]
***************************************************************************************
_get
'event.registration'
***************************************************************************************
_get
'res.partner'
***************************************************************************************
_xmlid_to_res_id
'event.event_reminder'
***************************************************************************************
_xmlid_to_res_id
'event.event_reminder'
***************************************************************************************
_xmlid_to_res_id
'event.event_subscription'
***************************************************************************************
search
[('event_id', '=', test_event.id), ('interval_type', '=', 'after_sub'), ('interval_unit', '=', 'now')]
***************************************************************************************
search
[('event_id', '=', test_event.id), ('interval_type', '=', 'after_sub'), ('interval_unit', '=', 'hours')]
***************************************************************************************
search
[('event_id', '=', test_event.id), ('interval_type', '=', 'before_event')]
***************************************************************************************
search
[('event_id', '=', test_event.id), ('interval_type', '=', 'after_event')]
***************************************************************************************
create
{'name': 'TestEventMail', 'create_date': now, 'user_id': self.user_eventmanager.id, 'auto_confirm': True, 'date_begin': event_date_begin, 'date_end': event_date_end, 'event_mail_ids': [(0, 0, {'interval_unit': 'now', 'interval_type': 'after_sub', 'template_ref': 'mail.template,%i' % self.env['ir.model.data']._xmlid_to_res_id('event.event_subscription')}), (0, 0, {'interval_nbr': 1, 'interval_unit': 'hours', 'interval_type': 'after_sub', 'template_ref': 'mail.template,%i' % self.env['ir.model.data']._xmlid_to_res_id('event.event_subscription')}), (0, 0, {'interval_nbr': 1, 'interval_unit': 'days', 'interval_type': 'before_event', 'template_ref': 'mail.template,%i' % self.env['ir.model.data']._xmlid_to_res_id('event.event_reminder')}), (0, 0, {'interval_nbr': 1, 'interval_unit': 'hours', 'interval_type': 'after_event', 'template_ref': 'mail.template,%i' % self.env['ir.model.data']._xmlid_to_res_id('event.event_reminder')})]}
***************************************************************************************
search
[]
***************************************************************************************
with_user
self.user_eventuser
***************************************************************************************
with_user
self.user_eventuser
***************************************************************************************
with_user
self.user_eventuser
***************************************************************************************
_xmlid_to_res_id
'event.event_subscription'
***************************************************************************************
_xmlid_to_res_id
'event.event_subscription'
***************************************************************************************
_xmlid_to_res_id
'event.event_reminder'
***************************************************************************************
_xmlid_to_res_id
'event.event_reminder'
***************************************************************************************
search
[]
***************************************************************************************
browse
self.event_customer.ids
***************************************************************************************
browse
self.event_booth_category_1.ids
***************************************************************************************
create
{'name': 'Event', 'date_begin': FieldsDatetime.to_string(datetime.today() + timedelta(days=1)), 'date_end': FieldsDatetime.to_string(datetime.today() + timedelta(days=15)), 'event_type_id': False}
***************************************************************************************
create
{'name': 'Test Booth', 'booth_category_id': category.id, 'event_id': event.id, 'partner_id': customer.id}
***************************************************************************************
create
{'name': 'No booth'}
***************************************************************************************
create
{'name': 'Using booths', 'event_type_booth_ids': [Command.clear(), Command.create({'name': 'Standard Booth', 'booth_category_id': self.event_booth_category_1.id}), Command.create({'name': 'Premium Booth', 'booth_category_id': self.event_booth_category_2.id})]}
***************************************************************************************
create
{'name': 'Event', 'date_begin': FieldsDatetime.to_string(datetime.today() + timedelta(days=1)), 'date_end': FieldsDatetime.to_string(datetime.today() + timedelta(days=15)), 'event_type_id': event_type_nobooth.id}
***************************************************************************************
_for_xml_id
'sale.action_orders'
***************************************************************************************
create
{'name': 'product_product_event_booth', 'module': 'event_booth_sale', 'model': 'product.product', 'res_id': product_id}
***************************************************************************************
create
{'name': 'Generic Event Booth Product', 'categ_id': self.env.ref('event_sale.product_category_events').id, 'list_price': 100, 'standard_price': 0, 'detailed_type': 'event_booth', 'invoice_policy': 'order'}
***************************************************************************************
_for_xml_id
'event_booth.event_booth_action'
***************************************************************************************
read_group
[('sale_order_id', 'in', self.ids)]['sale_order_id']['sale_order_id']
***************************************************************************************
create
[{'event_booth_id': booth.id, 'sale_order_line_id': so_line.id, 'partner_id': so_line.order_id.partner_id.id} for booth in so_line.event_booth_pending_ids]
***************************************************************************************
create
{'name': 'No booth'}
***************************************************************************************
create
{'name': 'Using booths', 'event_type_booth_ids': [Command.clear(), Command.create({'name': 'Standard Booth', 'booth_category_id': self.event_booth_category_1.id}), Command.create({'name': 'Premium Booth', 'booth_category_id': self.event_booth_category_2.id})]}
***************************************************************************************
create
{'name': 'Event', 'date_begin': FieldsDatetime.to_string(datetime.today() + timedelta(days=1)), 'date_end': FieldsDatetime.to_string(datetime.today() + timedelta(days=15)), 'event_type_id': event_type_nobooth.id}
***************************************************************************************
read_group
[('event_id', 'in', self.ids)]['event_id']['event_id']
***************************************************************************************
search
[('registration_ids', 'in', registrations.ids), ('event_lead_rule_id', 'in', self.ids)]
***************************************************************************************
create
lead_vals_list
***************************************************************************************
has_group
'crm.group_use_lead'
***************************************************************************************
_prepare_values_from_partner
valid_partner
***************************************************************************************
search
[('lead_creation_trigger', '=', 'create')]
***************************************************************************************
search
[('lead_creation_trigger', '=', 'confirm')]
***************************************************************************************
search
[('lead_creation_trigger', '=', 'done')]
***************************************************************************************
search
[('lead_creation_trigger', '=', 'confirm')]
***************************************************************************************
search
[('lead_creation_trigger', '=', 'done')]
***************************************************************************************
browse
self.leads.ids
***************************************************************************************
create
self.registration_values
***************************************************************************************
create
self.registration_values
***************************************************************************************
create
{'partner_id': self.event_customer.id, 'event_id': self.event_0.id}
***************************************************************************************
create
{'name': 'My Registration', 'partner_id': False, 'email': 'super.email@test.example.com', 'phone': False, 'mobile': '0456332211', 'event_id': self.event_0.id}
***************************************************************************************
create
{'name': False, 'partner_id': False, 'email': 'giga.email@test.example.com', 'phone': False, 'mobile': False, 'event_id': self.event_0.id}
***************************************************************************************
create
{'partner_id': self.event_customer.id, 'email': 'other.email@test.example.com', 'phone': False, 'mobile': '0456112233', 'event_id': self.event_0.id}
***************************************************************************************
create
{'partner_id': self.event_customer.id, 'email': 'trigger.test@not.test.example.com', 'phone': False, 'mobile': '0456112233', 'event_id': self.event_0.id}
***************************************************************************************
create
{'name': 'My Registration', 'partner_id': False, 'email': 'super.email@test.example.com', 'phone': False, 'mobile': '0456332211', 'event_id': self.event_0.id}
***************************************************************************************
search
[('sale_order_id', 'in', so_registrations.sale_order_id.ids)]
***************************************************************************************
search
[('event_lead_rule_id', 'in', rules.ids), ('registration_ids', 'in', related_registrations.ids)]
***************************************************************************************
_for_xml_id
'sale.action_orders'
***************************************************************************************
read_group
[('event_id', 'in', self.ids), ('price_subtotal', '!=', 0)]['event_id', 'currency_id', 'price_subtotal:sum']['event_id', 'currency_id']
***************************************************************************************
browse
[event_subtotal['currency_id'][0] for event_subtotal in event_subtotals]
***************************************************************************************
_for_xml_id
'sale.action_orders'
***************************************************************************************
browse
vals['sale_order_line_id']
***************************************************************************************
browse
vals['event_ticket_id']
***************************************************************************************
browse
vals['sale_order_line_id']
***************************************************************************************
create
{'name': 'product_product_event', 'module': 'event_sale', 'model': 'product.product', 'res_id': product_id}
***************************************************************************************
create
{'name': 'Generic Registration Product', 'list_price': 0, 'standard_price': 0, 'type': 'service'}
***************************************************************************************
_for_xml_id
'event.event_registration_action_tree'
***************************************************************************************
read_group
[('sale_order_id', 'in', self.ids)]['sale_order_id']['sale_order_id']
***************************************************************************************
search
[('sale_order_id', 'in', self.ids)]
***************************************************************************************
search
[('sale_order_line_id', 'in', self.ids)]
***************************************************************************************
search
[('sale_order_line_id', 'in', self.ids)]
***************************************************************************************
create
{'name': 'Event Update Type', 'event_type_id': event_type.id, 'date_begin': FieldsDatetime.to_string(datetime.today() + timedelta(days=1)), 'date_end': FieldsDatetime.to_string(datetime.today() + timedelta(days=15))}
***************************************************************************************
create
{'name': 'TestTicket', 'event_id': event.id, 'product_id': self.event_product.id}
***************************************************************************************
create
{'name': 'Test Registration Product New'}
***************************************************************************************
create
{'name': 'TestTicket 2', 'event_id': event.id, 'product_id': event_product.id, 'end_sale_datetime': FieldsDatetime.to_string(datetime.now() + timedelta(days=2))}
***************************************************************************************
create
{'event_id': self.event_0.id, 'event_ticket_id': ticket1.id, 'partner_id': self.event_customer2.id, 'sale_order_id': customer_so.id, 'sale_order_line_id': ticket1_line.id}
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'Tax 10', 'amount': 10}
***************************************************************************************
create
{'name': 'Event Product', 'list_price': 10.0}
***************************************************************************************
create
{'name': 'New Event', 'date_begin': '2020-02-02', 'date_end': '2020-04-04'}
***************************************************************************************
create
{'name': 'VIP', 'price': 1000.0, 'event_id': event.id, 'product_id': event_product.product_variant_id.id}
***************************************************************************************
create
{'applied_on': '1_product', 'base': 'list_price', 'compute_price': 'fixed', 'fixed_price': 6.0, 'product_tmpl_id': event_product.id}
***************************************************************************************
create
{'partner_id': self.env.user.partner_id.id, 'pricelist_id': pricelist.id}
***************************************************************************************
create
{'name': event.name, 'product_id': event_product.product_variant_id.id, 'product_uom_qty': 1, 'product_uom': event_product.uom_id.id, 'price_unit': event_product.list_price, 'order_id': so.id, 'event_id': event.id, 'event_ticket_id': event_ticket.id}
***************************************************************************************
browse
self.event_0.ids
***************************************************************************************
browse
self.event_0.ids
***************************************************************************************
browse
self.event_0.ids
***************************************************************************************
with_context
{'default_sale_order_id': customer_so.id}
***************************************************************************************
create
{'name': 'Design Fair Los Angeles', 'date_begin': Datetime.now() + timedelta(days=1), 'date_end': Datetime.now() + timedelta(days=5)}
***************************************************************************************
create
[{'name': 'Standard', 'event_id': event.id, 'product_id': self.env.ref('event_sale.product_product_event').id}, {'name': 'VIP', 'event_id': event.id, 'product_id': self.env.ref('event_sale.product_product_event').id}]
***************************************************************************************
create
{'event_id': event_event.id, 'event_ticket_id': ticket.id}
***************************************************************************************
browse
res.get('sale_order_id')
***************************************************************************************
search
[('sale_order_id', '=', sale_order.id), ('event_ticket_id', 'in', sale_order.mapped('order_line.event_ticket_id').ids), ('state', '!=', 'cancel')]
***************************************************************************************
create
registrations_to_create
***************************************************************************************
_get
'sms.template'
***************************************************************************************
_get
'sms.template'
***************************************************************************************
search
[('event_id', '=', self.event_0.id), ('interval_type', '=', 'after_sub')]
***************************************************************************************
search
[('event_id', '=', self.event_0.id), ('interval_type', '=', 'before_event')]
***************************************************************************************
search
[('sms_number', 'in', sanitized_numbers)]
***************************************************************************************
search
[('number', 'in', sanitized_numbers)]
***************************************************************************************
search
[]
***************************************************************************************
_for_xml_id
'fleet.fleet_vehicle_costs_action'
***************************************************************************************
search_count
[('vehicle_id', '=', record.id)]
***************************************************************************************
create
vehicle._get_driver_history_data(vals)
***************************************************************************************
_for_xml_id
'fleet.%s' % xml_id
***************************************************************************************
create
data
***************************************************************************************
search
[('expiration_date', '>', today), ('expiration_date', '<', limit_date), ('state', 'in', ['open', 'expired'])]
***************************************************************************************
search
[('expiration_date', '!=', False), ('expiration_date', '<', today), ('state', 'in', ['open', 'expired'])]
***************************************************************************************
browse
vals['future_driver_id']
***************************************************************************************
browse
vals['future_driver_id']
***************************************************************************************
search
[('vehicle_id', '=', record.id), ('state', 'in', ('open', 'expired'))]
***************************************************************************************
create
{'value': record.odometer, 'date': record.date or fields.Date.context_today(record), 'vehicle_id': record.vehicle_id.id}
***************************************************************************************
read_group
[('model_id', 'in', self.ids)]['id', 'model_id']
***************************************************************************************
create
{'name': 'Audi'}
***************************************************************************************
create
{'brand_id': brand.id, 'name': 'A3'}
***************************************************************************************
with_user
manager
***************************************************************************************
message_post_with_template
template.id
***************************************************************************************
browse
vals['badge_id']
***************************************************************************************
search
[('user_id', '=', self.env.uid)]
***************************************************************************************
search
user_domain
***************************************************************************************
search
[('challenge_id', 'in', self.ids), ('state', '=', 'inprogress')]
***************************************************************************************
read_group
[('challenge_id', '=', challenge.id), ('end_date', '=', end_date), ('state', '=', 'reached')]
***************************************************************************************
create
{'user_id': user.id, 'badge_id': badge.id, 'challenge_id': self.id}
***************************************************************************************
search
[('challenge_id', 'in', self.ids), ('state', '=', 'inprogress')]
***************************************************************************************
browse
reach_goals_user['user_id'][0]
***************************************************************************************
search_count
[('challenge_id', '=', challenge.id), ('badge_id', '=', challenge.reward_id.id), ('user_id', '=', user.id)]
***************************************************************************************
read_group
[('rank_id', '!=', False)]['rank_id']['rank_id']
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
_where_calc
user_domain
***************************************************************************************
_where_calc
user_domain
***************************************************************************************
search
dom
***************************************************************************************
search
[('karma', '>=', r['karma_min']), '|', ('rank_id', '=', rank_id), ('next_rank_id', '=', next_rank_id), ('id', 'in', users_todo.ids)]
***************************************************************************************
search
[('karma', '>=', 0), ('karma', '<', lower_rank.karma_min), '|', ('rank_id', '!=', False), ('next_rank_id', '!=', lower_rank.id), ('id', 'in', users_todo.ids)]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[('karma', '>=', r['karma_min']), '|', ('rank_id', '!=', rank_id), ('rank_id', '=', False), ('id', 'in', users.ids)]
***************************************************************************************
search
[]
***************************************************************************************
search
[('badge_id', '=', badge_id), ('user_id', '=', demo.id)]
***************************************************************************************
create
{'user_id': self.env.user.id, 'badge_id': self.badge_good_job.id}
***************************************************************************************
_get_tracking_karma_gain_position
[]
***************************************************************************************
search
[('user_id', 'in', (self.test_user | self.test_user_2).ids), ('consolidated', '=', True), ('tracking_date', '=', self.test_date)]
***************************************************************************************
search
[('user_id', 'in', (self.test_user | self.test_user_2).ids), ('consolidated', '=', False)]
***************************************************************************************
with_user
self.test_user
***************************************************************************************
with_user
self.test_user
***************************************************************************************
search
['&', ('state', '=', 'valid'), ('expired_date', '<', fields.Date.today())]
***************************************************************************************
get_config_warning
error_msg
***************************************************************************************
get_config_warning
error_msg
***************************************************************************************
_mail_find_partner_from_emails
emails
***************************************************************************************
search
[('alarm_type', '=', alarm_type), ('duration_minutes', '=', minutes)]
***************************************************************************************
search
self._get_sync_domain()
***************************************************************************************
with_user
user
***************************************************************************************
create
vals
***************************************************************************************
_odoo_values
gevent
***************************************************************************************
_mail_find_partner_from_emails
emails
***************************************************************************************
search
[('google_id', '=', vals['google_id'])]
***************************************************************************************
search
self._get_sync_domain()
***************************************************************************************
_odoo_values
gevent
***************************************************************************************
create
base_values
***************************************************************************************
_sync_google2odoo
recurrences
***************************************************************************************
_sync_google2odoo
events - recurrences
***************************************************************************************
_do_request
GOOGLE_TOKEN_ENDPOINT
***************************************************************************************
_sync_google2odoo
recurrences
***************************************************************************************
_sync_google2odoo
events - recurrences
***************************************************************************************
search
[('google_calendar_rtoken', '!=', False), ('google_synchronization_stopped', '=', False)]
***************************************************************************************
_sync_google2odoo
google_recurrence
***************************************************************************************
_sync_google2odoo
events - google_recurrence
***************************************************************************************
_sync_google2odoo
GoogleEvent([values])
***************************************************************************************
search
[('google_id', '=', values.get('id'))]
***************************************************************************************
_sync_google2odoo
GoogleEvent([values])
***************************************************************************************
search
[('google_id', '=', values.get('id'))]
***************************************************************************************
_sync_google2odoo
GoogleEvent([values])
***************************************************************************************
search
[('google_id', '=', values.get('id'))]
***************************************************************************************
create
{'name': 'coucou', 'start': date(2020, 1, 6), 'stop': date(2020, 1, 6), 'google_id': google_id, 'user_id': self.env.user.id, 'need_sync': False, 'partner_ids': [(6, 0, self.env.user.partner_id.ids)]}
***************************************************************************************
create
{'name': 'coucou', 'start': date(2020, 1, 5), 'stop': date(2020, 1, 6), 'allday': True, 'google_id': google_id, 'need_sync': False, 'user_id': False, 'partner_ids': [Command.set(user.partner_id.ids)]}
***************************************************************************************
create
{'name': 'coucou', 'start': date(2020, 1, 6), 'stop': date(2020, 1, 6), 'allday': True, 'google_id': google_id, 'need_sync': False, 'user_id': False, 'partner_ids': [(6, 0, self.env.user.partner_id.ids)]}
***************************************************************************************
_sync_google2odoo
GoogleEvent([values])
***************************************************************************************
search
[('google_id', '=', values.get('id'))]
***************************************************************************************
_sync_google2odoo
GoogleEvent([values])
***************************************************************************************
search
[('google_id', '=', values.get('id'))]
***************************************************************************************
search
[('google_id', '=', recurrence_id)]
***************************************************************************************
search
[('google_id', '=', recurrence_id)]
***************************************************************************************
search
[('google_id', '=', recurrence_id)]
***************************************************************************************
create
{'name': 'coucou', 'allday': True, 'start': datetime(2020, 1, 6), 'stop': datetime(2020, 1, 6), 'need_sync': False}
***************************************************************************************
create
{'google_id': recurrence_id, 'rrule': 'FREQ=WEEKLY;WKST=SU;COUNT=3;BYDAY=MO', 'need_sync': False, 'base_event_id': base_event.id}
***************************************************************************************
_sync_google2odoo
GoogleEvent(values)
***************************************************************************************
search
[('google_id', '=', recurrence_id)]
***************************************************************************************
search
[('google_id', '=', recurrence_id)]
***************************************************************************************
create
{'name': 'coucou', 'allday': True, 'start': datetime(2020, 1, 6), 'stop': datetime(2020, 1, 6), 'need_sync': False}
***************************************************************************************
create
{'google_id': google_id, 'rrule': 'FREQ=WEEKLY;COUNT=2;BYDAY=MO', 'need_sync': False, 'base_event_id': base_event.id, 'calendar_event_ids': [(4, base_event.id)]}
***************************************************************************************
_sync_google2odoo
GoogleEvent([values])
***************************************************************************************
create
{'name': 'coucou', 'allday': True, 'start': datetime(2020, 1, 6), 'stop': datetime(2020, 1, 6), 'need_sync': False}
***************************************************************************************
create
{'google_id': google_id, 'rrule': 'FREQ=WEEKLY;COUNT=2;BYDAY=MO', 'need_sync': False, 'base_event_id': base_event.id, 'calendar_event_ids': [(4, base_event.id)]}
***************************************************************************************
_sync_google2odoo
GoogleEvent([values])
***************************************************************************************
create
{'name': 'coucou', 'start': datetime(2021, 2, 15, 8, 0, 0), 'stop': datetime(2021, 2, 15, 10, 0, 0), 'need_sync': False}
***************************************************************************************
create
{'google_id': google_id, 'rrule': 'FREQ=WEEKLY;COUNT=3;BYDAY=MO', 'need_sync': False, 'base_event_id': base_event.id, 'calendar_event_ids': [(4, base_event.id)]}
***************************************************************************************
_sync_google2odoo
GoogleEvent([values])
***************************************************************************************
create
{'name': 'coucou', 'start': datetime(2021, 2, 15, 8, 0, 0), 'stop': datetime(2021, 2, 15, 10, 0, 0), 'need_sync': False}
***************************************************************************************
create
{'google_id': google_id, 'rrule': 'FREQ=WEEKLY;COUNT=3;BYDAY=MO', 'need_sync': False, 'base_event_id': base_event.id, 'calendar_event_ids': [(4, base_event.id)]}
***************************************************************************************
_sync_google2odoo
GoogleEvent([values])
***************************************************************************************
create
{'name': 'coucou', 'start': datetime(2021, 2, 15, 8, 0, 0), 'stop': datetime(2021, 2, 15, 10, 0, 0), 'need_sync': False}
***************************************************************************************
create
{'google_id': google_id, 'rrule': 'FREQ=WEEKLY;COUNT=3;BYDAY=MO', 'need_sync': False, 'base_event_id': base_event.id, 'calendar_event_ids': [(4, base_event.id)]}
***************************************************************************************
_sync_google2odoo
GoogleEvent([values])
***************************************************************************************
search
[('google_id', '=', values.get('id'))]
***************************************************************************************
_sync_google2odoo
GoogleEvent([values])
***************************************************************************************
_sync_google2odoo
GoogleEvent([values])
***************************************************************************************
search
[('google_id', '=', values.get('id'))]
***************************************************************************************
search
[('cron_id', '=', cron_id)]
***************************************************************************************
_sync_google2odoo
GoogleEvent([values])
***************************************************************************************
search
[('cron_id', '=', cron_id)]
***************************************************************************************
_sync_google2odoo
GoogleEvent([values])
***************************************************************************************
search
[('cron_id', '=', cron_id)]
***************************************************************************************
_sync_google2odoo
GoogleEvent([values])
***************************************************************************************
create
{'name': 'coucou', 'start': date(2020, 1, 6), 'stop': date(2020, 1, 6), 'allday': True, 'google_id': google_id, 'need_sync': False, 'user_id': other_user.id, 'partner_ids': [(6, 0, [self.env.user.partner_id.id, other_user.partner_id.id])]}
***************************************************************************************
create
{'name': 'coucou', 'start': datetime(2021, 2, 15, 7, 0, 0), 'stop': datetime(2021, 2, 15, 9, 0, 0), 'event_tz': 'Europe/Brussels', 'need_sync': False, 'partner_ids': [(6, 0, [other_user.partner_id.id])]}
***************************************************************************************
create
{'google_id': google_id, 'rrule': 'FREQ=WEEKLY;COUNT=3;BYDAY=MO', 'need_sync': False, 'base_event_id': base_event.id, 'calendar_event_ids': [(4, base_event.id)]}
***************************************************************************************
_sync_google2odoo
GoogleEvent([values])
***************************************************************************************
_sync_google2odoo
GoogleEvent([values])
***************************************************************************************
search
[('google_id', '=', google_id)]
***************************************************************************************
with_user
user
***************************************************************************************
with_user
user
***************************************************************************************
with_user
user
***************************************************************************************
set_param
'google_calendar.sync.range_days'10000
***************************************************************************************
create
{'name': 'Jean-Luc', 'email': 'jean-luc@opoo.com'}
***************************************************************************************
create
{'name': 'Notif', 'alarm_type': 'notification', 'interval': 'minutes', 'duration': 18}
***************************************************************************************
create
{'name': 'Event', 'start': datetime(2020, 1, 15, 8, 0), 'stop': datetime(2020, 1, 15, 18, 0), 'partner_ids': [(4, partner.id)], 'alarm_ids': [(4, alarm.id)], 'privacy': 'private', 'need_sync': False}
***************************************************************************************
create
[{'name': 'Jean-Luc %s' % i, 'email': 'jean-luc-%s@opoo.com' % i} for i in range(EVENT_COUNT)]
***************************************************************************************
create
{'name': 'Notif', 'alarm_type': 'notification', 'interval': 'minutes', 'duration': 18}
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'Jean-Luc', 'email': 'jean-luc@opoo.com'}
***************************************************************************************
create
{'name': 'Notif', 'alarm_type': 'notification', 'interval': 'minutes', 'duration': 18}
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'Event', 'start': datetime(2020, 1, 15, 8, 0), 'stop': datetime(2020, 1, 15, 18, 0), 'user_id': False, 'privacy': 'private', 'need_sync': False}
***************************************************************************************
create
{'name': 'Event', 'allday': True, 'start': datetime(2020, 1, 15), 'stop': datetime(2020, 1, 15), 'need_sync': False}
***************************************************************************************
create
{'name': 'Event', 'start': datetime(2020, 1, 15), 'stop': datetime(2020, 1, 15), 'active': False, 'need_sync': False}
***************************************************************************************
create
{'google_id': google_id, 'name': 'Event', 'start': datetime(2020, 1, 15), 'stop': datetime(2020, 1, 15), 'active': False, 'need_sync': True}
***************************************************************************************
create
{'google_id': google_id, 'name': 'Event', 'start': datetime(2020, 1, 15), 'stop': datetime(2020, 1, 15), 'allday': True, 'need_sync': False}
***************************************************************************************
create
{'rrule': 'FREQ=WEEKLY;COUNT=2;BYDAY=WE', 'calendar_event_ids': [(4, event.id)], 'need_sync': False}
***************************************************************************************
create
{'google_id': google_id, 'name': 'Event', 'start': datetime(2020, 1, 15), 'stop': datetime(2020, 1, 15), 'allday': True, 'need_sync': False}
***************************************************************************************
create
{'name': 'Event', 'start': datetime(2020, 1, 15), 'stop': datetime(2020, 1, 15), 'allday': True, 'need_sync': False}
***************************************************************************************
create
{'name': 'Event', 'start': datetime(2020, 1, 22), 'stop': datetime(2020, 1, 22), 'allday': True, 'need_sync': False}
***************************************************************************************
create
{'google_id': google_id, 'rrule': 'FREQ=WEEKLY;COUNT=2;BYDAY=WE', 'calendar_event_ids': [(4, event_1.id), (4, event_2.id)], 'need_sync': False}
***************************************************************************************
create
{'name': 'Event', 'start': datetime(2020, 1, 15, 8, 0), 'stop': datetime(2020, 1, 15, 18, 0), 'privacy': 'private'}
***************************************************************************************
create
{'name': 'Jean-Luc', 'email': 'jean-luc@opoo.com'}
***************************************************************************************
create
{'name': 'Test user Calendar', 'login': 'jean-luc@opoo.com', 'partner_id': partner.id}
***************************************************************************************
create
{'name': 'Event', 'start': datetime(2020, 1, 15), 'stop': datetime(2020, 1, 15), 'allday': True, 'need_sync': False}
***************************************************************************************
create
{'google_id': google_id, 'rrule': 'FREQ=WEEKLY;COUNT=2;BYDAY=WE', 'base_event_id': event.id, 'need_sync': False}
***************************************************************************************
create
{'name': 'Event', 'start': datetime(2020, 1, 15), 'stop': datetime(2020, 1, 15), 'allday': True, 'recurrence_id': False, 'recurrency': True}
***************************************************************************************
create
{'google_id': False, 'rrule': 'FREQ=WEEKLY;COUNT=2;BYDAY=WE', 'base_event_id': event.id, 'need_sync': False}
***************************************************************************************
create
{'name': 'Event', 'start': datetime(2020, 1, 15), 'stop': datetime(2020, 1, 15), 'allday': True, 'recurrence_id': recurrence.id}
***************************************************************************************
create
{'name': 'Event', 'start': datetime(2020, 1, 15), 'stop': datetime(2020, 1, 15), 'allday': True, 'need_sync': False}
***************************************************************************************
create
{'google_id': google_id, 'rrule': 'FREQ=DAILY;UNTIL=20200117T235959', 'base_event_id': event.id, 'need_sync': False}
***************************************************************************************
create
{'name': 'Event', 'start': datetime(2021, 3, 10), 'stop': datetime(2021, 3, 10), 'allday': True, 'need_sync': False}
***************************************************************************************
create
{'google_id': google_id, 'rrule': 'FREQ=WEEKLY;COUNT=2;BYDAY=WE', 'base_event_id': event.id, 'need_sync': False}
***************************************************************************************
create
{'name': 'type'}
***************************************************************************************
create
{'name': 'Jean-Luc', 'email': 'jean-luc@opoo.com'}
***************************************************************************************
create
{'name': 'Event with attendees', 'start': datetime(2020, 1, 15), 'stop': datetime(2020, 1, 15), 'allday': True, 'need_sync': False, 'partner_ids': [(4, partner.id)], 'google_id': 'aaaaaaaaa'}
***************************************************************************************
create
{'name': 'Event', 'start': datetime(2020, 1, 15, 8, 0), 'stop': datetime(2020, 1, 15, 9, 0), 'need_sync': False}
***************************************************************************************
create
{'google_id': google_id, 'rrule': 'FREQ=WEEKLY;COUNT=2;BYDAY=WE', 'base_event_id': event.id, 'need_sync': False}
***************************************************************************************
create
[{'name': 'Event %s' % i, 'start': datetime(2020, 1, 15, 8, 0), 'stop': datetime(2020, 1, 15, 18, 0), 'partner_ids': [(4, partners[i].id), (4, self.env.user.partner_id.id)], 'alarm_ids': [(4, alarm.id)], 'privacy': 'private', 'need_sync': False, 'res_model_id': partner_model.id, 'res_id': partner.id} for i in range(EVENT_COUNT)]
***************************************************************************************
create
{'name': 'Event', 'start': datetime(2020, 1, 15, 8, 0), 'stop': datetime(2020, 1, 15, 18, 0), 'partner_ids': [(4, partner.id)], 'alarm_ids': [(4, alarm.id)], 'privacy': 'private', 'need_sync': False, 'interval': 1, 'recurrency': True, 'rrule_type': 'daily', 'end_type': 'forever', 'res_model_id': partner_model.id, 'res_id': partner.id}
***************************************************************************************
with_user
user
***************************************************************************************
search
[('user_id', '=', self.user_id.id), ('google_id', '!=', False)]
***************************************************************************************
search
[('res_model', '=', model.model), ('name', '=', name_gdocs), ('res_id', '=', res_id)]
***************************************************************************************
_get_id
res_model
***************************************************************************************
create
{'res_model': res_model, 'name': name_gdocs, 'res_id': res_id, 'type': 'url', 'url': content['alternateLink']}
***************************************************************************************
browse
res_id
***************************************************************************************
_xmlid_lookup
'base_setup.action_general_configuration'
***************************************************************************************
get_config_warning
_("The permission 'reader' for 'anyone with the link' has not been written on the document")
***************************************************************************************
_xmlid_lookup
'base_setup.action_general_configuration'
***************************************************************************************
_get_google_token_uri
'drive'
***************************************************************************************
generate_refresh_token
'drive'authorization_code
***************************************************************************************
browse
self.env.user.id
***************************************************************************************
browse
attachment_id
***************************************************************************************
read_group
[('department_id', 'in', self.ids)]['department_id']['department_id']
***************************************************************************************
browse
vals.get('manager_id')
***************************************************************************************
browse
manager_id
***************************************************************************************
search
[('id', '!=', manager_id), ('department_id', '=', department.id), ('parent_id', '=', department.manager_id.id)]
***************************************************************************************
load_views
views
***************************************************************************************
_search
args
***************************************************************************************
browse
vals['user_id']
***************************************************************************************
search
expression.OR(employee_domain + user_domain)
***************************************************************************************
browse
self.ids
***************************************************************************************
browse
self.ids
***************************************************************************************
browse
self.ids
***************************************************************************************
browse
responsible_user_id
***************************************************************************************
browse
account_id
***************************************************************************************
browse
vals['user_id']
***************************************************************************************
search_read
[('user_id', 'in', self.mapped('user_id').ids)]['user_id', 'last_presence']
***************************************************************************************
browse
employee.id
***************************************************************************************
read_group
[('job_id', 'in', self.ids)]['job_id']['job_id']
***************************************************************************************
search
[('work_email', 'ilike', email_address)]
***************************************************************************************
search
[('user_id.email', 'ilike', email_address)]
***************************************************************************************
create
dict(name=self.name, company_id=self.env.company.id, **self.env['hr.employee']._sync_user(self))
***************************************************************************************
_for_xml_id
'hr.res_users_action_my'
***************************************************************************************
search
[('user_id', 'in', self.ids), ('company_id', '=', self.env.company.id)]
***************************************************************************************
_sync_user
self
***************************************************************************************
create
{'name': 'Test'}
***************************************************************************************
create
{'user_id': self.res_users_hr_officer.id}
***************************************************************************************
create
{'name': 'Test Department', 'member_ids': [(4, emp0.id)]}
***************************************************************************************
with_user
self.res_users_hr_officer
***************************************************************************************
with_user
self.res_users_hr_officer
***************************************************************************************
with_user
self.res_users_hr_officer
***************************************************************************************
create
{'name': 'Research & Development'}
***************************************************************************************
create
{'name': 'Experienced Developer', 'department_id': self.dep_rd.id, 'no_of_recruitment': 5}
***************************************************************************************
create
{'name': 'Sharlene Rhodes'}
***************************************************************************************
create
{'name': 'Opoo'}
***************************************************************************************
create
{'name': 'Otoo'}
***************************************************************************************
create
[{'name': 'Bidule', 'company_id': self.company_1.id}, {'name': 'Machin', 'company_id': self.company_2.id}]
***************************************************************************************
create
{'name': 'James', 'user_id': james.id}
***************************************************************************************
create
{'name': 'James', 'user_id': james.id}
***************************************************************************************
create
{'name': 'Richard', 'user_id': self.richard.id, 'address_home_id': self.env['res.partner'].create({'name': 'Richard', 'phone': '21454', 'type': 'private'}).id}
***************************************************************************************
create
{'name': 'Hubert', 'user_id': self.hubert.id, 'address_home_id': self.env['res.partner'].create({'name': 'Hubert', 'type': 'private'}).id}
***************************************************************************************
set_param
'hr.hr_employee_self_edit'True
***************************************************************************************
set_param
'hr.hr_employee_self_edit'False
***************************************************************************************
set_param
'hr.hr_employee_self_edit'False
***************************************************************************************
set_param
'hr.hr_employee_self_edit'False
***************************************************************************************
with_user
user_all_groups
***************************************************************************************
with_user
user
***************************************************************************************
with_user
self.richard
***************************************************************************************
create
{'name': 'Richard', 'phone': '21454', 'type': 'private'}
***************************************************************************************
create
{'name': 'Hubert', 'type': 'private'}
***************************************************************************************
search
[]
***************************************************************************************
search
[('partner_id', '=', private_address.id)]
***************************************************************************************
search
[]
***************************************************************************************
_calculate_date_deadline
activity_type.activity_type_id
***************************************************************************************
with_user
responsible
***************************************************************************************
search
[('employee_id', '=', attendance.employee_id.id), ('check_in', '<=', attendance.check_in), ('id', '!=', attendance.id)]
***************************************************************************************
search
attendance_domain
***************************************************************************************
search
[('employee_id', '=', attendance.employee_id.id), ('check_out', '=', False), ('id', '!=', attendance.id)]
***************************************************************************************
search
[('employee_id', '=', attendance.employee_id.id), ('check_in', '<', attendance.check_out), ('id', '!=', attendance.id)]
***************************************************************************************
_for_xml_id
'hr_attendance.hr_attendance_action_greeting_message'
***************************************************************************************
search
[('employee_id', '=', self.id), ('check_out', '=', False)]
***************************************************************************************
search
[('employee_id', '=', employee.id), '&', ('check_in', '<=', end_naive), ('check_out', '>=', start_naive)]
***************************************************************************************
search
[('employee_id', '=', employee.id), ('check_in', '<=', now), '|', ('check_out', '>=', start_naive), ('check_out', '=', False)]
***************************************************************************************
search
[('employee_id', '=', employee.id)]
***************************************************************************************
create
vals
***************************************************************************************
search
delete_domain
***************************************************************************************
search
search_domain
***************************************************************************************
create
{'name': 'Jacky'}
***************************************************************************************
create
{'employee_id': self.employee.id, 'check_in': datetime(2021, 1, 4, 8, 0), 'check_out': datetime(2021, 1, 4, 20, 0)}
***************************************************************************************
search_count
[('employee_id', '=', self.employee.id), ('date', '=', date(2021, 1, 4))]
***************************************************************************************
search_count
[('employee_id', '=', self.employee.id), ('date', '=', date(2021, 1, 4))]
***************************************************************************************
create
{'employee_id': self.employee.id, 'check_in': datetime(2020, 12, 30, 8, 0), 'check_out': datetime(2020, 12, 30, 20, 0)}
***************************************************************************************
search_count
[('employee_id', '=', self.employee.id), ('date', '=', date(2020, 12, 30))]
***************************************************************************************
create
{'employee_id': self.employee.id, 'check_in': datetime(2021, 1, 4, 8, 0)}
***************************************************************************************
create
{'employee_id': self.other_employee.id, 'check_in': datetime(2021, 1, 4, 8, 0), 'check_out': datetime(2021, 1, 4, 22, 0)}
***************************************************************************************
search
[('employee_id', '=', self.employee.id), ('date', '=', date(2021, 1, 4))]
***************************************************************************************
search
[('employee_id', '=', self.employee.id), ('date', '=', date(2021, 1, 4))]
***************************************************************************************
create
{'employee_id': self.employee.id, 'check_in': datetime(2021, 1, 4, 13, 0)}
***************************************************************************************
create
{'employee_id': self.employee.id, 'check_in': datetime(2021, 1, 2, 8, 0), 'check_out': datetime(2021, 1, 2, 11, 0)}
***************************************************************************************
search
[('employee_id', '=', self.employee.id), ('date', '=', date(2021, 1, 2))]
***************************************************************************************
create
{'employee_id': self.employee.id, 'check_in': datetime(2021, 1, 2, 8, 0), 'check_out': datetime(2021, 1, 2, 19, 0)}
***************************************************************************************
create
{'employee_id': self.employee.id, 'check_in': datetime(2021, 1, 4, 7, 0), 'check_out': datetime(2021, 1, 4, 16, 0)}
***************************************************************************************
create
{'employee_id': self.employee.id, 'check_in': datetime(2021, 1, 4, 7, 0), 'check_out': datetime(2021, 1, 4, 18, 0)}
***************************************************************************************
create
{'employee_id': self.jpn_employee.id, 'check_in': datetime(2021, 1, 3, 22, 0), 'check_out': datetime(2021, 1, 4, 9, 0)}
***************************************************************************************
create
{'employee_id': self.honolulu_employee.id, 'check_in': datetime(2021, 1, 4, 17, 0), 'check_out': datetime(2021, 1, 5, 4, 0)}
***************************************************************************************
create
{'employee_id': self.employee.id, 'check_in': datetime(2021, 1, 4, 8, 0)}
***************************************************************************************
search
[('employee_id', '=', self.employee.id)]
***************************************************************************************
search
[('employee_id', '=', self.employee.id)]
***************************************************************************************
create
{'employee_id': self.employee.id, 'check_in': datetime(2021, 1, 4, 13, 0)}
***************************************************************************************
create
[{'employee_id': self.employee.id, 'check_in': datetime(2021, 1, 4, 7, 55), 'check_out': datetime(2021, 1, 4, 12, 0)}, {'employee_id': self.employee.id, 'check_in': datetime(2021, 1, 4, 13, 0), 'check_out': datetime(2021, 1, 4, 17, 5)}]
***************************************************************************************
search
[('employee_id', '=', self.employee.id)]
***************************************************************************************
search
[('employee_id', '=', self.employee.id)]
***************************************************************************************
create
[{'employee_id': self.employee.id, 'check_in': datetime(2021, 1, 4, 8, 5), 'check_out': datetime(2021, 1, 4, 12, 0)}, {'employee_id': self.employee.id, 'check_in': datetime(2021, 1, 4, 13, 0), 'check_out': datetime(2021, 1, 4, 16, 55)}]
***************************************************************************************
search
[('employee_id', '=', self.employee.id)]
***************************************************************************************
search
[('employee_id', '=', self.employee.id)]
***************************************************************************************
create
[{'employee_id': self.employee.id, 'check_in': datetime(2021, 1, 4, 8, 5), 'check_out': datetime(2021, 1, 4, 12, 0)}, {'employee_id': self.employee.id, 'check_in': datetime(2021, 1, 4, 13, 0), 'check_out': datetime(2021, 1, 4, 17, 5)}]
***************************************************************************************
search
[('employee_id', '=', self.employee.id)]
***************************************************************************************
search
[('employee_id', '=', self.employee.id)]
***************************************************************************************
search
[('employee_id', '=', self.employee.id)]
***************************************************************************************
create
{'name': 'François Russie', 'user_id': self.user.id, 'pin': '1234'}
***************************************************************************************
create
{'name': 'Machiavel', 'pin': '5678'}
***************************************************************************************
create
{'name': 'Cunégonde', 'tz': 'Europe/Brussels'}
***************************************************************************************
create
{'employee_id': employee.id, 'check_in': tz_datetime(2019, 3, 1, 22, 0), 'check_out': tz_datetime(2019, 3, 2, 2, 0)}
***************************************************************************************
create
{'employee_id': employee.id, 'check_in': tz_datetime(2019, 3, 2, 11, 0)}
***************************************************************************************
search
['|', ('country_id', '=', self.company_id.country_id.id), ('country_id', '=', False)]
***************************************************************************************
search
expression.AND([[('employee_id', 'in', self.ids)], state_domain, [('date_start', '<=', date_to), '|', ('date_end', '=', False), ('date_end', '>=', date_from)]])
***************************************************************************************
_for_xml_id
'hr_contract.hr_contract_history_view_form_action'
***************************************************************************************
read_group
[('resource_calendar_id', 'in', self.ids)]['resource_calendar_id']['resource_calendar_id']
***************************************************************************************
_for_xml_id
'hr_contract.action_hr_contract'
***************************************************************************************
search
domain
***************************************************************************************
_for_xml_id
'hr_contract.action_hr_contract'
***************************************************************************************
create
{'name': 'leave name', 'date_from': start, 'date_to': end, 'resource_id': resource.id if resource else None, 'calendar_id': self.employee.resource_calendar_id.id, 'time_type': 'leave'}
***************************************************************************************
create
{'name': 'Contract', 'employee_id': self.employee.id, 'state': state, 'kanban_state': kanban_state, 'wage': 1, 'date_start': start, 'date_end': end}
***************************************************************************************
_for_xml_id
'hr_expense.action_hr_expense_sheet_all_all'
***************************************************************************************
read_group
[('department_id', 'in', self.ids), ('state', '=', 'submit')]['department_id']['department_id']
***************************************************************************************
search
[]
***************************************************************************************
_get
'property_account_expense_categ_id''product.category'
***************************************************************************************
read_group
[('res_model', '=', 'hr.expense'), ('res_id', 'in', self.ids)]['res_id']['res_id']
***************************************************************************************
browse
attachment_ids
***************************************************************************************
search
[('can_be_expensed', '=', True)]
***************************************************************************************
_for_xml_id
'base.action_attachment'
***************************************************************************************
_xmlid_to_res_id
'base.partner_root'
***************************************************************************************
search
['|', ('work_email', 'ilike', email_address), ('user_id.email', 'ilike', email_address)]
***************************************************************************************
search
[('can_be_expensed', '=', True), ('default_code', '=ilike', product_code)]
***************************************************************************************
_replace_local_links
rendered_body
***************************************************************************************
search
[('type', '=', 'purchase'), ('company_id', '=', default_company_id)]
***************************************************************************************
search
[('type', 'in', ['cash', 'bank']), ('company_id', '=', default_company_id)]
***************************************************************************************
_for_xml_id
'base.action_attachment'
***************************************************************************************
create
{'name': attachment.name.split('.')[0], 'unit_amount': 0, 'product_id': product.id}
***************************************************************************************
browse
updated_values['employee_id']
***************************************************************************************
_for_xml_id
'hr_expense.hr_expense_approve_duplicate_action'
***************************************************************************************
browse
expense['currency_id'][0]
***************************************************************************************
browse
tax['tax_repartition_line_id']
***************************************************************************************
_get_base_amount_to_display
tax['base']rep_ln
***************************************************************************************
with_company
self.company_id
***************************************************************************************
create
{'name': 'Expense for John Smith', 'employee_id': self.expense_employee.id, 'accounting_date': '2021-01-01', 'expense_line_ids': [(0, 0, {'name': 'Car Travel Expenses', 'employee_id': self.expense_employee.id, 'product_id': self.product_a.id, 'unit_amount': 350.0})]}
***************************************************************************************
create
{'name': 'test_statement', 'journal_id': self.company_data['default_journal_bank'].id, 'line_ids': [(0, 0, {'payment_ref': 'pay_ref', 'amount': -350.0, 'partner_id': self.expense_employee.address_home_id.id})]}
***************************************************************************************
create
{'name': 'First Expense for employee', 'employee_id': self.expense_employee.id, 'journal_id': self.company_data['default_journal_purchase'].id, 'accounting_date': '2017-01-01', 'expense_line_ids': [(0, 0, {'name': 'expense_1', 'date': '2016-01-01', 'product_id': self.product_a.id, 'unit_amount': 1000.0, 'tax_ids': [(6, 0, self.company_data['default_tax_purchase'].ids)], 'analytic_account_id': self.analytic_account_1.id, 'employee_id': self.expense_employee.id}), (0, 0, {'name': 'expense_1', 'date': '2016-01-01', 'product_id': self.product_b.id, 'unit_amount': 1500.0, 'tax_ids': [(6, 0, self.company_data['default_tax_purchase'].ids)], 'analytic_account_id': self.analytic_account_2.id, 'currency_id': self.currency_data['currency'].id, 'employee_id': self.expense_employee.id})]}
***************************************************************************************
create
{'currency_id': self.env.ref('base.EUR').id, 'company_id': self.env.company.id, 'rate': 2.0, 'name': '2010-01-01'}
***************************************************************************************
create
{'name': 'Expense for Dick Tracy', 'employee_id': self.expense_employee.id}
***************************************************************************************
create
{'name': 'Expense 10%', 'amount': 10, 'amount_type': 'percent', 'type_tax_use': 'purchase', 'price_include': True}
***************************************************************************************
create
{'name': 'Choucroute Saucisse', 'employee_id': self.expense_employee.id, 'product_id': self.product_a.id, 'unit_amount': 700.0, 'tax_ids': [(6, 0, tax.ids)], 'sheet_id': expense.id, 'analytic_account_id': self.analytic_account_1.id, 'currency_id': self.env.ref('base.EUR').id}
***************************************************************************************
create
{'name': 'Expense for John Smith', 'employee_id': self.expense_employee.id, 'accounting_date': '2020-01-01'}
***************************************************************************************
create
{'name': 'tax abc', 'type_tax_use': 'purchase', 'amount_type': 'percent', 'amount': 15, 'price_include': False, 'include_base_amount': False, 'tax_exigibility': 'on_payment'}
***************************************************************************************
create
{'company_id': company, 'employee_id': self.expense_employee.id, 'name': 'test sheet', 'expense_line_ids': [(0, 0, {'name': 'expense_1', 'date': '2016-01-01', 'product_id': self.product_a.id, 'unit_amount': 10.0, 'employee_id': self.expense_employee.id, 'tax_ids': tax}), (0, 0, {'name': 'expense_2', 'date': '2016-01-01', 'product_id': self.product_a.id, 'unit_amount': 1.0, 'employee_id': self.expense_employee.id, 'tax_ids': tax})]}
***************************************************************************************
create
{'name': 'Car Travel Expenses', 'employee_id': self.expense_employee.id, 'product_id': self.product_a.id, 'unit_amount': 350.0, 'tax_ids': [(6, 0, [self.tax_purchase_a.id])], 'sheet_id': expense.id, 'analytic_account_id': self.analytic_account_1.id}
***************************************************************************************
create
{'name': 'test', 'code': 999991, 'reconcile': True, 'user_type_id': current_assets_type.id, 'company_id': company}
***************************************************************************************
search
[]
***************************************************************************************
with_context
action_data['context']
***************************************************************************************
create
{'name': 'expense_employee_2', 'user_id': self.env.user.id, 'address_home_id': self.env.user.partner_id.id, 'address_id': self.env.user.partner_id.id}
***************************************************************************************
with_user
self.expense_user_employee
***************************************************************************************
with_user
self.expense_user_employee
***************************************************************************************
with_user
self.expense_user_employee
***************************************************************************************
message_new
message_parsed
***************************************************************************************
message_new
message_parsed
***************************************************************************************
with_user
self.expense_user_employee
***************************************************************************************
with_user
self.expense_user_employee
***************************************************************************************
with_user
self.expense_user_employee
***************************************************************************************
search
[('payment_mode', '=', 'own_account'), ('account_move_id', 'in', line.move_id.ids)]
***************************************************************************************
search
[('account_move_id', 'in', self.line_ids.move_id.ids)]
***************************************************************************************
search
[('driver_id', 'in', (self.user_id.partner_id | self.sudo().address_home_id).ids)]
***************************************************************************************
search
[('driver_id', 'in', (self.user_id.partner_id | self.sudo().address_home_id).ids)]
***************************************************************************************
search
[('address_home_id', '=', vehicle.driver_id.id)]
***************************************************************************************
search
[('address_home_id', '=', vehicle.future_driver_id.id)]
***************************************************************************************
read_group
[('res_model', '=', 'fleet.vehicle.assignation.log'), ('res_id', 'in', self.ids)]['res_id']['res_id']
***************************************************************************************
_for_xml_id
'base.action_attachment'
***************************************************************************************
search
[('driver_id', 'in', drivers.ids)]
***************************************************************************************
search
[('driver_id', 'in', drivers.ids)]
***************************************************************************************
search_count
[('badge_id', '=', badge.id), ('employee_id', '!=', False)]
***************************************************************************************
search
[('user_id', '=', employee.user_id.id), ('challenge_id.challenge_category', '=', 'hr')]
***************************************************************************************
search
['|', ('employee_id', '=', employee.id), '&', ('employee_id', '=', False), ('user_id', '=', employee.user_id.id)]
***************************************************************************************
create
values
***************************************************************************************
read_group
[('employee_id', 'in', self.ids), ('holiday_status_id.active', '=', True), ('state', '=', 'validate')]['number_of_days:sum', 'employee_id']['employee_id']
***************************************************************************************
has_group
'hr_holidays.group_hr_holidays_user'
***************************************************************************************
browse
values['parent_id']
***************************************************************************************
browse
values['parent_id']
***************************************************************************************
browse
values['leave_manager_id']
***************************************************************************************
search_read
[('holiday_status_id', 'in', self.holiday_status_id.ids), ('employee_id', 'in', self.employee_id.ids), '|', ('date_to', '>=', min(self.mapped('date_to'))), '&', ('date_to', '=', False), ('date_from', '<=', max(self.mapped('date_from')))]['id', 'date_from', 'date_to', 'holiday_status_id', 'employee_id']
***************************************************************************************
browse
employee_id
***************************************************************************************
search
['|', ('requires_allocation', '=', 'no'), ('has_valid_allocation', '=', True)]
***************************************************************************************
browse
defaults.get('holiday_status_id')
***************************************************************************************
browse
employee_id
***************************************************************************************
browse
[values.get('holiday_status_id') for values in vals_list if values.get('holiday_status_id')]
***************************************************************************************
search
[('holiday_id', 'in', self.ids)]
***************************************************************************************
browse
found_allocation
***************************************************************************************
read_group
domain['ids:array_agg(id)', 'hour_from:min(hour_from)', 'hour_to:max(hour_to)', 'week_type', 'dayofweek', 'day_period']['week_type', 'dayofweek', 'day_period']
***************************************************************************************
get_week_type
holiday.request_date_from
***************************************************************************************
get_week_type
holiday.request_date_to
***************************************************************************************
browse
values.get('employee_id')
***************************************************************************************
search
[('company_id', '=', leave.mode_company_id.id)]
***************************************************************************************
new
before_leave_vals
***************************************************************************************
new
after_leave_vals
***************************************************************************************
browse
employee_id
***************************************************************************************
read_group
[('accrual_plan_id', 'in', self.ids)]
***************************************************************************************
read_group
[('accrual_plan_id', 'in', self.ids)]['accrual_plan_id', 'employee_count:count_distinct(employee_id)']['accrual_plan_id']
***************************************************************************************
search
domain
***************************************************************************************
browse
employee_id
***************************************************************************************
read_group
[('time_off_type_id', 'in', accrual_allocations.holiday_status_id.ids)]['time_off_type_id', 'ids:array_agg(id)']['time_off_type_id']
***************************************************************************************
search
[('company_id', '=', self.mode_company_id.id)]
***************************************************************************************
browse
employee_id
***************************************************************************************
search
[]
***************************************************************************************
search
[('employee_id', 'in', employee_ids), ('state', 'in', ['confirm', 'validate1', 'validate']), ('holiday_status_id', 'in', self.ids)]
***************************************************************************************
search
[('employee_id', 'in', employee_ids), ('state', 'in', ['confirm', 'validate1', 'validate']), ('holiday_status_id', 'in', self.ids), ('date_from', '<=', date), '|', ('date_to', '=', False), ('date_to', '>=', date)]
***************************************************************************************
read_group
domain['holiday_status_id']['holiday_status_id']
***************************************************************************************
read_group
[('holiday_status_id', 'in', self.ids), ('date_from', '>=', fields.Datetime.to_string(datetime.datetime.now().replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0)))]['holiday_status_id']['holiday_status_id']
***************************************************************************************
read_group
[('time_off_type_id', 'in', self.ids)]['time_off_type_id']['time_off_type_id']
***************************************************************************************
_for_xml_id
'hr_holidays.hr_leave_allocation_action_all'
***************************************************************************************
_for_xml_id
'hr_holidays.hr_leave_action_action_approve_department'
***************************************************************************************
_for_xml_id
'hr_holidays.open_view_accrual_plans'
***************************************************************************************
search
[('employee_id', '=', employee_id), ('state', '=', 'validate')]
***************************************************************************************
search
[('holiday_status_id', '=', holiday_type.id), '|', ('date_to', '>=', date_to), '&', ('date_to', '=', False), ('date_from', '<=', date_from)]
***************************************************************************************
read_group
[('leave_manager_id', 'in', self.ids)]['leave_manager_id']['leave_manager_id']
***************************************************************************************
search
[('employee_id', '=', empid), ('state', 'in', holiday_type), ('date_from', '<=', str(end_date)), ('date_to', '>=', str(start_date))]
***************************************************************************************
browse
empid
***************************************************************************************
search
[]
***************************************************************************************
_get_report_from_name
'hr_holidays.report_holidayssummary'
***************************************************************************************
browse
self.ids
***************************************************************************************
browse
data['depts']
***************************************************************************************
create
{'name': 'David Employee', 'user_id': self.user_employee_id, 'department_id': self.rd_dept.id}
***************************************************************************************
create
{'name': 'Armande HrUser', 'user_id': self.user_hruser_id, 'department_id': self.rd_dept.id}
***************************************************************************************
create
{'name': 'Bastien HrManager', 'user_id': self.user_hrmanager_id, 'department_id': self.hr_dept.id, 'parent_id': self.employee_hruser_id}
***************************************************************************************
create
{'name': 'Unlimited', 'leave_validation_type': 'hr', 'requires_allocation': 'no'}
***************************************************************************************
create
{'name': 'Validation = no_validation', 'leave_validation_type': 'hr', 'requires_allocation': 'no'}
***************************************************************************************
create
{'name': 'Validation = HR', 'leave_validation_type': 'hr', 'requires_allocation': 'no'}
***************************************************************************************
create
{'name': 'Validation = manager', 'leave_validation_type': 'hr', 'requires_allocation': 'no'}
***************************************************************************************
create
{'name': 'Validation = both', 'leave_validation_type': 'hr', 'requires_allocation': 'no'}
***************************************************************************************
with_user
self.user_employee_id
***************************************************************************************
browse
1
***************************************************************************************
create
{'name': 'Crocodile Dundee Company'}
***************************************************************************************
create
{'name': 'Unlimited - Company New', 'company_id': self.new_company.id, 'leave_validation_type': 'hr', 'requires_allocation': 'no'}
***************************************************************************************
create
{'name': 'Test', 'holiday_status_id': self.leave_type.id, 'department_id': self.employee_emp.department_id.id, 'employee_id': self.employee_emp.id, 'date_from': datetime.now(), 'date_to': datetime.now() + relativedelta(days=1), 'number_of_days': 1}
***************************************************************************************
with_user
self.user_employee_id
***************************************************************************************
with_user
user_id
***************************************************************************************
with_user
self.user_hruser
***************************************************************************************
with_user
self.user_hruser
***************************************************************************************
with_user
self.user_hruser
***************************************************************************************
with_user
self.user_hrmanager_id
***************************************************************************************
create
{'name': 'Paid Time Off', 'time_type': 'leave', 'requires_allocation': 'yes'}
***************************************************************************************
create
{'name': '40 Hours', 'tz': self.employee_emp.tz, 'attendance_ids': [(0, 0, {'name': '%s_%d' % ('40 Hours', index), 'hour_from': 8, 'hour_to': 12, 'dayofweek': str(index), 'day_period': 'morning'}, {'name': '%s_%d' % ('40 Hours', index), 'hour_from': 13, 'hour_to': 18, 'dayofweek': str(index), 'day_period': 'afternoon'}) for index in range(5)]}
***************************************************************************************
create
{'name': 'Paid Time Off', 'requires_allocation': 'no', 'responsible_id': self.user_hrmanager_id}
***************************************************************************************
create
{'name': 'leave', 'employee_id': self.employee_emp.id, 'holiday_status_id': holiday_type.id, 'date_from': '2021-09-02 00:00:00', 'date_to': '2021-09-02 23:59:59'}
***************************************************************************************
search
[('accrual_plan_id', '=', accrual_plan.id), ('start_count', '=', 10)]
***************************************************************************************
search
[('accrual_plan_id', '=', accrual_plan.id), ('start_count', '=', 10)]
***************************************************************************************
with_user
self.user_hrmanager_id
***************************************************************************************
with_user
self.user_hrmanager_id
***************************************************************************************
with_user
self.user_hrmanager_id
***************************************************************************************
with_user
self.user_hrmanager_id
***************************************************************************************
with_user
self.user_hrmanager_id
***************************************************************************************
with_user
self.user_hrmanager_id
***************************************************************************************
with_user
self.user_hrmanager_id
***************************************************************************************
with_user
self.user_hrmanager_id
***************************************************************************************
with_user
self.user_hrmanager_id
***************************************************************************************
with_user
self.user_hrmanager_id
***************************************************************************************
with_user
self.user_hrmanager_id
***************************************************************************************
with_user
self.user_hrmanager_id
***************************************************************************************
with_user
self.user_hrmanager_id
***************************************************************************************
create
{'name': 'Validation = HR', 'allocation_validation_type': 'officer', 'requires_allocation': 'no', 'employee_requests': 'yes'}
***************************************************************************************
create
{'name': 'Validation = manager', 'allocation_validation_type': 'officer', 'requires_allocation': 'yes', 'employee_requests': 'yes'}
***************************************************************************************
create
{'name': 'Validation = manager', 'allocation_validation_type': 'set', 'requires_allocation': 'yes', 'employee_requests': 'no'}
***************************************************************************************
create
{'name': 'Jolly Jumper', 'leave_manager_id': self.user_employee.id}
***************************************************************************************
with_user
user
***************************************************************************************
create
{'name': 'Automatic Test', 'time_type': 'leave', 'requires_allocation': 'no'}
***************************************************************************************
create
{'name': 'No Attendances', 'attendance_ids': [(5, 0, 0)]}
***************************************************************************************
create
{'name': 'simple morning + afternoon', 'attendance_ids': [(5, 0, 0), (0, 0, {'name': 'monday morning', 'hour_from': 8, 'hour_to': 12, 'day_period': 'morning', 'dayofweek': '0'}), (0, 0, {'name': 'monday afternoon', 'hour_from': 13, 'hour_to': 17, 'day_period': 'afternoon', 'dayofweek': '0'})]}
***************************************************************************************
create
{'name': 'multi morning', 'attendance_ids': [(5, 0, 0), (0, 0, {'name': 'monday morning 1', 'hour_from': 8, 'hour_to': 10, 'day_period': 'morning', 'dayofweek': '0'}), (0, 0, {'name': 'monday morning 2', 'hour_from': 10.25, 'hour_to': 12.25, 'day_period': 'morning', 'dayofweek': '0'}), (0, 0, {'name': 'monday afternoon', 'hour_from': 13, 'hour_to': 17, 'day_period': 'afternoon', 'dayofweek': '0'})]}
***************************************************************************************
create
{'name': 'Morning only', 'attendance_ids': [(5, 0, 0), (0, 0, {'name': 'Monday All day', 'hour_from': 8, 'hour_to': 16, 'day_period': 'morning', 'dayofweek': '0'})]}
***************************************************************************************
create
{'name': 'auto next day', 'attendance_ids': [(5, 0, 0), (0, 0, {'name': 'tuesday morning', 'hour_from': 8, 'hour_to': 12, 'day_period': 'morning', 'dayofweek': '1'})]}
***************************************************************************************
create
{'name': 'auto next day', 'attendance_ids': [(5, 0, 0), (0, 0, {'name': 'monday morning', 'hour_from': 8, 'hour_to': 12, 'day_period': 'morning', 'dayofweek': '0'})]}
***************************************************************************************
create
{'name': 'auto next day', 'two_weeks_calendar': True, 'attendance_ids': [(5, 0, 0), (0, 0, {'name': 'monday morning odd week', 'hour_from': 8, 'hour_to': 12, 'day_period': 'morning', 'dayofweek': '0', 'week_type': '0'}), (0, 0, {'name': 'monday morning even week', 'hour_from': 10, 'hour_to': 12, 'day_period': 'morning', 'dayofweek': '0', 'week_type': '1'})]}
***************************************************************************************
create
{'name': 'auto next day', 'two_weeks_calendar': True, 'attendance_ids': [(5, 0, 0), (0, 0, {'name': 'monday morning odd week', 'hour_from': 8, 'hour_to': 12, 'day_period': 'morning', 'dayofweek': '0', 'week_type': '0'})]}
***************************************************************************************
with_user
self.user_employee_id
***************************************************************************************
with_user
self.user_hrmanager_id
***************************************************************************************
create
{'name': 'Hol11', 'employee_id': self.employee.id, 'holiday_status_id': self.paid_time_off.id, 'request_date_from': date(2020, 1, 7), 'date_from': date(2020, 1, 7), 'request_date_to': date(2020, 1, 9), 'date_to': date(2020, 1, 9), 'number_of_days': 3}
***************************************************************************************
create
{'name': 'Bank Holiday', 'holiday_type': 'company', 'mode_company_id': self.company.id, 'holiday_status_id': self.bank_holiday.id, 'date_from': date(2020, 1, 8), 'request_date_from': date(2020, 1, 8), 'date_to': date(2020, 1, 8), 'request_date_to': date(2020, 1, 8), 'number_of_days': 1}
***************************************************************************************
search
[('employee_id', '=', self.employee.id)]
***************************************************************************************
create
{'name': 'Hol11', 'employee_id': self.employee.id, 'holiday_status_id': self.paid_time_off.id, 'request_date_from': date(2020, 1, 7), 'date_from': date(2020, 1, 7), 'request_date_to': date(2020, 1, 9), 'date_to': date(2020, 1, 9), 'number_of_days': 3}
***************************************************************************************
create
{'name': 'Bank Holiday', 'holiday_type': 'company', 'mode_company_id': self.company.id, 'holiday_status_id': self.bank_holiday.id, 'date_from': date(2020, 1, 8), 'request_date_from': date(2020, 1, 8), 'date_to': date(2020, 1, 8), 'request_date_to': date(2020, 1, 8), 'number_of_days': 1}
***************************************************************************************
search
[('employee_id', '=', self.employee.id)]
***************************************************************************************
create
{'name': 'Hol11', 'employee_id': self.employee.id, 'holiday_status_id': self.paid_time_off.id, 'request_date_from': date(2020, 1, 7), 'request_date_to': date(2020, 1, 7), 'number_of_days': 0.5, 'request_unit_half': True, 'request_date_from_period': 'am'}
***************************************************************************************
create
{'name': 'Bank Holiday', 'holiday_type': 'company', 'mode_company_id': self.company.id, 'holiday_status_id': self.bank_holiday.id, 'date_from': date(2020, 1, 7), 'request_date_from': date(2020, 1, 7), 'date_to': date(2020, 1, 7), 'request_date_to': date(2020, 1, 7), 'number_of_days': 1}
***************************************************************************************
search
[('employee_id', '=', self.employee.id)]
***************************************************************************************
create
{'name': 'Hol11', 'employee_id': self.employee.id, 'holiday_status_id': self.paid_time_off.id, 'request_date_from': date(2020, 1, 9), 'request_date_to': date(2020, 1, 9), 'number_of_days': 1}
***************************************************************************************
create
{'name': 'Bank Holiday', 'holiday_type': 'company', 'mode_company_id': self.company.id, 'holiday_status_id': self.bank_holiday.id, 'date_from': date(2020, 1, 9), 'request_date_from': date(2020, 1, 9), 'date_to': date(2020, 1, 9), 'request_date_to': date(2020, 1, 9), 'number_of_days': 1}
***************************************************************************************
search
[('employee_id', '=', self.employee.id)]
***************************************************************************************
create
{'name': 'Hol11', 'employee_id': self.employee.id, 'holiday_status_id': self.paid_time_off.id, 'request_date_from': date(2020, 1, 6), 'request_date_to': date(2020, 1, 10), 'number_of_days': 3}
***************************************************************************************
create
{'name': 'Bank Holiday', 'holiday_type': 'company', 'mode_company_id': self.company.id, 'holiday_status_id': self.bank_holiday.id, 'date_from': date(2020, 1, 10), 'request_date_from': date(2020, 1, 10), 'date_to': date(2020, 1, 10), 'request_date_to': date(2020, 1, 10), 'number_of_days': 1}
***************************************************************************************
search
[('employee_id', '=', self.employee.id)]
***************************************************************************************
create
[{'name': 'Employee %s' % i, 'company_id': self.company.id} for i in range(100)]
***************************************************************************************
create
[{'name': 'Holiday - %s' % employee.name, 'employee_id': employee.id, 'holiday_status_id': self.paid_time_off.id, 'request_date_from': date(2020, 3, 29), 'request_date_to': date(2020, 4, 1), 'number_of_days': 3} for employee in employees[0:15]]
***************************************************************************************
create
{'name': 'Bank Holiday', 'holiday_type': 'company', 'mode_company_id': self.company.id, 'holiday_status_id': self.bank_holiday.id, 'date_from': date(2020, 4, 1), 'request_date_from': date(2020, 4, 1), 'date_to': date(2020, 4, 1), 'request_date_to': date(2020, 4, 1), 'number_of_days': 1}
***************************************************************************************
search
[('holiday_status_id', '=', self.bank_holiday.id)]
***************************************************************************************
create
{'name': 'Paid Time Off', 'requires_allocation': 'yes', 'employee_requests': 'no', 'allocation_validation_type': 'set', 'leave_validation_type': 'both', 'responsible_id': self.env.ref('base.user_admin').id}
***************************************************************************************
create
[{'name': 'Paid Time off for David', 'holiday_status_id': holiday_status_paid_time_off.id, 'number_of_days': 20, 'employee_id': self.employee_emp_id, 'state': 'validate', 'date_from': time.strftime('%Y-%m-01'), 'date_to': time.strftime('%Y-12-31')}, {'name': 'Paid Time off for David', 'holiday_status_id': holiday_status_paid_time_off.id, 'number_of_days': 20, 'employee_id': self.ref('hr.employee_admin'), 'state': 'validate', 'date_from': time.strftime('%Y-%m-01'), 'date_to': time.strftime('%Y-12-31')}]
***************************************************************************************
create
{'name': 'Paid Time Off', 'requires_allocation': 'yes', 'employee_requests': 'no', 'allocation_validation_type': 'set', 'leave_validation_type': 'both', 'responsible_id': self.env.ref('base.user_admin').id}
***************************************************************************************
create
{'name': 'Paid Time off for David', 'holiday_status_id': holiday_status_paid_time_off.id, 'number_of_days': 20, 'employee_id': self.ref('hr.employee_admin'), 'state': 'validate', 'date_from': time.strftime('%Y-%m-01'), 'date_to': time.strftime('%Y-12-31')}
***************************************************************************************
create
leave_vals
***************************************************************************************
create
leave_vals
***************************************************************************************
create
{'name': 'Paid Time Off', 'time_type': 'leave', 'requires_allocation': 'no'}
***************************************************************************************
create
{'name': 'Doctor Appointment', 'employee_id': self.employee_hruser_id, 'holiday_status_id': leave_type.id, 'date_from': datetime.today() - relativedelta(days=1), 'date_to': datetime.today(), 'number_of_days': 1}
***************************************************************************************
search
[('holiday_id', '=', leave_1.id)]
***************************************************************************************
with_user
self.user_hruser_id
***************************************************************************************
new
{'employee_id': self.employee_emp.id, 'holiday_status_id': self.holidays_type_1.id, 'request_unit_hours': True, 'request_date_from': date(2019, 5, 6), 'request_date_to': date(2019, 5, 6), 'request_hour_from': '8', 'request_hour_to': '17'}
***************************************************************************************
create
{'name': 'Hergé'}
***************************************************************************************
new
{'employee_id': self.employee_emp.id, 'holiday_status_id': self.holidays_type_1.id, 'request_unit_hours': True, 'holiday_type': 'company', 'mode_company_id': company.id, 'request_date_from': date(2019, 5, 6), 'request_date_to': date(2019, 5, 6), 'request_hour_from': '8', 'request_hour_to': '17'}
***************************************************************************************
create
{'name': 'Hergé'}
***************************************************************************************
create
{'name': 'Remi', 'company_id': company.id}
***************************************************************************************
search
[('employee_id', '=', employee.id)]
***************************************************************************************
create
{'name': 'Hergé'}
***************************************************************************************
create
{'name': 'Museum', 'company_id': company.id}
***************************************************************************************
new
{'employee_id': self.employee_emp.id, 'holiday_status_id': self.holidays_type_1.id, 'request_unit_hours': True, 'holiday_type': 'department', 'department_id': department.id, 'request_date_from': date(2019, 5, 6), 'request_date_to': date(2019, 5, 6), 'request_hour_from': '8', 'request_hour_to': '17'}
***************************************************************************************
create
{'name': 'Monday Morning Else Full Time 38h/week', 'hours_per_day': 7.6, 'attendance_ids': [(0, 0, {'name': 'Monday Morning', 'dayofweek': '0', 'hour_from': 8.5, 'hour_to': 12.5, 'day_period': 'morning'}), (0, 0, {'name': 'Tuesday Morning', 'dayofweek': '1', 'hour_from': 8.5, 'hour_to': 12.5, 'day_period': 'morning'}), (0, 0, {'name': 'Tuesday Afternoon', 'dayofweek': '1', 'hour_from': 13, 'hour_to': 17.5, 'day_period': 'afternoon'}), (0, 0, {'name': 'Wednesday Morning', 'dayofweek': '2', 'hour_from': 8.5, 'hour_to': 12.5, 'day_period': 'morning'}), (0, 0, {'name': 'Wednesday Afternoon', 'dayofweek': '2', 'hour_from': 13, 'hour_to': 17.5, 'day_period': 'afternoon'}), (0, 0, {'name': 'Thursday Morning', 'dayofweek': '3', 'hour_from': 8.5, 'hour_to': 12.5, 'day_period': 'morning'}), (0, 0, {'name': 'Thursday Afternoon', 'dayofweek': '3', 'hour_from': 13, 'hour_to': 17.5, 'day_period': 'afternoon'}), (0, 0, {'name': 'Friday Morning', 'dayofweek': '4', 'hour_from': 8.5, 'hour_to': 12.5, 'day_period': 'morning'}), (0, 0, {'name': 'Friday Afternoon', 'dayofweek': '4', 'hour_from': 13, 'hour_to': 17.5, 'day_period': 'afternoon'})]}
***************************************************************************************
create
{'name': 'Paid Time Off', 'request_unit': 'hour', 'leave_validation_type': 'both'}
***************************************************************************************
create
{'name': '20 days allocation', 'holiday_status_id': leave_type.id, 'number_of_days': 20, 'employee_id': employee.id, 'state': 'confirm', 'date_from': time.strftime('2018-1-1'), 'date_to': time.strftime('%Y-1-1')}
***************************************************************************************
create
{'name': 'Holiday 1 week', 'employee_id': employee.id, 'holiday_status_id': leave_type.id, 'date_from': fields.Datetime.from_string('2019-12-23 06:00:00'), 'date_to': fields.Datetime.from_string('2019-12-27 20:00:00'), 'number_of_days': 5}
***************************************************************************************
create
{'name': 'Holiday 1 Day', 'employee_id': employee.id, 'holiday_status_id': leave_type.id, 'date_from': fields.Datetime.from_string('2019-12-30 06:00:00'), 'date_to': fields.Datetime.from_string('2019-12-30 13:00:00'), 'number_of_days': 1}
***************************************************************************************
create
{'name': 'Classic 40h/week', 'hours_per_day': 8.0, 'attendance_ids': [(0, 0, {'name': 'Monday Morning', 'dayofweek': '0', 'hour_from': 8, 'hour_to': 12, 'day_period': 'morning'}), (0, 0, {'name': 'Monday Afternoon', 'dayofweek': '0', 'hour_from': 13, 'hour_to': 17, 'day_period': 'afternoon'}), (0, 0, {'name': 'Tuesday Morning', 'dayofweek': '1', 'hour_from': 8, 'hour_to': 12, 'day_period': 'morning'}), (0, 0, {'name': 'Tuesday Afternoon', 'dayofweek': '1', 'hour_from': 13, 'hour_to': 17, 'day_period': 'afternoon'}), (0, 0, {'name': 'Wednesday Morning', 'dayofweek': '2', 'hour_from': 8, 'hour_to': 12, 'day_period': 'morning'}), (0, 0, {'name': 'Wednesday Afternoon', 'dayofweek': '2', 'hour_from': 13, 'hour_to': 17, 'day_period': 'afternoon'}), (0, 0, {'name': 'Thursday Morning', 'dayofweek': '3', 'hour_from': 8, 'hour_to': 12, 'day_period': 'morning'}), (0, 0, {'name': 'Thursday Afternoon', 'dayofweek': '3', 'hour_from': 13, 'hour_to': 17, 'day_period': 'afternoon'}), (0, 0, {'name': 'Friday Morning', 'dayofweek': '4', 'hour_from': 8, 'hour_to': 12, 'day_period': 'morning'}), (0, 0, {'name': 'Friday Afternoon', 'dayofweek': '4', 'hour_from': 13, 'hour_to': 17, 'day_period': 'afternoon'})], 'global_leave_ids': [(0, 0, {'name': 'Christmas Leave', 'date_from': fields.Datetime.from_string('2019-12-25 00:00:00'), 'date_to': fields.Datetime.from_string('2019-12-26 23:59:59'), 'resource_id': False, 'time_type': 'leave'})]}
***************************************************************************************
create
{'name': 'Sick', 'request_unit': 'hour', 'leave_validation_type': 'both', 'requires_allocation': 'no'}
***************************************************************************************
create
{'name': 'Sick 1 week during christmas snif', 'employee_id': employee.id, 'holiday_status_id': leave_type.id, 'date_from': fields.Datetime.from_string('2019-12-23 06:00:00'), 'date_to': fields.Datetime.from_string('2019-12-27 20:00:00'), 'number_of_days': 5}
***************************************************************************************
create
{'name': 'Expired Allocation', 'employee_id': self.employee_emp_id, 'holiday_status_id': self.holidays_type_2.id, 'number_of_days': 20, 'state': 'confirm', 'date_from': '2020-01-01', 'date_to': '2020-12-31'}
***************************************************************************************
create
{'name': 'Expired Allocation', 'employee_id': self.employee_emp_id, 'holiday_status_id': self.holidays_type_2.id, 'number_of_days': 20, 'state': 'confirm', 'date_from': '2020-01-01', 'date_to': '2020-12-31'}
***************************************************************************************
create
{'name': 'Expired Allocation', 'employee_id': self.employee_emp_id, 'holiday_status_id': self.holidays_type_2.id, 'number_of_days': 3, 'state': 'confirm', 'date_from': '2021-01-01', 'date_to': '2021-12-31'}
***************************************************************************************
search
[('employee_id', 'in', self.hr_dept.member_ids.ids)]
***************************************************************************************
with_user
self.user_hrmanager
***************************************************************************************
search_count
[('employee_id', 'in', member_ids)]
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_hrmanager_id
***************************************************************************************
with_user
self.user_employee_id
***************************************************************************************
with_user
self.user_hruser_id
***************************************************************************************
with_user
self.user_employee_id
***************************************************************************************
with_user
self.user_hrmanager_id
***************************************************************************************
with_user
self.user_employee_id
***************************************************************************************
with_user
self.user_employee_id
***************************************************************************************
with_user
self.user_employee_id
***************************************************************************************
with_user
self.user_employee_id
***************************************************************************************
with_user
self.user_employee_id
***************************************************************************************
with_user
self.user_employee_id
***************************************************************************************
with_user
self.user_employee_id
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_employee_id
***************************************************************************************
with_user
self.user_employee_id
***************************************************************************************
with_user
self.user_employee_id
***************************************************************************************
create
{'name': 'Legal Leaves', 'time_type': 'leave', 'requires_allocation': 'no'}
***************************************************************************************
create
{'name': 'Christmas', 'employee_id': self.employee_hruser.id, 'holiday_status_id': self.leave_type.id, 'date_from': datetime.today() - relativedelta(days=1), 'date_to': leave_date_end, 'number_of_days': 4}
***************************************************************************************
create
{'name': 'Legal Leaves', 'time_type': 'leave', 'requires_allocation': 'no'}
***************************************************************************************
create
{'name': 'Christmas', 'employee_id': self.employee_hruser_id, 'holiday_status_id': self.leave_type.id, 'date_from': datetime.today() - relativedelta(days=1), 'date_to': datetime.today() + relativedelta(days=3), 'number_of_days': 4}
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
create
{'email': 'e.e@example.com', 'groups_id': [Command.link(self.env.ref('base.group_user').id)], 'login': 'emp', 'name': 'Ernest Employee', 'notification_type': 'inbox', 'signature': '--\nErnest'}
***************************************************************************************
create
[{'user_id': user.id} for user in self.users]
***************************************************************************************
create
{'requires_allocation': 'no', 'name': 'Legal Leaves', 'time_type': 'leave'}
***************************************************************************************
create
[{'date_from': self.today + relativedelta(days=-2), 'date_to': self.today + relativedelta(days=2), 'employee_id': self.employees[0].id, 'holiday_status_id': self.leave_type.id}, {'date_from': self.today + relativedelta(days=-2), 'date_to': self.today + relativedelta(days=3), 'employee_id': self.employees[1].id, 'holiday_status_id': self.leave_type.id}]
***************************************************************************************
create
{'name': 'test1', 'login': 'test1', 'email': 'test1@example.com', 'partner_id': self.partner.id}
***************************************************************************************
search
[('employee_id', '=', self.employee_id.id), ('date_to', '>', self.departure_date), ('state', '!=', 'refuse')]
***************************************************************************************
search
[('employee_id', '=', self.employee_id.id)]
***************************************************************************************
browse
data['emp']
***************************************************************************************
search
[('has_valid_allocation', '=', True), ('overtime_deductible', '=', True), ('requires_allocaiton', '=', 'yes')]
***************************************************************************************
search
[('overtime_deductible', '=', True), ('requires_allocation', '=', 'no')]
***************************************************************************************
search_count
[('has_valid_allocation', '=', True), ('requires_allocation', '=', 'yes'), ('employee_requests', '=', 'yes'), ('overtime_deductible', '=', True)]
***************************************************************************************
create
{'employee_id': self.employee.id, 'check_in': check_in, 'check_out': check_out}
***************************************************************************************
create
{'name': 'no overtime', 'employee_id': self.employee.id, 'holiday_status_id': self.leave_type_no_alloc.id, 'number_of_days': 1, 'date_from': datetime(2021, 1, 4), 'date_to': datetime(2021, 1, 5)}
***************************************************************************************
create
{'name': 'no overtime', 'employee_id': self.employee.id, 'holiday_status_id': self.leave_type_no_alloc.id, 'number_of_days': 1, 'date_from': datetime(2021, 1, 4), 'date_to': datetime(2021, 1, 5)}
***************************************************************************************
create
{'name': 'test allocation', 'holiday_status_id': self.leave_type_employee_allocation.id, 'employee_id': self.employee.id, 'number_of_days': 1, 'state': 'draft', 'date_from': time.strftime('%Y-1-1'), 'date_to': time.strftime('%Y-12-31')}
***************************************************************************************
create
{'name': 'no overtime', 'employee_id': self.employee.id, 'holiday_status_id': self.leave_type_no_alloc.id, 'number_of_days': 1, 'date_from': datetime(2021, 1, 4), 'date_to': datetime(2021, 1, 5)}
***************************************************************************************
create
{'name': 'test allocation', 'holiday_status_id': self.leave_type_employee_allocation.id, 'employee_id': self.employee.id, 'number_of_days': 1, 'state': 'draft', 'date_from': time.strftime('%Y-1-1'), 'date_to': time.strftime('%Y-12-31')}
***************************************************************************************
create
{'name': 'test allocation', 'holiday_status_id': leave_type.id, 'employee_id': self.employee.id, 'number_of_days': 1, 'state': 'draft', 'date_from': time.strftime('%Y-1-1'), 'date_to': time.strftime('%Y-12-31')}
***************************************************************************************
create
{'name': 'no overtime', 'employee_id': self.employee.id, 'holiday_status_id': self.leave_type_no_alloc.id, 'number_of_days': 1, 'date_from': datetime(2021, 1, 4), 'date_to': datetime(2021, 1, 5), 'state': 'draft'}
***************************************************************************************
create
{'name': 'test allocation', 'holiday_status_id': self.leave_type_employee_allocation.id, 'employee_id': self.employee.id, 'number_of_days': 1, 'state': 'draft', 'date_from': time.strftime('%Y-1-1'), 'date_to': time.strftime('%Y-12-31')}
***************************************************************************************
search
[('login', '=', email)]
***************************************************************************************
browse
vals['department_id']
***************************************************************************************
browse
vals['employee_id']
***************************************************************************************
browse
vals['employee_id']
***************************************************************************************
search
[('company_id', '=', company.id)]
***************************************************************************************
search_count
[('author_id', '=', employee.user_id.partner_id.id), ('date', '>=', Datetime.to_string(Datetime.now().replace(hour=0, minute=0, second=0, microsecond=0))), ('date', '<=', Datetime.to_string(Datetime.now()))]
***************************************************************************************
search
[('company_id', '=', company.id)]
***************************************************************************************
search
[('create_uid', '=', employee.user_id.id), ('ip', '!=', False), ('create_date', '>=', Datetime.to_string(Datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)))]
***************************************************************************************
search_count
[('create_date', '>=', start), ('create_date', '<', end), ('company_id', '=', company.id)]
***************************************************************************************
read_group
[('department_id', 'in', self.ids), ('stage_id.sequence', '<=', '1')]['department_id']['department_id']
***************************************************************************************
read_group
[('department_id', 'in', self.ids)]['no_of_hired_employee', 'no_of_recruitment', 'department_id']['department_id']
***************************************************************************************
search
[('create_date', '>', fields.Datetime.now() - timedelta(days=90))]
***************************************************************************************
search
['|', '&', ('res_model', '=', 'hr.job'), ('res_id', 'in', self.ids), '&', ('res_model', '=', 'hr.applicant'), ('res_id', 'in', applicants.ids)]
***************************************************************************************
read_group
[('job_id', 'in', self.ids)]['job_id']['job_id']
***************************************************************************************
search
['|', ('job_ids', '=', False), ('job_ids', '=', self.id)]
***************************************************************************************
_for_xml_id
'base.action_attachment'
***************************************************************************************
search_count
[('job_id', '=', job.id), ('stage_id', '=', job._get_first_stage().id)]
***************************************************************************************
_get
'hr.applicant'
***************************************************************************************
create
source_vals
***************************************************************************************
read_group
[('stage_id', 'in', self.ids)]['stage_id']'stage_id'
***************************************************************************************
read_group
[('res_model', '=', 'hr.applicant'), ('res_id', 'in', self.ids)]['res_id']['res_id']
***************************************************************************************
_for_xml_id
'calendar.action_calendar_event'
***************************************************************************************
_for_xml_id
'base.action_attachment'
***************************************************************************************
_for_xml_id
'hr.open_view_employee_list'
***************************************************************************************
create
vals
***************************************************************************************
browse
self.env.context['active_id']
***************************************************************************************
create
{'is_company': False, 'type': 'private', 'name': applicant.partner_name, 'email': applicant.email_from, 'phone': applicant.partner_phone, 'mobile': applicant.partner_mobile}
***************************************************************************************
search
['|', ('job_ids', '=', False), ('job_ids', '=', job_id.id), ('fold', '=', False)]
***************************************************************************************
_get
'hr.applicant'
***************************************************************************************
_get
'hr.job'
***************************************************************************************
_xmlid_to_res_id
'mail.mt_note'
***************************************************************************************
browse
custom_values['job_id']
***************************************************************************************
search
['|', ('job_ids', '=', False), ('job_ids', '=', applicant.job_id.id), ('fold', '=', False)]
***************************************************************************************
create
{'name': 'Research & Development'}
***************************************************************************************
create
{'name': 'Experienced Developer', 'department_id': self.dep_rd.id, 'no_of_recruitment': 5}
***************************************************************************************
create
{'name': 'Sharlene Rhodes'}
***************************************************************************************
create
{'company_id': self.env.ref('base.main_company').id, 'name': 'HR Recruitment Officer', 'login': 'hrro', 'email': 'hrofcr@yourcompany.com', 'groups_id': [(6, 0, [self.env.ref('hr_recruitment.group_hr_recruitment_user').id])]}
***************************************************************************************
search
[('email_from', 'ilike', 'Richard_Anderson@yahoo.com')]
***************************************************************************************
search
[('name', '=', 'resume.pdf'), ('res_model', '=', self.env['hr.applicant']._name), ('res_id', '=', applicant.id)]
***************************************************************************************
create
{'name': 'Test Job for Notification'}
***************************************************************************************
create
{'res_model': 'hr.job', 'res_id': job.id, 'partner_id': user.partner_id.id, 'subtype_ids': [(4, new_job_application_mt.id)]}
***************************************************************************************
create
{'name': 'Test Job Application for Notification', 'job_id': job.id}
***************************************************************************************
with_user
self.res_users_hr_recruitment_officer
***************************************************************************************
_xmlid_to_res_id
'mail.mt_note'
***************************************************************************************
create
{'is_company': False, 'type': 'private', 'name': self.partner_name, 'email': self.email_from, 'phone': self.partner_phone, 'mobile': self.partner_mobile}
***************************************************************************************
create
{'title': _('Interview Form : %s') % self.name}
***************************************************************************************
create
{'survey_id': self.survey_sysadmin.id}
***************************************************************************************
with_context
{'active_id': self.job_sysadmin.id, **action['context']}
***************************************************************************************
create
resume_lines_values
***************************************************************************************
create
{'employee_id': employee.id, 'name': channel.name, 'date_start': fields.Date.today(), 'date_end': fields.Date.today(), 'description': channel.description, 'line_type_id': line_type and line_type.id, 'display_type': 'course', 'channel_id': channel.id}
***************************************************************************************
create
{'employee_id': employee.id, 'name': survey.title, 'date_start': fields.Date.today(), 'date_end': fields.Date.today(), 'description': html2plaintext(survey.description), 'line_type_id': line_type and line_type.id, 'display_type': 'certification', 'survey_id': survey.id}
***************************************************************************************
search_read
[('project_id', '!=', False), ('id', 'in', self.ids)]['id', 'project_id', 'task_id']
***************************************************************************************
search
[('user_id', 'in', user_ids)]
***************************************************************************************
_compute_domain
self._name
***************************************************************************************
browse
vals.get('task_id')
***************************************************************************************
browse
vals.get('project_id')
***************************************************************************************
browse
vals['employee_id']
***************************************************************************************
search
[('user_id', '=', result['user_id'])]
***************************************************************************************
browse
vals['task_id']
***************************************************************************************
browse
vals['project_id']
***************************************************************************************
read_group
[('project_id', 'in', self.ids)]['project_id', 'unit_amount', 'product_uom_id']['project_id', 'product_uom_id']
***************************************************************************************
_for_xml_id
'hr_timesheet.timesheet_action_all'
***************************************************************************************
browse
values.get('project_id')
***************************************************************************************
_apply_time_label
result['arch']
***************************************************************************************
browse
uom_ids
***************************************************************************************
create
results
***************************************************************************************
search
[('category_id', '=', wtime.id), ('uom_type', '=', 'reference')]
***************************************************************************************
search
[('category_id', '=', wtime.id)]
***************************************************************************************
search
[('category_id', '=', wtime.id), ('uom_type', '=', 'reference')]
***************************************************************************************
search
[('category_id', '=', wtime.id)]
***************************************************************************************
_apply_time_label
result['arch']
***************************************************************************************
create
{'name': 'Customer Task', 'email': 'customer@task.com', 'phone': '42'}
***************************************************************************************
create
{'name': 'Analytic Account for Test Customer', 'partner_id': self.partner.id, 'code': 'TEST'}
***************************************************************************************
create
{'name': 'Project X', 'allow_timesheets': True, 'partner_id': self.partner.id, 'analytic_account_id': self.analytic_account.id}
***************************************************************************************
create
{'name': 'Task One', 'priority': '0', 'kanban_state': 'normal', 'project_id': self.project_customer.id, 'partner_id': self.partner.id}
***************************************************************************************
create
{'name': 'Task Two', 'priority': '1', 'kanban_state': 'done', 'project_id': self.project_customer.id}
***************************************************************************************
create
{'name': 'User Employee', 'login': 'user_employee', 'email': 'useremployee@test.com', 'groups_id': [(6, 0, [self.ref('hr_timesheet.group_hr_timesheet_user')])]}
***************************************************************************************
create
{'name': 'User Employee 2', 'login': 'user_employee2', 'email': 'useremployee2@test.com', 'groups_id': [(6, 0, [self.ref('hr_timesheet.group_hr_timesheet_user')])]}
***************************************************************************************
create
{'name': 'User Officer', 'login': 'user_manager', 'email': 'usermanager@test.com', 'groups_id': [(6, 0, [self.ref('hr_timesheet.group_timesheet_manager')])]}
***************************************************************************************
create
{'name': 'User Empl Employee', 'user_id': self.user_employee.id}
***************************************************************************************
create
{'name': 'User Empl Employee 2', 'user_id': self.user_employee2.id}
***************************************************************************************
create
{'name': 'User Empl Officer', 'user_id': self.user_manager.id}
***************************************************************************************
create
{'name': 'Project without timesheet', 'allow_timesheets': False, 'partner_id': self.partner.id}
***************************************************************************************
create
{'name': 'Project with timesheet', 'allow_timesheets': True, 'partner_id': self.partner.id}
***************************************************************************************
create
{'name': 'Project without timesheet but with AA', 'allow_timesheets': True, 'partner_id': self.partner.id, 'analytic_account_id': tracked_project.analytic_account_id.id}
***************************************************************************************
create
{'name': 'task in tracked project', 'project_id': tracked_project.id}
***************************************************************************************
create
{'name': 'Project NUMBER DEUX', 'allow_timesheets': True}
***************************************************************************************
create
{'name': 'Customer Task 2', 'email': 'customer2@task.com', 'phone': '43'}
***************************************************************************************
create
{'project_id': self.project_customer.id, 'task_id': self.task1.id, 'name': 'my only timesheet', 'unit_amount': 4}
***************************************************************************************
create
values
***************************************************************************************
create
vals_list
***************************************************************************************
search
domain
***************************************************************************************
create
{'employee_id': self.employee_id.id, 'date_from': date_from, 'date_to': date_to}
***************************************************************************************
search
leave_domain
***************************************************************************************
search
[('date_stop', '<=', date_start), ('contract_id', '=', contract.id)]
***************************************************************************************
search
[('date_start', '>=', date_end), ('contract_id', '=', contract.id)]
***************************************************************************************
browse
vals.get('employee_id')
***************************************************************************************
create
{'contract_id': self.richard_emp.contract_ids[0].id, 'name': 'Work entry %s-%s' % (start, stop), 'date_start': start, 'date_stop': stop, 'employee_id': self.richard_emp.id, 'work_entry_type_id': work_entry_type.id}
***************************************************************************************
create
{'name': 'My Calendar'}
***************************************************************************************
create
{'date_start': self.start.date() - relativedelta(days=5), 'name': 'dodo', 'resource_calendar_id': self.resource_calendar_id.id, 'wage': 1000, 'employee_id': self.richard_emp.id, 'state': 'open', 'date_generated_from': self.end.date() + relativedelta(days=5)}
***************************************************************************************
search_count
[]
***************************************************************************************
search_count
[]
***************************************************************************************
search_count
[('employee_id', '=', self.richard_emp.id), ('date_start', '>=', self.start), ('date_stop', '<=', self.end)]
***************************************************************************************
create
{'name': '1', 'employee_id': self.richard_emp.id, 'contract_id': self.richard_emp.contract_id.id, 'date_start': start, 'date_stop': end, 'work_entry_type_id': self.work_entry_type.id}
***************************************************************************************
search
[('employee_id', '=', self.richard_emp.id)]
***************************************************************************************
create
{'name': '1', 'employee_id': self.richard_emp.id, 'work_entry_type_id': self.env.ref('hr_work_entry.work_entry_type_attendance').id, 'contract_id': self.richard_emp.contract_id.id, 'date_start': start, 'date_stop': end + relativedelta(hours=5)}
***************************************************************************************
create
{'name': '2', 'employee_id': self.richard_emp.id, 'work_entry_type_id': self.env.ref('hr_work_entry.work_entry_type_attendance').id, 'contract_id': self.richard_emp.contract_id.id, 'date_start': start + relativedelta(hours=3), 'date_stop': end}
***************************************************************************************
create
{'name': '1', 'employee_id': self.richard_emp.id, 'contract_id': self.richard_emp.contract_id.id, 'date_start': self.start, 'date_stop': self.end}
***************************************************************************************
search
[('employee_id', '=', self.employee_id.id), ('date_stop', '>=', date_from), ('date_start', '<=', date_to), ('state', '!=', 'validated')]
***************************************************************************************
_for_xml_id
'hr_work_entry.hr_work_entry_action'
***************************************************************************************
_lang_get
self.env.user.lang
***************************************************************************************
search
search_domain
***************************************************************************************
search
[('employee_id', 'in', self.mapped('employee_id.id')), ('date_from', '<=', max([end or date.max for end in self.mapped('date_end')])), ('date_to', '>=', min(self.mapped('date_start')))]
***************************************************************************************
create
work_entries_vals_list
***************************************************************************************
create
vals_list
***************************************************************************************
create
resource_leave_values
***************************************************************************************
read_group
[('date_start', '<', stop), ('date_stop', '>', start), ('employee_id', 'in', self.employee_id.ids)]['work_entry_ids:array_agg(id)', 'employee_id']['employee_id', 'date_start', 'date_stop']
***************************************************************************************
browse
employee_id
***************************************************************************************
browse
group.get('work_entry_ids')
***************************************************************************************
_from_intervals
outside_intervals
***************************************************************************************
flush
['date_from', 'date_to', 'state', 'employee_id']
***************************************************************************************
create
{'name': 'New calendar'}
***************************************************************************************
create
{'name': 'New calendar'}
***************************************************************************************
create
{'name': 'Other calendar'}
***************************************************************************************
search
[('leave_id', '=', leave.id)]
***************************************************************************************
search
[('employee_id', '=', self.richard_emp.id), ('date_start', '<=', end), ('date_stop', '>=', start)]
***************************************************************************************
search
[('employee_id', '=', self.richard_emp.id), ('date_start', '>=', start), ('date_stop', '<=', end)]
***************************************************************************************
search
[('leave_id', '=', leave.id)]
***************************************************************************************
create
{'name': 'Legal Leaves', 'time_type': 'leave', 'requires_allocation': 'no', 'work_entry_type_id': self.work_entry_type_leave.id}
***************************************************************************************
create
{'name': 'Doctor Appointment', 'employee_id': self.jules_emp.id, 'holiday_status_id': self.leave_type.id, 'date_from': start, 'date_to': end, 'number_of_days': work_days_data[self.jules_emp.id]['days']}
***************************************************************************************
create
{'date_start': datetime.strptime('2015-11-30', '%Y-%m-%d').date(), 'name': 'Contract for Richard', 'resource_calendar_id': self.calendar_40h.id, 'wage': 5000.0, 'employee_id': self.jules_emp.id, 'state': 'open', 'date_generated_from': datetime.strptime('2015-11-30', '%Y-%m-%d'), 'date_generated_to': datetime.strptime('2015-11-30', '%Y-%m-%d')}
***************************************************************************************
create
{'name': 'Legal Leaves', 'time_type': 'leave', 'requires_allocation': 'no', 'work_entry_type_id': self.work_entry_type_leave.id}
***************************************************************************************
create
{'name': 'Doctor Appointment', 'employee_id': self.jules_emp.id, 'holiday_status_id': self.leave_type.id, 'date_from': start, 'date_to': end, 'number_of_days': work_days_data[self.jules_emp.id]['days']}
***************************************************************************************
create
{'name': 'Zboub'}
***************************************************************************************
create
{'date_start': self.start.date() - relativedelta(days=5), 'name': 'dodo', 'resource_calendar_id': self.resource_calendar_id.id, 'wage': 1000, 'employee_id': self.richard_emp.id, 'state': 'open', 'date_generated_from': self.end.date() + relativedelta(days=5)}
***************************************************************************************
create
{'name': '1', 'employee_id': self.richard_emp.id, 'work_entry_type_id': self.work_entry_type_leave.id, 'contract_id': self.richard_emp.contract_id.id, 'date_start': self.start, 'date_stop': self.end}
***************************************************************************************
create
{'name': 'Doctor Appointment', 'employee_id': self.richard_emp.id, 'holiday_status_id': self.leave_type.id, 'date_from': self.start - relativedelta(days=1), 'date_to': self.start + relativedelta(days=1), 'number_of_days': 2}
***************************************************************************************
create
{'name': 'Doctor Appointment', 'employee_id': self.richard_emp.id, 'holiday_status_id': self.leave_type.id, 'date_from': start, 'date_to': start + relativedelta(days=1), 'number_of_days': 2}
***************************************************************************************
create
{'name': '1', 'employee_id': self.richard_emp.id, 'contract_id': self.richard_emp.contract_id.id, 'work_entry_type_id': self.work_entry_type.id, 'date_start': start, 'date_stop': end, 'leave_id': leave.id}
***************************************************************************************
create
{'name': '1leave', 'employee_id': self.richard_emp.id, 'holiday_status_id': self.leave_type.id, 'date_from': start, 'date_to': end, 'number_of_days': work_days_data[self.jules_emp.id]['days']}
***************************************************************************************
create
{'name': 'Another Company'}
***************************************************************************************
create
{'name': 'New Employee', 'company_id': company.id}
***************************************************************************************
create
{'name': 'Employee Contract', 'employee_id': employee.id, 'date_start': Date.from_string('2015-01-01'), 'state': 'open', 'company_id': self.env.ref('base.main_company').id, 'wage': 4000}
***************************************************************************************
create
{'name': 'Sick', 'request_unit': 'hour', 'leave_validation_type': 'both', 'requires_allocation': 'no', 'company_id': company.id}
***************************************************************************************
create
{'name': 'Sick 1 week during christmas snif', 'employee_id': employee.id, 'holiday_status_id': leave_type.id, 'date_from': Datetime.from_string('2019-12-23 06:00:00'), 'date_to': Datetime.from_string('2019-12-27 20:00:00'), 'number_of_days': 5}
***************************************************************************************
create
{'name': 'Classic User', 'login': 'Classic User', 'company_id': self.env.ref('base.main_company').id, 'company_ids': self.env.ref('base.main_company').ids, 'groups_id': [(6, 0, [self.env.ref('hr_contract.group_hr_contract_manager').id, self.env.ref('base.group_user').id])]}
***************************************************************************************
create
{'name': 'My employee'}
***************************************************************************************
create
{'name': 'Parental 0h', 'attendance_ids': False}
***************************************************************************************
create
{'date_start': self.start.date() - relativedelta(years=1), 'name': 'Contract - Parental 0h', 'resource_calendar_id': calendar.id, 'wage': 1000, 'employee_id': employee.id, 'state': 'open'}
***************************************************************************************
create
{'name': 'Sick', 'request_unit': 'hour', 'leave_validation_type': 'both', 'requires_allocation': 'no'}
***************************************************************************************
create
{'name': "Sick 1 that doesn't make sense, but it's the prod so YOLO", 'employee_id': employee.id, 'holiday_status_id': leave_type.id, 'request_date_from': date(2020, 9, 4), 'request_date_to': date(2020, 9, 4), 'number_of_days': 1}
***************************************************************************************
with_user
user
***************************************************************************************
get
'partner_autocomplete'
***************************************************************************************
get
'reveal'
***************************************************************************************
get
'random_service_name'
***************************************************************************************
search
[('livechat_operator_id', '=', self.env.user.partner_id.id)]
***************************************************************************************
search_count
[('channel_type', '=', 'livechat'), ('livechat_operator_id', '=', self.env.user.partner_id.id), ('create_date', '>=', start), ('create_date', '<', end)]
***************************************************************************************
read_group
[('livechat_channel_id', 'in', self._ids), ('has_message', '=', True)]['__count']['livechat_channel_id']
***************************************************************************************
_for_xml_id
'im_livechat.rating_rating_action_livechat'
***************************************************************************************
browse
user_id
***************************************************************************************
_sendone
self.uuid'im_livechat.history_command'{'id': self.id}
***************************************************************************************
_replace_local_links
mail_body
***************************************************************************************
browse
pid
***************************************************************************************
search
[('channel_type', '=', 'livechat'), ('channel_last_seen_partner_ids', 'in', self.env['mail.channel.partner'].sudo()._search([('partner_id', '=', self.id), ('is_pinned', '=', True)]))]
***************************************************************************************
search
[('partner_id', 'in', self.ids), ('livechat_username', '!=', False)]
***************************************************************************************
create
[{'name': 'Michel', 'login': 'michel'}, {'name': 'Paul', 'login': 'paul'}, {'name': 'Pierre', 'login': 'pierre'}, {'name': 'Jean', 'login': 'jean'}, {'name': 'Georges', 'login': 'georges'}]
***************************************************************************************
create
{'name': 'Rajesh', 'login': 'rajesh', 'country_id': self.ref('base.in')}
***************************************************************************************
create
{'name': 'The channel', 'user_ids': [(6, 0, self.operators.ids)]}
***************************************************************************************
create
{'name': 'Roger', 'login': 'roger', 'country_id': belgium.id}
***************************************************************************************
search
[('channel_id', '=', channel_info['id']), ('partner_id', 'in', self.operators.partner_id.ids)]
***************************************************************************************
browse
channel_info['id']
***************************************************************************************
browse
mail_channel['id']
***************************************************************************************
search
[('company_id', '=', company.id), ('code', '=', 'IFRS')]
***************************************************************************************
browse
[account_ref.get(id) for id in ifrs_account_ids]
***************************************************************************************
search
[('code', '=', 'AR')]
***************************************************************************************
browse
partner_id
***************************************************************************************
search
[('journal_id', 'in', journals.ids), ('posted_before', '=', True)]
***************************************************************************************
existing_accounting
self
***************************************************************************************
create
values
***************************************************************************************
browse
res['res_id']
***************************************************************************************
browse
res['res_id']
***************************************************************************************
search
[('company_id', '=', self.env.company.id), ('name', '=', name)]
***************************************************************************************
with_context
{'active_ids': [invoice.id], 'active_model': 'account.move'}
***************************************************************************************
with_context
{'active_ids': [invoice.id], 'active_model': 'account.move', 'default_copy_lines': True}
***************************************************************************************
_split_vat
company.vat
***************************************************************************************
simple_vat_check
vat_countryvat_number
***************************************************************************************
create
{'name': xml_name, 'raw': xml_content.encode(), 'mimetype': 'application/xml'}
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[('company_id', '=', self.company_id.id), ('sanitized_acc_number', 'like', self.account_number + '%'), ('partner_id', '=', self.partner_id.id)]
***************************************************************************************
create
{'company_id': self.company_id.id, 'acc_number': self.account_number + ' ' + self.partner_id.name, 'partner_id': self.partner_id.id}
***************************************************************************************
browse
res_ids
***************************************************************************************
browse
docids
***************************************************************************************
create
{'acc_number': '010391394', 'partner_id': self.partner_a.id}
***************************************************************************************
create
{'acc_number': 'ISR {} number', 'partner_id': self.env.company.partner_id.id, 'l10n_ch_isr_subscription_chf': '01-39139-1'}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'partner_bank_id': isr_bank_account.id, 'currency_id': self.env.ref('base.CHF').id, 'invoice_date': '2019-01-01', 'invoice_line_ids': [(0, 0, {'product_id': self.product_a.id})]}
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'partner_bank_id': isr_bank_account.id, 'currency_id': self.env.ref('base.EUR').id, 'invoice_date': '2019-01-01', 'invoice_line_ids': [(0, 0, {'product_id': self.product_a.id})]}
***************************************************************************************
create
{'acc_number': account_number, 'partner_id': self.partner_a.id}
***************************************************************************************
create
{'key': 'l10n_ch.print_qrcode', 'value': '1'}
***************************************************************************************
create
{'name': 'Partner', 'street': 'Route de Berne 41', 'street2': '', 'zip': '1000', 'city': 'Lausanne', 'country_id': self.env.ref('base.ch').id}
***************************************************************************************
create
{'name': 'Customizable Desk'}
***************************************************************************************
search
[('type', '=', 'sale')]
***************************************************************************************
search
[('user_type_id', '=', acc_type.id)]
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.customer.id, 'currency_id': self.env.ref(currency_to_use).id, 'date': time.strftime('%Y') + '-12-22', 'invoice_line_ids': [(0, 0, {'name': self.product.name, 'product_id': self.product.id, 'account_id': account.id, 'quantity': 1, 'price_unit': 42.0})]}
***************************************************************************************
create
{'acc_number': number, 'partner_id': self.env.user.company_id.partner_id.id}
***************************************************************************************
search
[('type', '=', 'purchase'), ('company_id', '=', self.env.company.id)]
***************************************************************************************
browse
values.get('country_id')
***************************************************************************************
browse
values.get('l10n_latam_identification_type_id')
***************************************************************************************
search_count
expression.OR(domains)
***************************************************************************************
search
[('internal_group', '=', 'income'), ('deprecated', '=', False), ('tax_ids', 'in', taxes.ids)]
***************************************************************************************
search
[('internal_group', '=', 'expense'), ('deprecated', '=', False), ('tax_ids', 'in', supplier_taxes.ids)]
***************************************************************************************
create
{'type': 'binary', 'name': 'jsondump.json', 'raw': json.dumps(info_list), 'mimetype': 'application/json', 'res_model': inv._name, 'res_id': inv.id}
***************************************************************************************
search
[('company_id', '=', company.id)]
***************************************************************************************
search
[('module', '=', 'l10n_eu_oss'), ('model', '=', 'account.tax.group')]
***************************************************************************************
search
[('type_tax_use', '=', 'sale'), ('amount_type', '=', 'percent'), ('company_id', '=', company.id), ('country_id', '=', company.account_fiscal_country_id.id), ('tax_group_id', 'not in', oss_tax_groups.mapped('res_id'))]
***************************************************************************************
search
[('company_id', '=', company.id), ('foreign_vat', '!=', False)]
***************************************************************************************
_search_new_account_code
selflen(sales_tax_accounts[0].code)sales_tax_accounts[0].code[:-2]
***************************************************************************************
create
{'name': '%s OSS' % sales_tax_accounts[0].name, 'code': new_code, 'user_type_id': sales_tax_accounts[0].user_type_id.id, 'company_id': self.id}
***************************************************************************************
create
{'name': 'oss_tax_account_company_%s' % self.id, 'module': 'l10n_eu_oss', 'model': 'account.account', 'res_id': oss_account.id, 'noupdate': True}
***************************************************************************************
search
[('country_id', '=', country.id), ('company_id', '=', company.id), ('auto_apply', '=', True), ('vat_required', '=', False), ('foreign_vat', '=', False)]
***************************************************************************************
with_company
self
***************************************************************************************
create
{'name': 'OSS B2C %s' % country.name, 'country_id': country.id, 'company_id': company.id, 'auto_apply': True}
***************************************************************************************
search
[('type_tax_use', '=', 'sale'), ('company_id', '=', self.id)]
***************************************************************************************
create
{'name': '%(rate)s%% %(country)s %(label)s' % {'rate': tax_amount, 'country': country.code, 'label': country.vat_label}, 'amount': tax_amount, 'invoice_repartition_line_ids': invoice_repartition_lines, 'refund_repartition_line_ids': refund_repartition_lines, 'type_tax_use': 'sale', 'description': '%s%%' % tax_amount, 'tax_group_id': self.env.ref('l10n_eu_oss.%s' % tax_group_fid).id, 'country_id': company.account_fiscal_country_id.id, 'sequence': 1000, 'company_id': company.id}
***************************************************************************************
create
{'name': tax_group_fid, 'module': 'l10n_eu_oss', 'model': 'account.tax.group', 'res_id': self.env['account.tax.group'].create({'name': 'OSS %s%%' % tax_amount}).id, 'noupdate': True}
***************************************************************************************
create
{'name': 'OSS %s%%' % tax_amount}
***************************************************************************************
create
vals
***************************************************************************************
search
[('user_type_id', '=', self.env.ref('account.data_unaffected_earnings').id)]
***************************************************************************************
browse
account_id
***************************************************************************************
search
domain
***************************************************************************************
search
[]
***************************************************************************************
search
[('state', 'in', ['paid', 'done', 'invoiced']), ('company_id', '=', self.id), ('l10n_fr_secure_sequence_number', '!=', 0)]
***************************************************************************************
browse
self.env.company.id
***************************************************************************************
create
{'datas': out, 'name': 'efaktur_%s.csv' % fields.Datetime.to_string(fields.Datetime.now()).replace(' ', '_'), 'type': 'binary'}
***************************************************************************************
push_number
move.company_id.idmove.l10n_id_tax_number[3:]
***************************************************************************************
pop_number
move.company_id.id
***************************************************************************************
search
[('company_id', '=', record.company_id.id)]
***************************************************************************************
search
[('l10n_in_tin', '=', self.vat[:2])]
***************************************************************************************
browse
values['tax_line_id']
***************************************************************************************
search
domain
***************************************************************************************
search
domain
***************************************************************************************
_xmlid_to_res_id
'l10n_it.tax_report_vat'
***************************************************************************************
browse
options['tax_unit']
***************************************************************************************
search
[('vat', 'ilike', elements[0].text)]
***************************************************************************************
search
[('l10n_it_codice_fiscale', 'ilike', elements[0].text)]
***************************************************************************************
search
['&', ('vat', 'ilike', elements[0].text), '|', ('company_id', '=', company.id), ('company_id', '=', False)]
***************************************************************************************
create
{'name': name_attachment, 'datas': attachment_64, 'type': 'binary'}
***************************************************************************************
search
['&', '|', ('email', '=', elements[0].text), ('l10n_it_pec_email', '=', elements[0].text), '|', ('company_id', '=', company.id), ('company_id', '=', False)]
***************************************************************************************
search
AND([OR(domains), OR([[('company_id', '=', company.id)], [('company_id', '=', False)]])])
***************************************************************************************
search
[('acc_number', '=', elements[0].text), ('partner_id.id', '=', invoice_form.partner_id.commercial_partner_id.id)]
***************************************************************************************
search
[('acc_number', '=', elements[0].text)]
***************************************************************************************
search
[('company_id', '=', invoice_form.company_id.id), ('amount_type', '=', 'percent'), ('type_tax_use', '=', 'purchase'), ('amount', '=', percentage), ('l10n_it_kind_exoneration', '=', l10n_it_kind_exoneration)]
***************************************************************************************
search
[('company_id', '=', invoice_form.company_id.id), ('amount_type', '=', 'percent'), ('type_tax_use', '=', 'purchase'), ('amount', '=', percentage)]
***************************************************************************************
search
[('barcode', '=', code.text)]
***************************************************************************************
search
[('name', '=', partner.id), ('product_code', '=', code.text)]
***************************************************************************************
search
[('default_code', '=', code.text)]
***************************************************************************************
_l10n_it_normalize_codice_fiscale
codice
***************************************************************************************
_l10n_it_edi_check_invoice_configuration
self
***************************************************************************************
_l10n_it_edi_generate_electronic_invoice_filename
self
***************************************************************************************
create
{'name': report_name, 'res_id': self.id, 'res_model': self._name, 'raw': data.encode(), 'description': description, 'type': 'binary'}
***************************************************************************************
create
{'subject': _('Sending file: %s') % self.l10n_it_einvoice_name, 'body': _('Sending file: %s to ES: %s') % (self.l10n_it_einvoice_name, self.env.company.l10n_it_address_recipient_fatturapa), 'author_id': self.env.user.partner_id.id, 'email_from': self.env.company.l10n_it_address_send_fatturapa, 'reply_to': self.env.company.l10n_it_address_send_fatturapa, 'mail_server_id': self.env.company.l10n_it_mail_pec_server_id.id, 'attachment_ids': [(6, 0, self.l10n_it_einvoice_id.ids)]}
***************************************************************************************
_format_error_message
_('Invalid configuration:')errors
***************************************************************************************
_message_parse_extract_payload
msg_txt
***************************************************************************************
search
[('name', '=', att_name), ('res_model', '=', 'account.move')]
***************************************************************************************
create
{'name': att_name, 'raw': att_content_data, 'res_model': 'account.move', 'type': 'binary'}
***************************************************************************************
search
[('l10n_it_mail_pec_server_id', '=', self.id)]
***************************************************************************************
search
conditions
***************************************************************************************
get_param
'l10n_it_edi.bypass_incoming_address_filter'False
***************************************************************************************
search
[('name', '=', att_name), ('res_model', '=', 'account.move')]
***************************************************************************************
get_param
'account_edi_proxy_client.demo'False
***************************************************************************************
get_param
'account_edi_proxy_client.edi_server_url'DEFAULT_SERVER_URL
***************************************************************************************
search
[('edi_format_id', '=', self.env.ref('l10n_it_edi.edi_fatturaPA').id)]
***************************************************************************************
get_param
'account_edi_proxy_client.demo'False
***************************************************************************************
get_param
'account_edi_proxy_client.edi_server_url'DEFAULT_SERVER_URL
***************************************************************************************
get_param
'account_edi_proxy_client.demo'False
***************************************************************************************
_l10n_it_normalize_codice_fiscale
company.l10n_it_codice_fiscale
***************************************************************************************
get_param
'account_edi_proxy_client.edi_server_url'DEFAULT_SERVER_URL
***************************************************************************************
create
{'name': filename, 'res_id': invoice.id, 'res_model': invoice._name, 'raw': xml.encode(), 'description': _('Italian invoice: %s', invoice.move_type), 'type': 'binary'}
***************************************************************************************
search
[('name', '=', fattura['filename']), ('res_model', '=', 'account.move')]
***************************************************************************************
create
{'name': fattura['filename'], 'raw': file, 'type': 'binary', 'res_model': 'account.move', 'res_id': invoice.id}
***************************************************************************************
_register_proxy_user
self.company_idfattura_paedi_identification
***************************************************************************************
browse
vals['company_id']
***************************************************************************************
browse
warehouse_id
***************************************************************************************
create
{'name': ir_seq_name, 'prefix': ir_seq_prefix, 'padding': 5, 'company_id': vals['company_id'], 'implementation': 'no_gap'}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'partner_invoice_id': self.partner_a.id, 'partner_shipping_id': self.partner_a.id, 'order_line': [(0, 0, {'name': p.name, 'product_id': p.id, 'product_uom_qty': 5, 'product_uom': p.uom_id.id, 'price_unit': p.list_price, 'tax_id': self.company_data['default_tax_sale']}) for p in (self.company_data['product_order_no'], self.company_data['product_service_delivery'], self.company_data['product_service_order'], self.company_data['product_delivery_no'])], 'pricelist_id': self.company_data['default_pricelist'].id, 'picking_policy': 'direct'}
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
search
[('is_vat', '=', True), ('country_id', '=', country_id)]
***************************************************************************************
search
[('country_id', '=', country.id), ('is_vat', '=', True)]
***************************************************************************************
search
rec._get_l10n_latam_documents_domain()
***************************************************************************************
browse
new_move_id
***************************************************************************************
_is_manual_document_number
move.journal_id
***************************************************************************************
search
[('model', '=', model), ('name', '=like', str(company_id) + '_%')]
***************************************************************************************
search
[('spoken_languages', '!=', False)]
***************************************************************************************
search
[('model', '=', 'account.chart.template'), ('res_id', '=', chart_template.id)]
***************************************************************************************
search
[('model', '=', model + '.template'), ('module', '=', module), ('name', 'in', list(expected_in_xml_id_names))]
***************************************************************************************
browse
in_xml_ids[name].res_id
***************************************************************************************
browse
xml_id.res_id
***************************************************************************************
search
[('chart_template_id', '=', coa.id)]
***************************************************************************************
mx_search_tags
code
***************************************************************************************
search
[('company_id', '=', company.id), ('type', '=', 'general'), ('code', '=', 'CBMX')]
***************************************************************************************
search
[('code', '=', '999999'), ('company_id', '=', self.env.company.id)]
***************************************************************************************
browse
vals['company_id']
***************************************************************************************
create
{'name': xml_name, 'raw': xml_content.encode(), 'res_model': 'account.move', 'res_id': invoice.id, 'mimetype': 'application/xml'}
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': xml_name, 'raw': xml_content.encode(), 'res_model': 'account.move', 'res_id': invoice.id, 'mimetype': 'application/xml'}
***************************************************************************************
search_count
[]
***************************************************************************************
search_count
[]
***************************************************************************************
search
[('company_id', '=', company.id), ('code', '=', 'IFRS')]
***************************************************************************************
search
[('company_id', '=', company.id), ('code', '=', 'ZAKAT')]
***************************************************************************************
browse
[account_ref.get(id) for id in ifrs_account_ids]
***************************************************************************************
browse
[account_ref.get(id) for id in zakat_account_ids]
***************************************************************************************
_get_random_code_strings
len(vals_list)
***************************************************************************************
_for_xml_id
'link_tracker.link_tracker_click_action_statistics'
***************************************************************************************
search
[('code', '=', code)]
***************************************************************************************
read_group
[('link_id', 'in', self.ids)]['link_id']['link_id']
***************************************************************************************
search
[('link_id', '=', tracker.id)]
***************************************************************************************
search
[('code', '=', route_values['country_code'])]
***************************************************************************************
search_or_create
create_vals
***************************************************************************************
search_or_create
create_vals
***************************************************************************************
read_group
[('campaign_id', 'in', self.ids)]['campaign_id']['campaign_id']
***************************************************************************************
search
[('url', '=', url)]
***************************************************************************************
create
[{'url': 'odoo.com', 'title': 'Odoo'}, {'url': 'example.com', 'title': 'Odoo'}, {'url': 'http://test.example.com', 'title': 'Odoo'}]
***************************************************************************************
create
{'url': 'https://odoo.com', 'title': 'Odoo'}
***************************************************************************************
search_or_create
{'url': 'https://odoo.com', 'title': 'Odoo'}
***************************************************************************************
search_or_create
{'url': 'https://odoo.be', 'title': 'Odoo'}
***************************************************************************************
search
[]
***************************************************************************************
create
{'url': 'https://odoo.com', 'title': 'Odoo'}
***************************************************************************************
create
{'url': '2nd url', 'title': 'Odoo', 'campaign_id': campaign_id.id}
***************************************************************************************
create
{'url': '2nd url', 'title': 'Odoo', 'campaign_id': campaign_id.id, 'medium_id': self.env['utm.medium'].search([], limit=1).id}
***************************************************************************************
set_param
'link_tracker.no_external_tracking''1'
***************************************************************************************
create
{'name': 'campaign'}
***************************************************************************************
create
{'name': 'source'}
***************************************************************************************
create
{'name': 'medium'}
***************************************************************************************
create
{'url': 'http://external.com/test?a=example.com', 'campaign_id': campaign.id, 'source_id': source.id, 'medium_id': medium.id, 'title': 'Title'}
***************************************************************************************
set_param
'link_tracker.no_external_tracking'False
***************************************************************************************
create
{'url': 'https://odoo.com', 'title': 'Odoo'}
***************************************************************************************
create
{'url': '2nd url', 'title': 'Odoo', 'campaign_id': campaign_id.id}
***************************************************************************************
search
[]
***************************************************************************************
_shorten_links
''.join(test_links){}
***************************************************************************************
search
tracker_to_find
***************************************************************************************
search
tracker_to_fail
***************************************************************************************
search
order_domain
***************************************************************************************
_get_id
self._name
***************************************************************************************
search_read
[('user_id', '=', user.id)]['amount']
***************************************************************************************
_for_xml_id
'lunch.lunch_order_action'
***************************************************************************************
get_wallet_balance
line.user_id
***************************************************************************************
search
[('user_id', '=', self.env.user.id), ('product_id', 'in', self.ids)]
***************************************************************************************
read_group
[('category_id', 'in', self.ids)]['category_id']['category_id']
***************************************************************************************
search
[('supplier_id', '=', self.id), ('state', '=', 'ordered'), ('date', '=', fields.Date.context_today(self.with_context(tz=self.tz)))]
***************************************************************************************
_get_id
self._name
***************************************************************************************
search
[('supplier_id', 'in', self.ids)]
***************************************************************************************
browse
category_ids
***************************************************************************************
browse
supplier_ids
***************************************************************************************
create
{'amount': 100}
***************************************************************************************
create
{'name': 'Farm 1'}
***************************************************************************************
create
{'name': 'Farm 2'}
***************************************************************************************
create
{'name': 'Pizza Inn'}
***************************************************************************************
create
{'partner_id': self.partner_pizza_inn.id, 'send_by': 'mail', 'automatic_email_time': 11, 'available_location_ids': [(6, 0, [self.location_office_1.id, self.location_office_2.id])]}
***************************************************************************************
create
{'name': 'Kothai'}
***************************************************************************************
create
{'partner_id': self.partner_kothai.id, 'send_by': 'mail', 'automatic_email_time': 10, 'tz': 'America/New_York'}
***************************************************************************************
create
{'name': 'Coin Gourmand'}
***************************************************************************************
create
{'partner_id': self.partner_coin_gourmand.id, 'send_by': 'phone', 'available_location_ids': [(6, 0, [self.location_office_1.id, self.location_office_2.id])]}
***************************************************************************************
create
{'name': 'Pizza'}
***************************************************************************************
create
{'name': 'Sandwich'}
***************************************************************************************
create
{'name': 'Pizza', 'category_id': self.category_pizza.id, 'price': 9, 'supplier_id': self.supplier_pizza_inn.id}
***************************************************************************************
create
{'name': 'Tuna Sandwich', 'category_id': self.category_sandwich.id, 'price': 3, 'supplier_id': self.supplier_coin_gourmand.id}
***************************************************************************************
create
{'name': 'Olives', 'price': 0.3, 'supplier_id': self.supplier_pizza_inn.id}
***************************************************************************************
create
{'amount': 100}
***************************************************************************************
create
{'name': 'New York UTC-5', 'mode': 'chat', 'notification_time': 10, 'notification_moment': 'am', 'tz': 'America/New_York', 'message': ''}
***************************************************************************************
create
{'name': 'Tokyo UTC+9', 'mode': 'chat', 'notification_time': 8, 'notification_moment': 'am', 'tz': 'Asia/Tokyo', 'message': ''}
***************************************************************************************
invalidate_cache
['available_today'][self.supplier_pizza_inn.id]
***************************************************************************************
create
{'product_id': self.product_pizza.id, 'date': self.monday_1pm.date(), 'supplier_id': self.supplier_pizza_inn.id}
***************************************************************************************
create
{'product_id': self.product_pizza.id, 'topping_ids_1': [(6, 0, [self.topping_olives.id])], 'date': self.monday_1pm.date(), 'supplier_id': self.supplier_pizza_inn.id}
***************************************************************************************
create
{'product_id': self.product_sandwich_tuna.id, 'date': self.monday_1pm.date(), 'supplier_id': self.supplier_coin_gourmand.id}
***************************************************************************************
create
{'product_id': self.product_pizza.id, 'quantity': 2, 'date': self.monday_1pm.date(), 'supplier_id': self.product_pizza.id}
***************************************************************************************
create
{'product_id': self.product_pizza.id, 'topping_ids_1': [(6, 0, [self.topping_olives.id])], 'date': self.monday_1pm.date(), 'supplier_id': self.product_pizza.id}
***************************************************************************************
create
{'product_id': self.product_sandwich_tuna.id, 'quantity': 2, 'date': self.monday_1pm.date(), 'supplier_id': self.supplier_coin_gourmand.id}
***************************************************************************************
browse
self._context.get('active_ids', self._context.get('active_id'))
***************************************************************************************
browse
self._context.get('active_ids', self._context.get('active_id'))
***************************************************************************************
browse
self.res_id
***************************************************************************************
_sendone
self.env['mail.channel'].browse(attachment.res_id)'ir.attachment/delete'{'id': attachment.id}
***************************************************************************************
browse
attachment.res_id
***************************************************************************************
_clean_and_check_unique
[vals.get('value')]
***************************************************************************************
_clean_and_check_unique
[vals.get('value')]
***************************************************************************************
_file_delete
fname
***************************************************************************************
search_read
[('res_model', '=', self._name), ('res_id', 'in', self.ids)]['id', 'res_id']
***************************************************************************************
create
next_activities_values
***************************************************************************************
read_group
activity_domain['res_id', 'activity_type_id', 'ids:array_agg(id)', 'date_deadline:min(date_deadline)']['res_id', 'activity_type_id']
***************************************************************************************
search
['|', ('res_model', '=', res_model), ('res_model', '=', False)]
***************************************************************************************
check_access_rights
doc_operation
***************************************************************************************
with_user
access_rights_uid or self._uid
***************************************************************************************
browse
activity.res_id
***************************************************************************************
browse
activity.res_id
***************************************************************************************
browse
activity_attachments[activity.id]
***************************************************************************************
search
domain
***************************************************************************************
search
[('id', 'in', res_ids)]
***************************************************************************************
_get
res['res_model']
***************************************************************************************
_sendone
activity.user_id.partner_id'mail.activity/updated'{'activity_created': True}
***************************************************************************************
_sendone
activity.user_id.partner_id'mail.activity/updated'{'activity_deleted': True}
***************************************************************************************
_get
activity.res_model
***************************************************************************************
browse
mail_template_ids
***************************************************************************************
browse
activity.res_id
***************************************************************************************
with_user
activity.user_id
***************************************************************************************
browse
activity.res_id
***************************************************************************************
browse
activity.res_id
***************************************************************************************
_sendone
activity.user_id.partner_id'mail.activity/updated'{'activity_created': True}
***************************************************************************************
_xmlid_to_res_id
'mail.mt_activities'
***************************************************************************************
_get
self.res_model
***************************************************************************************
browse
doc_ids
***************************************************************************************
browse
activity.res_id
***************************************************************************************
_sendone
partner'mail.activity/updated'{'activity_deleted': True}
***************************************************************************************
_notify_get_action_link
'view'
***************************************************************************************
_search
[('date_deadline', operator, operand), ('res_model', '=', self._name), ('user_id', '=', self.env.user.id)]
***************************************************************************************
flush
['res_model', 'res_id', 'user_id', 'date_deadline']
***************************************************************************************
search
domain
***************************************************************************************
search
[('res_model', '=', self._name)]
***************************************************************************************
search
[('res_model', '=', False)]
***************************************************************************************
_get
self._name
***************************************************************************************
create
create_vals
***************************************************************************************
browse
template_id
***************************************************************************************
browse
message_dict['author_id']
***************************************************************************************
_get
self._name
***************************************************************************************
browse
bl_entries.values()
***************************************************************************************
_sendone
partner'mail.channel/leave'channel_info
***************************************************************************************
_sendone
self'mail.channel/insert'{'id': self.id, 'memberCount': self.member_count, 'members': [('insert-and-unlink', {'id': partner.id})]}
***************************************************************************************
browse
partner_id
***************************************************************************************
search
channel_partner_domain
***************************************************************************************
_sendmany
invitation_notifications
***************************************************************************************
_sendone
self'mail.message/insert'{'id': message.id, 'body': message.body, 'attachments': [('insert-and-replace', message.attachment_ids._attachment_format(commands=True))]}
***************************************************************************************
_sendone
self'mail.message/insert'{'id': message.id, 'messageReactionGroups': [('insert' if len(reactions) > 0 else 'insert-and-unlink', {'messageId': message.id, 'content': content, 'count': len(reactions), 'guests': guests, 'partners': partners})]}
***************************************************************************************
_sendone
self'mail.message/insert'{'id': message.id, 'messageReactionGroups': [('insert' if len(reactions) > 0 else 'insert-and-unlink', {'messageId': message.id, 'content': content, 'count': len(reactions), 'guests': guests, 'partners': partners})]}
***************************************************************************************
_sendmany
notifications
***************************************************************************************
browse
partner_ids
***************************************************************************************
search
domain
***************************************************************************************
search
[('partner_id', '=', self.env.user.partner_id.id), ('channel_id', '=', self.id), ('is_pinned', '!=', pinned)]
***************************************************************************************
search
domain
***************************************************************************************
_sendone
target'mail.channel.partner/seen'data
***************************************************************************************
search
channel_partner_domain
***************************************************************************************
search
[('partner_id', '=', self.env.user.partner_id.id), ('channel_id', '=', self.id)]
***************************************************************************************
_sendone
channel_partner.partner_id'mail.channel/insert'{'id': self.id, 'custom_channel_name': name}
***************************************************************************************
_sendone
self'mail.channel/insert'{'id': self.id, 'name': name}
***************************************************************************************
_sendone
self'mail.channel/insert'{'id': self.id, 'description': description}
***************************************************************************************
_sendmany
notifications
***************************************************************************************
_sendone
self.env.user.partner_id'mail.channel/legacy_insert'channel_info
***************************************************************************************
_sendone
partner_to'mail.channel/transient_message'{'body': "<span class='o_mail_notification'>" + content + '</span>', 'model': self._name, 'res_id': self.id}
***************************************************************************************
create
new_members
***************************************************************************************
_sendmany
notifications
***************************************************************************************
search
[('id', 'in', partners.ids), ('channel_ids', 'in', channel.id)]
***************************************************************************************
search
[('id', 'in', guests.ids), ('channel_ids', 'in', channel.id)]
***************************************************************************************
_sendone
channel'mail.channel/insert'{'id': channel.id, 'guestMembers': [('insert', guest_members_data)], 'memberCount': channel.member_count, 'members': [('insert', members_data)]}
***************************************************************************************
_sendone
self'mail.channel/insert'channel_data
***************************************************************************************
_get
'mail.channel'
***************************************************************************************
browse
message_dict.get('author_id', False)
***************************************************************************************
_sendmany
notifications
***************************************************************************************
_sendone
self.env.user.partner_id'mail.channel/insert'{'id': session_state.channel_id.channel_info()[0]['id'], 'serverFoldState': state}
***************************************************************************************
_sendone
self.env.user.partner_id'mail.channel/unpin'{'id': self.id}
***************************************************************************************
_sendone
self.env.user.partner_id'mail.channel/legacy_insert'self.channel_info()[0]
***************************************************************************************
search
[('channel_id', '=', channel.id), ('partner_id', '=', self.env.user.partner_id.id)]
***************************************************************************************
_sendone
channel'mail.channel.partner/fetched'{'channel_id': channel.id, 'id': channel_partner.id, 'last_message_id': last_message_id, 'partner_id': self.env.user.partner_id.id}
***************************************************************************************
browse
partner_ids or []
***************************************************************************************
browse
guest_ids or []
***************************************************************************************
browse
channels_preview
***************************************************************************************
_sendone
channel_partner.partner_id'mail.channel/joined'{'channel': channel_partner.channel_id.with_user(user).with_context(allowed_company_ids=user.company_ids.ids).sudo().channel_info()[0], 'invited_by_user_id': self.env.user.id}
***************************************************************************************
search
[('partner_id', '=', self.env.user.partner_id.id), ('channel_id', '=', channel.id)]
***************************************************************************************
_get_guest_from_request
request
***************************************************************************************
create
{'channel_partner_id': self.id}
***************************************************************************************
browse
[int(check_rtc_session_id) for check_rtc_session_id in check_rtc_session_ids or []]
***************************************************************************************
search
channel_partner_domain
***************************************************************************************
_sendmany
invitation_notifications
***************************************************************************************
_sendone
self.channel_id'mail.channel/insert'channel_data
***************************************************************************************
browse
vals['channel_id']
***************************************************************************************
_sendmany
[(channel, 'mail.channel/rtc_sessions_update', {'id': channel.id, 'rtcSessions': [('insert', sessions_data)]}) for (channel, sessions_data) in rtc_sessions._mail_rtc_session_format_by_channel().items()]
***************************************************************************************
_sendmany
notifications
***************************************************************************************
_sendone
self.channel_id'mail.channel.rtc.session/insert'session_data
***************************************************************************************
_sendmany
[(target, 'mail.channel.rtc.session/peer_notification', payload) for (target, payload) in payload_by_target.items()]
***************************************************************************************
browse
target_session_ids
***************************************************************************************
flush
['partner_id', 'subtype_ids']
***************************************************************************************
flush
['internal']
***************************************************************************************
flush
['notification_type', 'active', 'partner_id', 'groups_id']
***************************************************************************************
flush
['active', 'partner_share']
***************************************************************************************
flush
['users']
***************************************************************************************
default_subtypes
res_model
***************************************************************************************
_sendmany
bus_notifs
***************************************************************************************
browse
int(guest_id)
***************************************************************************************
search
[('notification_type', '=', 'email'), ('mail_mail_id', 'in', notif_mails_ids), ('notification_status', 'not in', ('sent', 'canceled'))]
***************************************************************************************
_find_mail_server
email_frommail_servers
***************************************************************************************
search
[('notification_type', '=', 'email'), ('mail_mail_id', 'in', mail.ids), ('notification_status', 'not in', ('sent', 'canceled'))]
***************************************************************************************
browse
mail_msg_cascade_ids
***************************************************************************************
_search
[('res_partner_id', '=', self.env.user.partner_id.id), ('is_read', '=', is_read)]
***************************************************************************************
flush
['mail_message_id', 'res_partner_id']
***************************************************************************************
flush
['mail_message_id', 'res_partner_id']
***************************************************************************************
browse
self.res_id
***************************************************************************************
_sendone
self.env.user.partner_id'mail.message/mark_as_read'{'message_ids': [id[0] for id in ids], 'needaction_inbox_counter': self.env.user.partner_id._get_needaction_count()}
***************************************************************************************
_sendone
partner_id'mail.message/mark_as_read'{'message_ids': notifications.mail_message_id.ids, 'needaction_inbox_counter': self.env.user.partner_id._get_needaction_count()}
***************************************************************************************
_sendone
self.env.user.partner_id'mail.message/toggle_star'{'message_ids': ids, 'starred': False}
***************************************************************************************
_sendone
self.env.user.partner_id'mail.message/toggle_star'{'message_ids': [self.id], 'starred': starred}
***************************************************************************************
_xmlid_to_res_id
'mail.mt_comment'
***************************************************************************************
_xmlid_to_res_id
'mail.mt_note'
***************************************************************************************
_sendmany
updates
***************************************************************************************
_message_compute_author
res.get('author_id')res.get('email_from')
***************************************************************************************
has_group
'base.group_user'
***************************************************************************************
has_group
'base.group_user'
***************************************************************************************
browse
[res_id]
***************************************************************************************
_get_mail_message_access
doc_idsoperation
***************************************************************************************
_message_compute_author
values.get('author_id')
***************************************************************************************
with_context
clean_context(self._context)
***************************************************************************************
browse
self.res_id
***************************************************************************************
browse
self.res_id
***************************************************************************************
browse
message.res_id
***************************************************************************************
browse
check_attachment_access
***************************************************************************************
browse
message_sudo.res_id
***************************************************************************************
browse
(vals['mail_message_id'] for vals in vals_list)
***************************************************************************************
browse
res_ids
***************************************************************************************
browse
res_ids
***************************************************************************************
browse
res_ids
***************************************************************************************
_replace_local_links
html
***************************************************************************************
_get
self.model_object_field.relation
***************************************************************************************
_render
html.fragment_fromstring(template_src, create_parent='div')variables
***************************************************************************************
_get
context_record._name
***************************************************************************************
browse
res_ids
***************************************************************************************
_get
res.pop('model')
***************************************************************************************
browse
res_id
***************************************************************************************
_get
record._name
***************************************************************************************
_replace_local_links
body
***************************************************************************************
browse
res_ids
***************************************************************************************
browse
results.keys()
***************************************************************************************
_search
[('has_error', operator, operand), ('author_id', '=', self.env.user.partner_id.id)]
***************************************************************************************
read_group
[('res_id', 'in', self.ids), ('res_model', '=', self._name)]
***************************************************************************************
_xmlid_to_res_id
'mail.mt_comment'
***************************************************************************************
search
[('message_id', '=', msg_dict['message_id'])]
***************************************************************************************
search
[('id', 'in', partners.ids)]
***************************************************************************************
search
domain
***************************************************************************************
_xmlid_to_res_id
'mail.mt_note'
***************************************************************************************
create
create_values_list
***************************************************************************************
_get_recipient_data
selfmessage_typesubtype_idpids
***************************************************************************************
browse
self.env['ir.model.data']._xmlid_to_res_id(template)
***************************************************************************************
_get_auto_subscription_subtypes
self._name
***************************************************************************************
_insert_followers
self._nameself.idslist(new_partner_subtypes)
***************************************************************************************
_get
self._name
***************************************************************************************
browse
thread_id
***************************************************************************************
_get_id
reply_model
***************************************************************************************
search
['&', '&', ('alias_name', '!=', False), ('alias_name', 'in', email_to_localparts), ('alias_model_id', '!=', reply_model_id)]
***************************************************************************************
_get_id
reply_model
***************************************************************************************
search
[('alias_name', 'in', rcpt_tos_localparts), ('alias_model_id', '=', reply_model_id)]
***************************************************************************************
search
[('alias_name', 'in', rcpt_tos_valid_localparts)]
***************************************************************************************
browse
user_id
***************************************************************************************
search
[('message_id', '=', msg_dict['in_reply_to'])]
***************************************************************************************
search
[('message_id', 'in', [x.strip() for x in references_msg_id_list])]
***************************************************************************************
search
[('partner_id', 'in', followers.ids), ('email_normalized', '=', normalized_email)]
***************************************************************************************
create
attachement_values_list
***************************************************************************************
_xmlid_to_res_id
subtype_xmlid
***************************************************************************************
_xmlid_to_res_id
'mail.mt_note'
***************************************************************************************
browse
[attachment_tuple[1] for attachment_tuple in attachment_ids]
***************************************************************************************
_xmlid_to_res_id
'mail.mt_note'
***************************************************************************************
_xmlid_to_res_id
'mail.mt_note'
***************************************************************************************
_xmlid_to_res_id
'mail.mt_note'
***************************************************************************************
_replace_local_links
mail_body
***************************************************************************************
browse
self.env.context['default_template_id']
***************************************************************************************
_xmlid_to_res_id
'mail.mt_comment'
***************************************************************************************
_insert_followers
self._nameself.idspartner_ids
***************************************************************************************
_insert_followers
self._nameself.idspartner_ids
***************************************************************************************
_xmlid_to_res_id
template
***************************************************************************************
_replace_local_links
assignation_msg
***************************************************************************************
_get_subscription_data
doc_dataNone
***************************************************************************************
_insert_followers
thread._namethread.idsself.env.user.partner_id.ids
***************************************************************************************
browse
self.env['res.partner'].name_create(contact)[0]
***************************************************************************************
browse
values['author_id']
***************************************************************************************
browse
author_id
***************************************************************************************
_get
record._name
***************************************************************************************
browse
partner_id
***************************************************************************************
browse
alias.alias_parent_thread_id
***************************************************************************************
browse
alias.alias_parent_thread_id
***************************************************************************************
_xmlid_to_res_id
'mail.mt_note'
***************************************************************************************
_xmlid_to_res_id
'mail.mt_comment'
***************************************************************************************
search
[('res_model', '=', alias.alias_parent_model_id.sudo().model), ('res_id', '=', alias.alias_parent_thread_id)]
***************************************************************************************
search
[('model', '=', self._name), ('res_id', 'in', self.ids)]
***************************************************************************************
_xmlid_to_res_id
'base.partner_root'
***************************************************************************************
name_create
contact
***************************************************************************************
browse
partner_id
***************************************************************************************
flush
['email', 'active']
***************************************************************************************
check_access_rights
'write'
***************************************************************************************
_get
model_namecol_name
***************************************************************************************
browse
message_dict.get('author_id', False)
***************************************************************************************
search
['&', ('hidden', '=', False), '|', ('res_model', '=', self._name), ('res_model', '=', False)]
***************************************************************************************
create_tracking_values
initial_valuenew_valuecol_namecol_infotracking_sequenceself._name
***************************************************************************************
set_param
'mail.catchall.domain'self.alias_domain or ''
***************************************************************************************
search
[('group_ids', 'in', self._ids)]
***************************************************************************************
_xmlid_to_res_id
'base.partner_root'
***************************************************************************************
browse
odoobot_id
***************************************************************************************
flush
['is_read', 'res_partner_id']
***************************************************************************************
search
[('has_error', '=', True), ('author_id', '=', self.id), ('res_id', '!=', 0), ('model', '!=', False), ('message_type', '!=', 'user_notification')]
***************************************************************************************
search
[('channel_type', 'in', ('channel', 'group')), ('channel_partner_ids', 'in', [self.id])]
***************************************************************************************
search
[('channel_type', '=', 'chat'), ('channel_last_seen_partner_ids', 'in', self.env['mail.channel.partner'].sudo()._search([('partner_id', '=', self.id), ('is_pinned', '=', True)]))]
***************************************************************************************
_search
domain
***************************************************************************************
check_access_rights
'create'
***************************************************************************************
search
[('id', '=', int(channel_id))]
***************************************************************************************
search_count
domain
***************************************************************************************
browse
query
***************************************************************************************
_xmlid_to_res_id
'mail.menu_root_discuss'
***************************************************************************************
search
[('group_ids', 'in', users.groups_id.ids)]
***************************************************************************************
search
[('group_ids', 'in', user_group_ids)]
***************************************************************************************
_find_or_create_for_user
self
***************************************************************************************
search
[('group_ids', 'in', sel_groups)]
***************************************************************************************
_sendone
self.user_id.partner_id'res.users.settings/changed'changed_settings
***************************************************************************************
search
[('user_setting_id', '=', self.id), ('partner_id', '=', partner_id)]
***************************************************************************************
_sendone
self.user_id.partner_id'res.users.settings/volumes_update'{'volumeSettings': [('insert', {'id': volume_setting.id, 'partner': [('insert-and-replace', {'id': partner_id})], 'volume': volume_setting.volume})]}
***************************************************************************************
create
[{'user_setting_id': self.id, 'partner_id': partner_id, 'volume': volume}]
***************************************************************************************
message_process
modelmail
***************************************************************************************
search
[(target_field, '=', subject)]
***************************************************************************************
search
[(target_field, '=', subject)]
***************************************************************************************
browse
self.group_groups.id
***************************************************************************************
create
{'name': 'Test'}
***************************************************************************************
browse
self.group_private.id
***************************************************************************************
browse
self.group_public.id
***************************************************************************************
browse
self.group_private.id
***************************************************************************************
browse
self.test_channel.ids
***************************************************************************************
search
[('partner_id', '=', self.partner_employee.id), ('channel_id', '=', chat.id)]
***************************************************************************************
search
[('partner_id', '=', self.partner_admin.id), ('channel_id', '=', chat.id)]
***************************************************************************************
browse
self.test_channel.ids
***************************************************************************************
browse
self.test_channel.id
***************************************************************************************
create
{'login': 'adam', 'name': 'Jonas'}
***************************************************************************************
browse
self.test_channel.id
***************************************************************************************
search
[('model', '=', 'mail.channel'), ('res_id', '=', channel.id), ('author_id', '=', self.test_partner.id)]
***************************************************************************************
search
[('model', '=', 'mail.channel'), ('res_id', '=', channel.id), ('author_id', '=', self.test_partner.id)]
***************************************************************************************
search
[('model', '=', 'mail.channel'), ('res_id', '=', channel.id), ('author_id', '=', self.test_partner.id)]
***************************************************************************************
create
{'name': '', 'uuid': 'test-uuid'}
***************************************************************************************
create
{'name': '', 'uuid': 'test-uuid'}
***************************************************************************************
create
{'name': 'Test'}
***************************************************************************************
create
{'partner_id': self.env.user.partner_id.id, 'channel_id': group_private.id}
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
browse
self.group_public.id
***************************************************************************************
browse
self.group_private.id
***************************************************************************************
browse
self.group_private.id
***************************************************************************************
with_user
self.user_admin
***************************************************************************************
with_user
self.user_admin
***************************************************************************************
browse
self.test_channel.ids
***************************************************************************************
with_context
self._test_context
***************************************************************************************
with_context
self._test_context
***************************************************************************************
with_context
self._test_context
***************************************************************************************
with_context
self._test_context
***************************************************************************************
with_context
self._test_context
***************************************************************************************
search
[]
***************************************************************************************
browse
self.group_groups.id
***************************************************************************************
browse
self.group_private.id
***************************************************************************************
browse
self.group_public.id
***************************************************************************************
browse
self.group_public.id
***************************************************************************************
browse
self.group_private.id
***************************************************************************************
browse
self.group_private.id
***************************************************************************************
browse
self.group_private.id
***************************************************************************************
create
{'name': 'Test channel'}
***************************************************************************************
search
[('channel_id', '=', self.private_channel.id)]
***************************************************************************************
search
[('channel_id', '=', self.private_channel.id)]
***************************************************************************************
search
[('channel_id', '=', self.private_channel.id), ('partner_id', '=', self.user_1.partner_id.id)]
***************************************************************************************
search
[('channel_id', '=', self.private_channel.id)]
***************************************************************************************
search
[('channel_id', '=', self.private_channel.id)]
***************************************************************************************
search
[('channel_id', '=', self.private_channel.id), ('partner_id', '=', self.user_1.partner_id.id)]
***************************************************************************************
search
[('channel_id', '=', self.private_channel.id), ('partner_id', '=', self.user_portal.partner_id.id)]
***************************************************************************************
search
[('channel_id', '=', self.private_channel.id)]
***************************************************************************************
search
[('channel_id', '=', self.private_channel.id)]
***************************************************************************************
search
[('channel_id', '=', self.private_channel.id)]
***************************************************************************************
search
[('channel_id', '=', self.private_channel.id)]
***************************************************************************************
search
[('channel_id', '=', self.group_channel.id)]
***************************************************************************************
search
[('channel_id', '=', self.group_channel.id)]
***************************************************************************************
search
[('channel_id', '=', self.group_channel.id)]
***************************************************************************************
search
[('channel_id', '=', self.group_channel.id)]
***************************************************************************************
search
[('channel_id', '=', self.group_channel.id)]
***************************************************************************************
search
[('channel_id', '=', self.group_channel.id)]
***************************************************************************************
search
[('channel_id', '=', self.public_channel.id)]
***************************************************************************************
search
[('channel_id', '=', self.public_channel.id)]
***************************************************************************************
search
[('channel_id', '=', self.public_channel.id)]
***************************************************************************************
with_user
self.user_1
***************************************************************************************
with_user
self.user_2
***************************************************************************************
with_user
self.user_2
***************************************************************************************
with_user
self.user_2
***************************************************************************************
create
{'name': 'Test template', 'partner_to': '{{ object.id }}', 'lang': '{{ object.lang }}', 'auto_delete': True, 'model_id': self.ref('base.model_res_partner')}
***************************************************************************************
create
{'email': 'testuser@testuser.com', 'groups_id': [Command.set([self.ref('base.group_user'), self.ref('base.group_partner_manager')])], 'name': 'Test User', 'login': 'testuser', 'password': 'testuser'}
***************************************************************************************
browse
self.render_object.ids
***************************************************************************************
browse
self.test_template.ids
***************************************************************************************
browse
self.render_object.ids
***************************************************************************************
browse
self.render_object_fr.ids
***************************************************************************************
browse
self.render_object.ids
***************************************************************************************
browse
self.render_object.ids
***************************************************************************************
browse
self.render_object.ids
***************************************************************************************
browse
self.render_object.ids
***************************************************************************************
browse
res_ids
***************************************************************************************
browse
self.render_object.ids
***************************************************************************************
browse
res_ids
***************************************************************************************
browse
res_ids
***************************************************************************************
_prepend_preview
Markup(body)preview
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
_render_template_inline_template
self.base_inline_template_bits[3]'res.partner'res_ids
***************************************************************************************
search
[]
***************************************************************************************
_render_template_inline_template
self.base_inline_template_bits[3]'res.partner'res_ids
***************************************************************************************
search
[]
***************************************************************************************
_render_template_inline_template
self.base_inline_template_bits[4]'res.partner'res_ids
***************************************************************************************
search
[]
***************************************************************************************
_render_template_inline_template
self.base_inline_template_bits[4]'res.partner'res_ids
***************************************************************************************
search
[]
***************************************************************************************
_render_template_qweb
self.base_qweb_bits[1]'res.partner'res_ids
***************************************************************************************
search
[]
***************************************************************************************
_render_template_qweb
self.base_qweb_bits[1]'res.partner'res_ids
***************************************************************************************
search
[]
***************************************************************************************
_render_template_qweb
self.base_qweb_bits[1]'res.partner'res_ids
***************************************************************************************
search
[]
***************************************************************************************
_render_template_inline_template
srcmodelres_ids
***************************************************************************************
search
[]
***************************************************************************************
_render_template_qweb
srcmodelres_ids
***************************************************************************************
_render_template
sourcepartner._namepartner.ids
***************************************************************************************
_render_template
sourcepartner._namepartner.ids
***************************************************************************************
_render_template
sourcepartner._namepartner.ids
***************************************************************************************
with_user
self.user_admin
***************************************************************************************
with_user
self.user_admin
***************************************************************************************
create
{'composition_mode': 'mass_mail', 'model': 'res.partner', 'template_id': self.mail_template.id, 'subject': '{{ 1 + 5 }}'}
***************************************************************************************
with_user
self.user_admin
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
find_or_create
test_string
***************************************************************************************
_find_or_create_for_user
self.user_employee
***************************************************************************************
create
{'user_id': self.user_employee.id}
***************************************************************************************
_find_or_create_for_user
self.user_employee
***************************************************************************************
create
{'is_discuss_sidebar_category_channel_open': False, 'is_discuss_sidebar_category_chat_open': False, 'user_id': self.user_employee.id}
***************************************************************************************
create
{'is_discuss_sidebar_category_channel_open': False, 'is_discuss_sidebar_category_chat_open': False, 'user_id': self.user_employee.id}
***************************************************************************************
browse
self.env['mail.channel'].channel_create(name='Test Channel')['id']
***************************************************************************************
browse
self.env['mail.channel'].channel_get(partners_to=(self.user_employee.partner_id + test_user.partner_id).ids)['id']
***************************************************************************************
browse
self.env['mail.channel'].create_group(partners_to=(self.user_employee.partner_id + test_user.partner_id).ids)['id']
***************************************************************************************
browse
self.env['mail.channel'].create_group(partners_to=(self.user_employee.partner_id + test_user.partner_id).ids)['id']
***************************************************************************************
browse
self.env['mail.channel'].create_group(partners_to=(self.user_employee.partner_id + test_user.partner_id).ids)['id']
***************************************************************************************
browse
self.env['mail.channel'].create_group(partners_to=(self.user_employee.partner_id + test_user.partner_id).ids)['id']
***************************************************************************************
browse
self.env['mail.channel'].create_group(partners_to=self.user_employee.partner_id.ids)['id']
***************************************************************************************
browse
self.env['mail.channel'].create_group(partners_to=self.user_employee.partner_id.ids)['id']
***************************************************************************************
browse
self.env['mail.channel'].create_group(partners_to=self.user_employee.partner_id.ids)['id']
***************************************************************************************
browse
self.env['mail.channel'].create_group(partners_to=self.user_employee.partner_id.ids)['id']
***************************************************************************************
browse
self.env['mail.channel'].create_group(partners_to=self.user_employee.partner_id.ids)['id']
***************************************************************************************
create
{'guest_id': test_guest.id, 'channel_id': channel.id}
***************************************************************************************
search_count
[('active', '=', True)]
***************************************************************************************
search_count
[('active', '=', True), ('share', '=', True)]
***************************************************************************************
action_remove_with_reason
self.emailself.reason
***************************************************************************************
_message_compute_author
result.get('author_id')result.get('email_from')
***************************************************************************************
browse
values.get('parent_id')
***************************************************************************************
_get
record.model or 'mail.message'
***************************************************************************************
create
values
***************************************************************************************
browse
res_ids
***************************************************************************************
flush
['email']
***************************************************************************************
browse
template_id
***************************************************************************************
_xmlid_to_res_id
'mail.mt_comment'
***************************************************************************************
search
[('res_model', '=', self._name), ('res_id', '=', 0), ('create_date', '<', limit_date), ('write_date', '<', limit_date)]
***************************************************************************************
browse
res_id
***************************************************************************************
search
ast.literal_eval(wizard.active_domain)
***************************************************************************************
_xmlid_to_res_id
'mail.mt_comment'
***************************************************************************************
browse
set(recipient_pids)
***************************************************************************************
browse
res_ids
***************************************************************************************
browse
values.get('res_id')
***************************************************************************************
browse
mail_values_dict.keys()
***************************************************************************************
browse
attach_id
***************************************************************************************
browse
messages_ids
***************************************************************************************
browse
notif_ids
***************************************************************************************
check_access_rights
'write'
***************************************************************************************
browse
message_id
***************************************************************************************
_get_recipient_data
None'comment'False
***************************************************************************************
check_access_rights
'write'
***************************************************************************************
check_access_rights
'write'
***************************************************************************************
browse
message.res_id
***************************************************************************************
browse
result['mail_template_id']
***************************************************************************************
search
[]
***************************************************************************************
search_count
[]
***************************************************************************************
_get
model
***************************************************************************************
browse
res_id
***************************************************************************************
_get
wizard.res_model
***************************************************************************************
create
{'subject': _('Invitation to follow %(document_model)s: %(document_name)s', document_model=model_name, document_name=document.display_name), 'body': wizard.message, 'record_name': document.display_name, 'email_from': email_from, 'reply_to': email_from, 'model': wizard.res_model, 'res_id': wizard.res_id, 'reply_to_force_new': True, 'add_sign': True}
***************************************************************************************
_get_recipient_data
document'comment'False
***************************************************************************************
_sendone
self.env.user.partner_id'mail.message/delete'{'message_ids': message.ids}
***************************************************************************************
_xmlid_to_res_id
'base.partner_root'
***************************************************************************************
_xmlid_to_res_id
'base.partner_root'
***************************************************************************************
_xmlid_to_res_id
'base.partner_root'
***************************************************************************************
_xmlid_to_res_id
'mail.mt_comment'
***************************************************************************************
_apply_logic
selfkwargs
***************************************************************************************
_xmlid_to_res_id
'base.partner_root'
***************************************************************************************
_apply_logic
selfmsg_vals
***************************************************************************************
read_group
[('mail_group_id', 'in', self.ids), ('create_date', '>=', fields.Datetime.to_string(month_date)), ('moderation_status', '=', 'accepted')]['mail_group_id']['mail_group_id']
***************************************************************************************
read_group
[('mail_group_id', 'in', self.ids)]['mail_group_id']['mail_group_id']
***************************************************************************************
read_group
[('mail_group_id', 'in', self.ids), ('moderation_status', '=', 'pending_moderation')]['mail_group_id']['mail_group_id']
***************************************************************************************
_get_reply_to
values
***************************************************************************************
create
{'mail_group_id': self.id, 'mail_message_id': mail_message.id, 'moderation_status': moderation_status, 'group_message_parent_id': group_message_parent_id}
***************************************************************************************
search
[('mail_group_id', '=', self.id), ('email', '=', email_normalized)]
***************************************************************************************
_replace_local_links
message.body
***************************************************************************************
search
[('moderation', '=', True)]
***************************************************************************************
read_group
[('mail_group_id', 'in', self.ids), ('moderation_status', '=', 'pending_moderation')]['mail_group_id']['mail_group_id']
***************************************************************************************
create
{'partner_id': partner_id, 'email': email, 'mail_group_id': self.id}
***************************************************************************************
_get
'mail.group'
***************************************************************************************
search
[('mail_message_id', '=', mail_message.parent_id.id)]
***************************************************************************************
browse
partner_id
***************************************************************************************
search
[('mail_group_id', '=', self.id), ('email_normalized', '=', email_normalize(email))]
***************************************************************************************
search
[('mail_group_id', 'in', self.mail_group_id.ids)]
***************************************************************************************
search
expression.OR([[('email', '=', email_normalize(message.email_from)), ('mail_group_id', '=', message.mail_group_id.id)] for message in self])
***************************************************************************************
create
[{'email': email, 'mail_group_id': mail_group_id, 'status': status} for (email, mail_group_id) in moderation_to_create]
***************************************************************************************
_replace_local_links
body_html
***************************************************************************************
_clean_email_body
body
***************************************************************************************
create
{'partner_id': partner_2.id, 'mail_group_id': self.test_group.id}
***************************************************************************************
create
{'partner_id': partner_3.id, 'mail_group_id': self.test_group.id}
***************************************************************************************
browse
self.test_group.ids
***************************************************************************************
browse
self.test_group.ids
***************************************************************************************
browse
self.test_group.ids
***************************************************************************************
browse
self.test_group.ids
***************************************************************************************
browse
self.test_group_member_1.ids
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
search
[('mail_message_id.message_id', '=', '<test.message.id@localhost>')]
***************************************************************************************
search
[('mail_message_id.message_id', '=', '<test.message.id@localhost>')]
***************************************************************************************
search
[('subject', '=', 'Test subject')]
***************************************************************************************
browse
self.test_group.ids
***************************************************************************************
browse
self.test_group.ids
***************************************************************************************
browse
self.test_group_2.ids
***************************************************************************************
create
[{'email': 'std@test.com', 'status': 'allow', 'mail_group_id': mail_group.id}, {'email': 'xss@test.com', 'status': 'ban', 'mail_group_id': mail_group.id}, {'email': 'xss@test.com', 'status': 'ban', 'mail_group_id': mail_group_2.id}]
***************************************************************************************
create
[{'email_from': '"Boum" <sTd@teST.com>', 'mail_group_id': mail_group.id}, {'email_from': '"xSs" <xss@teST.com>', 'mail_group_id': mail_group.id}, {'email_from': '"Bob" <bob@teST.com>', 'mail_group_id': mail_group.id}]
***************************************************************************************
create
{'mail_group_id': self.test_group.id, 'email': '"Bob" <bob@test.com>', 'status': 'ban'}
***************************************************************************************
browse
self.test_group.ids
***************************************************************************************
search
[('status', '=', 'allow'), ('email', '=', tools.email_normalize(self.email_from_unknown))]
***************************************************************************************
browse
self.test_group.ids
***************************************************************************************
search
[('status', '=', 'ban'), ('email', '=', tools.email_normalize(self.email_from_unknown))]
***************************************************************************************
browse
self.test_group.ids
***************************************************************************************
browse
self.test_group.ids
***************************************************************************************
browse
self.test_group.ids
***************************************************************************************
create
{'mail_group_id': mail_group.id, 'email': 'banned_member@test.com', 'status': 'ban'}
***************************************************************************************
with_user
self.user_employee_2
***************************************************************************************
with_user
self.user_portal
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_admin
***************************************************************************************
create
{'name': 'Test partner', 'email': 'test@test_domain.xyz', 'is_company': False}
***************************************************************************************
browse
company_id
***************************************************************************************
browse
first_company_id
***************************************************************************************
create
{'name': 'Test partner', 'email': 'test@test_domain.xyz', 'is_company': True}
***************************************************************************************
create
{'name': 'Test partner', 'email': 'test@test_domain.xyz', 'is_company': False}
***************************************************************************************
browse
first_company_id
***************************************************************************************
browse
first_company_id
***************************************************************************************
create
{'partner_id': partner.id, 'iap_enrich_info': 'test info'}
***************************************************************************************
create
{'partner_id': partner.id, 'iap_enrich_info': 'test info'}
***************************************************************************************
search
[('partner_id', '=', partner.id)]
***************************************************************************************
search
[('partner_id', '=', partner.id)]
***************************************************************************************
create
{'name': 'Test partner', 'iap_enrich_info': 'enrichment information', 'iap_search_domain': 'qsd@example.com'}
***************************************************************************************
search
[('partner_id', '=', partner.id)]
***************************************************************************************
create
{'name': 'Test partner 2'}
***************************************************************************************
search
[('partner_id', '=', partner.id)]
***************************************************************************************
create
{'partner_id': partner.id, 'iap_enrich_info': 'test info'}
***************************************************************************************
search
[('partner_id', '=', partner.id)]
***************************************************************************************
read_group
[('category_id', 'in', self.ids)]['category_id']['category_id']
***************************************************************************************
read_group
[('category_id', 'in', self.ids)]['category_id']['category_id']
***************************************************************************************
create
{'name': _('Preventive Maintenance - %s', self.name), 'request_date': date, 'schedule_date': date, 'category_id': self.category_id.id, 'equipment_id': self.id, 'maintenance_type': 'preventive', 'owner_user_id': self.owner_user_id.id, 'user_id': self.technician_user_id.id, 'maintenance_team_id': self.maintenance_team_id.id, 'duration': self.maintenance_duration, 'company_id': self.company_id.id or self.env.company.id}
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
_get
'maintenance.request'
***************************************************************************************
search
[('equipment_id', '=', equipment.id), ('maintenance_type', '=', 'preventive'), ('stage_id.done', '!=', True), ('close_date', '=', False)]
***************************************************************************************
search
[('equipment_id', '=', equipment.id), ('maintenance_type', '=', 'preventive'), ('stage_id.done', '=', True), ('close_date', '!=', False)]
***************************************************************************************
search
[('stage_id.done', '=', False), ('equipment_id', '=', equipment.id), ('maintenance_type', '=', 'preventive'), ('request_date', '=', equipment.next_action_date)]
***************************************************************************************
browse
vals['owner_user_id']
***************************************************************************************
create
{'name': 'Monitors - Test'}
***************************************************************************************
with_user
user
***************************************************************************************
_replace_local_links
body
***************************************************************************************
search
[('message_id', 'in', msg_references)]
***************************************************************************************
search
['&', '&', ('trace_status', '=', 'bounce'), ('write_date', '>', three_months_ago), ('email', '=ilike', bounced_email)]
***************************************************************************************
create
campaign_vals
***************************************************************************************
_for_xml_id
'mass_mailing.mailing_trace_action'
***************************************************************************************
_for_xml_id
'mass_mailing.action_ab_testing_open_winner_mailing'
***************************************************************************************
search_read
trace_domain['res_id']
***************************************************************************************
search
[('kpi_mail_required', '=', True), ('state', '=', 'done'), ('sent_date', '<=', fields.Datetime.now() - relativedelta(days=1)), ('sent_date', '>=', fields.Datetime.now() - relativedelta(days=5))]
***************************************************************************************
search
[('group_id.category_id', '=', self.env.ref('base.module_category_marketing_email_marketing').id)]
***************************************************************************************
search_count
mass_mailing._parse_mailing_domain()
***************************************************************************************
_render
'mass_mailing.ab_testing_description'mailing._get_ab_testing_description_values()
***************************************************************************************
_for_xml_id
'mass_mailing.mailing_mailing_schedule_date_action'
***************************************************************************************
_get
'link.tracker'
***************************************************************************************
_get
self.mailing_model_real
***************************************************************************************
search
[('contact_id', 'in', records.ids), ('list_id', 'in', list_ids), ('opt_out', '!=', value)]
***************************************************************************************
_mailing_get_opt_out_list
self
***************************************************************************************
search
mailing_domain
***************************************************************************************
search_count
mailing_domain
***************************************************************************************
_render
'mass_mailing.mass_mailing_kpi_link_trackers'{'object': mailing, 'link_trackers': link_trackers, 'mailing_type': mailing_type}
***************************************************************************************
_render
'digest.digest_mail_main'{'body': tools.html_sanitize(link_trackers_body), 'company': user.company_id, 'user': user, 'display_mobile_banner': True, **mailing._prepare_statistics_email_values()}
***************************************************************************************
_render_encapsulate
'digest.digest_mail_layout'rendered_body
***************************************************************************************
_mailing_get_default_domain
self
***************************************************************************************
create
{'datas': b64image, 'name': 'cropped_image_mailing_{}'.format(self.id), 'type': 'binary'}
***************************************************************************************
search
[]
***************************************************************************************
search
[('id', '=', server_id)]
***************************************************************************************
create
self[0]._get_default_ab_testing_campaign_values(values)
***************************************************************************************
_get
'mailing.list'
***************************************************************************************
search
[('mass_mailing_id', '=', mailing.id)]
***************************************************************************************
_parse_partner_name
name
***************************************************************************************
_for_xml_id
'mass_mailing.mailing_contact_to_list_action'
***************************************************************************************
search
[('list_id', '=', active_list_id)]
***************************************************************************************
_for_xml_id
'mass_mailing.action_view_mass_mailing_contacts'
***************************************************************************************
_for_xml_id
'mass_mailing.mailing_mailing_action_mail'
***************************************************************************************
_for_xml_id
'mass_mailing.action_view_mass_mailing_contacts'
***************************************************************************************
_for_xml_id
'mass_mailing.action_view_mass_mailing_contacts'
***************************************************************************************
_for_xml_id
'mass_mailing.action_view_mass_mailing_contacts'
***************************************************************************************
flush
['email', 'email_normalized']
***************************************************************************************
flush
['contact_id', 'opt_out', 'list_id']
***************************************************************************************
search_count
[('state', '!=', 'done'), ('contact_list_ids', 'in', self.ids)]
***************************************************************************************
read_group
[('campaign_id', 'in', self.ids), ('mailing_type', '=', 'mail')]['campaign_id', 'ab_testing_enabled']['campaign_id', 'ab_testing_enabled']
***************************************************************************************
search
domain
***************************************************************************************
search
[('mass_mailing_id', 'in', mailing.ids), ('res_id', 'in', records.ids)]
***************************************************************************************
_routing_handle_bounce
Falseparsed_bounce_values
***************************************************************************************
create
{'subject': 'A/B Testing V1', 'contact_list_ids': self.mailing_list.ids, 'ab_testing_enabled': True, 'ab_testing_pc': 10, 'ab_testing_schedule_datetime': datetime.now()}
***************************************************************************************
create
{'subject': 'A/B Testing V1', 'contact_list_ids': self.mailing_list.ids, 'ab_testing_enabled': True, 'ab_testing_winner_selection': 'manual', 'ab_testing_schedule_datetime': schedule_datetime}
***************************************************************************************
create
{}
***************************************************************************************
create
{'name': 'Mass Mail Partner', 'email': 'Customer <test.customer@example.com>'}
***************************************************************************************
create
{'name': 'Test', 'subject': 'Test', 'state': 'draft', 'mailing_model_id': self.env['ir.model']._get('res.partner').id}
***************************************************************************************
create
{'name': 'TestMailing', 'subject': 'Test', 'mailing_type': 'mail', 'body_html': '<p>Hello <t t-out="object.name"/></p>', 'mailing_model_id': self.env['ir.model']._get('res.partner').id}
***************************************************************************************
create
{'name': 'Jean-Alphonce', 'email': 'jeanalph@example.com'}
***************************************************************************************
create
{'name': 'TestSource', 'subject': 'TestDeletion', 'body_html': '<div>Hello {object.name}</div>', 'mailing_model_id': self.env['ir.model']._get('mailing.list').id, 'contact_list_ids': [(6, 0, self.mailing_list_1.ids)], 'keep_archives': True, 'reply_to_mode': 'new', 'reply_to': self.email_reply_to}
***************************************************************************************
create
{'name': 'test email 1', 'email': 'test1@example.com'}
***************************************************************************************
create
{'name': 'test email 2', 'email': 'test2@example.com'}
***************************************************************************************
create
{'email': 'Test2@example.com'}
***************************************************************************************
create
{'name': 'One', 'subject': 'One', 'mailing_model_id': self.env['ir.model']._get('res.partner').id, 'mailing_domain': [('id', 'in', (partner_a | partner_b).ids)], 'body_html': 'This is mass mail marketing demo'}
***************************************************************************************
create
{'name': 'TestSource', 'subject': 'TestShortener', 'body_html': '<div>\nHi,\n<t t-set="url" t-value="\'www.odoo.com\'"/>\n<t t-set="httpurl" t-value="\'https://www.odoo.eu\'"/>\nWebsite0: <a id="url0" t-attf-href="https://www.odoo.tz/my/{{object.name}}">https://www.odoo.tz/my/<t t-esc="object.name"/></a>\nWebsite1: <a id="url1" href="https://www.odoo.be">https://www.odoo.be</a>\nWebsite2: <a id="url2" t-attf-href="https://{{url}}">https://<t t-esc="url"/></a>\nWebsite3: <a id="url3" t-att-href="httpurl"><t t-esc="httpurl"/></a>\nExternal1: <a id="url4" href="https://www.example.com/foo/bar?baz=qux">Youpie</a>\nEmail: <a id="url5" href="mailto:test@odoo.com">test@odoo.com</a></div>', 'mailing_model_id': self.env['ir.model']._get('mailing.list').id, 'reply_to_mode': 'new', 'reply_to': self.email_reply_to, 'contact_list_ids': [(6, 0, self.mailing_list_1.ids)], 'keep_archives': True}
***************************************************************************************
create
{'name': 'mailing', 'subject': 'some subject'}
***************************************************************************************
_get
'res.partner'
***************************************************************************************
_get
'res.partner'
***************************************************************************************
_get
'res.partner'
***************************************************************************************
_get
'mailing.list'
***************************************************************************************
_get
'mail.channel'
***************************************************************************************
_get
'res.partner'
***************************************************************************************
_get
'mailing.list'
***************************************************************************************
_get
'res.partner'
***************************************************************************************
_get
'mailing.list'
***************************************************************************************
with_user
self.user_marketing
***************************************************************************************
_get
'res.partner'
***************************************************************************************
create
{**common_mailing_values, 'schedule_date': test}
***************************************************************************************
create
[{'name': 'Contact %02d', 'email': 'contact_%02d@test.example.com'} for x in range(30)]
***************************************************************************************
create
{'name': 'Contacts Agregator'}
***************************************************************************************
create
{'name': 'Contacts Sublimator'}
***************************************************************************************
create
{'name': 'mailing', 'subject': 'some subject', 'mailing_model_id': self.env['ir.model']._get('res.partner').id}
***************************************************************************************
_get
'res.partner'
***************************************************************************************
search
[('subject', '=', 'Test')]
***************************************************************************************
create
{'campaign_id': self.campaign_id.id, 'name': self.mass_mailing_name, 'subject': self.subject, 'state': 'done', 'reply_to_mode': self.reply_to_mode, 'reply_to': self.reply_to if self.reply_to_mode == 'new' else False, 'sent_date': now, 'body_html': self.body, 'mailing_model_id': self.env['ir.model']._get(self.model).id, 'mailing_domain': self.active_domain, 'attachment_ids': [(6, 0, self.attachment_ids.ids)]}
***************************************************************************************
_get
self.model
***************************************************************************************
_for_xml_id
'mass_mailing.mailing_mailing_action_mail'
***************************************************************************************
create
{'name': self.new_list_name}
***************************************************************************************
search
[]
***************************************************************************************
_replace_local_links
full_body
***************************************************************************************
check_access_rights
'read'
***************************************************************************************
_for_xml_id
'sale.action_quotations_with_onboarding'
***************************************************************************************
_for_xml_id
'account.action_move_out_invoice_type'
***************************************************************************************
search
self._get_sale_utm_domain()
***************************************************************************************
search_count
mass_mailing._get_sale_utm_domain()
***************************************************************************************
search_read
domain['amount_untaxed_signed']
***************************************************************************************
_for_xml_id
'mass_mailing_sms.mailing_mailing_action_sms'
***************************************************************************************
_mailing_get_opt_out_list_sms
self
***************************************************************************************
_for_xml_id
'mass_mailing.action_create_mass_mailings_from_campaign'
***************************************************************************************
_for_xml_id
'mass_mailing_sms.mailing_mailing_action_sms'
***************************************************************************************
search
[('mass_mailing_id', 'in', mailing.ids), ('res_id', 'in', records.ids)]
***************************************************************************************
create
{'name': 'TestMailing', 'subject': 'Test', 'mailing_type': 'sms', 'body_plaintext': 'Coucou hibou', 'mailing_model_id': self.env['ir.model']._get('res.partner').id}
***************************************************************************************
_get
'res.partner'
***************************************************************************************
_get
'mailing.list'
***************************************************************************************
search
[]
***************************************************************************************
_send_sms_batch
[{'res_id': number, 'number': number, 'content': body} for number in sanitized_numbers]
***************************************************************************************
_render_template
bodyself.mailing_id.mailing_model_realrecord.ids
***************************************************************************************
search
[('account_invoice_line', 'in', to_process.ids)]
***************************************************************************************
create
memberships_vals
***************************************************************************************
search
[('account_invoice_line', 'in', to_process.ids)]
***************************************************************************************
create
memberships_vals
***************************************************************************************
search
[('account_invoice_line', 'in', self.mapped('invoice_line_ids').ids)]
***************************************************************************************
search
[('account_invoice_line', 'in', move.mapped('invoice_line_ids').ids)]
***************************************************************************************
search
[('account_invoice_line', 'in', move.mapped('invoice_line_ids').ids)]
***************************************************************************************
create
invoice_vals_list
***************************************************************************************
search
[('partner', '=', partner.associate_member.id or partner.id), ('date_cancel', '=', False)]
***************************************************************************************
search
[('partner', '=', partner.associate_member.id or partner.id), ('date_cancel', '=', False)]
***************************************************************************************
search
[('partner', '=', partner.id)]
***************************************************************************************
search
[('partner_id', '=', self.partner_1.id)]
***************************************************************************************
create
{'destination_account_id': invoice.line_ids.account_id.filtered(lambda account: account.internal_type == 'receivable').id, 'payment_method_line_id': self.inbound_payment_method_line.id, 'payment_type': 'inbound', 'partner_type': 'customer', 'partner_id': invoice.partner_id.id, 'amount': 500, 'company_id': self.env.company.id, 'currency_id': self.env.company.currency_id.id}
***************************************************************************************
browse
self._context.get('active_ids')
***************************************************************************************
get_config_warning
error_msg
***************************************************************************************
get_config_warning
error_msg
***************************************************************************************
_mail_find_partner_from_emails
emails
***************************************************************************************
search
[('event_id', '=', microsoft_event.odoo_id(self.env)), ('email', 'in', emails)]
***************************************************************************************
search
[('alarm_type', '=', 'notification'), ('duration_minutes', '=', minutes)]
***************************************************************************************
search
self._get_microsoft_sync_domain()
***************************************************************************************
create
vals
***************************************************************************************
_microsoft_to_odoo_values
microsoft_event
***************************************************************************************
search
self._get_microsoft_sync_domain()
***************************************************************************************
search
[('microsoft_id', 'in', microsoft_ids)]
***************************************************************************************
search
[('microsoft_id', 'in', (microsoft_events.cancelled() - cancelled).microsoft_ids())]
***************************************************************************************
create
new_calendar_recurrence
***************************************************************************************
browse
normal_events
***************************************************************************************
_microsoft_to_odoo_values
recurrent_master()default_values
***************************************************************************************
_microsoft_to_odoo_values
recurrent_master()default_values
***************************************************************************************
_microsoft_to_odoo_recurrence_values
recurrent_event()default_values
***************************************************************************************
_microsoft_to_odoo_values
recurrent_event()default_values
***************************************************************************************
browse
mevent.odoo_id(self.env)
***************************************************************************************
_microsoft_to_odoo_recurrence_values
recurrent_event()base_values
***************************************************************************************
_microsoft_to_odoo_values
recurrent_event()default_values
***************************************************************************************
_microsoft_to_odoo_recurrence_values
recurrent_event(){'need_sync_m': False}
***************************************************************************************
_microsoft_to_odoo_values
recurrent_event()default_values
***************************************************************************************
browse
normal_events
***************************************************************************************
browse
recurrent_event.odoo_id(self.env)
***************************************************************************************
search
[('microsoft_calendar_rtoken', '!=', False), ('microsoft_synchronization_stopped', '=', False)]
***************************************************************************************
_do_request
endpoint
***************************************************************************************
_sync_microsoft2odoo
events
***************************************************************************************
_sync_microsoft2odoo
MicrosoftEvent(values)
***************************************************************************************
_sync_microsoft2odoo
events
***************************************************************************************
search
[('microsoft_id', '=', self.recurrence_id)]
***************************************************************************************
_sync_microsoft2odoo
MicrosoftEvent(values)
***************************************************************************************
search
[('microsoft_id', '=', self.recurrence_id)]
***************************************************************************************
search
[('recurrence_id', '=', recurrence.id)]
***************************************************************************************
_sync_microsoft2odoo
MicrosoftEvent(values)
***************************************************************************************
search
[('microsoft_id', '=', self.recurrence_id)]
***************************************************************************************
search
[('recurrence_id', '=', recurrence.id)]
***************************************************************************************
_sync_microsoft2odoo
MicrosoftEvent(values)
***************************************************************************************
search
[('microsoft_id', '=', self.recurrence_id)]
***************************************************************************************
search
[('recurrence_id', '=', recurrence.id)]
***************************************************************************************
_sync_microsoft2odoo
MicrosoftEvent(values)
***************************************************************************************
search
[('microsoft_id', '=', self.recurrence_id)]
***************************************************************************************
search
[('recurrence_id', '=', recurrence.id)]
***************************************************************************************
search
[('microsoft_id', '=', 'AQ8PojGtrADQATM3ZmYAZS0yY2MAMC00MDg1LTAwAi0wMAoBUQAICADX774WtQAAAEYAAAJAcu19N72jSr9Rp1mE2xWABwBlLa4RUBXJToExnebpwea2AAACAQ0AAABlLa4RUBXJToExnebpwea2AAAACyy0xAAAABA=')]
***************************************************************************************
_sync_microsoft2odoo
MicrosoftEvent(values)
***************************************************************************************
search
[('microsoft_id', '=', self.recurrence_id)]
***************************************************************************************
search
[('recurrence_id', '=', recurrence.id)]
***************************************************************************************
_sync_microsoft2odoo
MicrosoftEvent(values)
***************************************************************************************
search
[('recurrence_id', '=', recurrence.id)]
***************************************************************************************
_sync_microsoft2odoo
MicrosoftEvent(values)
***************************************************************************************
search
[('recurrence_id', '=', recurrence.id)]
***************************************************************************************
_sync_microsoft2odoo
MicrosoftEvent(values)
***************************************************************************************
search
[('microsoft_id', '=', self.recurrence_id)]
***************************************************************************************
search
[('microsoft_id', '=', 'AQ8PojGtrADQATM3ZmYAZS0yY2MAMC00MDg1LTAwAi0wMAoARgAAA0By7X03vaNKv1GnWYTbFYAHAGUtrhFQFclOgTGd5unB5rYAAAIBDQAAAGUtrhFQFclOgTGd5unB5rYAAAAMkgQrAAAA')]
***************************************************************************************
search
[('recurrence_id', '=', recurrence_1.id)]
***************************************************************************************
search
[('recurrence_id', '=', recurrence_2.id)]
***************************************************************************************
search
[('microsoft_id', '=', self.recurrence_id)]
***************************************************************************************
_sync_microsoft2odoo
MicrosoftEvent(values)
***************************************************************************************
search
[('microsoft_id', '=', self.recurrence_id)]
***************************************************************************************
create
{'name': 'SuperPartner'}
***************************************************************************************
create
{'name': 'SuperEvent', 'start': datetime(2020, 3, 16, 11, 0), 'stop': datetime(2020, 3, 16, 13, 0), 'partner_ids': [(4, partner.id)]}
***************************************************************************************
_sync_microsoft2odoo
MicrosoftEvent(first_sync_values)
***************************************************************************************
search
[('microsoft_id', '=', 'AQMkADAwATM3ZmYAZS0zZmMyLWYxYjQtMDACLTAwCgBGAAADZ59RIxdyh0Kt-MXfyCpfwAcApynKRnkCyUmnqILQHcLZEQAAAgENAAAApynKRnkCyUmnqILQHcLZEQAAAARKsSQAAAA=')]
***************************************************************************************
_sync_microsoft2odoo
MicrosoftEvent(second_sync_values)
***************************************************************************************
search
[('recurrence_id', '=', recurrence_id.id)]
***************************************************************************************
browse
event_ids
***************************************************************************************
create
{'name': 'Event', 'start': datetime(2020, 1, 15, 8, 0), 'stop': datetime(2020, 1, 15, 18, 0), 'privacy': 'private'}
***************************************************************************************
create
{'name': 'Jean-Luc', 'email': 'jean-luc@opoo.com'}
***************************************************************************************
create
{'name': 'Test user Calendar', 'login': 'jean-luc@opoo.com', 'partner_id': partner.id}
***************************************************************************************
with_user
user
***************************************************************************************
search
[('user_id', '=', self.user_id.id), ('microsoft_id', '!=', False)]
***************************************************************************************
search
[('product_id', 'in', product_ids)]
***************************************************************************************
search
[('bom_id', 'in', self.ids), ('state', 'not in', ['done', 'cancel'])]
***************************************************************************************
search
[]
***************************************************************************************
search_count
domain
***************************************************************************************
browse
product_ids
***************************************************************************************
search
[]
***************************************************************************************
search_count
['|', '&', ('res_model', '=', 'product.product'), ('res_id', '=', line.product_id.id), '&', ('res_model', '=', 'product.template'), ('res_id', '=', line.product_id.product_tmpl_id.id)]
***************************************************************************************
_bom_find
line.product_id
***************************************************************************************
browse
values['product_id']
***************************************************************************************
read_group
[('id', 'in', self.move_raw_ids.ids), ('delay_alert_date', '!=', False)]['delay_alert_date:max']'raw_material_production_id'
***************************************************************************************
read_group
domain['state', 'production_id', 'raw_material_production_id']['production_id', 'raw_material_production_id']
***************************************************************************************
_for_xml_id
'stock.action_picking_tree_all'
***************************************************************************************
read_group
[('company_id', 'in', self.company_id.ids), ('usage', '=', 'production')]['company_id', 'ids:array_agg(id)']['company_id']
***************************************************************************************
read_group
[('production_id', 'in', self.ids)]['production_id']['production_id']
***************************************************************************************
search
[('delay_alert_date', operator, value)]
***************************************************************************************
create
{'product_id': self.product_id.id, 'company_id': self.company_id.id, 'name': self.env['stock.production.lot']._get_next_serial(self.company_id, self.product_id) or self.env['ir.sequence'].next_by_code('stock.lot.serial')}
***************************************************************************************
_for_xml_id
'mrp.action_mrp_consumption_warning'
***************************************************************************************
_for_xml_id
'mrp.action_mrp_production_backorder'
***************************************************************************************
_for_xml_id
'stock.action_stock_scrap'
***************************************************************************************
_log_activity_get_documents
moves_modification'move_dest_ids''DOWN'_keys_in_sorted_keys_in_groupby
***************************************************************************************
_less_quantities_than_expected_add_documents
moves_modificationdocuments
***************************************************************************************
_log_activity
_render_note_exception_quantity_modocuments
***************************************************************************************
_log_activity
_render_note_exception_quantity_modocuments
***************************************************************************************
_get_next_serial
self.company_idself.product_id
***************************************************************************************
_for_xml_id
'mrp.act_assign_serial_numbers_production'
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
search
[('code', '=', 'mrp_operation'), ('warehouse_id.company_id', '=', company_id)]
***************************************************************************************
search
[('group_id', '=', order.procurement_group_id.id), ('group_id', '!=', False)]
***************************************************************************************
_check_serial_number
self.product_idself.lot_producing_idself.company_id
***************************************************************************************
browse
picking_type_id
***************************************************************************************
create
{'name': workorder.display_name, 'calendar_id': best_workcenter.resource_calendar_id.id, 'date_from': best_start_date, 'date_to': best_finished_date, 'resource_id': best_workcenter.resource_id.id, 'time_type': 'other'}
***************************************************************************************
concat
*visited_objects
***************************************************************************************
search_count
[('lot_id', '=', self.lot_producing_id.id), ('location_id.usage', '=', 'production'), ('qty_done', '=', 1), ('state', '=', 'done')]
***************************************************************************************
create
{'product_id': production.product_id.id, 'company_id': production.company_id.id, 'name': serial_number}
***************************************************************************************
browse
self.env.context['default_picking_type_id']
***************************************************************************************
search
[('company_id', '=', company_id)]
***************************************************************************************
browse
self.env.context['default_picking_type_id']
***************************************************************************************
search
[('company_id', '=', company_id)]
***************************************************************************************
search
[('company_id', '=', company_id)]
***************************************************************************************
create
procurement_group_vals
***************************************************************************************
browse
move_values['product_id']
***************************************************************************************
browse
move_values['product_uom']
***************************************************************************************
create
new_moves_vals
***************************************************************************************
search_count
domain + [('location_id.usage', '=', 'production')]
***************************************************************************************
search_count
domain + [('location_dest_id.usage', '=', 'production')]
***************************************************************************************
create
new_moves_vals
***************************************************************************************
search
[('code', '=', 'mrp_operation'), ('warehouse_id.company_id', '=', self.company_id.id)]
***************************************************************************************
_bom_find
self.product_id
***************************************************************************************
next_by_code
'mrp.production'
***************************************************************************************
_get_next_serial
self.company_idself.product_id
***************************************************************************************
next_by_code
'stock.lot.serial'
***************************************************************************************
_log_activity_get_documents
{move_raw_id: (move_raw_id.product_uom_qty, 0)}iterate_key'UP'
***************************************************************************************
search_count
domain_unbuild + [('move_id.unbuild_id', '!=', False)]
***************************************************************************************
search_count
[('lot_id', '=', move_line.lot_id.id), ('state', '=', 'done'), ('location_dest_id.scrap_location', '=', True)]
***************************************************************************************
search_count
domain_unbuild + [('move_id.unbuild_id', '!=', False)]
***************************************************************************************
search_count
[('lot_id', '=', move_line.lot_id.id), ('state', '=', 'done'), ('location_dest_id.scrap_location', '=', True)]
***************************************************************************************
read_group
[('operation_id', 'in', self.ids), ('state', '=', 'done')]['operation_id']['operation_id']
***************************************************************************************
search
[('operation_id', '=', operation.id), ('qty_produced', '>', 0), ('state', '=', 'done')]
***************************************************************************************
create
{'name': self.name, 'date': self.create_date, 'product_id': move.product_id.id, 'product_uom_qty': move.product_uom_qty * factor, 'product_uom': move.product_uom.id, 'procure_method': 'make_to_stock', 'location_dest_id': location_dest_id.id, 'location_id': location_id.id, 'warehouse_id': location_dest_id.warehouse_id.id, 'unbuild_id': self.id, 'company_id': move.company_id.id}
***************************************************************************************
create
{'name': self.name, 'date': self.create_date, 'bom_line_id': bom_line_id, 'byproduct_id': byproduct_id, 'product_id': product.id, 'product_uom_qty': quantity, 'product_uom': product_uom.id, 'procure_method': 'make_to_stock', 'location_dest_id': location_dest_id.id, 'location_id': location_id.id, 'warehouse_id': warehouse.id, 'unbuild_id': self.id, 'company_id': self.company_id.id}
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
_get_available_quantity
self.product_idself.location_idself.lot_id
***************************************************************************************
search
[('company_id', '=', self.company_id.id)]
***************************************************************************************
_bom_find
self.product_id
***************************************************************************************
next_by_code
'mrp.unbuild'
***************************************************************************************
create
{'move_id': finished_move.id, 'lot_id': self.lot_id.id, 'qty_done': finished_move.product_uom_qty, 'product_id': finished_move.product_id.id, 'product_uom_id': finished_move.product_uom.id, 'location_id': finished_move.location_id.id, 'location_dest_id': finished_move.location_dest_id.id}
***************************************************************************************
create
{'move_id': move.id, 'lot_id': move_line.lot_id.id, 'qty_done': taken_quantity, 'product_id': move.product_id.id, 'product_uom_id': move_line.product_uom_id.id, 'location_id': move.location_id.id, 'location_dest_id': move.location_dest_id.id}
***************************************************************************************
read_group
[('date_start', '>=', fields.Datetime.to_string(datetime.datetime.now() - relativedelta.relativedelta(months=1))), ('workcenter_id', 'in', self.ids), ('date_end', '!=', False), ('loss_type', '!=', 'productive')]['duration', 'workcenter_id']['workcenter_id']
***************************************************************************************
read_group
[('date_start', '>=', fields.Datetime.to_string(datetime.datetime.now() - relativedelta.relativedelta(months=1))), ('workcenter_id', 'in', self.ids), ('date_end', '!=', False), ('loss_type', '=', 'productive')]['duration', 'workcenter_id']['workcenter_id']
***************************************************************************************
read_group
[('date_start', '>=', fields.Datetime.to_string(datetime.datetime.now() - relativedelta.relativedelta(months=1))), ('workcenter_id', 'in', self.ids), ('state', '=', 'done')]['duration_expected', 'workcenter_id', 'duration']['workcenter_id']
***************************************************************************************
search
[('workcenter_id', '=', self.id), ('date_end', '=', False)]
***************************************************************************************
_for_xml_id
'mrp.mrp_routing_action'
***************************************************************************************
_for_xml_id
'mrp.action_work_orders'
***************************************************************************************
search
[('workcenter_id', '=', workcenter.id), ('date_end', '=', False)]
***************************************************************************************
browse
self.env.context['default_workorder_id']
***************************************************************************************
browse
self.env.context['default_workcenter_id']
***************************************************************************************
read_group
[('next_work_order_id', 'in', self.ids)]['ids:array_agg(id)', 'date_planned_start:max', 'date_planned_finished:max']['next_work_order_id']
***************************************************************************************
read_group
[('workorder_id', 'in', self.ids)]['workorder_id']['workorder_id']
***************************************************************************************
browse
workcenter_ids
***************************************************************************************
create
self._prepare_timeline_vals(self.duration, datetime.now())
***************************************************************************************
_for_xml_id
'stock.action_stock_scrap'
***************************************************************************************
_for_xml_id
'mrp.mrp_workorder_mrp_production_form'
***************************************************************************************
create
{'name': self.display_name, 'calendar_id': self.workcenter_id.resource_calendar_id.id, 'date_from': start_date, 'date_to': start_date + relativedelta(minutes=self.duration_expected), 'resource_id': self.workcenter_id.resource_id.id, 'time_type': 'other'}
***************************************************************************************
search
[('loss_type', '=', 'performance')]
***************************************************************************************
search
[('loss_type', '=', 'productive')]
***************************************************************************************
search
[('loss_type', '=', 'performance')]
***************************************************************************************
search_count
[('lot_id', '=', self.finished_lot_id.id), ('location_id.usage', '=', 'production'), ('qty_done', '=', 1), ('state', '=', 'done')]
***************************************************************************************
create
order._prepare_timeline_vals(delta_duration, date_start, datetime.now())
***************************************************************************************
browse
values['workcenter_id']
***************************************************************************************
search_read
domain['product_tmpl_id']
***************************************************************************************
_for_xml_id
'mrp.mrp_bom_form_action'
***************************************************************************************
_for_xml_id
'mrp.mrp_production_report'
***************************************************************************************
search_read
domain['product_tmpl_id', 'product_id']
***************************************************************************************
_for_xml_id
'mrp.mrp_bom_form_action'
***************************************************************************************
read_group
domain['product_id', 'product_uom_qty']['product_id']
***************************************************************************************
_bom_find
self
***************************************************************************************
_for_xml_id
'mrp.product_open_bom'
***************************************************************************************
_bom_find
self
***************************************************************************************
search_count
['|', ('product_tmpl_id', '=', product.id), ('byproduct_ids.product_id.product_tmpl_id', '=', product.id)]
***************************************************************************************
search_count
[('bom_line_ids.product_tmpl_id', '=', template.id)]
***************************************************************************************
search_count
['|', '|', ('byproduct_ids.product_id', '=', product.id), ('product_id', '=', product.id), '&', ('product_id', '=', False), ('product_tmpl_id', '=', product.product_tmpl_id.id)]
***************************************************************************************
search_count
[('bom_line_ids.product_id', '=', product.id)]
***************************************************************************************
_bom_find
self
***************************************************************************************
concat
*list(bom_kits.keys())
***************************************************************************************
concat
*[l[0].product_id for l in bom_sub_lines]
***************************************************************************************
search
[]
***************************************************************************************
create
unbuild_vals
***************************************************************************************
search
[('code', '=', 'mrp.unbuild')]
***************************************************************************************
search
[('state', 'not in', ('cancel', 'done')), ('is_locked', '=', True)]
***************************************************************************************
search
[('state', 'not in', ('cancel', 'done')), ('is_locked', '=', False)]
***************************************************************************************
browse
moves_ids_to_return
***************************************************************************************
browse
self.env.context.get('default_raw_material_production_id') or self.env.context.get('default_production_id')
***************************************************************************************
create
phantom_moves_vals_list
***************************************************************************************
browse
moves_ids_to_unlink
***************************************************************************************
search
[('orderpoint_id', 'in', self.ids)]
***************************************************************************************
search_read
[('action', '=', 'manufacture')]['route_id']
***************************************************************************************
_bom_find
self.product_id
***************************************************************************************
search
[('action', '=', 'manufacture')]
***************************************************************************************
_bom_find
self.product_id
***************************************************************************************
read_group
domains[field] + [('state', 'not in', ('done', 'cancel')), ('picking_type_id', 'in', self.ids)]['picking_type_id']['picking_type_id']
***************************************************************************************
browse
active_mo_id
***************************************************************************************
_bom_find
product_id
***************************************************************************************
_bom_find
self.env['product.product'].browse(product_ids)
***************************************************************************************
browse
product_ids
***************************************************************************************
Procurement
bom_line.product_idcomponent_qtyprocurement_uomprocurement.location_idprocurement.nameprocurement.originprocurement.company_idvalues
***************************************************************************************
with_user
SUPERUSER_ID
***************************************************************************************
_check_serial_number
self.product_idself.lot_idself.company_idself.location_idself.production_id.location_dest_id
***************************************************************************************
search
[('usage', '=', 'production'), ('company_id', '=', self.company_id.id)]
***************************************************************************************
search
['|', ('product_id', 'in', self.product_id.ids), '&', ('product_id', '=', False), ('product_tmpl_id', 'in', self.product_id.product_tmpl_id.ids), ('type', '=', 'phantom')]
***************************************************************************************
search
[('id', 'in', self.env.registry.populated_models['mrp.bom'])]
***************************************************************************************
browse
product_manu_ids
***************************************************************************************
browse
self.env.registry.populated_models['mrp.workcenter']
***************************************************************************************
search
[('id', 'in', self.env.registry.populated_models['mrp.bom'])]
***************************************************************************************
browse
product_manu_ids
***************************************************************************************
browse
self.env.registry.populated_models['product.product']
***************************************************************************************
browse
self.env.registry.populated_models['mrp.bom']
***************************************************************************************
search
[('code', '=', 'mrp_operation')]
***************************************************************************************
browse
self.env.registry.populated_models['mrp.production']
***************************************************************************************
browse
self.env.registry.populated_models['product.product']
***************************************************************************************
browse
values['bom_id']
***************************************************************************************
browse
workcenters
***************************************************************************************
browse
workcenters
***************************************************************************************
browse
values['bom_id']
***************************************************************************************
browse
self.env.registry.populated_models['product.product']
***************************************************************************************
create
productions_with_bom._get_moves_raw_values()
***************************************************************************************
create
productions_with_bom._get_moves_finished_values()
***************************************************************************************
browse
random.sample(mo_ids, int(len(mo_ids) * 0.8))
***************************************************************************************
browse
boms
***************************************************************************************
browse
values['bom_id']
***************************************************************************************
browse
values['product_id']
***************************************************************************************
browse
values['picking_type_id']
***************************************************************************************
browse
values['picking_type_id']
***************************************************************************************
browse
random.sample(mo_ids, int(len(mo_ids) * 0.8))
***************************************************************************************
search
[('id', 'in', self.env.registry.populated_models['product.product']), ('type', 'in', ('product', 'consu'))]
***************************************************************************************
browse
values['bom_id']
***************************************************************************************
browse
values['product_id']
***************************************************************************************
browse
values['company_id']
***************************************************************************************
browse
values['product_id']
***************************************************************************************
browse
values['raw_material_production_id']
***************************************************************************************
browse
values['product_tmpl_id']
***************************************************************************************
browse
bom_id
***************************************************************************************
browse
product_id
***************************************************************************************
browse
bom_id
***************************************************************************************
browse
bom_id
***************************************************************************************
browse
bom_id
***************************************************************************************
browse
bom_id
***************************************************************************************
browse
bom_id
***************************************************************************************
browse
int(line_id)
***************************************************************************************
browse
int(product_id)
***************************************************************************************
search
['|', '&', ('res_model', '=', 'product.product'), ('res_id', '=', product.id), '&', ('res_model', '=', 'product.template'), ('res_id', '=', product.product_tmpl_id.id)]
***************************************************************************************
search
[('res_model', '=', 'product.template'), ('res_id', '=', bom.product_tmpl_id.id)]
***************************************************************************************
browse
bom_line['line_id']
***************************************************************************************
browse
variant
***************************************************************************************
search
['|', '&', ('res_model', '=', 'product.product'), ('res_id', '=', line.product_id.id), '&', ('res_model', '=', 'product.template'), ('res_id', '=', line.product_id.product_tmpl_id.id)]
***************************************************************************************
read_group
mo_domain['product_qty:sum']'product_id'
***************************************************************************************
read_group
move_domain['product_qty:sum']'product_id'
***************************************************************************************
create
{'name': 'Young Tom', 'type': 'product', 'tracking': tracking_final}
***************************************************************************************
create
{'name': 'Botox', 'type': 'product', 'tracking': tracking_base_1}
***************************************************************************************
create
{'name': 'Old Tom', 'type': 'product', 'tracking': tracking_base_2}
***************************************************************************************
create
{'product_id': product_to_build.id, 'product_tmpl_id': product_to_build.product_tmpl_id.id, 'product_uom_id': self.uom_unit.id, 'product_qty': 1.0, 'type': 'normal', 'consumption': consumption if consumption else 'flexible', 'bom_line_ids': [(0, 0, {'product_id': product_to_use_2.id, 'product_qty': qty_base_2}), (0, 0, {'product_id': product_to_use_1.id, 'product_qty': qty_base_1})]}
***************************************************************************************
create
{'name': 'lot_final', 'product_id': p_final.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot_consumed_1', 'product_id': p1.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot_consumed_2', 'product_id': p2.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
p1self.stock_locationnb_product_todo * 4
***************************************************************************************
_update_available_quantity
p2self.stock_locationnb_product_todo
***************************************************************************************
_update_available_quantity
p1self.stock_location_components2.0
***************************************************************************************
_update_available_quantity
p2self.stock_location_components2.0
***************************************************************************************
browse
default_picking_type_id
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
_update_available_quantity
p1self.stock_location1
***************************************************************************************
_update_available_quantity
p2self.stock_location1
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
create
{'name': f'lot_final_{i}', 'product_id': p_final.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': f'lot_consumed_1_{i}', 'product_id': p1.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': f'lot_consumed_2_{i}', 'product_id': p2.id, 'company_id': self.env.company.id}
***************************************************************************************
search
[('product_id', '=', p_final.id)]
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
action['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
create
{'product_tmpl_id': self.product_7_template.id, 'product_uom_id': self.uom_unit.id, 'product_qty': 4.0, 'type': 'normal', 'operation_ids': [Command.create({'name': 'Cutting Machine', 'workcenter_id': self.workcenter_1.id, 'time_cycle': 12, 'sequence': 1}), Command.create({'name': 'Weld Machine', 'workcenter_id': self.workcenter_1.id, 'time_cycle': 18, 'sequence': 2, 'bom_product_template_attribute_value_ids': [Command.link(self.product_7_attr1_v1.id)]}), Command.create({'name': 'Taking a coffee', 'workcenter_id': self.workcenter_1.id, 'time_cycle': 5, 'sequence': 3, 'bom_product_template_attribute_value_ids': [Command.link(self.product_7_attr1_v2.id)]})], 'byproduct_ids': [Command.create({'product_id': self.product_1.id, 'product_uom_id': self.product_1.uom_id.id, 'product_qty': 1}), Command.create({'product_id': self.product_2.id, 'product_uom_id': self.product_2.uom_id.id, 'product_qty': 1, 'bom_product_template_attribute_value_ids': [Command.link(self.product_7_attr1_v1.id)]}), Command.create({'product_id': self.product_3.id, 'product_uom_id': self.product_3.uom_id.id, 'product_qty': 1, 'bom_product_template_attribute_value_ids': [Command.link(self.product_7_attr1_v2.id)]})], 'bom_line_ids': [Command.create({'product_id': self.product_2.id, 'product_qty': 2}), Command.create({'product_id': self.product_3.id, 'product_qty': 2, 'bom_product_template_attribute_value_ids': [Command.link(self.product_7_attr1_v1.id)]}), Command.create({'product_id': self.product_4.id, 'product_qty': 2, 'bom_product_template_attribute_value_ids': [Command.link(self.product_7_attr1_v2.id)]})]}
***************************************************************************************
create
{'name': 'Manufacturing', 'code': 'mrp_operation', 'sequence_code': 'TMP', 'sequence_id': self.env['ir.sequence'].create({'code': 'mrp.production', 'name': 'tmp_production_sequence'}).id}
***************************************************************************************
create
{'product_tmpl_id': self.product_5.product_tmpl_id.id, 'product_uom_id': self.product_5.uom_id.id, 'product_qty': 1.0, 'type': 'phantom'}
***************************************************************************************
create
{'bom_id': test_bom_1.id, 'product_id': self.product_3.id, 'product_qty': 3}
***************************************************************************************
create
{'product_id': self.product_7_3.id, 'product_tmpl_id': self.product_7_template.id, 'product_uom_id': self.uom_unit.id, 'product_qty': 4.0, 'type': 'normal'}
***************************************************************************************
create
{'bom_id': test_bom_2.id, 'product_id': self.product_2.id, 'product_qty': 2}
***************************************************************************************
create
{'bom_id': test_bom_2.id, 'product_id': self.product_5.id, 'product_qty': 2, 'bom_product_template_attribute_value_ids': [(4, self.product_7_attr1_v1.id)]}
***************************************************************************************
create
{'bom_id': test_bom_2.id, 'product_id': self.product_5.id, 'product_qty': 2, 'bom_product_template_attribute_value_ids': [(4, self.product_7_attr1_v2.id)]}
***************************************************************************************
create
{'bom_id': test_bom_2.id, 'product_id': self.product_4.id, 'product_qty': 2}
***************************************************************************************
create
{'product_id': self.product_9.id, 'product_tmpl_id': self.product_9.product_tmpl_id.id, 'product_uom_id': self.product_9.uom_id.id, 'product_qty': 1.0, 'consumption': 'flexible', 'type': 'normal'}
***************************************************************************************
create
{'product_id': self.product_10.id, 'product_tmpl_id': self.product_10.product_tmpl_id.id, 'product_uom_id': self.product_10.uom_id.id, 'product_qty': 1.0, 'consumption': 'flexible', 'type': 'phantom'}
***************************************************************************************
create
{'bom_id': test_bom_3.id, 'product_id': self.product_10.id, 'product_qty': 1.0}
***************************************************************************************
create
{'bom_id': test_bom_4.id, 'product_id': self.product_9.id, 'product_qty': 1.0}
***************************************************************************************
create
{'name': 'Sofa', 'attribute_line_ids': [(0, 0, {'attribute_id': att_color.id, 'value_ids': [(6, 0, [att_color_red.id, att_color_blue.id])]}), (0, 0, {'attribute_id': att_size.id, 'value_ids': [(6, 0, [att_size_big.id, att_size_medium.id])]})]}
***************************************************************************************
create
{'product_tmpl_id': product_template.id, 'product_qty': 1.0, 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': product_A.id, 'product_qty': 1, 'bom_product_template_attribute_value_ids': [(4, sofa_red.id), (4, sofa_blue.id), (4, sofa_big.id)]}), (0, 0, {'product_id': product_B.id, 'product_qty': 1, 'bom_product_template_attribute_value_ids': [(4, sofa_red.id), (4, sofa_blue.id)]})]}
***************************************************************************************
create
{'product_id': self.product_7_3.id, 'product_tmpl_id': self.product_7_template.id, 'product_uom_id': self.uom_unit.id, 'product_qty': 4.0, 'type': 'phantom', 'bom_line_ids': [(0, 0, {'product_id': self.product_2.id, 'product_qty': 2}), (0, 0, {'product_id': self.product_3.id, 'product_qty': 2})]}
***************************************************************************************
_update_available_quantity
self.product_2location4.0
***************************************************************************************
_update_available_quantity
self.product_3location8.0
***************************************************************************************
create
{'name': 'Test units', 'type': 'product', 'uom_id': uom_unit.id}
***************************************************************************************
create
{'name': 'Test dozens', 'type': 'product', 'uom_id': uom_dozens.id}
***************************************************************************************
create
{'product_tmpl_id': product_unit.product_tmpl_id.id, 'product_uom_id': self.uom_unit.id, 'product_qty': 1.0, 'type': 'phantom', 'bom_line_ids': [(0, 0, {'product_id': product_dozens.id, 'product_qty': 1, 'product_uom_id': uom_unit.id})]}
***************************************************************************************
_update_available_quantity
product_dozenslocation1.0
***************************************************************************************
create
{'name': 'Crumble', 'type': 'product', 'uom_id': uom_kg.id, 'uom_po_id': uom_kg.id}
***************************************************************************************
create
{'name': 'Butter', 'type': 'product', 'uom_id': uom_kg.id, 'uom_po_id': uom_kg.id, 'standard_price': 7.01}
***************************************************************************************
create
{'name': 'Biscuit', 'type': 'product', 'uom_id': uom_kg.id, 'uom_po_id': uom_kg.id, 'standard_price': 1.5}
***************************************************************************************
create
{'costs_hour': 10, 'name': 'Deserts Table'}
***************************************************************************************
create
{'name': 'Cheese Cake 300g', 'type': 'product'}
***************************************************************************************
create
{'name': 'cream', 'type': 'product', 'uom_id': uom_litre.id, 'uom_po_id': uom_litre.id, 'standard_price': 5.17}
***************************************************************************************
create
{'name': 'cake mounting', 'costs_hour': 20, 'time_start': 10, 'time_stop': 15}
***************************************************************************************
create
{'name': 'Car'}
***************************************************************************************
create
{'name': 'GPS', 'sequence': 1}
***************************************************************************************
create
{'name': 'Yes', 'attribute_id': self.gps_attribute.id, 'sequence': 1}
***************************************************************************************
create
{'name': 'No', 'attribute_id': self.gps_attribute.id, 'sequence': 2}
***************************************************************************************
create
{'product_tmpl_id': self.car.id, 'attribute_id': self.gps_attribute.id, 'value_ids': [(6, 0, [self.gps_yes.id, self.gps_no.id])]}
***************************************************************************************
create
{'name': 'Color', 'sequence': 1}
***************************************************************************************
create
{'name': 'Red', 'attribute_id': self.color_attribute.id, 'sequence': 1}
***************************************************************************************
create
{'name': 'Blue', 'attribute_id': self.color_attribute.id, 'sequence': 2}
***************************************************************************************
create
{'product_tmpl_id': self.car.id, 'attribute_id': self.color_attribute.id, 'value_ids': [(6, 0, [self.color_red.id, self.color_blue.id])]}
***************************************************************************************
create
{'name': 'Paint', 'uom_id': uom_litre.id, 'uom_po_id': uom_litre.id}
***************************************************************************************
create
{'product_tmpl_id': self.paint.id, 'attribute_id': self.color_attribute.id, 'value_ids': [(6, 0, [self.color_red.id, self.color_blue.id])]}
***************************************************************************************
create
{'name': 'Dashboard', 'standard_price': 1000}
***************************************************************************************
create
{'product_tmpl_id': self.dashboard.id, 'attribute_id': self.gps_attribute.id, 'value_ids': [(6, 0, [self.gps_yes.id, self.gps_no.id])]}
***************************************************************************************
create
{'product_tmpl_id': self.dashboard.id, 'attribute_id': self.color_attribute.id, 'value_ids': [(6, 0, [self.color_red.id, self.color_blue.id])]}
***************************************************************************************
create
{'name': 'GPS', 'standard_price': 700}
***************************************************************************************
_get_bom
component['child_bom']component['prod_id']component['prod_qty']component['line_id']component['level'] + 1
***************************************************************************************
create
{'name': 'Finished', 'type': 'product', 'uom_id': uom_unit.id, 'uom_po_id': uom_unit.id}
***************************************************************************************
create
{'name': 'Semi-Finished', 'type': 'product', 'uom_id': uom_kg.id, 'uom_po_id': uom_kg.id}
***************************************************************************************
create
{'name': 'Assembly', 'type': 'product', 'uom_id': uom_dozen.id, 'uom_po_id': uom_dozen.id}
***************************************************************************************
create
{'name': 'Raw Material', 'type': 'product', 'uom_id': uom_litre.id, 'uom_po_id': uom_litre.id, 'standard_price': 5}
***************************************************************************************
create
{'name': 'Finished', 'type': 'product', 'uom_id': uom_unit.id, 'uom_po_id': uom_unit.id}
***************************************************************************************
create
{'name': 'Product sold in grams', 'type': 'product', 'uom_id': uom_gram.id, 'uom_po_id': uom_gram.id}
***************************************************************************************
create
{'product_id': product_gram.id, 'product_tmpl_id': product_gram.product_tmpl_id.id, 'product_uom_id': uom_kg.id, 'product_qty': 2.0, 'type': 'normal'}
***************************************************************************************
search
[('product_id', '=', product_gram.id)]
***************************************************************************************
search
[('id', '=', manufacturing_route_id)]
***************************************************************************************
create
{'code': 'mrp.production', 'name': 'tmp_production_sequence'}
***************************************************************************************
create
{'name': name, 'type': 'product', 'route_ids': route_ids}
***************************************************************************************
create
{'name': 'Company A'}
***************************************************************************************
create
{'name': 'Company B'}
***************************************************************************************
search
[('company_id', '=', self.company_a.id)]
***************************************************************************************
search
[('company_id', '=', self.company_b.id)]
***************************************************************************************
create
{'name': 'user company a with access to company b', 'login': 'user a', 'groups_id': [(6, 0, [group_user.id, group_mrp_manager.id])], 'company_id': self.company_a.id, 'company_ids': [(6, 0, [self.company_a.id, self.company_b.id])]}
***************************************************************************************
create
{'name': 'user company a with access to company b', 'login': 'user b', 'groups_id': [(6, 0, [group_user.id, group_mrp_manager.id])], 'company_id': self.company_b.id, 'company_ids': [(6, 0, [self.company_a.id, self.company_b.id])]}
***************************************************************************************
create
{'name': 'p1', 'company_id': self.company_b.id}
***************************************************************************************
create
{'name': 'p1', 'company_id': self.company_a.id}
***************************************************************************************
create
{'name': 'p2', 'company_id': self.company_b.id}
***************************************************************************************
create
{'name': 'p1', 'company_id': self.company_a.id}
***************************************************************************************
create
{'product_id': product_a.id, 'product_uom_id': product_a.uom_id.id, 'company_id': self.company_b.id}
***************************************************************************************
create
{'name': 'p1', 'company_id': self.company_a.id}
***************************************************************************************
create
{'name': 'p2', 'company_id': self.company_a.id}
***************************************************************************************
create
{'product_id': product_a.id, 'product_tmpl_id': product_a.product_tmpl_id.id, 'company_id': self.company_a.id, 'bom_line_ids': [(0, 0, {'product_id': component_a.id})]}
***************************************************************************************
create
{'name': 'p1', 'tracking': 'lot'}
***************************************************************************************
create
{'name': 'p2'}
***************************************************************************************
create
{'product_id': product.id, 'company_id': self.company_b.id}
***************************************************************************************
create
{'product_id': product.id, 'product_tmpl_id': product.product_tmpl_id.id, 'company_id': self.company_a.id, 'bom_line_ids': [(0, 0, {'product_id': component.id})]}
***************************************************************************************
create
{'name': 'p1'}
***************************************************************************************
create
{'name': 'p2', 'tracking': 'lot'}
***************************************************************************************
create
{'product_id': component.id, 'company_id': self.company_b.id}
***************************************************************************************
create
{'product_id': product.id, 'product_tmpl_id': product.product_tmpl_id.id, 'company_id': self.company_a.id, 'bom_line_ids': [(0, 0, {'product_id': component.id})]}
***************************************************************************************
create
{'name': 'Shared Product', 'company_id': False}
***************************************************************************************
create
{'product_id': product_b.id, 'product_tmpl_id': product_b.product_tmpl_id.id, 'company_id': self.company_a.id}
***************************************************************************************
create
{'product_id': product_a.id, 'product_tmpl_id': product_b.product_tmpl_id.id, 'company_id': self.company_a.id, 'bom_line_ids': [(0, 0, {'product_id': product_b.id})]}
***************************************************************************************
with_user
self.user_a
***************************************************************************************
with_user
self.user_a
***************************************************************************************
with_user
self.user_a
***************************************************************************************
create
{'workcenter_id': self.workcenter_1.id, 'date_start': date_start, 'date_end': date_end, 'loss_id': loss_reason.id, 'description': loss_reason.name}
***************************************************************************************
create
{'name': 'lot1', 'product_id': p1.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': p1.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
p1self.stock_location10
***************************************************************************************
_update_available_quantity
p1self.stock_location10
***************************************************************************************
_update_available_quantity
p2self.stock_location5
***************************************************************************************
create
{'mo_id': mo.id, 'product_qty': 4}
***************************************************************************************
_update_available_quantity
p1self.stock_location20
***************************************************************************************
_update_available_quantity
p2self.stock_location5
***************************************************************************************
create
{'mo_id': mo.id, 'product_qty': 5}
***************************************************************************************
create
{'product_id': self.product_6.id, 'product_tmpl_id': self.product_6.product_tmpl_id.id, 'product_qty': 1, 'product_uom_id': self.product_6.uom_id.id, 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': self.product_2.id, 'product_qty': 2.03}), (0, 0, {'product_id': self.product_8.id, 'product_qty': 4.16})], 'operation_ids': [(0, 0, {'name': 'Gift Wrap Maching', 'workcenter_id': self.workcenter_1.id, 'time_cycle': 15, 'sequence': 1})]}
***************************************************************************************
create
{'product_id': self.product_6.id, 'product_tmpl_id': self.product_6.product_tmpl_id.id, 'product_qty': 1, 'product_uom_id': self.product_6.uom_id.id, 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': self.product_2.id, 'product_qty': 2.03}), (0, 0, {'product_id': self.product_8.id, 'product_qty': 4.16})]}
***************************************************************************************
create
{'product_id': self.product_6.id, 'product_tmpl_id': self.product_6.product_tmpl_id.id, 'product_qty': 1, 'product_uom_id': self.product_6.uom_id.id, 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': self.product_2.id, 'product_qty': 2.0})]}
***************************************************************************************
create
{'product_id': self.product_6.id, 'product_tmpl_id': self.product_6.product_tmpl_id.id, 'product_qty': 1, 'product_uom_id': self.product_6.uom_id.id, 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': self.product_2.id, 'product_qty': 3})]}
***************************************************************************************
create
{'product_id': self.product_6.id, 'product_tmpl_id': self.product_6.product_tmpl_id.id, 'product_qty': 1, 'product_uom_id': self.product_6.uom_id.id, 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': self.product_2.id, 'product_qty': 2.03}), (0, 0, {'product_id': self.product_8.id, 'product_qty': 4.16})]}
***************************************************************************************
_update_available_quantity
p1self.stock_location100
***************************************************************************************
_update_available_quantity
p2self.stock_location5
***************************************************************************************
create
{'name': 'lot1', 'product_id': p1.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': p1.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
p1self.stock_location1
***************************************************************************************
_update_available_quantity
p1self.stock_location1
***************************************************************************************
_update_available_quantity
p2self.stock_location5
***************************************************************************************
create
{'name': 'lot1', 'product_id': p1.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': p1.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot1', 'product_id': p_final.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
p1self.stock_shelf_13
***************************************************************************************
_update_available_quantity
p1self.stock_shelf_23
***************************************************************************************
_update_available_quantity
p1self.stock_location8
***************************************************************************************
_update_available_quantity
p2self.stock_location5
***************************************************************************************
_update_available_quantity
p1self.stock_shelf_12
***************************************************************************************
_update_available_quantity
p1self.stock_shelf_23
***************************************************************************************
_update_available_quantity
p2self.stock_location1
***************************************************************************************
_update_available_quantity
p1self.stock_location20
***************************************************************************************
_update_available_quantity
p2self.stock_location5
***************************************************************************************
create
{'mo_id': mo.id, 'product_qty': 3}
***************************************************************************************
_update_available_quantity
p1self.stock_location100
***************************************************************************************
_update_available_quantity
p2self.stock_location5
***************************************************************************************
_update_available_quantity
p1self.stock_location100
***************************************************************************************
_update_available_quantity
p2self.stock_location5
***************************************************************************************
_update_available_quantity
p1self.stock_location100
***************************************************************************************
_update_available_quantity
p2self.stock_location5
***************************************************************************************
_update_available_quantity
p1self.stock_location100
***************************************************************************************
_update_available_quantity
p2self.stock_location5
***************************************************************************************
create
{'name': 'additional', 'type': 'product'}
***************************************************************************************
create
{'name': 'S1', 'tracking': 'serial'}
***************************************************************************************
_update_available_quantity
p1self.stock_location100
***************************************************************************************
_update_available_quantity
p2self.stock_location5
***************************************************************************************
create
{'name': 'Byproduct 1', 'type': 'product', 'tracking': 'serial'}
***************************************************************************************
create
{'product_id': self.byproduct1.id, 'name': 'serial 1', 'company_id': self.env.company.id}
***************************************************************************************
create
{'product_id': self.byproduct1.id, 'name': 'serial 2', 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'Byproduct 2', 'type': 'product', 'tracking': 'lot'}
***************************************************************************************
create
{'product_id': self.byproduct2.id, 'name': 'Lot 1', 'company_id': self.env.company.id}
***************************************************************************************
create
{'product_id': self.byproduct2.id, 'name': 'Lot 2', 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'Byproduct 3', 'type': 'product', 'tracking': 'none'}
***************************************************************************************
_update_available_quantity
p1self.stock_location4
***************************************************************************************
_update_available_quantity
p2self.stock_location1
***************************************************************************************
create
{'name': 'sn used twice', 'product_id': p2.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'finished product'}
***************************************************************************************
create
{'name': 'byproduct', 'tracking': 'serial'}
***************************************************************************************
create
{'name': 'component'}
***************************************************************************************
create
{'product_id': finished_product.id, 'product_tmpl_id': finished_product.product_tmpl_id.id, 'product_uom_id': finished_product.uom_id.id, 'product_qty': 1.0, 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': component.id, 'product_qty': 1})], 'byproduct_ids': [(0, 0, {'product_id': byproduct.id, 'product_qty': 1, 'product_uom_id': byproduct.uom_id.id})]}
***************************************************************************************
create
{'name': 'sn used twice', 'product_id': byproduct.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'sn used twice', 'product_id': p2.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'Product no BoM', 'type': 'product'}
***************************************************************************************
create
{'name': 'mrp_move', 'product_id': self.product_2.id, 'product_uom': self.ref('uom.product_uom_unit'), 'production_id': mo.id, 'location_id': self.ref('stock.stock_location_stock'), 'location_dest_id': self.ref('stock.stock_location_output'), 'product_uom_qty': 0, 'quantity_done': 0}
***************************************************************************************
create
{'name': 'Product no BoM', 'type': 'product'}
***************************************************************************************
create
{'name': 'Plastic Laminate', 'type': 'product', 'uom_id': unit.id, 'uom_po_id': unit.id, 'tracking': 'serial'}
***************************************************************************************
create
{'name': 'Ply Veneer', 'type': 'product', 'uom_id': unit.id, 'uom_po_id': unit.id}
***************************************************************************************
create
{'product_tmpl_id': plastic_laminate.product_tmpl_id.id, 'product_uom_id': unit.id, 'sequence': 1, 'bom_line_ids': [(0, 0, {'product_id': ply_veneer.id, 'product_qty': 1, 'product_uom_id': unit.id, 'sequence': 1})]}
***************************************************************************************
create
{'name': 'lot1', 'product_id': plastic_laminate.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'Geyser', 'type': 'product'}
***************************************************************************************
create
{'name': 'raw Geyser', 'type': 'service'}
***************************************************************************************
create
{'product_id': finished_product.id, 'product_tmpl_id': finished_product.product_tmpl_id.id, 'product_uom_id': self.env.ref('uom.product_uom_unit').id, 'product_qty': 1.0, 'type': 'normal', 'bom_line_ids': [(5, 0), (0, 0, {'product_id': product_raw.id})]}
***************************************************************************************
_update_available_quantity
p1self.stock_location_components5.0
***************************************************************************************
_update_available_quantity
p2self.stock_location_components5.0
***************************************************************************************
_update_available_quantity
p1self.stock_location_components5.0
***************************************************************************************
_update_available_quantity
p2self.stock_location_components5.0
***************************************************************************************
_update_available_quantity
p1self.stock_location_components5.0
***************************************************************************************
_update_available_quantity
p2self.stock_location_components5.0
***************************************************************************************
_update_available_quantity
p1self.stock_location_components5.0
***************************************************************************************
_update_available_quantity
p2self.stock_location_components5.0
***************************************************************************************
_update_available_quantity
p1self.stock_location_components5.0
***************************************************************************************
_update_available_quantity
p2self.stock_location_components5.0
***************************************************************************************
_update_available_quantity
p1self.stock_location_components5.0
***************************************************************************************
_update_available_quantity
p2self.stock_location_components5.0
***************************************************************************************
create
{'name': 'final', 'type': 'product'}
***************************************************************************************
create
{'name': 'component', 'type': 'product'}
***************************************************************************************
create
{'product_id': p_final.id, 'product_tmpl_id': p_final.product_tmpl_id.id, 'product_uom_id': self.uom_unit.id, 'product_qty': 1.0, 'type': 'normal', 'consumption': 'flexible', 'bom_line_ids': [(0, 0, {'product_id': component.id, 'product_qty': 1})]}
***************************************************************************************
_update_available_quantity
componentself.stock_location_components25.0
***************************************************************************************
create
{'name': 'cL', 'category_id': uom_L.category_id.id, 'uom_type': 'smaller', 'factor': 100, 'rounding': 1}
***************************************************************************************
create
{'name': 'SuperProduct', 'uom_id': uom_units.id}
***************************************************************************************
create
{'name': 'Consumable Component', 'type': 'consu', 'uom_id': uom_cL.id, 'uom_po_id': uom_cL.id}
***************************************************************************************
create
{'name': 'Storable Component', 'type': 'product', 'uom_id': uom_cL.id, 'uom_po_id': uom_cL.id}
***************************************************************************************
_update_available_quantity
storable_componentself.env.ref('stock.stock_location_stock')100
***************************************************************************************
create
{'name': 'Volume Test'}
***************************************************************************************
create
{'name': 'Test Liters', 'category_id': categ_test.id, 'uom_type': 'reference', 'rounding': 0.001}
***************************************************************************************
create
{'name': 'Test ml', 'category_id': categ_test.id, 'uom_type': 'smaller', 'rounding': 0.01, 'factor_inv': 0.001}
***************************************************************************************
create
{'name': 'Product Component', 'type': 'product', 'tracking': 'lot', 'categ_id': self.env.ref('product.product_category_all').id, 'uom_id': uom_L.id, 'uom_po_id': uom_L.id}
***************************************************************************************
create
{'name': 'Product Final', 'type': 'product', 'tracking': 'lot', 'categ_id': self.env.ref('product.product_category_all').id, 'uom_id': uom_L.id, 'uom_po_id': uom_L.id}
***************************************************************************************
create
{'name': 'Lot Final', 'product_id': product_final.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'Lot Component', 'product_id': product_comp.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
product_compself.stock_location1
***************************************************************************************
create
{'product_id': product_final.id, 'product_tmpl_id': product_final.product_tmpl_id.id, 'product_uom_id': uom_L.id, 'product_qty': 1.0, 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': product_comp.id, 'product_qty': 375.0, 'product_uom_id': uom_ml.id})]}
***************************************************************************************
create
{'name': 'serial1', 'product_id': p_final.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
p_finalself.stock_location1
***************************************************************************************
create
{'product_id': p_final.id, 'product_uom_id': self.uom_unit.id, 'production_id': mo.id, 'location_id': self.stock_location_14.id, 'lot_id': sn2.id}
***************************************************************************************
create
{'product_tmpl_id': self.product_1.product_tmpl_id.id, 'bom_line_ids': [(0, 0, {'product_id': self.product_2.id})], 'operation_ids': [(0, 0, {'name': 'SuperOperation01', 'workcenter_id': workcenter.id}), (0, 0, {'name': 'SuperOperation01', 'workcenter_id': workcenter.id})]}
***************************************************************************************
search
[('product_id', '=', mo.bom_id.bom_line_ids[0].product_id.id), ('raw_material_production_id', '=', mo.id)]
***************************************************************************************
search
[('product_id', '=', mo.bom_id.bom_line_ids[1].product_id.id), ('raw_material_production_id', '=', mo.id)]
***************************************************************************************
search
[('product_id', '=', mo.bom_id.bom_line_ids[0].product_id.id), ('raw_material_production_id', '=', mo_backorder.id)]
***************************************************************************************
search
[('product_id', '=', mo.bom_id.bom_line_ids[1].product_id.id), ('raw_material_production_id', '=', mo_backorder.id)]
***************************************************************************************
create
{'product_id': self.product_4.id, 'product_tmpl_id': self.product_4.product_tmpl_id.id, 'product_uom_id': self.uom_unit.id, 'product_qty': 1.0, 'consumption': 'flexible', 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': self.product_2.id, 'product_qty': 1})], 'operation_ids': [(0, 0, {'name': 'amUgbidhaW1lIHBhcyBsZSBKUw==', 'workcenter_id': self.workcenter_1.id, 'time_cycle': 15, 'sequence': 1}), (0, 0, {'name': '137 Python', 'workcenter_id': self.workcenter_1.id, 'time_cycle': 1, 'sequence': 2})]}
***************************************************************************************
create
{'attribute_line_ids': [[0, 0, {'attribute_id': 2, 'value_ids': [[6, 0, [3, 4]]]}]], 'name': 'Product with variants'}
***************************************************************************************
create
{'name': 'Component'}
***************************************************************************************
create
{'product_id': False, 'product_tmpl_id': product.id, 'bom_line_ids': [(0, 0, {'product_id': component.product_variant_id.id, 'product_qty': 1})]}
***************************************************************************************
search
[('reference', '=', mo_1.name)]
***************************************************************************************
search
[('production_id', '=', mo_1.id)]
***************************************************************************************
search
[('reference', '=', mo_2.name)]
***************************************************************************************
search
[('production_id', '=', mo_2.id)]
***************************************************************************************
search
[('reference', '=', mo_3.name)]
***************************************************************************************
search
[('production_id', '=', mo_3.id)]
***************************************************************************************
create
{'name': 'WC1'}
***************************************************************************************
create
{'name': 'WC2'}
***************************************************************************************
create
{'name': 'WC3'}
***************************************************************************************
create
{'name': 'Product'}
***************************************************************************************
create
{'name': 'Component 1', 'type': 'product'}
***************************************************************************************
create
{'name': 'Component 2', 'type': 'product'}
***************************************************************************************
create
{'name': 'Component 3', 'type': 'product'}
***************************************************************************************
create
{'product_id': component_1.product_variant_id.id, 'location_id': 8, 'quantity': 100}
***************************************************************************************
create
{'product_id': component_2.product_variant_id.id, 'location_id': 8, 'quantity': 100}
***************************************************************************************
create
{'product_id': component_3.product_variant_id.id, 'location_id': 8, 'quantity': 100}
***************************************************************************************
create
{'product_tmpl_id': product.id, 'product_id': False, 'product_qty': 1, 'bom_line_ids': [[0, 0, {'product_id': component_1.product_variant_id.id, 'product_qty': 1}], [0, 0, {'product_id': component_2.product_variant_id.id, 'product_qty': 1}], [0, 0, {'product_id': component_3.product_variant_id.id, 'product_qty': 1}]], 'operation_ids': [[0, 0, {'name': 'Operation 1', 'workcenter_id': work_center_1.id}], [0, 0, {'name': 'Operation 2', 'workcenter_id': work_center_2.id}], [0, 0, {'name': 'Operation 3', 'workcenter_id': work_center_3.id}]]}
***************************************************************************************
create
{'mrp_production_backorder_line_ids': [[0, 0, {'mrp_production_id': mo.id, 'to_backorder': True}]]}
***************************************************************************************
browse
mo.id + 1
***************************************************************************************
create
{'name': 'Oatmeal Cookie'}
***************************************************************************************
create
{'name': 'Chocolate Chip Cookie'}
***************************************************************************************
browse
self.ref('uom.product_uom_dozen')
***************************************************************************************
create
{'name': 'Sugar'}
***************************************************************************************
create
{'product_id': False, 'product_tmpl_id': product1.product_tmpl_id.id, 'bom_line_ids': [(0, 0, {'product_id': component.id, 'product_qty': 1})]}
***************************************************************************************
create
{'product_id': False, 'product_tmpl_id': product1.product_tmpl_id.id, 'bom_line_ids': [(0, 0, {'product_id': component.id, 'product_qty': 10})]}
***************************************************************************************
with_user
self.user_mrp_manager
***************************************************************************************
with_user
self.user_mrp_user
***************************************************************************************
with_user
self.user_mrp_user
***************************************************************************************
create
{'name': 'mrp_move', 'product_id': self.product_2.id, 'product_uom': self.ref('uom.product_uom_unit'), 'production_id': mo.id, 'location_id': self.ref('stock.stock_location_stock'), 'location_dest_id': self.ref('stock.stock_location_output'), 'product_uom_qty': 0, 'quantity_done': 0}
***************************************************************************************
create
{'product_tmpl_id': product.product_tmpl_id.id, 'bom_line_ids': [(0, 0, {'product_id': component.id, 'product_qty': 0.2, 'product_uom_id': uom_L.id})]}
***************************************************************************************
browse
mo_1.id
***************************************************************************************
browse
mo_1.id
***************************************************************************************
browse
mo_2.id
***************************************************************************************
browse
mo_3.id
***************************************************************************************
browse
mo_3.id
***************************************************************************************
browse
mo.id
***************************************************************************************
browse
mo.id
***************************************************************************************
browse
mo2.id
***************************************************************************************
browse
mo2.id
***************************************************************************************
browse
mo4.id
***************************************************************************************
browse
mo4.id
***************************************************************************************
create
{'location_id': self.warehouse_1.lot_stock_id.id, 'product_id': self.product_1.id, 'inventory_quantity': 500}
***************************************************************************************
create
{'location_id': self.warehouse_1.lot_stock_id.id, 'product_id': self.product_2.id, 'inventory_quantity': 500}
***************************************************************************************
create
{'location_id': self.stock_location_components.id, 'product_id': self.product_2.id, 'inventory_quantity': 10}
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
action['context']
***************************************************************************************
with_context
action['context']
***************************************************************************************
with_context
action['context']
***************************************************************************************
with_context
action['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
action['context']
***************************************************************************************
search
[('product_id', '=', self.product_4.id), ('move_dest_ids', '=', move_raw_product4[0].id)]
***************************************************************************************
search
[('parent_id', '=', None)]
***************************************************************************************
search
[('parent_id', '=', all_categ_id.id)]
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'Finished Product', 'type': 'product'}
***************************************************************************************
create
{'name': 'Component', 'type': 'product', 'route_ids': [(4, warehouse.mto_pull_id.route_id.id)]}
***************************************************************************************
_update_available_quantity
componentwarehouse.wh_input_stock_loc_id100
***************************************************************************************
create
{'product_id': finished_product.id, 'product_tmpl_id': finished_product.product_tmpl_id.id, 'product_uom_id': self.uom_unit.id, 'product_qty': 1.0, 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': component.id, 'product_qty': 1.0})]}
***************************************************************************************
search
[('product_id', '=', component.id)]
***************************************************************************************
create
{'name': 'AAA', 'route_ids': [(4, self.ref('mrp.route_warehouse0_manufacture'))]}
***************************************************************************************
create
{'name': 'component'}
***************************************************************************************
create
{'product_id': product_1.id, 'product_tmpl_id': product_1.product_tmpl_id.id, 'product_uom_id': self.uom_unit.id, 'product_qty': 1.0, 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': component_1.id, 'product_qty': 1})]}
***************************************************************************************
create
{'name': 'move_orig', 'product_id': product_1.id, 'product_uom': self.ref('uom.product_uom_unit'), 'location_id': self.ref('stock.stock_location_stock'), 'location_dest_id': self.ref('stock.stock_location_output'), 'product_uom_qty': 10, 'procure_method': 'make_to_order'}
***************************************************************************************
search
[('product_id', '=', product_1.id), ('state', '=', 'confirmed')]
***************************************************************************************
search
[('move_dest_ids', 'in', move_dest.ids)]
***************************************************************************************
create
{'name': 'Plastic Bottle', 'route_ids': [(4, self.ref('mrp.route_warehouse0_manufacture'))]}
***************************************************************************************
create
{'name': 'Plastic Mold'}
***************************************************************************************
create
{'product_id': product_bottle.id, 'product_tmpl_id': product_bottle.product_tmpl_id.id, 'product_uom_id': self.uom_unit.id, 'product_qty': 1.0, 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': component_mold.id, 'product_qty': 1})]}
***************************************************************************************
create
{'name': 'move_bottle', 'product_id': product_bottle.id, 'product_uom': self.ref('uom.product_uom_unit'), 'location_id': self.ref('stock.stock_location_stock'), 'location_dest_id': self.ref('stock.stock_location_output'), 'product_uom_qty': 10, 'procure_method': 'make_to_order'}
***************************************************************************************
search
[('product_id', '=', product_bottle.id), ('state', '=', 'confirmed')]
***************************************************************************************
create
{'name': 'Clafoutis', 'route_ids': [(6, 0, [route_manufacture, route_mto])]}
***************************************************************************************
create
{'product_id': product.id, 'product_tmpl_id': product.product_tmpl_id.id, 'product_uom_id': self.uom_unit.id, 'product_qty': 1.0, 'type': 'normal'}
***************************************************************************************
create
{'name': 'Customer MTO Move', 'product_id': product.id, 'product_uom': self.ref('uom.product_uom_unit'), 'location_id': self.ref('stock.stock_location_stock'), 'location_dest_id': self.ref('stock.stock_location_output'), 'product_uom_qty': 10, 'procure_method': 'make_to_order'}
***************************************************************************************
search
[('product_id', '=', product.id)]
***************************************************************************************
create
{'name': 'egg'}
***************************************************************************************
create
move_values
***************************************************************************************
create
{'name': 'Cake', 'type': 'product', 'route_ids': [(6, 0, [route_manufacture.id])]}
***************************************************************************************
create
{'name': 'Cake Mix', 'type': 'product', 'route_ids': [(6, 0, [route_manufacture.id])]}
***************************************************************************************
create
{'name': 'Flour', 'type': 'consu'}
***************************************************************************************
create
{'product_id': product_1.id, 'product_tmpl_id': product_1.product_tmpl_id.id, 'product_uom_id': self.uom_unit.id, 'product_qty': 1, 'consumption': 'flexible', 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': product_2.id, 'product_qty': 1})]}
***************************************************************************************
create
{'product_id': product_2.id, 'product_tmpl_id': product_2.product_tmpl_id.id, 'product_uom_id': self.uom_unit.id, 'product_qty': 1, 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': product_3.id, 'product_qty': 1})]}
***************************************************************************************
create
{'name': 'Flavor Enchancer', 'type': 'product', 'route_ids': [(6, 0, [route_manufacture.id])]}
***************************************************************************************
create
{'name': 'MSG', 'type': 'consu'}
***************************************************************************************
create
{'product_id': product_4.id, 'product_tmpl_id': product_4.product_tmpl_id.id, 'product_uom_id': self.uom_unit.id, 'product_qty': 1, 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': product_5.id, 'product_qty': 1})]}
***************************************************************************************
create
{'name': 'Cake RR', 'location_id': self.warehouse.lot_stock_id.id, 'product_id': product_1.id, 'product_min_qty': 0, 'product_max_qty': 5}
***************************************************************************************
create
{'name': 'Cake Mix RR', 'location_id': self.warehouse.lot_stock_id.id, 'product_id': product_2.id, 'product_min_qty': 0, 'product_max_qty': 5}
***************************************************************************************
create
{'name': 'Flavor Enchancer RR', 'location_id': self.warehouse.lot_stock_id.id, 'product_id': product_4.id, 'product_min_qty': 0, 'product_max_qty': 5}
***************************************************************************************
create
{'name': 'Cake Delivery Order', 'picking_type_id': self.ref('stock.picking_type_out'), 'location_id': self.warehouse.lot_stock_id.id, 'location_dest_id': self.ref('stock.stock_location_customers'), 'move_lines': [(0, 0, {'name': '/', 'product_id': product_1.id, 'product_uom': product_1.uom_id.id, 'product_uom_qty': 10.0, 'procure_method': 'make_to_stock', 'location_id': self.warehouse.lot_stock_id.id, 'location_dest_id': self.ref('stock.stock_location_customers')})]}
***************************************************************************************
search
[('product_id', '=', product_1.id), ('state', '=', 'confirmed')]
***************************************************************************************
search
[('product_id', '=', product_2.id), ('state', '=', 'confirmed')]
***************************************************************************************
search
[('product_id', '=', product_4.id), ('state', '=', 'confirmed')]
***************************************************************************************
create
{'name': 'Roger'}
***************************************************************************************
create
{'name': 'product', 'type': 'product', 'route_ids': [(4, self.ref('stock.route_warehouse0_mto')), (4, self.ref('mrp.route_warehouse0_manufacture'))], 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'name': 'component', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'product_id': product.id, 'product_tmpl_id': product.product_tmpl_id.id, 'product_uom_id': product.uom_id.id, 'product_qty': 1.0, 'consumption': 'flexible', 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': component.id, 'product_qty': 1})]}
***************************************************************************************
create
{'move_type': 'direct', 'partner_id': vendor.id}
***************************************************************************************
search
[('group_id', '=', procurement_group.id)]
***************************************************************************************
search
[('product_id', '=', product.id)]
***************************************************************************************
search
[('product_id', '=', product.id)]
***************************************************************************************
run
[self.env['procurement.group'].Procurement(product, product_qty, self.uom_unit, vendor.property_stock_customer, product.name, '/', self.env.company, values)]
***************************************************************************************
browse
self.ref('stock.route_warehouse0_mto')
***************************************************************************************
Procurement
productproduct_qtyself.uom_unitvendor.property_stock_customerproduct.name'/'self.env.companyvalues
***************************************************************************************
browse
action['res_id']
***************************************************************************************
browse
action['res_id']
***************************************************************************************
create
{'name': 'Depot', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'location_in_id': self.stock_location.id, 'location_out_id': self.depot_location.id, 'category_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'name': 'Assembly Line 1', 'resource_calendar_id': self.env.ref('resource.resource_calendar_std').id}
***************************************************************************************
create
{'product_tmpl_id': self.laptop.product_tmpl_id.id, 'product_qty': 1, 'product_uom_id': unit.id, 'consumption': 'flexible', 'bom_line_ids': [(0, 0, {'product_id': self.graphics_card.id, 'product_qty': 1, 'product_uom_id': unit.id})], 'operation_ids': [(0, 0, {'name': 'Cutting Machine', 'workcenter_id': self.workcenter_1.id, 'time_cycle': 12, 'sequence': 1})]}
***************************************************************************************
search
[('action', '=', 'manufacture'), ('warehouse_id', '=', self.warehouse_1.id)]
***************************************************************************************
search
[('action', '=', 'manufacture'), ('warehouse_id', '=', self.warehouse_1.id)]
***************************************************************************************
create
{'name': '0000000000001', 'product_id': self.product_4.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': '0000000000002', 'product_id': self.product_2.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'product_id': self.laptop.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'product_tmpl_id': kit_1.product_tmpl_id.id, 'product_qty': 1.0, 'type': 'phantom'}
***************************************************************************************
create
{'product_tmpl_id': kit_2.product_tmpl_id.id, 'product_qty': 1.0, 'type': 'phantom'}
***************************************************************************************
create
{'product_tmpl_id': self.kit_parent.product_tmpl_id.id, 'product_qty': 1.0, 'type': 'phantom'}
***************************************************************************************
create
{'product_tmpl_id': kit_3.product_tmpl_id.id, 'product_qty': 1.0, 'type': 'phantom'}
***************************************************************************************
create
{'name': 'Notthat Guyagain'}
***************************************************************************************
create
{'name': 'supplier', 'usage': 'supplier', 'location_id': self.env.ref('stock.stock_location_stock').id}
***************************************************************************************
create
{'location_id': self.test_supplier.id, 'location_dest_id': self.warehouse_1.wh_input_stock_loc_id.id, 'partner_id': self.test_partner.id, 'picking_type_id': self.env.ref('stock.picking_type_in').id, 'immediate_transfer': True}
***************************************************************************************
create
{'name': self.kit_parent.name, 'product_id': self.kit_parent.id, 'quantity_done': 3, 'product_uom': self.kit_parent.uom_id.id, 'picking_id': picking.id, 'picking_type_id': self.env.ref('stock.picking_type_in').id, 'location_id': self.test_supplier.id, 'location_dest_id': self.warehouse_1.wh_input_stock_loc_id.id}
***************************************************************************************
create
{'location_id': self.test_supplier.id, 'location_dest_id': self.warehouse_1.wh_input_stock_loc_id.id, 'partner_id': self.test_partner.id, 'picking_type_id': self.env.ref('stock.picking_type_in').id, 'immediate_transfer': False}
***************************************************************************************
create
{'name': self.kit_parent.name, 'product_id': self.kit_parent.id, 'product_uom_qty': 3, 'product_uom': self.kit_parent.uom_id.id, 'picking_id': picking.id, 'picking_type_id': self.env.ref('stock.picking_type_in').id, 'location_id': self.test_supplier.id, 'location_dest_id': self.warehouse_1.wh_input_stock_loc_id.id}
***************************************************************************************
create
{'location_id': self.stock_location_14.id, 'product_id': self.graphics_card.id, 'inventory_quantity': 16.0}
***************************************************************************************
create
{'location_id': self.stock_location_14.id, 'product_id': self.product_4.id, 'inventory_quantity': 8, 'lot_id': lot_product_4.id}
***************************************************************************************
create
{'location_id': self.stock_location_14.id, 'product_id': self.product_2.id, 'inventory_quantity': 12, 'lot_id': lot_product_2.id}
***************************************************************************************
create
{'name': 'Chocolate', 'type': 'consu'}
***************************************************************************************
create
{'name': 'Choco Cake', 'type': 'product'}
***************************************************************************************
create
{'name': 'Double Choco Cake', 'type': 'product'}
***************************************************************************************
create
{'product_id': product_chococake.id, 'product_tmpl_id': product_chococake.product_tmpl_id.id, 'product_uom_id': product_chococake.uom_id.id, 'product_qty': 1.0, 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': product_chocolate.id, 'product_qty': 4})]}
***************************************************************************************
create
{'product_id': product_double_chococake.id, 'product_tmpl_id': product_double_chococake.product_tmpl_id.id, 'product_uom_id': product_double_chococake.uom_id.id, 'product_qty': 1.0, 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': product_chococake.id, 'product_qty': 2})]}
***************************************************************************************
create
{'name': 'Apple Pie', 'type': 'product'}
***************************************************************************************
create
{'name': 'Apple', 'type': 'consu'}
***************************************************************************************
create
{'product_id': product_apple_pie.id, 'product_tmpl_id': product_apple_pie.product_tmpl_id.id, 'product_uom_id': product_apple_pie.uom_id.id, 'product_qty': 1.0, 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': product_apple.id, 'product_qty': 5})]}
***************************************************************************************
create
{'name': 'Banana', 'type': 'product'}
***************************************************************************************
create
{'name': 'Chocolate', 'type': 'consu'}
***************************************************************************************
create
{'name': 'Product %s' % tracking, 'type': 'product', 'tracking': tracking, 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'location_id': stock_id, 'product_id': consumed_no_track.id, 'inventory_quantity': 3}
***************************************************************************************
create
{'location_id': stock_id, 'product_id': consumed_lot.id, 'inventory_quantity': 3, 'lot_id': Lot.create({'name': 'L1', 'product_id': consumed_lot.id, 'company_id': self.env.company.id}).id}
***************************************************************************************
create
{'location_id': stock_id, 'product_id': consumed_serial.id, 'inventory_quantity': 1, 'lot_id': Lot.create({'name': 'S1', 'product_id': consumed_serial.id, 'company_id': self.env.company.id}).id}
***************************************************************************************
create
{'location_id': stock_id, 'product_id': consumed_serial.id, 'inventory_quantity': 1, 'lot_id': Lot.create({'name': 'S2', 'product_id': consumed_serial.id, 'company_id': self.env.company.id}).id}
***************************************************************************************
create
{'location_id': stock_id, 'product_id': consumed_serial.id, 'inventory_quantity': 1, 'lot_id': Lot.create({'name': 'S3', 'product_id': consumed_serial.id, 'company_id': self.env.company.id}).id}
***************************************************************************************
create
{'name': 'Finished Product', 'type': 'product', 'tracking': 'serial'}
***************************************************************************************
create
{'name': 'Raw 1', 'type': 'product', 'tracking': 'serial'}
***************************************************************************************
create
{'name': 'Raw 2', 'type': 'product', 'tracking': 'serial'}
***************************************************************************************
create
{'name': 'Byproduct 1', 'type': 'product', 'tracking': 'serial'}
***************************************************************************************
create
{'name': 'Byproduct 2', 'type': 'product', 'tracking': 'serial'}
***************************************************************************************
create
{'product_id': product_final.id, 'product_tmpl_id': product_final.product_tmpl_id.id, 'product_uom_id': self.uom_unit.id, 'product_qty': 1.0, 'consumption': 'flexible', 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': product_1.id, 'product_qty': 1}), (0, 0, {'product_id': product_2.id, 'product_qty': 1})], 'byproduct_ids': [(0, 0, {'product_id': byproduct_1.id, 'product_qty': 1, 'product_uom_id': byproduct_1.uom_id.id}), (0, 0, {'product_id': byproduct_2.id, 'product_qty': 1, 'product_uom_id': byproduct_2.uom_id.id})]}
***************************************************************************************
create
{'product_id': product_final.id, 'name': 'Final_lot_1', 'company_id': self.env.company.id}
***************************************************************************************
create
{'product_id': product_final.id, 'name': 'Final_lot_2', 'company_id': self.env.company.id}
***************************************************************************************
create
{'product_id': finished_product.id, 'product_tmpl_id': finished_product.product_tmpl_id.id, 'product_uom_id': self.env.ref('uom.product_uom_unit').id, 'product_qty': 1.0, 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': consumed_no_track.id, 'product_qty': 1}), (0, 0, {'product_id': consumed_lot.id, 'product_qty': 1}), (0, 0, {'product_id': consumed_serial.id, 'product_qty': 1})]}
***************************************************************************************
get_lines
final_product['id']
***************************************************************************************
create
{'product_id': product_1.id, 'name': 'Raw_1_lot_1', 'company_id': self.env.company.id}
***************************************************************************************
create
{'product_id': product_2.id, 'name': 'Raw_2_lot_1', 'company_id': self.env.company.id}
***************************************************************************************
create
{'product_id': byproduct_1.id, 'name': 'Byproduct_1_lot_1', 'company_id': self.env.company.id}
***************************************************************************************
create
{'product_id': byproduct_2.id, 'name': 'Byproduct_2_lot_1', 'company_id': self.env.company.id}
***************************************************************************************
create
{'product_id': product_1.id, 'name': 'Raw_1_lot_2', 'company_id': self.env.company.id}
***************************************************************************************
create
{'product_id': product_2.id, 'name': 'Raw_2_lot_2', 'company_id': self.env.company.id}
***************************************************************************************
create
{'product_id': byproduct_1.id, 'name': 'Byproduct_1_lot_2', 'company_id': self.env.company.id}
***************************************************************************************
create
{'product_id': byproduct_2.id, 'name': 'Byproduct_2_lot_2', 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'Serial or Lot finished', 'product_id': finished_product.id, 'company_id': self.env.company.id}
***************************************************************************************
with_context
context
***************************************************************************************
_update_available_quantity
p1self.stock_location100
***************************************************************************************
_update_available_quantity
p2self.stock_location5
***************************************************************************************
create
{'name': 'lot1', 'product_id': p_final.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
p1self.stock_location100
***************************************************************************************
_update_available_quantity
p2self.stock_location5
***************************************************************************************
create
{'name': 'lot1', 'product_id': p1.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
p1self.stock_location100
***************************************************************************************
_update_available_quantity
p2self.stock_location5
***************************************************************************************
create
{'name': 'lot_final', 'product_id': p_final.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot_consumed_1', 'product_id': p1.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot_consumed_2', 'product_id': p2.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
p1self.stock_location100
***************************************************************************************
_update_available_quantity
p2self.stock_location5
***************************************************************************************
create
{'name': 'lot_1', 'product_id': p2.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot_2', 'product_id': p2.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot_3', 'product_id': p2.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
p1self.stock_location100
***************************************************************************************
_update_available_quantity
p2self.stock_location1
***************************************************************************************
_update_available_quantity
p2self.stock_location3
***************************************************************************************
_update_available_quantity
p2self.stock_location2
***************************************************************************************
create
{'name': 'lot_1', 'product_id': p2.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
p2self.stock_location3
***************************************************************************************
create
{'name': 'lot_finished_1', 'product_id': p_final.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot_2', 'product_id': p2.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
p2self.stock_location4
***************************************************************************************
create
{'name': 'lot_finished_2', 'product_id': p_final.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'QC/Unbuild', 'usage': 'internal', 'location_id': warehouse.view_location_id.id}
***************************************************************************************
create
{'name': 'QC/Unbuild -> Stock', 'warehouse_selectable': True, 'warehouse_ids': [(4, warehouse.id)], 'rule_ids': [(0, 0, {'name': 'Send Matrial QC/Unbuild -> Stock', 'action': 'push', 'picking_type_id': self.ref('stock.picking_type_internal'), 'location_src_id': unbuild_location.id, 'location_id': self.stock_location.id})]}
***************************************************************************************
create
{'product_id': finshed_product.id, 'product_tmpl_id': finshed_product.product_tmpl_id.id, 'product_uom_id': self.uom_unit.id, 'product_qty': 1.0, 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': component1.id, 'product_qty': 1}), (0, 0, {'product_id': component2.id, 'product_qty': 1})]}
***************************************************************************************
search
[('product_id', 'in', [component1.id, component2.id])]
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
_get_available_quantity
p1self.stock_location
***************************************************************************************
_get_available_quantity
p2self.stock_location
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
_get_available_quantity
p1self.stock_location
***************************************************************************************
_get_available_quantity
p2self.stock_location
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
_get_available_quantity
p1self.stock_location
***************************************************************************************
_get_available_quantity
p2self.stock_location
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
_get_available_quantity
p1self.stock_location
***************************************************************************************
_get_available_quantity
p2self.stock_location
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
_get_available_quantity
p1self.stock_location
***************************************************************************************
_get_available_quantity
p2self.stock_location
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
_get_available_quantity
p1self.stock_location
***************************************************************************************
_get_available_quantity
p2self.stock_location
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
_get_available_quantity
p1self.stock_location
***************************************************************************************
_get_available_quantity
p2self.stock_location
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
_get_available_quantity
p1self.stock_location
***************************************************************************************
_get_available_quantity
p2self.stock_location
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
_get_available_quantity
p1self.stock_location
***************************************************************************************
_get_available_quantity
p2self.stock_location
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
_get_available_quantity
p1self.stock_location
***************************************************************************************
_get_available_quantity
p2self.stock_location
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
_get_available_quantity
p1self.stock_location
***************************************************************************************
_get_available_quantity
p2self.stock_location
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
_get_available_quantity
p1self.stock_location
***************************************************************************************
_get_available_quantity
p2self.stock_location
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
_get_available_quantity
p1self.stock_location
***************************************************************************************
_get_available_quantity
p2self.stock_location
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
_get_available_quantity
p1self.stock_location
***************************************************************************************
_get_available_quantity
p2self.stock_location
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
_get_available_quantity
p1self.stock_location
***************************************************************************************
_get_available_quantity
p2self.stock_location
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
_get_available_quantity
p1self.stock_location
***************************************************************************************
_get_available_quantity
p2self.stock_location
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
_get_available_quantity
p1self.stock_location
***************************************************************************************
_get_available_quantity
p2self.stock_location
***************************************************************************************
_get_available_quantity
p2self.stock_location
***************************************************************************************
_get_available_quantity
p2self.stock_location
***************************************************************************************
_get_available_quantity
p_finalself.stock_location
***************************************************************************************
_get_available_quantity
p1self.stock_location
***************************************************************************************
_get_available_quantity
p2self.stock_location
***************************************************************************************
_get_available_quantity
p2self.stock_location
***************************************************************************************
_get_available_quantity
p2self.stock_location
***************************************************************************************
_xmlid_to_res_id
'stock.stock_location_customers'
***************************************************************************************
_update_available_quantity
self.raw_productself.warehouse.lot_stock_id4.0
***************************************************************************************
create
{'location_id': self.warehouse.wh_output_stock_loc_id.id, 'location_dest_id': self.customer_location, 'partner_id': self.env['ir.model.data']._xmlid_to_res_id('base.res_partner_4'), 'picking_type_id': self.warehouse.out_type_id.id}
***************************************************************************************
create
{'name': self.finished_product.name, 'product_id': self.finished_product.id, 'product_uom_qty': 2, 'product_uom': self.uom_unit.id, 'picking_id': picking_customer.id, 'location_id': self.warehouse.wh_output_stock_loc_id.id, 'location_dest_id': self.customer_location, 'procure_method': 'make_to_order', 'origin': 'SOURCEDOCUMENT', 'state': 'draft'}
***************************************************************************************
search
[('product_id', '=', self.finished_product.id)]
***************************************************************************************
_update_available_quantity
self.raw_productself.warehouse.lot_stock_id4.0
***************************************************************************************
create
{'location_id': self.warehouse.lot_stock_id.id, 'location_dest_id': self.customer_location, 'partner_id': self.env['ir.model.data']._xmlid_to_res_id('base.res_partner_4'), 'picking_type_id': self.warehouse.out_type_id.id}
***************************************************************************************
create
{'name': self.finished_product.name, 'product_id': self.finished_product.id, 'product_uom_qty': 2, 'picking_id': picking_customer.id, 'product_uom': self.uom_unit.id, 'location_id': self.warehouse.lot_stock_id.id, 'location_dest_id': self.customer_location, 'procure_method': 'make_to_order'}
***************************************************************************************
search
[('product_id', '=', self.finished_product.id)]
***************************************************************************************
search
[('product_id', '=', self.raw_product.id), ('location_id', '=', self.warehouse.lot_stock_id.id), ('location_dest_id', '=', self.warehouse.pbm_loc_id.id), ('picking_type_id', '=', self.warehouse.pbm_type_id.id)]
***************************************************************************************
search
[('product_id', '=', self.finished_product.id), ('location_id', '=', self.warehouse.sam_loc_id.id), ('location_dest_id', '=', self.warehouse.lot_stock_id.id), ('picking_type_id', '=', self.warehouse.sam_type_id.id)]
***************************************************************************************
search
[('product_id', '=', self.finished_product.id)]
***************************************************************************************
create
{'name': 'New product', 'type': 'product'}
***************************************************************************************
create
[{'name': 'x%s' % i, 'category_id': self.ref('uom.product_uom_categ_unit'), 'uom_type': 'bigger', 'factor_inv': i} for i in [2, 4]]
***************************************************************************************
create
{'name': 'Super Product', 'route_ids': [(4, self.ref('mrp.route_warehouse0_manufacture'))], 'type': 'product'}
***************************************************************************************
create
{'name': 'Secondary', 'type': 'product'}
***************************************************************************************
create
{'name': 'Component', 'type': 'consu'}
***************************************************************************************
create
{'product_tmpl_id': finished_product.product_tmpl_id.id, 'product_qty': 1, 'product_uom_id': two_units_uom.id, 'bom_line_ids': [(0, 0, {'product_id': component.id, 'product_qty': 1, 'product_uom_id': one_unit_uom.id})], 'byproduct_ids': [(0, 0, {'product_id': secondary_product.id, 'product_qty': 1, 'product_uom_id': four_units_uom.id})]}
***************************************************************************************
create
{'warehouse_id': warehouse.id, 'location_id': warehouse_stock_location.id, 'product_id': finished_product.id, 'product_min_qty': 2, 'product_max_qty': 2}
***************************************************************************************
search
[('product_id', '=', finished_product.id)]
***************************************************************************************
search
[('product_id', '=', secondary_product.id), ('location_id', '=', post_production_location.id), ('location_dest_id', '=', warehouse_stock_location.id)]
***************************************************************************************
_update_available_quantity
self.finished_productself.warehouse.lot_stock_id-1.0
***************************************************************************************
search
[('product_id', '=', self.wood_product.id)]
***************************************************************************************
search
[('product_id', '=', self.raw_product.id), ('location_id', '=', self.warehouse.lot_stock_id.id), ('location_dest_id', '=', self.warehouse.pbm_loc_id.id), ('picking_type_id', '=', self.warehouse.pbm_type_id.id)]
***************************************************************************************
search
[('product_id', '=', self.finished_product.id), ('location_id', '=', self.warehouse.sam_loc_id.id), ('location_dest_id', '=', self.warehouse.lot_stock_id.id), ('picking_type_id', '=', self.warehouse.sam_type_id.id)]
***************************************************************************************
_gather
self.raw_productself.warehouse.pbm_loc_id
***************************************************************************************
search
[('product_id', '=', self.finished_product.id), ('location_id', '=', self.warehouse.lot_stock_id.id), ('location_dest_id', '=', self.warehouse.wh_pack_stock_loc_id.id), ('picking_type_id', '=', self.warehouse.pick_type_id.id)]
***************************************************************************************
_xmlid_to_res_id
'base.res_partner_4'
***************************************************************************************
_xmlid_to_res_id
'base.res_partner_4'
***************************************************************************************
_gather
self.raw_productself.warehouse.lot_stock_id
***************************************************************************************
_gather
self.raw_productself.warehouse.pbm_loc_id
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
browse
res['mo_id']
***************************************************************************************
_log_activity_get_documents
{move: (new_qty, old_qty)}iterate_key'UP'
***************************************************************************************
browse
self.env.context.get('active_id')
***************************************************************************************
browse
productions_to_validate
***************************************************************************************
_for_xml_id
'mrp.act_assign_serial_numbers_production'
***************************************************************************************
search
[('company_id', '=', self.production_id.company_id.id), ('product_id', '=', self.production_id.product_id.id), ('name', 'in', serial_numbers)]
***************************************************************************************
generate_lot_names
self.next_serial_numberself.next_serial_count
***************************************************************************************
_for_xml_id
'stock_account.stock_valuation_layer_action'
***************************************************************************************
search
['|', ('product_id', 'in', self.ids), '&', ('product_id', '=', False), ('product_tmpl_id', 'in', self.mapped('product_tmpl_id').ids)]
***************************************************************************************
_bom_find
self
***************************************************************************************
search
[('byproduct_ids.product_id', '=', self.id)]
***************************************************************************************
_bom_find
self
***************************************************************************************
create
{'name': 'wc_analytic_account'}
***************************************************************************************
with_context
backorder_wizard_dict['context']
***************************************************************************************
create
{'product_id': self.product_screw.id, 'inventory_quantity': 200000, 'location_id': self.source_location_id}
***************************************************************************************
search
[('ref', 'ilike', 'MO%Product A'), ('credit', '=', 0)]
***************************************************************************************
search
[('ref', 'ilike', 'MO%Product A'), ('debit', '=', 0)]
***************************************************************************************
search
[('ref', 'ilike', 'MO%Product B'), ('credit', '=', 0)]
***************************************************************************************
search
[('ref', 'ilike', 'MO%Product B'), ('debit', '=', 0)]
***************************************************************************************
search
[('ref', 'ilike', 'UB%Product A'), ('credit', '=', 0)]
***************************************************************************************
search
[('ref', 'ilike', 'UB%Product A'), ('debit', '=', 0)]
***************************************************************************************
search
[('ref', 'ilike', 'UB%Product B'), ('credit', '=', 0)]
***************************************************************************************
search
[('ref', 'ilike', 'UB%Product B'), ('debit', '=', 0)]
***************************************************************************************
create
{'name': 'wip incoming', 'code': '000001', 'user_type_id': self.env.ref('account.data_account_type_current_assets').id}
***************************************************************************************
create
{'name': 'wip outgoing', 'code': '000002', 'user_type_id': self.env.ref('account.data_account_type_current_assets').id}
***************************************************************************************
search
[('ref', 'ilike', 'MO%Product A'), ('credit', '=', 0)]
***************************************************************************************
search
[('ref', 'ilike', 'MO%Product A'), ('debit', '=', 0)]
***************************************************************************************
search
[('ref', 'ilike', 'MO%Product B'), ('credit', '=', 0)]
***************************************************************************************
search
[('ref', 'ilike', 'MO%Product B'), ('debit', '=', 0)]
***************************************************************************************
search
[('ref', 'ilike', 'UB%Product A'), ('credit', '=', 0)]
***************************************************************************************
search
[('ref', 'ilike', 'UB%Product A'), ('debit', '=', 0)]
***************************************************************************************
search
[('ref', 'ilike', 'UB%Product B'), ('credit', '=', 0)]
***************************************************************************************
search
[('ref', 'ilike', 'UB%Product B'), ('debit', '=', 0)]
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
create
{'name': 'byproduct', 'type': 'product', 'categ_id': self.product1.product_tmpl_id.categ_id.id}
***************************************************************************************
with_user
self.allow_user
***************************************************************************************
search
[('move_finished_ids.stock_valuation_layer_ids', '!=', False), ('company_id', '=', landed_cost.company_id.id)]
***************************************************************************************
with_user
self.allow_user
***************************************************************************************
create
line_vals_list
***************************************************************************************
get_fiscal_position
partner_invoice.id
***************************************************************************************
browse
lines_to_unlink_ids
***************************************************************************************
create
{'name': 'product first serial to act repair', 'tracking': 'serial'}
***************************************************************************************
create
{'name': 'A1', 'product_id': product_to_repair.id, 'company_id': self.env.user.company_id.id}
***************************************************************************************
create
{'name': 'other first serial to remove with repair', 'tracking': 'serial'}
***************************************************************************************
create
{'name': 'B2', 'product_id': product_to_remove.id, 'company_id': self.env.user.company_id.id}
***************************************************************************************
create
{'name': 'A2', 'product_id': product_to_repair.id, 'company_id': self.env.user.company_id.id}
***************************************************************************************
create
{'move_id': subcontract_move_id.id, 'picking_id': subcontract_move_id.picking_id.id, 'product_id': self.product_id.id, 'location_id': subcontract_move_id.location_id.id, 'location_dest_id': subcontract_move_id.location_dest_id.id, 'product_uom_qty': 0, 'product_uom_id': self.product_uom_id.id, 'qty_done': quantity, 'lot_id': self.lot_producing_id and self.lot_producing_id.id}
***************************************************************************************
search
[('subcontracting_location_id', '=', False)]
***************************************************************************************
create
{'name': _('Subcontracting Location'), 'usage': 'internal', 'location_id': parent_location.id, 'company_id': company.id}
***************************************************************************************
_set_default
'property_stock_subcontractor''res.partner'subcontracting_locationcompany
***************************************************************************************
search
[('type', '=', 'subcontract')]
***************************************************************************************
concat
*list(subcontract_details_per_picking.keys())
***************************************************************************************
create
{'name': self.name, 'partner_id': self.partner_id.id}
***************************************************************************************
create
mo._get_moves_raw_values()
***************************************************************************************
create
mo._get_moves_finished_values()
***************************************************************************************
create
{'mo_id': production.id, 'product_qty': quantity_done_move}
***************************************************************************************
with_company
move.company_id
***************************************************************************************
search
[]
***************************************************************************************
search
[('location_id', 'in', subcontract_locations.ids)]
***************************************************************************************
browse
product_id
***************************************************************************************
browse
int(line_id)
***************************************************************************************
browse
int(line_id)
***************************************************************************************
create
{'name': 'Test Company'}
***************************************************************************************
search
[('bom_id', '=', self.bom.id)]
***************************************************************************************
create
{}
***************************************************************************************
create
{'name': 'xxx', 'product_id': self.comp1.id, 'product_min_qty': 0, 'product_max_qty': 0, 'location_id': self.env.user.company_id.subcontracting_location_id.id, 'group_id': pg1.id}
***************************************************************************************
search
[('group_id', '=', pg1.id)]
***************************************************************************************
_get_available_quantity
self.comp1self.subcontractor_partner1.property_stock_subcontractor
***************************************************************************************
_get_available_quantity
self.comp2self.subcontractor_partner1.property_stock_subcontractor
***************************************************************************************
_get_available_quantity
self.finishedwh.lot_stock_id
***************************************************************************************
browse
return_picking_id
***************************************************************************************
search
[('name', '=', 'Resupply Subcontractor on Order')]
***************************************************************************************
create
{'name': 'Specific partner location', 'location_id': self.env.ref('stock.stock_location_locations_partner').id, 'usage': 'internal', 'company_id': self.env.company.id}
***************************************************************************************
search
[('bom_id', '=', self.bom.id)]
***************************************************************************************
search
[('bom_id', '=', self.comp2_bom.id)]
***************************************************************************************
_get_available_quantity
self.comp1self.subcontractor_partner1.property_stock_subcontractor
***************************************************************************************
_get_available_quantity
self.comp2self.subcontractor_partner1.property_stock_subcontractor
***************************************************************************************
_get_available_quantity
self.finishedwh.lot_stock_id
***************************************************************************************
_get_available_quantity
self.comp1self.env.company.subcontracting_location_id
***************************************************************************************
_get_available_quantity
self.comp2self.env.company.subcontracting_location_id
***************************************************************************************
search
[('name', '=', 'Resupply Subcontractor on Order')]
***************************************************************************************
search
[('name', '=', 'Manufacture')]
***************************************************************************************
search
[('bom_id', '=', self.bom.id)]
***************************************************************************************
search
[('bom_id', '=', self.comp2_bom.id)]
***************************************************************************************
_get_available_quantity
self.comp1self.subcontractor_partner1.property_stock_subcontractor
***************************************************************************************
_get_available_quantity
self.comp2self.subcontractor_partner1.property_stock_subcontractor
***************************************************************************************
_get_available_quantity
self.finishedwh.lot_stock_id
***************************************************************************************
search
[('name', '=', 'Manufacture')]
***************************************************************************************
search
[('bom_id', '=', self.bom.id)]
***************************************************************************************
search
[('origin', 'ilike', '%' + picking_receipt.name + '%')]
***************************************************************************************
search
[('product_id', '=', self.comp2.id), ('location_id', '=', warehouse.lot_stock_id.id), ('location_dest_id', '=', self.env.company.subcontracting_location_id.id)]
***************************************************************************************
search
[('bom_id', '=', self.comp2_bom.id)]
***************************************************************************************
create
{'name': 'main_partner'}
***************************************************************************************
create
{'name': 'subcontractor_partner', 'parent_id': main_partner_2.id, 'company_id': self.env.ref('base.main_company').id}
***************************************************************************************
create
{'name': 'Component1', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'name': 'main_partner'}
***************************************************************************************
create
{'name': 'subcontractor_partner', 'parent_id': main_partner_2.id, 'company_id': self.env.ref('base.main_company').id}
***************************************************************************************
create
{'name': 'Component3', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
search
[('name', '=', 'Resupply Subcontractor on Order')]
***************************************************************************************
search
[('backorder_id', '=', picking_receipt.id)]
***************************************************************************************
search
[('name', '=', 'Resupply Subcontractor on Order')]
***************************************************************************************
create
{'name': 'Test children subcontractor contact', 'parent_id': self.subcontractor_partner1.id}
***************************************************************************************
search
[('bom_id', '=', self.bom.id)]
***************************************************************************************
browse
action['res_id']
***************************************************************************************
_get_available_quantity
self.comp1self.subcontractor_partner1.property_stock_subcontractor
***************************************************************************************
browse
action['res_id']
***************************************************************************************
_get_available_quantity
self.comp1self.subcontractor_partner1.property_stock_subcontractor
***************************************************************************************
create
{'product_tmpl_id': self.finished.product_tmpl_id.id, 'name': self.subcontractor_partner1.id, 'price': 10}
***************************************************************************************
create
{'product_tmpl_id': self.comp2.product_tmpl_id.id, 'name': self.subcontractor_partner1.id, 'price': 5}
***************************************************************************************
_get_report_data
self.bom.id
***************************************************************************************
create
{'name': 'main_partner'}
***************************************************************************************
create
{'name': 'Subcontractor 1', 'parent_id': main_company_1.id, 'company_id': self.env.ref('base.main_company').id}
***************************************************************************************
create
{'name': 'Component1', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id, 'tracking': 'serial'}
***************************************************************************************
create
{'name': 'Component2', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'name': 'finished', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id, 'tracking': 'lot'}
***************************************************************************************
search
[('bom_id', '=', self.bom_tracked.id)]
***************************************************************************************
create
{}
***************************************************************************************
create
{'name': 'xxx', 'product_id': self.comp1_sn.id, 'product_min_qty': 0, 'product_max_qty': 0, 'location_id': self.env.user.company_id.subcontracting_location_id.id, 'group_id': pg1.id}
***************************************************************************************
search
[('group_id', '=', pg1.id)]
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.finished_product.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.comp1_sn.id, 'company_id': self.env.company.id}
***************************************************************************************
browse
action['res_id']
***************************************************************************************
_get_available_quantity
self.comp1_snself.subcontractor_partner1.property_stock_subcontractor
***************************************************************************************
_get_available_quantity
self.comp2self.subcontractor_partner1.property_stock_subcontractor
***************************************************************************************
_get_available_quantity
self.finished_productwh.lot_stock_id
***************************************************************************************
_get_available_quantity
self.comp1_snself.subcontractor_partner1.property_stock_subcontractor
***************************************************************************************
_get_available_quantity
self.comp2self.subcontractor_partner1.property_stock_subcontractor
***************************************************************************************
_get_available_quantity
self.finished_productwh.lot_stock_id
***************************************************************************************
search
[('bom_id', '=', self.bom_tracked.id)]
***************************************************************************************
create
{'name': 'lot_comp2', 'product_id': self.comp2.id, 'company_id': self.env.company.id}
***************************************************************************************
_get_available_quantity
self.comp1_snself.subcontractor_partner1.property_stock_subcontractor
***************************************************************************************
_get_available_quantity
self.comp2self.subcontractor_partner1.property_stock_subcontractor
***************************************************************************************
_get_available_quantity
self.finished_productwh.lot_stock_id
***************************************************************************************
search
[('name', '=', 'Resupply Subcontractor on Order')]
***************************************************************************************
create
[{'name': 'SuperProduct', 'type': 'product', 'tracking': 'lot'}, {'name': 'Component', 'type': 'product', 'tracking': 'lot', 'route_ids': [(4, resupply_sub_on_order_route.id)]}]
***************************************************************************************
create
[{'name': 'lot_%s' % product.name, 'product_id': product.id, 'company_id': self.env.company.id} for product in [finished_product, component]]
***************************************************************************************
_update_available_quantity
componentself.env.ref('stock.stock_location_stock')todo_nb
***************************************************************************************
search
[('bom_id', '=', bom.id)]
***************************************************************************************
search
[('product_id', 'in', (self.comp1 | self.comp2).ids)]
***************************************************************************************
browse
action['res_id']
***************************************************************************************
search
[('partner_id', '=', self.subcontractor_partner1.id), ('state', '!=', 'done')]
***************************************************************************************
browse
action['res_id']
***************************************************************************************
create
{'name': 'serial_fin_%s' % i, 'product_id': self.finished_product.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'serials_comp1_%s' % i, 'product_id': self.comp1_sn.id, 'company_id': self.env.company.id}
***************************************************************************************
with_context
backorder_wiz['context']
***************************************************************************************
with_context
wizard_data['context']
***************************************************************************************
with_context
wizard_data['context']
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'IN 10 units @ 10.00 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.env.company.subcontracting_location_id.id, 'product_id': self.comp1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 10.0}
***************************************************************************************
create
{'name': 'IN 10 units @ 20.00 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.env.company.subcontracting_location_id.id, 'product_id': self.comp2.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 20.0}
***************************************************************************************
create
{'name': 'lot_comp2', 'product_id': self.comp2.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'A name can be a Many2one...'}
***************************************************************************************
create
[{'name': partner.id, 'product_tmpl_id': self.dining_table.product_tmpl_id.id, 'price': 150.0}, {'name': partner.id, 'product_tmpl_id': self.table_head.product_tmpl_id.id, 'price': 120.0}]
***************************************************************************************
browse
action['res_id']
***************************************************************************************
create
{'name': 'serial_fin_%s' % i, 'product_id': self.finished.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'serials_comp1_%s' % i, 'product_id': self.comp1.id, 'company_id': self.env.company.id}
***************************************************************************************
search
[]
***************************************************************************************
search
[('company_id', '=', company.id), ('default_location_src_id.usage', '=', 'supplier'), ('default_location_dest_id.usage', '=', 'customer')]
***************************************************************************************
create
vals
***************************************************************************************
search
[('route_id', '=', route.id)]
***************************************************************************************
search
[('name', '=', 'Replenish on Order (MTO)')]
***************************************************************************************
search
[('name', '=', 'Resupply Subcontractor on Order')]
***************************************************************************************
search
[('name', '=', 'Buy')]
***************************************************************************************
search
[('name', '=', 'Dropship')]
***************************************************************************************
create
{'name': 'Warehouse For subcontract', 'code': 'WFS'}
***************************************************************************************
create
{'product_tmpl_id': self.finished.product_tmpl_id.id, 'name': self.subcontractor_partner1.id}
***************************************************************************************
create
{'name': 'Toto'}
***************************************************************************************
create
{'product_tmpl_id': self.comp2.product_tmpl_id.id, 'name': partner.id}
***************************************************************************************
search
[('origin', 'ilike', so.name)]
***************************************************************************************
search
[('name', '=', 'Resupply Subcontractor on Order')]
***************************************************************************************
create
{'name': 'AAA', 'email': 'from.test@example.com'}
***************************************************************************************
create
{'name': vendor.id, 'price': 50}
***************************************************************************************
search
[('bom_id', '=', self.bom.id)]
***************************************************************************************
search
[('origin', '=', origin)]
***************************************************************************************
search
[('product_id', '=', self.comp2.id), ('location_id', '=', warehouse.lot_stock_id.id), ('location_dest_id', '=', self.subcontractor_partner1.property_stock_subcontractor.id)]
***************************************************************************************
search
[('product_id', '=', self.comp2.id), ('partner_id', '=', partner.id)]
***************************************************************************************
search
[('name', '=', 'Resupply Subcontractor on Order')]
***************************************************************************************
create
{'partner_id': self.subcontractor_partner1.id, 'order_line': [Command.create({'name': 'finished', 'product_id': self.finished.id, 'product_qty': 1.0, 'product_uom': self.finished.uom_id.id, 'price_unit': 50.0})]}
***************************************************************************************
browse
action1['res_id']
***************************************************************************************
browse
action2['res_id']
***************************************************************************************
search
[('user_id', '=', self.env.uid)]
***************************************************************************************
search
[('user_id', '=', self.env.uid)]
***************************************************************************************
search
[('user_id', '=', self.env.uid)]
***************************************************************************************
_xmlid_to_res_id
'base.group_user'
***************************************************************************************
search_count
[('user_id', '=', self.env.uid)]
***************************************************************************************
browse
project_id
***************************************************************************************
get
'partner_autocomplete'
***************************************************************************************
enrich_company
company_domainFalseself.vat
***************************************************************************************
_iap_replace_logo
company_data
***************************************************************************************
get_credits
'partner_autocomplete'
***************************************************************************************
_request_partner_autocomplete
'search'{'query': query}
***************************************************************************************
_request_partner_autocomplete
'enrich'{'domain': company_domain, 'partner_gid': partner_gid, 'vat': vat}
***************************************************************************************
_request_partner_autocomplete
'search_vat'{'vat': vat}
***************************************************************************************
search
[('code', '=ilike', country_code)]
***************************************************************************************
search
[('partner_id', '=', self.id), ('synched', '=', True)]
***************************************************************************************
search
[['code', '=ilike', country_code]]
***************************************************************************************
search
[['name', '=ilike', country_name]]
***************************************************************************************
search
[('country_id', '=', country.id), ('code', '=ilike', state_code)]
***************************************************************************************
search
[('country_id', '=', country.id), ('name', '=ilike', state_name)]
***************************************************************************************
search
[('name', '=', 'Europe')]
***************************************************************************************
_request_partner_autocomplete
'update'params
***************************************************************************************
create
{'name': 'Test Company 1'}
***************************************************************************************
create
{'name': 'Test Company 1'}
***************************************************************************************
flush
['code', 'payment_type']
***************************************************************************************
flush
['payment_method_id']
***************************************************************************************
flush
['provider', 'state']
***************************************************************************************
search
[('code', 'in', list(method_information.keys()))]
***************************************************************************************
_for_xml_id
'payment.action_payment_transaction'
***************************************************************************************
search
[('source_payment_id', '=', self.id)]
***************************************************************************************
create
transaction_vals
***************************************************************************************
search
['|', ('redirect_form_view_id', 'in', self.ids), ('inline_form_view_id', 'in', self.ids)]
***************************************************************************************
browse
partner_id
***************************************************************************************
search
domain
***************************************************************************************
search
[('journal_id.company_id', '=', acquirer.company_id.id), ('code', '=', acquirer.provider)]
***************************************************************************************
search
[('journal_id.company_id', '=', acquirer.company_id.id), ('code', '=', acquirer.provider)]
***************************************************************************************
_get
self._namename
***************************************************************************************
search
[('payment_method_id', '=', default_payment_method_id), ('journal_id', '=', acquirer.journal_id.id)]
***************************************************************************************
create
{'payment_method_id': default_payment_method_id, 'journal_id': acquirer.journal_id.id}
***************************************************************************************
browse
values['acquirer_id']
***************************************************************************************
create
payment_values
***************************************************************************************
browse
values['acquirer_id']
***************************************************************************************
browse
values['partner_id']
***************************************************************************************
search
[('source_transaction_id', '=', self.id)]
***************************************************************************************
browse
values.get('currency_id')
***************************************************************************************
browse
invoice_ids
***************************************************************************************
browse
res_id
***************************************************************************************
_for_xml_id
'payment.action_open_payment_onboarding_payment_acquirer_wizard'
***************************************************************************************
read_group
[('partner_id', 'in', self.ids)]['partner_id']['partner_id']
***************************************************************************************
sudo
sudo
***************************************************************************************
sudo
sudo
***************************************************************************************
browse
self.env['res.currency'].search([], order='id desc', limit=1).id + 1000
***************************************************************************************
search
[('active', '=', False)]
***************************************************************************************
search
[('company_id', '=', self.env.company.id)]
***************************************************************************************
create
{'move_type': 'entry', 'date': '2019-01-01', 'line_ids': [(0, 0, {'account_id': account.id, 'currency_id': self.currency_euro.id, 'debit': 100.0, 'credit': 0.0, 'amount_currency': 200.0}), (0, 0, {'account_id': account.id, 'currency_id': self.currency_euro.id, 'debit': 0.0, 'credit': 100.0, 'amount_currency': -200.0})]}
***************************************************************************************
search
[]
***************************************************************************************
search_count
[('payment_transaction_id', '=', tx.id)]
***************************************************************************************
_for_xml_id
'payment.action_payment_acquirer'
***************************************************************************************
browse
res_id
***************************************************************************************
browse
link.res_id
***************************************************************************************
browse
payment_link.res_id
***************************************************************************************
search_count
[('source_transaction_id', '=', wizard.payment_id.payment_transaction_id.id), ('operation', '=', 'refund'), ('state', 'in', ['draft', 'pending', 'authorized'])]
***************************************************************************************
create
{'acquirer_id': self.acquirer_id.id, 'name': payment_utils.build_token_name(data['additionalData'].get('cardSummary')), 'partner_id': self.partner_id.id, 'acquirer_ref': data['additionalData']['recurring.recurringDetailReference'], 'adyen_shopper_reference': data['additionalData']['recurring.shopperReference'], 'verified': True}
***************************************************************************************
search
[('source_transaction_id', '=', tx.id)]
***************************************************************************************
browse
currency_id
***************************************************************************************
create
{'amount': 1.95, 'acquirer_id': self.alipay.id, 'currency_id': self.currency.id, 'reference': custom_reference, 'partner_id': self.partner.id}
***************************************************************************************
_handle_feedback_data
'alipay'alipay_post_data
***************************************************************************************
_handle_feedback_data
'alipay'alipay_post_data
***************************************************************************************
_handle_feedback_data
'alipay'alipay_post_data
***************************************************************************************
_handle_feedback_data
'alipay'alipay_post_data
***************************************************************************************
search
[('name', 'in', res_content.get('currencies'))]
***************************************************************************************
search
[('acquirer_id', '=', acquirer.id)]
***************************************************************************************
browse
currency_id
***************************************************************************************
create
{'acquirer_id': self.acquirer_id.id, 'name': cust_profile.get('name'), 'partner_id': self.partner_id.id, 'acquirer_ref': cust_profile.get('payment_profile_id'), 'authorize_profile': cust_profile.get('profile_id'), 'authorize_payment_method_type': self.acquirer_id.authorize_payment_method_type, 'verified': True}
***************************************************************************************
_handle_feedback_data
'buckaroo'buckaroo_post_data
***************************************************************************************
_handle_feedback_data
'buckaroo'buckaroo_post_data
***************************************************************************************
_handle_feedback_data
'buckaroo'buckaroo_post_data
***************************************************************************************
browse
currency_id
***************************************************************************************
create
{'acquirer_id': self.acquirer_id.id, 'name': token_name, 'partner_id': self.partner_id.id, 'acquirer_ref': data['ALIAS'], 'verified': True}
***************************************************************************************
_get_compatible_acquirers
self.company.idself.partner.id
***************************************************************************************
_compute_reference
self.ogone.provider
***************************************************************************************
_compute_reference
self.ogone.provider
***************************************************************************************
create
{}
***************************************************************************************
_compute_reference
self.ogone.provider
***************************************************************************************
_replace_local_links
render_template
***************************************************************************************
browse
currency_id
***************************************************************************************
_handle_feedback_data
'paypal'paypal_post_data
***************************************************************************************
_handle_feedback_data
'paypal'paypal_post_data
***************************************************************************************
_handle_feedback_data
'paypal'paypal_post_data
***************************************************************************************
browse
currency_id
***************************************************************************************
_get_compatible_acquirers
self.company.idself.partner.id
***************************************************************************************
_compute_reference
self.payulatam.provider
***************************************************************************************
create
{}
***************************************************************************************
_compute_reference
self.payulatam.provider
***************************************************************************************
_handle_feedback_data
'payulatam'payulatam_post_data
***************************************************************************************
_handle_feedback_data
'payulatam'payulatam_post_data
***************************************************************************************
_get_compatible_acquirers
self.company.idself.partner.id
***************************************************************************************
_handle_feedback_data
'payulatam'payulatam_post_data
***************************************************************************************
browse
currency_id
***************************************************************************************
browse
currency_id
***************************************************************************************
_handle_feedback_data
'sips'sips_post_data
***************************************************************************************
_handle_feedback_data
'sips'sips_post_data
***************************************************************************************
_handle_feedback_data
'sips'sips_post_data
***************************************************************************************
create
{'acquirer_id': self.acquirer_id.id, 'name': payment_utils.build_token_name(payment_method['card'].get('last4')), 'partner_id': self.partner_id.id, 'acquirer_ref': customer_id, 'verified': True, 'stripe_payment_method': payment_method_id}
***************************************************************************************
search
[]
***************************************************************************************
create
{'acquirer_id': self.acquirer_id.id, 'name': payment_utils.build_token_name(payment_details_short=data['cc_summary']), 'partner_id': self.partner_id.id, 'acquirer_ref': 'fake acquirer reference', 'verified': True}
***************************************************************************************
search
[('type', '=', 'bank'), ('company_id', '=', company_id)]
***************************************************************************************
check_access_rights
'write'
***************************************************************************************
browse
bl_entries.values()
***************************************************************************************
action_remove_with_reason
self.phoneself.reason
***************************************************************************************
search
[('company_id', '=', company.id)]
***************************************************************************************
search
[('date_order', '>=', start), ('date_order', '<', end), ('state', 'not in', ['draft', 'cancel', 'invoiced']), ('company_id', '=', company.id)]
***************************************************************************************
search
[('type', 'in', ('sale', 'general')), ('company_id', '=', self.env.company.id), ('code', '=', 'POSS')]
***************************************************************************************
search
[('type', '=', 'sale'), ('company_id', '=', self.env.company.id)]
***************************************************************************************
search
[('split_transactions', '=', False), ('company_id', '=', self.env.company.id)]
***************************************************************************************
search
[('company_id', 'in', (False, self.env.company.id)), ('currency_id', '=', self.env.company.currency_id.id)]
***************************************************************************************
search_read
[('id', 'in', product_ids)]
***************************************************************************************
search
[('company_id', '=', self.env.company.id)]
***************************************************************************************
search_count
[('id', 'in', config.payment_method_ids.ids), ('company_id', '!=', config.company_id.id)]
***************************************************************************************
search
[('config_id', '=', config.id)]
***************************************************************************************
create
{'user_id': self.env.uid, 'config_id': self.id}
***************************************************************************************
search
[]
***************************************************************************************
search
[('company_id', '=', company.id), ('type', '=', 'cash')]
***************************************************************************************
search
[('company_id', '=', company.id), ('type', '=', 'bank')]
***************************************************************************************
search
[('company_id', '=', company.id), ('code', '=', 'POSS')]
***************************************************************************************
search
[('company_id', '=', self.env.company.id)]
***************************************************************************************
search
[]
***************************************************************************************
create
{'type': 'general', 'name': 'Point of Sale', 'code': 'POSS', 'company_id': company.id, 'sequence': 20}
***************************************************************************************
search
[('type', '=', 'sale'), ('company_id', '=', company.id)]
***************************************************************************************
search
[]
***************************************************************************************
concat
*(self.env.ref(it) for it in field_group_xmlids)
***************************************************************************************
browse
order['pos_session_id']
***************************************************************************************
search
[('pos_order_id', '=', order.id)]
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
read_group
[('pos_order_id', 'in', self.ids)]['pos_order_id', 'amount']['pos_order_id']
***************************************************************************************
read_group
['&', ('pos_order_id', 'in', self.ids), ('amount', '<', 0)]['pos_order_id', 'amount']['pos_order_id']
***************************************************************************************
read_group
[('order_id', 'in', self.ids)]['order_id', 'price_subtotal', 'price_subtotal_incl']['order_id']
***************************************************************************************
browse
values['session_id']
***************************************************************************************
_for_xml_id
'stock.action_picking_tree_ready'
***************************************************************************************
create
data
***************************************************************************************
create
{'name': filename, 'type': 'binary', 'datas': ticket, 'res_model': 'pos.order', 'res_id': self.ids[0], 'store_fname': filename, 'mimetype': 'image/jpeg'}
***************************************************************************************
search
domain
***************************************************************************************
browse
data['config_ids']
***************************************************************************************
search
[('config_id.rounding_method', 'in', self.ids), ('state', '!=', 'closed')]
***************************************************************************************
_get_conversion_rate
order.company_id.currency_idorder.currency_idorder.company_idorder.date_order
***************************************************************************************
_find_accounting_partner
self.partner_id
***************************************************************************************
create
{'name': filename, 'type': 'binary', 'datas': base64.b64encode(report[0]), 'store_fname': filename, 'res_model': 'pos.order', 'res_id': self.ids[0], 'mimetype': 'application/x-pdf'}
***************************************************************************************
browse
line[2]['product_id']
***************************************************************************************
next_by_code
'pos.order.line'
***************************************************************************************
_fix_tax_included_price_company
priceself.tax_idstax_ids_after_fiscal_positionself.company_id
***************************************************************************************
run
procurements
***************************************************************************************
search
[('pos_order_id', 'in', orders.ids)]
***************************************************************************************
search
['|', ('id', '=', order['data']['server_id']), ('pos_reference', '=', order['data']['name'])]
***************************************************************************************
_create_picking_from_pos_order_lines
destination_idself.linespicking_typeself.partner_id
***************************************************************************************
next_by_code
'pos.order.line'
***************************************************************************************
create
line._prepare_procurement_group_vals()
***************************************************************************************
Procurement
line.product_idproduct_qtyprocurement_uomline.order_id.partner_id.property_stock_customerline.nameline.order_id.nameline.order_id.company_idvalues
***************************************************************************************
browse
ui_order['pos_session_id']
***************************************************************************************
browse
values['order_id']
***************************************************************************************
browse
session_id
***************************************************************************************
_find_accounting_partner
payment.partner_id
***************************************************************************************
search
[('config_id', 'in', payment_method.config_ids.ids), ('state', '!=', 'closed')]
***************************************************************************************
read_group
[('session_id', 'in', self.ids)]['amount']['session_id']
***************************************************************************************
read_group
[('session_id', 'in', self.ids)]['session_id']['session_id']
***************************************************************************************
_for_xml_id
'stock.action_picking_tree_ready'
***************************************************************************************
browse
config_id
***************************************************************************************
create
{'amount_to_balance': amount_to_balance, 'account_id': default_account.id, 'account_readonly': not self.env.user.has_group('account.group_account_readonly'), 'message': _('There is a difference between the amounts to post and the amounts of the orders, it is probably caused by taxes or accounting configurations changes.')}
***************************************************************************************
create
{'journal_id': payment_method.journal_id.id, 'date': fields.Date.context_today(self), 'ref': self._get_diff_account_move_ref(payment_method), 'line_ids': [Command.create(source_vals), Command.create(dest_vals)]}
***************************************************************************************
browse
payment_method_id
***************************************************************************************
_get
'property_account_receivable_id''res.partner'
***************************************************************************************
create
{'amount': abs(amounts['amount']), 'journal_id': payment_method.journal_id.id, 'force_outstanding_account_id': outstanding_account.id, 'destination_account_id': destination_account.id, 'ref': _('Combine %s POS payments from %s') % (payment_method.name, self.name), 'pos_payment_method_id': payment_method.id, 'pos_session_id': self.id}
***************************************************************************************
create
{'amount': amounts['amount'], 'partner_id': payment.partner_id.id, 'journal_id': payment_method.journal_id.id, 'force_outstanding_account_id': outstanding_account.id, 'ref': _('%s POS payment of %s in %s') % (payment_method.name, payment.partner_id.display_name, self.name), 'pos_payment_method_id': payment_method.id, 'pos_session_id': self.id}
***************************************************************************************
search
[('picking_id', 'in', pickings.ids)]
***************************************************************************************
_find_accounting_partner
payment.partner_id
***************************************************************************************
browse
tax_ids
***************************************************************************************
browse
tax_id
***************************************************************************************
_find_accounting_partner
payment.partner_id
***************************************************************************************
search_count
[('pos_session_id', '=', session.id)]
***************************************************************************************
browse
bank_payment_method_diffs.keys()
***************************************************************************************
_create_picking_from_pos_order_lines
location_dest_idlinespicking_type
***************************************************************************************
browse
tax['tax_repartition_line_id']
***************************************************************************************
create
{'body': message, 'model': 'account.bank.statement', 'res_id': self.cash_register_id.id}
***************************************************************************************
read_group
[('session_id', '=', session.id), ('payment_method_id', '=', cash_payment_method.id)]['amount']['session_id']
***************************************************************************************
search
[('pos_session_id', '=', session.id), ('state', '!=', 'done')]
***************************************************************************************
with_context
ctx
***************************************************************************************
search
[('stock_move_id', 'in', stock_moves.ids)]
***************************************************************************************
search
[('ref', 'in', diff_lines_ref)]
***************************************************************************************
search_count
[('res_id', '=', session.id), ('res_model', '=', 'pos.session')]
***************************************************************************************
search
[('config_id', '=', self.config_id.id)]
***************************************************************************************
search
[('session_id', '=', self.id), ('state', '=', 'paid')]
***************************************************************************************
with_context
{'active_model': 'pos.session', 'active_ids': self.ids}
***************************************************************************************
browse
last_sessions[1]
***************************************************************************************
browse
pos_config_id
***************************************************************************************
search
[]
***************************************************************************************
search
[('use_pricelist', '=', True)]
***************************************************************************************
create
self._prepare_picking_vals(partner, picking_type, location_id, location_dest_id)
***************************************************************************************
create
self._prepare_picking_vals(partner, return_picking_type, location_dest_id, return_location_id)
***************************************************************************************
concat
*lines
***************************************************************************************
create
self._prepare_stock_move_vals(first_line, order_lines)
***************************************************************************************
create
ml_vals
***************************************************************************************
create
ml_vals
***************************************************************************************
create
ml_vals
***************************************************************************************
search
[('company_id', '=', self.company_id.id), ('product_id', '=', line.product_id.id), ('name', '=', lot.lot_name)]
***************************************************************************************
create
ml_vals
***************************************************************************************
create
{'company_id': self.company_id.id, 'product_id': line.product_id.id, 'name': lot.lot_name}
***************************************************************************************
create
ml_vals
***************************************************************************************
search
[('pos_type_id', '=', False)]
***************************************************************************************
browse
[order['id'] for order in self.env['pos.order'].create_from_ui([order_data])]
***************************************************************************************
create_from_ui
[order_data]
***************************************************************************************
search
[('company_id', '=', self.env.company.id)]
***************************************************************************************
create
{'name': 'Partner 1'}
***************************************************************************************
create
{'name': 'Receivable', 'code': 'RCV00', 'user_type_id': account_type_rcv.id, 'reconcile': True}
***************************************************************************************
create
{'name': 'Expense', 'code': 'EXP00', 'user_type_id': account_type_exp.id, 'reconcile': True}
***************************************************************************************
create
{'name': 'Income', 'code': 'INC00', 'user_type_id': account_type_inc.id, 'reconcile': True}
***************************************************************************************
create
{'name': 'Output', 'code': 'OUT00', 'user_type_id': account_type_exp.id, 'reconcile': True}
***************************************************************************************
create
{'name': 'Valuation', 'code': 'STV00', 'user_type_id': account_type_exp.id, 'reconcile': True}
***************************************************************************************
create
{'name': 'Stock journal', 'type': 'sale', 'code': 'STK00'}
***************************************************************************************
create
{'name': 'New product', 'standard_price': 100, 'available_in_pos': True, 'type': 'product'}
***************************************************************************************
create
{'name': 'POS journal', 'type': 'sale', 'code': 'POS00'}
***************************************************************************************
create
{'name': 'CASH journal', 'type': 'cash', 'code': 'CSH00'}
***************************************************************************************
create
{'name': 'SALE journal', 'type': 'sale', 'code': 'INV00'}
***************************************************************************************
create
{'name': 'Cash Test', 'journal_id': self.cash_journal.id, 'receivable_account_id': self.account.id}
***************************************************************************************
search
[]
***************************************************************************************
search_count
[('email_to', '=', 'test@receiptscreen.com')]
***************************************************************************************
search_count
[('state', '=', 'invoiced')]
***************************************************************************************
search_count
[('state', '=', 'paid')]
***************************************************************************************
search
[('name', '=', 'point_of_sale')]
***************************************************************************************
create
{'name': 'company 1', 'currency_id': self.currency.id}
***************************************************************************************
create
{'name': 'company 2', 'currency_id': self.currency.id}
***************************************************************************************
create
{'name': 'company 2 pricelist', 'currency_id': self.currency.id, 'company_id': self.company2.id, 'sequence': 1}
***************************************************************************************
create
{'name': 'company 1 pricelist', 'currency_id': self.currency.id, 'company_id': self.company1.id, 'sequence': 2}
***************************************************************************************
create
{'name': 'usd config'}
***************************************************************************************
create
{'name': 'universal pricelist', 'currency_id': self.currency.id, 'sequence': 2}
***************************************************************************************
create
{'name': 'usd config'}
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'Product A', 'type': 'product', 'tracking': 'serial', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'name': '1001', 'product_id': self.product2.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': '1002', 'product_id': self.product2.id, 'company_id': self.env.company.id}
***************************************************************************************
create
[{'name': 'SuperProduct Tracked', 'type': 'product', 'tracking': 'lot', 'available_in_pos': True}, {'name': 'SuperProduct Untracked', 'type': 'product', 'available_in_pos': True}]
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': wh_location.id}
***************************************************************************************
create
{'name': 'SuperLot', 'product_id': tracked_product.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
tracked_productshelf1_locationqty
***************************************************************************************
_update_available_quantity
untracked_productshelf1_locationqty
***************************************************************************************
browse
res['res_id']
***************************************************************************************
create
{'name': 'Bank Test', 'code': 'BNKT', 'type': 'bank', 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': '2010-01-01', 'rate': 2.0, 'currency_id': self.env.ref('base.EUR').id}
***************************************************************************************
create
{'name': 'PoS Sale EUR', 'type': 'sale', 'code': 'POSE', 'company_id': self.company.id, 'sequence': 12, 'currency_id': self.env.ref('base.EUR').id}
***************************************************************************************
browse
res['res_id']
***************************************************************************************
create
{'name': 'Tax 50%', 'amount_type': 'percent', 'amount': 50.0, 'price_include': 0}
***************************************************************************************
create
{'name': 'product5', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id, 'taxes_id': dummy_50_perc_tax.ids}
***************************************************************************************
browse
action['res_id']
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'add_invoice_line', 'rounding': 0.05, 'strategy': 'add_invoice_line', 'profit_account_id': self.company['default_cash_difference_income_account_id'].copy().id, 'loss_account_id': self.company['default_cash_difference_expense_account_id'].copy().id, 'rounding_method': 'HALF-UP'}
***************************************************************************************
create_from_ui
orders
***************************************************************************************
create_from_ui
[order_data]
***************************************************************************************
create_from_ui
[order_data]
***************************************************************************************
with_context
context_make_payment
***************************************************************************************
create_from_ui
orders
***************************************************************************************
create_from_ui
orders
***************************************************************************************
create_from_ui
orders
***************************************************************************************
create_from_ui
orders
***************************************************************************************
create_from_ui
orders
***************************************************************************************
create_from_ui
orders
***************************************************************************************
create_from_ui
orders
***************************************************************************************
create_from_ui
orders
***************************************************************************************
create_from_ui
orders
***************************************************************************************
create
{'partner_id': self.env.user.partner_id.id, 'name': 'Stock location', 'code': 'WH'}
***************************************************************************************
create
{'name': 'IN 2 unit @ 3 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2, 'price_unit': 3}
***************************************************************************************
create
{'name': 'IN 1 unit @ 7 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1, 'price_unit': 7}
***************************************************************************************
create
{'name': 'IN 2 unit @ 3 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2, 'price_unit': 3}
***************************************************************************************
create
{'name': 'IN 1 unit @ 6 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1, 'price_unit': 6}
***************************************************************************************
create
{'product_tmpl_id': self.product2.product_tmpl_id.id, 'fixed_price': 12.99}
***************************************************************************************
with_context
context_make_payment
***************************************************************************************
create_from_ui
orders
***************************************************************************************
browse
active_ids
***************************************************************************************
browse
active_ids
***************************************************************************************
browse
self.env.context['active_ids']
***************************************************************************************
search
[]
***************************************************************************************
search
[('journal_user', '=', True)]
***************************************************************************************
browse
self.env.context.get('active_id', False)
***************************************************************************************
browse
active_id
***************************************************************************************
browse
active_id
***************************************************************************************
browse
active_id
***************************************************************************************
_for_xml_id
'portal.portal_share_action'
***************************************************************************************
create
{'name': 'Testing Partner', 'email': 'testing_partner@example.com'}
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'Company 2'}
***************************************************************************************
with_company
company_2
***************************************************************************************
browse
result['res_id']
***************************************************************************************
with_user
cache.compute_user_id.id
***************************************************************************************
search
[]
***************************************************************************************
search
domain
***************************************************************************************
search
domain
***************************************************************************************
search
[('code', '=', code), ('program_id', 'in', self.program_ids.ids)]
***************************************************************************************
browse
unused_coupon_ids
***************************************************************************************
browse
program_ids_to_generate_coupons
***************************************************************************************
create
{'name': 'Promo Code Program - Discount on Specific Products', 'program_type': 'promotion_program', 'promo_code_usage': 'code_needed', 'promo_code': 'promocode', 'discount_apply_on': 'specific_products', 'discount_percentage': 50, 'discount_specific_product_ids': (self.whiteboard_pen | self.magnetic_board | self.desk_organizer).ids}
***************************************************************************************
create
{'name': 'Auto Promo Program - Cheapest Product', 'program_type': 'promotion_program', 'promo_code_usage': 'no_code_needed', 'discount_apply_on': 'cheapest_product', 'discount_percentage': 90}
***************************************************************************************
create
{'name': 'Auto Promo Program - Global Discount', 'program_type': 'promotion_program', 'promo_code_usage': 'no_code_needed', 'promo_applicability': 'on_next_order', 'discount_apply_on': 'on_order', 'discount_percentage': 10}
***************************************************************************************
create
{'name': 'Coupon Program - Buy 3 Take 2 Free Product', 'program_type': 'coupon_program', 'rule_products_domain': "[('name', 'ilike', 'Desk Organizer')]", 'reward_type': 'product', 'rule_min_quantity': 3, 'reward_product_id': self.desk_organizer.id, 'reward_product_quantity': 2}
***************************************************************************************
create
{'name': 'PoS Default Pricelist'}
***************************************************************************************
with_context
{'active_id': self.coupon_program.id}
***************************************************************************************
search
[]
***************************************************************************************
search
['|', ('state', '!=', 'closed'), ('rescue', '=', True)]
***************************************************************************************
create
{'name': filename, 'type': 'binary', 'datas': base64.b64encode(report[0]), 'store_fname': filename, 'res_model': 'pos.order', 'res_id': self.ids[0], 'mimetype': 'application/x-pdf'}
***************************************************************************************
search
[('id', '=', line.generated_gift_card_ids.id)]
***************************************************************************************
create
[self._build_gift_card() for _ in range(int(self.qty))]
***************************************************************************************
search
[('module_pos_hr', '=', 'True')]
***************************************************************************************
search
[('state', '=', 'opened'), ('user_id', '=', self.env.uid)]
***************************************************************************************
search
[('create_date', '<', expired_creation_date)]
***************************************************************************************
search
[('floor_id.pos_config_id', 'in', self.ids)]
***************************************************************************************
read_group
domain['table_id']'table_id'
***************************************************************************************
search
[('config_id', 'in', confs.ids), ('state', '!=', 'closed')]
***************************************************************************************
search
[('config_id', 'in', confs.ids), ('state', '!=', 'closed')]
***************************************************************************************
create
{'name': 'Kitchen Printer', 'proxy_ip': 'localhost'}
***************************************************************************************
create
{'name': 'Drinks'}
***************************************************************************************
create
{'name': 'Bar', 'barcode_nomenclature_id': self.env.ref('barcodes.default_barcode_nomenclature').id, 'module_pos_restaurant': True, 'is_table_management': True, 'iface_splitbill': True, 'iface_printbill': True, 'iface_orderline_notes': True, 'printer_ids': [(4, printer.id)], 'iface_start_categ_id': drinks_category.id, 'start_category': True, 'pricelist_id': self.env.ref('product.list0').id}
***************************************************************************************
create
{'name': 'Main Floor', 'pos_config_id': pos_config.id}
***************************************************************************************
create
{'name': 'T5', 'floor_id': main_floor.id, 'seats': 4, 'position_h': 100, 'position_v': 100}
***************************************************************************************
create
{'name': 'T4', 'floor_id': main_floor.id, 'seats': 4, 'shape': 'square', 'position_h': 150, 'position_v': 100}
***************************************************************************************
create
{'name': 'T2', 'floor_id': main_floor.id, 'seats': 4, 'position_h': 250, 'position_v': 100}
***************************************************************************************
create
{'name': 'Second Floor', 'pos_config_id': pos_config.id}
***************************************************************************************
create
{'name': 'T1', 'floor_id': second_floor.id, 'seats': 4, 'shape': 'square', 'position_h': 100, 'position_v': 150}
***************************************************************************************
create
{'name': 'T3', 'floor_id': second_floor.id, 'seats': 4, 'position_h': 100, 'position_v': 250}
***************************************************************************************
_set_default
'property_account_receivable_id''res.partner'account_receivablemain_company
***************************************************************************************
create
{'name': 'Sales Journal - Test', 'code': 'TSJ', 'type': 'sale', 'company_id': main_company.id}
***************************************************************************************
create
{'name': 'Cash Test', 'code': 'TCJ', 'type': 'cash', 'company_id': main_company.id}
***************************************************************************************
create
{'available_in_pos': True, 'list_price': 2.2, 'name': 'Coca-Cola', 'weight': 0.01, 'pos_categ_id': drinks_category.id, 'categ_id': self.env.ref('point_of_sale.product_category_pos').id, 'taxes_id': [(6, 0, [])]}
***************************************************************************************
create
{'available_in_pos': True, 'list_price': 2.2, 'name': 'Water', 'weight': 0.01, 'pos_categ_id': drinks_category.id, 'categ_id': self.env.ref('point_of_sale.product_category_pos').id, 'taxes_id': [(6, 0, [])]}
***************************************************************************************
create
{'available_in_pos': True, 'list_price': 2.2, 'name': 'Minute Maid', 'weight': 0.01, 'pos_categ_id': drinks_category.id, 'categ_id': self.env.ref('point_of_sale.product_category_pos').id, 'taxes_id': [(6, 0, [])]}
***************************************************************************************
create
{'name': 'Restaurant Pricelist'}
***************************************************************************************
search
[('pos_reference', 'ilike', '%-0001')]
***************************************************************************************
search
[('pos_reference', 'ilike', '%-0002')]
***************************************************************************************
search
[('pos_reference', 'ilike', '%-0003')]
***************************************************************************************
search
[('pos_reference', 'ilike', '%-0004')]
***************************************************************************************
search_count
[('amount_total', '=', 4.4), ('state', '=', 'draft')]
***************************************************************************************
search_count
[('amount_total', '=', 4.4), ('state', '=', 'paid')]
***************************************************************************************
search_count
[('amount_total', '=', 4.4), ('state', '=', 'draft')]
***************************************************************************************
search_count
[('amount_total', '=', 2.2), ('state', '=', 'draft')]
***************************************************************************************
search_count
[('amount_total', '=', 4.4), ('state', '=', 'paid')]
***************************************************************************************
read_group
[('session_id.state', '=', 'opened'), ('config_id.crm_team_id', 'in', self.ids)]['price_total:sum', 'config_id']['config_id']
***************************************************************************************
search_count
[('config_id.crm_team_id', '=', team.id), ('state', '=', 'opened')]
***************************************************************************************
search
['|', ('company_id', '=', self.company_id.id), ('company_id', '=', False)]
***************************************************************************************
_get_conversion_rate
order.company_id.currency_idorder.pricelist_id.currency_idorder.company_iddate_order
***************************************************************************************
browse
waiting_picking_ids
***************************************************************************************
create
{'order_id': line.sale_order_origin_id.id, 'product_id': line.product_id.id, 'price_unit': line.price_unit, 'product_uom_qty': 0, 'tax_id': [(6, 0, line.tax_ids.ids)], 'is_downpayment': True, 'discount': line.discount, 'sequence': sale_lines and sale_lines[-1].sequence + 1 or 10}
***************************************************************************************
create_from_ui
orders
***************************************************************************************
search
[('rounding', '<', rounding)]
***************************************************************************************
read_group
[('categ_id', 'child_of', self.ids)]['categ_id']['categ_id']
***************************************************************************************
search
domain
***************************************************************************************
_for_xml_id
'product.action_open_label_layout'
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
browse
self._context['uom']
***************************************************************************************
search_count
domain
***************************************************************************************
browse
self._context['uom']
***************************************************************************************
browse
self._context['currency']
***************************************************************************************
name_search
pricelist_id_or_name
***************************************************************************************
_search
[('name', '=', self._context.get('partner_id')), '|', ('product_code', operator, name), ('product_name', operator, name)]
***************************************************************************************
browse
[pricelist_name_search[0][0]]
***************************************************************************************
browse
pricelist_id_or_name
***************************************************************************************
browse
self._context['uom']
***************************************************************************************
browse
self._context['uom']
***************************************************************************************
browse
partner_id
***************************************************************************************
browse
self.env.context['categ_id']
***************************************************************************************
flush
['price', 'currency_id', 'company_id']
***************************************************************************************
browse
item_ids
***************************************************************************************
browse
[prod_id]
***************************************************************************************
with_company
company_id
***************************************************************************************
search
['|', ('company_id', '=', False), ('company_id', '=', self.env.company.id)]
***************************************************************************************
browse
[qty_uom_id]
***************************************************************************************
precision_get
'Product Price'
***************************************************************************************
browse
[self._context['uom']]
***************************************************************************************
search
[('standard_price', operator, value)]
***************************************************************************************
search
domain
***************************************************************************************
_for_xml_id
'product.action_open_label_layout'
***************************************************************************************
browse
self._get_variant_id_for_combination(filtered_combination)
***************************************************************************************
browse
self._context['uom']
***************************************************************************************
browse
self._context['currency']
***************************************************************************************
browse
k
***************************************************************************************
browse
v
***************************************************************************************
name_search
pricelist_id_or_name
***************************************************************************************
browse
vals.get('uom_id')
***************************************************************************************
browse
vals.get('uom_po_id')
***************************************************************************************
browse
exclusion
***************************************************************************************
browse
pricelist_data[0][0]
***************************************************************************************
browse
pricelist_id_or_name
***************************************************************************************
concat
*combination_tuple
***************************************************************************************
browse
self._context['uom']
***************************************************************************************
_set_default
'property_product_pricelist''res.partner'pricelistnew_company
***************************************************************************************
_set_default
'property_product_pricelist''res.partner'pricelistcompany
***************************************************************************************
browse
currency_id
***************************************************************************************
search
[('discount_policy', '=', 'without_discount')]
***************************************************************************************
_get_partner_pricelist_multi
self.ids
***************************************************************************************
search
[('country_group_ids.country_ids.code', '=', partner.country_id and partner.country_id.code or False)]
***************************************************************************************
_get
'property_product_pricelist''res.partner''res.partner,%s' % partner.id
***************************************************************************************
_set_multi
'property_product_pricelist'partner._name{partner.id: partner.property_product_pricelist or default_for_country.id}
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
browse
values['name']
***************************************************************************************
browse
self.env.registry.populated_models['product.product']
***************************************************************************************
create
{'group_product_pricelist': True, 'group_sale_pricelist': True}
***************************************************************************************
search
[('active', '=', True)]
***************************************************************************************
browse
attribute_ids
***************************************************************************************
search
[('id', 'in', p_tmpl_ids), ('has_configurable_attributes', '=', True)]
***************************************************************************************
browse
product_variants_ids
***************************************************************************************
create
{'group_product_variant': True}
***************************************************************************************
browse
attr_id
***************************************************************************************
browse
values['product_template_attribute_value_id']
***************************************************************************************
search
[]
***************************************************************************************
browse
pricelist_id
***************************************************************************************
create
{'name': self.product_name, 'default_code': self.product_code}
***************************************************************************************
create
{'name': 'Office Lamp'}
***************************************************************************************
create
{'name': 'Office Chair'}
***************************************************************************************
create
{'name': 'Sale pricelist', 'item_ids': [(0, 0, {'compute_price': 'formula', 'base': 'list_price', 'price_discount': 10, 'product_id': self.usb_adapter.id, 'applied_on': '0_product_variant'}), (0, 0, {'compute_price': 'formula', 'base': 'list_price', 'price_surcharge': -0.5, 'product_id': self.datacard.id, 'applied_on': '0_product_variant'})]}
***************************************************************************************
create
{'name': '1 tonne of spam', 'uom_id': self.uom_ton.id, 'uom_po_id': self.uom_ton.id, 'list_price': tonne_price, 'type': 'consu'}
***************************************************************************************
create
{'pricelist_id': self.public_pricelist.id, 'applied_on': '0_product_variant', 'compute_price': 'formula', 'base': 'list_price', 'min_quantity': 3, 'price_surcharge': -10, 'product_id': spam_id.id}
***************************************************************************************
create
{'name': 'Mouse'}
***************************************************************************************
create
{'name': 'Color'}
***************************************************************************************
create
{'name': 'Red', 'attribute_id': color_attribute.id}
***************************************************************************************
create
{'name': 'Green', 'attribute_id': color_attribute.id}
***************************************************************************************
create
{'product_tmpl_id': mouse.id, 'attribute_id': color_attribute.id, 'value_ids': [(6, 0, [color_red.id, color_green.id])]}
***************************************************************************************
create
{'product_tmpl_id': self.computer.id, 'product_template_attribute_value_ids': [(6, 0, combination.ids)], 'active': False}
***************************************************************************************
create
{'product_tmpl_id': self.computer.id, 'product_template_attribute_value_ids': [(6, 0, combination.ids)], 'active': True}
***************************************************************************************
create
{'name': 'Mouse'}
***************************************************************************************
create
{'name': 'Color'}
***************************************************************************************
create
{'name': 'Red', 'attribute_id': color_attribute.id}
***************************************************************************************
create
{'name': 'Green', 'attribute_id': color_attribute.id}
***************************************************************************************
create
{'product_tmpl_id': mouse.id, 'attribute_id': color_attribute.id, 'value_ids': [(6, 0, [color_red.id, color_green.id])]}
***************************************************************************************
create
{'name': 'Blue', 'attribute_id': color_attribute.id}
***************************************************************************************
create
{'name': 'Yellow', 'attribute_id': color_attribute.id}
***************************************************************************************
create
{'product_tmpl_id': mouse.id, 'attribute_id': color_attribute.id, 'value_ids': [(6, 0, [color_blue.id, color_yellow.id])]}
***************************************************************************************
create
{'name': 'many combinations'}
***************************************************************************************
create
{'name': 'many combinations'}
***************************************************************************************
create
{'product_tmpl_id': self.computer.id, 'product_template_attribute_value_ids': [(6, 0, combination.ids)]}
***************************************************************************************
create
{'name': 'att %s' % i, 'create_variant': 'dynamic', 'sequence': i}
***************************************************************************************
create
[{'attribute_id': product_attribute.id, 'product_tmpl_id': product_template.id, 'value_ids': [(6, 0, product_attribute.value_ids.ids)]}]
***************************************************************************************
create
{'name': 'att %s' % i, 'create_variant': 'dynamic', 'sequence': i}
***************************************************************************************
create
[{'attribute_id': product_attribute.id, 'product_tmpl_id': product_template.id, 'value_ids': [(6, 0, product_attribute.value_ids.ids)]}]
***************************************************************************************
create
{'product_tmpl_id': self.computer_case.id, 'attribute_id': self.hdd_attribute.id, 'value_ids': [(6, 0, [])]}
***************************************************************************************
create
{'product_tmpl_id': self.computer_case.id, 'attribute_id': self.ram_attribute.id, 'value_ids': [(6, 0, [self.ssd_256.id])]}
***************************************************************************************
create
{'name': '32 GB', 'attribute_id': self.ram_attribute.id}
***************************************************************************************
create
[{'name': 'val %s' % j, 'attribute_id': product_attribute.id, 'sequence': j}]
***************************************************************************************
create
[{'name': 'val %s/%s' % (i, j), 'attribute_id': product_attribute.id, 'sequence': j}]
***************************************************************************************
create
{'name': 'Ready Mat'}
***************************************************************************************
create
{'name': 'Wood Corner'}
***************************************************************************************
create
{'name': 'Desk Combination', 'categ_id': self.category_5_id}
***************************************************************************************
create
{'name': 'Customizable Desk'}
***************************************************************************************
create
{'name': 'Corner Desk Right Sit', 'categ_id': self.category_5_id}
***************************************************************************************
create
{'name': 'Large Cabinet', 'categ_id': self.category_5_id, 'standard_price': 800.0}
***************************************************************************************
create
{'name': 'Super nice monitor', 'categ_id': self.category_5_id, 'list_price': 1000.0}
***************************************************************************************
create
[{'name': self.res_partner_1.id, 'product_tmpl_id': self.ipad_mini.product_tmpl_id.id, 'delay': 3, 'min_qty': 1, 'price': 750}, {'name': self.res_partner_4.id, 'product_tmpl_id': self.ipad_mini.product_tmpl_id.id, 'delay': 3, 'min_qty': 1, 'price': 790}, {'name': self.res_partner_4.id, 'product_tmpl_id': self.ipad_mini.product_tmpl_id.id, 'delay': 3, 'min_qty': 3, 'price': 785}, {'name': self.res_partner_4.id, 'product_tmpl_id': self.monitor.product_tmpl_id.id, 'delay': 3, 'min_qty': 3, 'price': 100}]
***************************************************************************************
create
{'name': 'Storage Box', 'categ_id': self.category_5_id}
***************************************************************************************
create
{'name': 'Office Chair', 'categ_id': self.category_5_id}
***************************************************************************************
create
{'name': 'Acoustic Bloc Screens', 'categ_id': self.category_5_id}
***************************************************************************************
create
{'name': 'Office Furniture', 'parent_id': self.env.ref('product.product_category_1').id}
***************************************************************************************
create
{'name': 'Virtual Home Staging'}
***************************************************************************************
create
{'name': 'Boudin', 'type': 'consu'}
***************************************************************************************
create
{'name': 'Wood Corner'}
***************************************************************************************
create
{'name': 'Azure Interior'}
***************************************************************************************
create
{'name': 'Saucisson Inc.'}
***************************************************************************************
create
{'name': 'Size'}
***************************************************************************************
create
{'name': 'S', 'attribute_id': self.size_attr.id}
***************************************************************************************
create
{'name': 'M', 'attribute_id': self.size_attr.id}
***************************************************************************************
create
{'name': 'L', 'attribute_id': self.size_attr.id}
***************************************************************************************
create
{'name': 'Shirt', 'attribute_line_ids': [(0, 0, {'attribute_id': self.size_attr.id, 'value_ids': [(6, 0, [self.size_attr_value_l.id])]})]}
***************************************************************************************
search
[('attribute_line_ids', '=', 'M')]
***************************************************************************************
search
[('attribute_line_ids', '=', 'Size')]
***************************************************************************************
search
[('attribute_line_ids', '=', 'L')]
***************************************************************************************
create
{'name': 'Slip'}
***************************************************************************************
name_search
'Shirt'[]'not ilike'None
***************************************************************************************
create
{'name': 'Size'}
***************************************************************************************
create
{'name': 'S', 'attribute_id': self.size_attr.id}
***************************************************************************************
create
{'name': 'M', 'attribute_id': self.size_attr.id}
***************************************************************************************
create
{'name': 'L', 'attribute_id': self.size_attr.id}
***************************************************************************************
create
{'name': 'Sofa', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id, 'attribute_line_ids': [(0, 0, {'attribute_id': self.size_attr.id, 'value_ids': [(4, self.size_attr_value_s.id)]})]}
***************************************************************************************
create
{'name': 'Sofa', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id, 'attribute_line_ids': [(0, 0, {'attribute_id': self.prod_att_1.id, 'value_ids': [(4, self.prod_attr1_v2.id)]}), (0, 0, {'attribute_id': self.size_attr.id, 'value_ids': [(4, self.size_attr_value_s.id)]})]}
***************************************************************************************
create
{'name': 'Sofa', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id, 'attribute_line_ids': [(0, 0, {'attribute_id': self.prod_att_1.id, 'value_ids': [(4, self.prod_attr1_v2.id)]}), (0, 0, {'attribute_id': self.size_attr.id, 'value_ids': [(4, self.size_attr_value_s.id), (4, self.size_attr_value_m.id)]})]}
***************************************************************************************
create
{'name': 'Sofa', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id, 'attribute_line_ids': [(0, 0, {'attribute_id': self.prod_att_1.id, 'value_ids': [(4, self.prod_attr1_v1.id), (4, self.prod_attr1_v2.id)]}), (0, 0, {'attribute_id': self.size_attr.id, 'value_ids': [(4, self.size_attr_value_s.id), (4, self.size_attr_value_m.id), (4, self.size_attr_value_l.id)]})]}
***************************************************************************************
create
{'name': 'Sofa', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id, 'attribute_line_ids': [(0, 0, {'attribute_id': self.prod_att_1.id, 'value_ids': [(4, self.prod_attr1_v1.id), (4, self.prod_attr1_v2.id)]}), (0, 0, {'attribute_id': self.size_attr.id, 'value_ids': [(4, self.size_attr_value_s.id), (4, self.size_attr_value_m.id)]})]}
***************************************************************************************
create
{'name': 'Test Copy', 'attribute_line_ids': [(0, 0, {'attribute_id': self.size_attr.id, 'value_ids': [(4, self.size_attr_value_s.id), (4, self.size_attr_value_m.id)]})]}
***************************************************************************************
create
{'name': 'CB', 'currency_id': self.env.ref('base.VEF').id}
***************************************************************************************
create
{'name': 'template'}
***************************************************************************************
create
{'name': 'template'}
***************************************************************************************
create
{'name': 'Size', 'create_variant': 'no_variant', 'value_ids': [(0, 0, {'name': 'S'}), (0, 0, {'name': 'M'}), (0, 0, {'name': 'L'})]}
***************************************************************************************
create
{'name': 'Sofa', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id, 'attribute_line_ids': [(0, 0, {'attribute_id': self.size.id, 'value_ids': [(4, self.size_S.id)]})]}
***************************************************************************************
create
{'name': 'Sofa', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id}
***************************************************************************************
create
{'name': 'Sofa', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id, 'attribute_line_ids': [(0, 0, {'attribute_id': self.size.id, 'value_ids': [(6, 0, self.size.value_ids.ids)]})]}
***************************************************************************************
create
{'name': 'Sofa', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id}
***************************************************************************************
create
{'name': 'Sofa', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id, 'attribute_line_ids': [(0, 0, {'attribute_id': self.size.id, 'value_ids': [(4, self.size_S.id)]}), (0, 0, {'attribute_id': self.prod_att_1.id, 'value_ids': [(4, self.prod_attr1_v1.id), (4, self.prod_attr1_v2.id)]})]}
***************************************************************************************
create
{'name': 'Sofa', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id}
***************************************************************************************
create
{'name': 'Sofa', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id, 'attribute_line_ids': [(0, 0, {'attribute_id': self.size.id, 'value_ids': [(6, 0, self.size.value_ids.ids)]}), (0, 0, {'attribute_id': self.prod_att_1.id, 'value_ids': [(4, self.prod_attr1_v1.id), (4, self.prod_attr1_v2.id)]})]}
***************************************************************************************
create
{'name': 'Sofa', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id}
***************************************************************************************
create
{'name': 'Sofax', 'uom_id': self.uom_unit.id, 'uom_po_id': self.uom_unit.id, 'attribute_line_ids': [(0, 0, {'attribute_id': self.prod_att_1.id, 'value_ids': [(6, 0, self.prod_attr1_v1.ids)]})]}
***************************************************************************************
create
{'name': 'Toto', 'attribute_line_ids': [(0, 0, {'attribute_id': attribute.id, 'value_ids': [(6, 0, attribute.value_ids.ids)]}) for attribute in self.attributes]}
***************************************************************************************
create
{'name': 'Toto', 'attribute_line_ids': [(0, 0, {'attribute_id': attribute.id, 'value_ids': [(6, 0, attribute.value_ids.ids)]}) for attribute in self.attributes]}
***************************************************************************************
create
{'name': 'Toto', 'attribute_line_ids': [(0, 0, {'attribute_id': attribute.id, 'value_ids': [(6, 0, attribute.value_ids.ids)]}) for attribute in self.attributes]}
***************************************************************************************
create
{'name': 'Toto', 'attribute_line_ids': [(0, 0, {'attribute_id': attribute.id, 'value_ids': [(6, 0, attribute.value_ids.ids)]}) for attribute in self.attributes]}
***************************************************************************************
create
{'name': 'Toto', 'attribute_line_ids': [(0, 0, {'attribute_id': attribute.id, 'value_ids': [(6, 0, attribute.value_ids.ids)]}) for attribute in self.attributes]}
***************************************************************************************
create
{'name': 'Toto', 'attribute_line_ids': [(0, 0, {'attribute_id': attribute.id, 'value_ids': [(6, 0, attribute.value_ids.ids)]}) for attribute in self.attributes]}
***************************************************************************************
create
{'name': 'Color'}
***************************************************************************************
create
{'name': 'template'}
***************************************************************************************
create
[{'name': color, 'attribute_id': product_attribute.id, 'sequence': i} for (i, color) in enumerate(self.colors)]
***************************************************************************************
create
{'attribute_id': product_attribute.id, 'product_tmpl_id': self.template.id, 'value_ids': [(6, 0, color_values.ids)]}
***************************************************************************************
create
{'name': 'color', 'sequence': 1}
***************************************************************************************
create
[{'name': n, 'sequence': i, 'attribute_id': self.pa_color.id} for (i, n) in enumerate(['white', 'black'])]
***************************************************************************************
create
{'name': 'size', 'sequence': 2}
***************************************************************************************
create
[{'name': n, 'sequence': i, 'attribute_id': self.pa_size.id} for (i, n) in enumerate(['s', 'm'])]
***************************************************************************************
create
{'name': 'consume product', 'attribute_line_ids': self._get_add_all_attributes_command()}
***************************************************************************************
create
{'name': 'Dynamic', 'create_variant': 'dynamic', 'value_ids': [(0, False, {'name': 'ValueDynamic'})]}
***************************************************************************************
create
{'name': 'cimanyd', 'attribute_line_ids': [(0, False, {'attribute_id': dynamic_attr.id, 'value_ids': [(4, dynamic_attr.value_ids[0].id, False)]})]}
***************************************************************************************
create
{'name': 'kardon'}
***************************************************************************************
create
{'name': 'test product', 'attribute_line_ids': [(0, 0, {'attribute_id': pa_color.id, 'value_ids': [(6, 0, [pav_color_white.id])]})]}
***************************************************************************************
search
[('attribute_line_id', '=', template.attribute_line_ids.id), ('product_attribute_value_id', '=', pav_color_white.id)]
***************************************************************************************
search
[('product_tmpl_id', '=', test_template.id), ('product_template_attribute_value_ids', 'in', ptav.id), ('product_template_attribute_value_ids', 'in', sofa_attr1_v2.id)]
***************************************************************************************
create
{'name': 'Toto', 'attribute_line_ids': [(0, 0, {'attribute_id': attribute.id, 'value_ids': [(6, 0, attribute.value_ids.ids)]}) for attribute in self.attributes]}
***************************************************************************************
search
[('product_tmpl_id', '=', test_template.id), ('product_template_attribute_value_ids', 'in', value_1.id), ('product_template_attribute_value_ids', 'in', value_2.id)]
***************************************************************************************
create
{'name': 'James Bond', 'email': 'james.bond@yopmail.com'}
***************************************************************************************
search
[]
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.customer.id, 'invoice_line_ids': [(0, 0, {'name': 'Walter PPK', 'quantity': 1, 'price_unit': 123, 'product_id': self.product_a.id})]}
***************************************************************************************
search
[('id', '>', id_max), ('subject', '=', 'YOUR PRODUCT')]
***************************************************************************************
search
[]
***************************************************************************************
create
{'move_type': 'out_invoice', 'partner_id': self.customer.id, 'invoice_line_ids': [(0, 0, {'name': 'Walter PPK', 'quantity': 1, 'price_unit': 123, 'product_id': self.product_a.id})]}
***************************************************************************************
create
{'login': 'test_public_user', 'name': 'test_public_user', 'email': False, 'groups_id': [(6, 0, [self.env.ref('base.group_public').id])]}
***************************************************************************************
search
[('id', '>', id_max), ('subject', '=', 'YOUR PRODUCT')]
***************************************************************************************
_get_id
'product.template'
***************************************************************************************
search
[('alert_date', '<=', fields.Date.today()), ('product_expiry_reminded', '=', False)]
***************************************************************************************
search
[('lot_id', 'in', alert_lots.ids), ('quantity', '>', 0), ('location_id.usage', '=', 'internal')]
***************************************************************************************
browse
product_id
***************************************************************************************
search_count
[('activity_type_id', '=', activity_id), ('res_model_id', '=', self.env.ref('stock.model_stock_production_lot').id), ('res_id', '=', self.lot1_productAAA.id)]
***************************************************************************************
search_count
[('activity_type_id', '=', activity_id), ('res_model_id', '=', self.env.ref('stock.model_stock_production_lot').id), ('res_id', '=', self.lot1_productAAA.id)]
***************************************************************************************
search
[('activity_type_id', '=', activity_id), ('res_model_id', '=', self.env.ref('stock.model_stock_production_lot').id), ('res_id', '=', self.lot1_productAAA.id)]
***************************************************************************************
search_count
[('activity_type_id', '=', activity_id), ('res_model_id', '=', self.env.ref('stock.model_stock_production_lot').id), ('res_id', '=', self.lot1_productAAA.id)]
***************************************************************************************
search_count
[('activity_type_id', '=', activity_id), ('res_model_id', '=', self.env.ref('stock.model_stock_production_lot').id), ('res_id', '=', self.lot1_productAAA.id)]
***************************************************************************************
search_count
[('activity_type_id', '=', activity_id), ('res_model_id', '=', self.env.ref('stock.model_stock_production_lot').id), ('res_id', '=', self.lot1_productBBB.id)]
***************************************************************************************
search_count
[('activity_type_id', '=', activity_id), ('res_model_id', '=', self.env.ref('stock.model_stock_production_lot').id), ('res_id', '=', self.lot1_productCCC.id)]
***************************************************************************************
create
{'name': "Apple's Joe", 'company_id': self.env.ref('base.main_company').id}
***************************************************************************************
search
[('product_id', '=', self.apple_product.id)]
***************************************************************************************
create
{'name': "Apple's Joe", 'company_id': self.env.ref('base.main_company').id}
***************************************************************************************
search
[('product_id', '=', self.apple_product.id)]
***************************************************************************************
create
{'name': 'Cider & Son', 'company_id': self.env.ref('base.main_company').id}
***************************************************************************************
browse
self.env.context.get('button_validate_picking_ids')
***************************************************************************************
browse
picking_to_validate
***************************************************************************************
search_count
[('cron_id', '=', ir_cron_fetch_image.id)]
***************************************************************************************
search_count
[('cron_id', '=', ir_cron_fetch_image.id)]
***************************************************************************************
browse
self._context.get('active_ids')
***************************************************************************************
search_count
[('cron_id', '=', ir_cron_fetch_image.id)]
***************************************************************************************
search
[('image_fetch_pending', '=', True)]
***************************************************************************************
browse
self._context.get('active_ids')
***************************************************************************************
flush
['price_unit', 'quantity', 'balance', 'product_id', 'display_type']
***************************************************************************************
flush
['state', 'payment_state', 'move_type', 'invoice_date', 'company_id']
***************************************************************************************
flush
['list_price']
***************************************************************************************
create
{'name': 'Supplier'}
***************************************************************************************
create
{'name': 'Customer'}
***************************************************************************************
create
{'name': 'Ipad', 'standard_price': 500.0, 'list_price': 750.0}
***************************************************************************************
create
[{'move_type': 'in_invoice', 'partner_id': supplier.id, 'invoice_line_ids': [(0, 0, {'product_id': ipad.id, 'quantity': 10.0, 'price_unit': 300.0})]}, {'move_type': 'in_invoice', 'partner_id': supplier.id, 'invoice_line_ids': [(0, 0, {'product_id': ipad.id, 'quantity': 4.0, 'price_unit': 450.0})]}, {'move_type': 'out_invoice', 'partner_id': customer.id, 'invoice_line_ids': [(0, 0, {'product_id': ipad.id, 'quantity': 20.0, 'price_unit': 750.0})]}, {'move_type': 'out_invoice', 'partner_id': customer.id, 'invoice_line_ids': [(0, 0, {'product_id': ipad.id, 'quantity': 10.0, 'price_unit': 550.0})]}]
***************************************************************************************
create
[{'name': 'PA1', 'create_variant': 'always', 'sequence': 1}, {'name': 'PA2', 'create_variant': 'always', 'sequence': 2}, {'name': 'PA3', 'create_variant': 'dynamic', 'sequence': 3}, {'name': 'PA4', 'create_variant': 'no_variant', 'sequence': 4}]
***************************************************************************************
create
[{'name': 'PAV' + str(product_attribute.sequence) + str(i), 'attribute_id': product_attribute.id} for i in range(1, 3) for product_attribute in product_attributes]
***************************************************************************************
create
{'name': 'Matrix', 'type': 'consu', 'uom_id': self.ref('uom.product_uom_unit'), 'uom_po_id': self.ref('uom.product_uom_unit'), 'attribute_line_ids': [(0, 0, {'attribute_id': attribute.id, 'value_ids': [(6, 0, attribute.value_ids.ids)]}) for attribute in product_attributes]}
***************************************************************************************
search
[('product_attribute_value_id.name', '=', pav_name)]
***************************************************************************************
read_group
[('analytic_account_id', 'in', self.ids)]['analytic_account_id']['analytic_account_id']
***************************************************************************************
search
[('analytic_account_id', 'in', self.ids)]
***************************************************************************************
search_count
[('project_id', 'in', projects.ids)]
***************************************************************************************
search_count
[('stage_id.fold', '=', False), ('create_date', '>=', start), ('create_date', '<', end), ('company_id', '=', company.id), ('display_project_id', '!=', False)]
***************************************************************************************
read_group
[('project_id', 'in', self.ids), '|', ('stage_id.fold', '=', False), ('stage_id', '=', False)]['project_id', 'display_project_id:count']['project_id']
***************************************************************************************
_for_xml_id
'base.action_attachment'
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
read_group
[('project_id', 'in', self.ids)]['project_id']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_sharings.ids)]['project_id']['project_id']
***************************************************************************************
browse
task_ids
***************************************************************************************
create
{'project_ids': self.ids}
***************************************************************************************
_for_xml_id
'project.rating_rating_action_view_project_rating'
***************************************************************************************
_for_xml_id
'project.action_project_task_user_tree'
***************************************************************************************
_for_xml_id
'project.open_view_project_all' if not self.user_has_groups('project.group_project_stages') else 'project.open_view_project_all_group_stage'
***************************************************************************************
search
[('display_project_id', '=', self.id)]
***************************************************************************************
create
{'name': values.get('name', _('Unknown Analytic Account')), 'company_id': values.get('company_id') or self.env.company.id, 'partner_id': values.get('partner_id'), 'active': True}
***************************************************************************************
_xmlid_to_res_id
'base.group_user'
***************************************************************************************
search
[('user_id', '=', self.env.uid), ('task_id', 'in', self.ids)]
***************************************************************************************
read_group
[('recurrence_id', 'in', recurring_tasks.recurrence_id.ids)]['id']'recurrence_id'
***************************************************************************************
browse
stage_id
***************************************************************************************
read_group
[('analytic_account_id', 'in', self.analytic_account_id.ids)]['analytic_account_id']['analytic_account_id']
***************************************************************************************
browse
[res['analytic_account_id'][0] for res in projects_read_group if res['analytic_account_id'] and res['analytic_account_id_count'] == 1]
***************************************************************************************
browse
subtype_ids
***************************************************************************************
_get
'project.task'
***************************************************************************************
create
{'name': project.name, 'company_id': project.company_id.id, 'partner_id': project.partner_id.id, 'active': True}
***************************************************************************************
_get_next_recurring_dates
date + timedelta(days=delta)task.repeat_intervaltask.repeat_unittask.repeat_typetask.repeat_untiltask.repeat_on_monthtask.repeat_on_yeartask._get_weekdays(WEEKS.get(task.repeat_week))task.repeat_daytask.repeat_weektask.repeat_month
***************************************************************************************
read_group
[('depend_on_ids', 'in', tasks_with_dependency.ids)]['depend_on_ids']['depend_on_ids']
***************************************************************************************
search
search_domain
***************************************************************************************
search
recurrence_domain
***************************************************************************************
search
[('depend_on_ids', 'in', self.ids)]
***************************************************************************************
browse
self._context['default_project_id']
***************************************************************************************
_lang_get
self.env.user.lang
***************************************************************************************
search
[('res_id', '=', task.id), ('res_model', '=', 'project.task')]
***************************************************************************************
browse
project_id
***************************************************************************************
create
rec_values
***************************************************************************************
_get_ids
'project.task'
***************************************************************************************
_render
'project.task_track_depending_tasks'{'child': self, 'child_subtype': child_subtype_info}
***************************************************************************************
_mail_find_partner_from_emails
email_list
***************************************************************************************
_mail_find_partner_from_emails
email_list
***************************************************************************************
search
[('stage_id', 'in', self.ids)]
***************************************************************************************
search
[('project_id', 'in', self.ids), ('recurring_task', '=', True)]
***************************************************************************************
_xmlid_to_res_id
'mail.mt_note'
***************************************************************************************
_xmlid_to_res_id
'mail.mt_note'
***************************************************************************************
browse
project_id
***************************************************************************************
browse
parent_id
***************************************************************************************
create
rec_values
***************************************************************************************
browse
project_id
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[('id', 'in', list(mapped_result.keys()))]
***************************************************************************************
browse
result['project_id']
***************************************************************************************
search
[]
***************************************************************************************
with_user
with_user or self.env.user
***************************************************************************************
with_context
{'no_reset_password': True, 'mail_create_nosubscribe': True}
***************************************************************************************
with_context
{'mail_create_nolog': True}
***************************************************************************************
with_context
{'mail_create_nolog': True}
***************************************************************************************
with_context
{'mail_create_nolog': True}
***************************************************************************************
with_context
{'mail_create_nolog': True}
***************************************************************************************
with_user
self.user_projectuser
***************************************************************************************
with_user
self.user_projectuser
***************************************************************************************
with_user
self.user_projectuser
***************************************************************************************
with_user
self.user_projectuser
***************************************************************************************
with_user
self.user_projectuser
***************************************************************************************
with_user
self.user_projectuser
***************************************************************************************
create
{'name': 'Burndown Chart Test', 'privacy_visibility': 'employees', 'alias_name': 'project+burndown_chart', 'type_ids': [Command.link(stage_id) for stage_id in stages.ids]}
***************************************************************************************
create
{'name': 'Task A', 'priority': 0, 'project_id': project.id, 'stage_id': todo_stage.id}
***************************************************************************************
create
{'name': 'Task F', 'priority': 0, 'project_id': project.id, 'stage_id': todo_stage.id}
***************************************************************************************
with_context
{'tracking_disable': True}
***************************************************************************************
with_context
{'tracking_disable': True}
***************************************************************************************
with_context
{'tracking_disable': True, 'default_parent_id': self.task_1.id, 'default_project_id': self.project_company_b.id}
***************************************************************************************
with_context
{'tracking_disable': True}
***************************************************************************************
with_context
{'tracking_disable': True}
***************************************************************************************
with_context
{'tracking_disable': True}
***************************************************************************************
with_user
self.user_projectuser
***************************************************************************************
with_user
self.user_projectuser
***************************************************************************************
with_user
self.user_projectmanager
***************************************************************************************
browse
self.task_1.id
***************************************************************************************
with_user
self.user_projectuser
***************************************************************************************
with_user
self.user_noone
***************************************************************************************
with_user
self.user_public
***************************************************************************************
message_process
modelmail
***************************************************************************************
search
[(target_field, '=', subject)]
***************************************************************************************
search
[(target_field, '=', subject)]
***************************************************************************************
with_context
{'tracking_disable': True}
***************************************************************************************
with_context
{'tracking_disable': True}
***************************************************************************************
create
{'res_model_id': self.env['ir.model']._get('project.task').id, 'res_id': first_task.id, 'parent_res_model_id': self.env['ir.model']._get('project.project').id, 'parent_res_id': self.project_pigs.id, 'rated_partner_id': self.partner_2.id, 'partner_id': self.partner_2.id, 'rating': 5, 'consumed': False}
***************************************************************************************
create
{'res_model_id': self.env['ir.model']._get('project.task').id, 'res_id': first_task.id, 'parent_res_model_id': self.env['ir.model']._get('project.project').id, 'parent_res_id': self.project_pigs.id, 'rated_partner_id': self.partner_2.id, 'partner_id': self.partner_2.id, 'rating': 3, 'consumed': True}
***************************************************************************************
with_context
{'mail_create_nolog': True}
***************************************************************************************
_get
'project.task'
***************************************************************************************
_get
'project.project'
***************************************************************************************
_get
'project.task'
***************************************************************************************
_get
'project.project'
***************************************************************************************
search
domain
***************************************************************************************
search
domain
***************************************************************************************
search
domain
***************************************************************************************
search
[('project_id', '=', self.project_recurring.id)]
***************************************************************************************
create
{'name': 'Parent Task', 'project_id': self.project_recurring.id}
***************************************************************************************
search
domain
***************************************************************************************
create
{'name': 'test recurring task', 'project_id': self.project_recurring.id, 'recurring_task': True, 'repeat_interval': 1, 'repeat_unit': 'week', 'repeat_type': 'after', 'repeat_number': 2, 'mon': True}
***************************************************************************************
create
{'name': 'test recurring task', 'project_id': self.project_recurring.id, 'recurring_task': True, 'repeat_interval': 1, 'repeat_unit': 'week', 'repeat_type': 'after', 'repeat_number': 2, 'mon': False, 'tue': False, 'wed': False, 'thu': False, 'fri': False, 'sat': False, 'sun': False}
***************************************************************************************
search
domain
***************************************************************************************
search_count
domain
***************************************************************************************
search_count
domain
***************************************************************************************
search_count
domain
***************************************************************************************
search_count
domain
***************************************************************************************
search_count
domain
***************************************************************************************
search_count
domain
***************************************************************************************
search_count
domain
***************************************************************************************
search_count
domain
***************************************************************************************
search_count
domain
***************************************************************************************
search_count
domain
***************************************************************************************
search_count
domain
***************************************************************************************
search_count
domain
***************************************************************************************
search_count
domain
***************************************************************************************
search_count
domain
***************************************************************************************
search_count
domain
***************************************************************************************
search_count
domain
***************************************************************************************
search_count
domain
***************************************************************************************
search_count
domain
***************************************************************************************
search_count
domain
***************************************************************************************
search_count
domain
***************************************************************************************
search_count
domain
***************************************************************************************
search_count
domain
***************************************************************************************
create
{'res_model': 'project.project', 'res_id': self.project_portal.id, 'access_mode': 'edit'}
***************************************************************************************
create
{'access_mode': 'edit', 'res_model': 'project.project', 'res_id': self.project_cows.id, 'partner_ids': [Command.link(self.user_portal.partner_id.id)]}
***************************************************************************************
create
{'access_mode': 'edit', 'res_model': 'project.project', 'res_id': self.project_cows.id, 'partner_ids': [Command.link(self.user_portal.partner_id.id)]}
***************************************************************************************
with_context
{'tracking_disable': True, 'default_project_id': self.project_portal.id}
***************************************************************************************
with_context
{'tracking_disable': True, 'default_project_id': self.project_portal.id}
***************************************************************************************
create
{'access_mode': 'edit', 'res_model': 'project.project', 'res_id': self.project_portal.id, 'partner_ids': [Command.link(self.partner_portal.id)]}
***************************************************************************************
search
[('model', '=', 'project.task'), ('type', '=', 'form')]
***************************************************************************************
create
{'name': 'a', 'sequence': 1}
***************************************************************************************
create
{'name': 'b', 'sequence': 10}
***************************************************************************************
with_context
{'tracking_disable': True}
***************************************************************************************
with_context
{'tracking_disable': True, 'default_project_id': self.project_pigs.id}
***************************************************************************************
with_context
{'tracking_disable': True}
***************************************************************************************
with_context
{'tracking_disable': True, 'default_project_id': self.project_pigs.id}
***************************************************************************************
with_context
{'tracking_disable': True, 'default_project_id': self.project_pigs.id}
***************************************************************************************
with_context
{'tracking_disable': True, 'default_project_id': self.project_pigs.id}
***************************************************************************************
_get_template_values
self.project_pigs
***************************************************************************************
with_context
{'default_project_id': self.project_pigs.id}
***************************************************************************************
with_context
{'default_project_id': self.project_pigs.id}
***************************************************************************************
with_context
{'default_project_id': self.project_pigs.id}
***************************************************************************************
with_context
{'default_project_id': self.project_pigs.id}
***************************************************************************************
with_context
{'default_project_id': self.project_pigs.id}
***************************************************************************************
with_context
{'default_project_id': self.project_pigs.id}
***************************************************************************************
with_context
{'default_project_id': self.project_pigs.id}
***************************************************************************************
with_context
{'default_project_id': self.project_pigs.id}
***************************************************************************************
with_context
{'default_project_id': self.project_pigs.id}
***************************************************************************************
create
{'name': 'My Chicken Project'}
***************************************************************************************
create
{'name': 'My Ducks Project'}
***************************************************************************************
create
{'group_project_task_dependencies': enabled}
***************************************************************************************
create
{'group_project_task_dependencies': True}
***************************************************************************************
_get
'project.project'
***************************************************************************************
_for_xml_id
'project.action_view_task'
***************************************************************************************
_for_xml_id
'project.open_task_type_form'
***************************************************************************************
_for_xml_id
'project.action_view_all_task'
***************************************************************************************
read_group
[('analytic_account_id', '!=', False), ('analytic_account_id', 'in', self.analytic_account_id.ids)]['analytic_account_id']['analytic_account_id']
***************************************************************************************
search
[('analytic_account_id', '!=', False), ('analytic_account_id', 'in', self.analytic_account_id.ids)]
***************************************************************************************
_for_xml_id
'hr_expense.hr_expense_actions_all'
***************************************************************************************
read_group
[('account_analytic_id', '!=', False), ('account_analytic_id', 'in', self.analytic_account_id.ids)]['account_analytic_id', 'order_id:count_distinct']['account_analytic_id']
***************************************************************************************
search
[('order_line.account_analytic_id', '!=', False), ('order_line.account_analytic_id', 'in', self.analytic_account_id.ids)]
***************************************************************************************
read_group
[('id', 'in', self.ids)]['calendar_id', 'ids:array_agg(id)', 'resource_ids:array_agg(resource_id)', 'min_date_from:min(date_from)', 'max_date_to:max(date_to)']['calendar_id']
***************************************************************************************
read_group
[('resource_calendar_id', 'in', self.calendar_id.ids)]['resource_calendar_id', 'ids:array_agg(id)']['resource_calendar_id']
***************************************************************************************
read_group
[('employee_id', 'in', list(employee_ids_set)), ('date_from', '<=', max_date), ('date_to', '>=', min_date), ('state', 'not in', ('cancel', 'refuse'))]['date_from_list:array_agg(date_from)', 'date_to_list:array_agg(date_to)', 'employee_id']['employee_id']
***************************************************************************************
browse
employee['ids']
***************************************************************************************
browse
res['resource_ids'] if res['resource_ids'] and res['resource_ids'][0] else []
***************************************************************************************
browse
res['ids']
***************************************************************************************
create
{'name': 'My Test Company'}
***************************************************************************************
create
{'name': 'Part Time Calendar', 'company_id': self.test_company.id, 'hours_per_day': 6, 'attendance_ids': attendance_ids}
***************************************************************************************
create
{'name': 'John Doe', 'company_id': self.test_company.id, 'resource_calendar_id': self.test_company.resource_calendar_id.id}
***************************************************************************************
create
{'name': 'John Smith', 'company_id': self.test_company.id, 'resource_calendar_id': self.test_company.resource_calendar_id.id}
***************************************************************************************
create
{'name': 'Jane Doe', 'company_id': self.test_company.id, 'resource_calendar_id': self.part_time_calendar.id}
***************************************************************************************
create
{'name': 'Test', 'calendar_id': self.test_company.resource_calendar_id.id, 'date_from': leave_start_datetime, 'date_to': leave_end_datetime}
***************************************************************************************
create
{'name': 'Test', 'calendar_id': self.part_time_calendar.id, 'date_from': leave_start_datetime, 'date_to': leave_end_datetime}
***************************************************************************************
search
[('date', '=', day_off), ('task_id', '=', leave_task.id)]
***************************************************************************************
create
{'name': 'A nice Leave Type', 'requires_allocation': 'no'}
***************************************************************************************
create
{'name': 'Leave Type with timesheet generation', 'requires_allocation': 'no', 'timesheet_generate': True, 'timesheet_project_id': self.internal_project.id, 'timesheet_task_id': self.internal_task_leaves.id}
***************************************************************************************
create
{'name': 'Leave Type without timesheet generation', 'requires_allocation': 'no', 'timesheet_generate': False, 'timesheet_project_id': False, 'timesheet_task_id': False}
***************************************************************************************
search
journal_domain
***************************************************************************************
search
[('order_line.invoice_lines.analytic_line_ids.account_id', '=', self.id)]
***************************************************************************************
search_count
[('order_line.invoice_lines.analytic_line_ids.account_id', '=', account.id)]
***************************************************************************************
_for_xml_id
'purchase.action_purchase_order_report_all'
***************************************************************************************
read_group
domain['product_id', 'product_uom_qty']['product_id']
***************************************************************************************
_for_xml_id
'purchase.action_purchase_order_report_all'
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
_for_xml_id
'account.action_move_in_invoice_type'
***************************************************************************************
search
[('summary', '=', _('Date Updated')), ('res_model_id', '=', 'purchase.order'), ('res_id', '=', self.id), ('user_id', '=', self.user_id.id)]
***************************************************************************************
_get_conversion_rate
order.company_id.currency_idorder.currency_idorder.company_idorder.date_order
***************************************************************************************
get_fiscal_position
self.partner_id.id
***************************************************************************************
browse
ctx['default_template_id']
***************************************************************************************
browse
ctx['default_template_id']
***************************************************************************************
_fix_tax_included_price_company
self.product_id.uom_id._compute_price(self.product_id.standard_price, po_line_uom)self.product_id.supplier_taxes_idself.taxes_idself.company_id
***************************************************************************************
_fix_tax_included_price_company
seller.priceself.product_id.supplier_taxes_idself.taxes_idself.company_id
***************************************************************************************
_fix_tax_included_price_company
seller.priceproduct_taxestaxescompany_id
***************************************************************************************
_xmlid_lookup
'mail.email_compose_message_wizard_form'
***************************************************************************************
browse
self.env.registry.populated_models['res.partner']
***************************************************************************************
concat
*partners_by_company.get(False, [])
***************************************************************************************
browse
values['company_id']
***************************************************************************************
browse
values['product_id']
***************************************************************************************
browse
values['order_id']
***************************************************************************************
concat
*partners
***************************************************************************************
_get_query_currency_table
{'multi_company': True, 'date': {'date_to': fields.Date.today()}}
***************************************************************************************
with_user
self.purchase_user
***************************************************************************************
with_user
purchase_user_2
***************************************************************************************
with_user
purchase_user_2
***************************************************************************************
browse
self.purchase_order.action_create_invoice()['res_id']
***************************************************************************************
search
self.wizard.create_entries()['domain']
***************************************************************************************
search
self.wizard.create_entries()['domain']
***************************************************************************************
search
[('summary', '=', 'Date Updated'), ('res_model_id', '=', 'purchase.order'), ('res_id', '=', po.id)]
***************************************************************************************
create
{'name': "I'm a packaging", 'product_id': self.product_a.id, 'qty': 1.0}
***************************************************************************************
create
{'name': "I'm also a packaging", 'product_id': self.product_a.id, 'qty': 12.0}
***************************************************************************************
create
{'partner_id': self.partner_a.id}
***************************************************************************************
create
{'name': 'Pairs', 'category_id': uom_units.category_id.id, 'uom_type': 'bigger', 'factor_inv': 2, 'rounding': 1}
***************************************************************************************
create
product_data
***************************************************************************************
create
product_data
***************************************************************************************
search
[('code', '=', 'purchase.order')]
***************************************************************************************
browse
-po.id
***************************************************************************************
create
{'name': 'default'}
***************************************************************************************
create
{'name': 'manual'}
***************************************************************************************
create
{'analytic_id': analytic_account_default.id, 'product_id': self.product_order.id}
***************************************************************************************
search
[('purchase_line_id', '=', purchase_order.order_line.id)]
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'currency_id': self.currency_data['currency'].id, 'order_line': [(0, 0, {'name': self.product_a.name, 'product_id': self.product_a.id, 'product_qty': 1.0, 'product_uom': uom_dozen.id, 'price_unit': 100.0, 'date_planned': datetime.today(), 'taxes_id': False}), (0, 0, {'name': self.product_b.name, 'product_id': self.product_b.id, 'product_qty': 1.0, 'product_uom': uom_dozen.id, 'price_unit': 200.0, 'date_planned': datetime.today(), 'taxes_id': False})]}
***************************************************************************************
search
[('order_id', '=', po.id), ('product_id', '=', self.product_a.id), ('company_id', '=', self.company_data['company'].id)]
***************************************************************************************
search
[('order_id', '=', po.id), ('product_id', '=', self.product_b.id), ('company_id', '=', self.company_data['company'].id)]
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': lines_vals}
***************************************************************************************
_bom_find
self.env['product.product'].browse(product_ids)
***************************************************************************************
browse
product_ids
***************************************************************************************
search
[('category_id', '=', self.categ_kgm.id), ('uom_type', '=', 'reference')]
***************************************************************************************
search
[('category_id', '=', self.categ_unit.id), ('uom_type', '=', 'reference')]
***************************************************************************************
create
{'product_tmpl_id': self.kit_1.product_tmpl_id.id, 'product_qty': 1.0, 'type': 'phantom'}
***************************************************************************************
create
{'product_tmpl_id': self.kit_2.product_tmpl_id.id, 'product_qty': 1.0, 'type': 'phantom'}
***************************************************************************************
create
{'product_tmpl_id': self.kit_parent.product_tmpl_id.id, 'product_qty': 1.0, 'type': 'phantom'}
***************************************************************************************
create
{'product_tmpl_id': self.kit_3.product_tmpl_id.id, 'product_qty': 1.0, 'type': 'phantom'}
***************************************************************************************
create
{'name': 'My Test Partner'}
***************************************************************************************
browse
res['res_id']
***************************************************************************************
browse
res['res_id']
***************************************************************************************
create
{'name': 'aaa', 'email': 'from.test@example.com'}
***************************************************************************************
create
{'name': vendor1.id, 'price': 50}
***************************************************************************************
create
{'name': 'component', 'type': 'product', 'route_ids': [(4, buy_route.id)], 'seller_ids': [(6, 0, [supplier_info1.id])]}
***************************************************************************************
create
{'name': 'finished', 'type': 'product', 'route_ids': [(4, manufacture_route.id)]}
***************************************************************************************
create
{'name': 'A RR', 'location_id': warehouse.lot_stock_id.id, 'product_id': component.id, 'route_id': buy_route.id, 'product_min_qty': 0, 'product_max_qty': 0}
***************************************************************************************
create
{'name': 'A RR', 'location_id': warehouse.lot_stock_id.id, 'product_id': finished.id, 'route_id': manufacture_route.id, 'product_min_qty': 0, 'product_max_qty': 0}
***************************************************************************************
create
{'product_id': finished.id, 'product_tmpl_id': finished.product_tmpl_id.id, 'product_uom_id': self.uom_unit.id, 'product_qty': 1.0, 'consumption': 'flexible', 'operation_ids': [], 'type': 'normal', 'bom_line_ids': [(0, 0, {'product_id': component.id, 'product_qty': 1})]}
***************************************************************************************
create
{'partner_id': self.partner.id, 'order_line': [(0, 0, {'name': self.kit_1.name, 'product_id': self.kit_1.id, 'product_qty': 1, 'product_uom': self.kit_1.uom_id.id, 'price_unit': 60.0, 'date_planned': fields.Datetime.now()})]}
***************************************************************************************
search
[('product_id', '=', component.id)]
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
res['context']
***************************************************************************************
with_context
res['context']
***************************************************************************************
with_context
res['context']
***************************************************************************************
browse
grid['product_template_id']
***************************************************************************************
search
[('product_id', 'in', self.matrix_template.product_variant_ids.ids)]
***************************************************************************************
search
[('product_id', 'in', self.matrix_template.product_variant_ids.ids)]
***************************************************************************************
_xmlid_to_res_id
'mail.mt_note'
***************************************************************************************
_xmlid_to_res_id
'mail.mt_note'
***************************************************************************************
search
[]
***************************************************************************************
search
[('vendor_id', '=', self.vendor_id.id), ('state', '=', 'ongoing'), ('type_id.quantity_copy', '=', 'none'), ('company_id', '=', self.company_id.id)]
***************************************************************************************
search
[('product_id', '=', vals.get('product_id')), ('name', '=', res.requisition_id.vendor_id.id)]
***************************************************************************************
create
{'name': purchase_requisition.vendor_id.id, 'product_id': self.product_id.id, 'product_tmpl_id': self.product_id.product_tmpl_id.id, 'price': self.price_unit, 'currency_id': self.requisition_id.currency_id.id, 'purchase_requisition_line_id': self.id}
***************************************************************************************
next_by_code
'purchase.requisition.purchase.tender'
***************************************************************************************
next_by_code
'purchase.requisition.blanket.order'
***************************************************************************************
create
{'name': 'Blanket test', 'quantity_copy': 'none'}
***************************************************************************************
create
{'line_ids': [line1, line2], 'type_id': requisition_type.id, 'vendor_id': self.res_partner_1.id}
***************************************************************************************
search
[('name', '=', seller_partner1.id), ('product_id', '=', self.product_09.id), ('purchase_requisition_id', '=', requisition_blanket.id)]
***************************************************************************************
search
[('name', '=', seller_partner1.id), ('product_id', '=', self.product_13.id), ('purchase_requisition_id', '=', requisition_blanket.id)]
***************************************************************************************
create
{'name': 'test6'}
***************************************************************************************
create
{'name': 'test6'}
***************************************************************************************
create
{'name': 'vendor6'}
***************************************************************************************
create
{'product_id': product.id, 'name': vendor.id}
***************************************************************************************
create
{'name': 'Blanket test', 'quantity_copy': 'none'}
***************************************************************************************
create
{'line_ids': [line1], 'type_id': requisition_type.id, 'vendor_id': vendor.id}
***************************************************************************************
create
{'product_id': product.id, 'product_qty': 14.0, 'requisition_id': requisition_blanket.id, 'price_unit': 10}
***************************************************************************************
search
[('id', '=', supplierinfo09.id)]
***************************************************************************************
search
[('id', '=', supplierinfo13.id)]
***************************************************************************************
search
[('product_id', '=', product.id), ('name', '=', vendor.id)]
***************************************************************************************
search
[('warehouse_id.company_id', '=', company.id), ('code', '=', 'incoming')]
***************************************************************************************
search
[('state', '=', 'draft'), ('origin', '=', op.name)]
***************************************************************************************
_prepare_tender_values
*procurement
***************************************************************************************
browse
self.ref('stock.warehouse0')
***************************************************************************************
run
[self.env['procurement.group'].Procurement(self.product_13, 14, self.env['uom.uom'].browse(self.ref('uom.product_uom_unit')), warehouse.lot_stock_id, '/', '/', self.env.company, {'warehouse_id': warehouse, 'date_planned': date_planned})]
***************************************************************************************
search
[('product_id', '=', self.product_13.id), ('product_qty', '=', 14.0)]
***************************************************************************************
create
{'name': 'AAA', 'email': 'from.test@example.com'}
***************************************************************************************
create
{'name': 'BBB', 'email': 'from.test2@example.com'}
***************************************************************************************
create
{'name': vendor1.id, 'price': 50}
***************************************************************************************
create
{'name': 'Usb Keyboard', 'type': 'product', 'uom_id': unit, 'uom_po_id': unit, 'seller_ids': [(6, 0, [supplier_info1.id])], 'route_ids': [(6, 0, [route_buy, route_mto])]}
***************************************************************************************
create
{'name': '10 in', 'procure_method': 'make_to_order', 'location_id': stock_location.id, 'location_dest_id': customer_location.id, 'product_id': product_test.id, 'product_uom': unit, 'product_uom_qty': 10.0, 'price_unit': 10}
***************************************************************************************
search
[('partner_id', '=', vendor1.id)]
***************************************************************************************
create
{'name': 'Blanket test', 'quantity_copy': 'none'}
***************************************************************************************
create
{'line_ids': [line1], 'type_id': requisition_type.id, 'vendor_id': vendor2.id, 'currency_id': self.env.ref('base.USD').id}
***************************************************************************************
create
{'name': '10 in', 'procure_method': 'make_to_order', 'location_id': stock_location.id, 'location_dest_id': customer_location.id, 'product_id': product_test.id, 'product_uom': unit, 'product_uom_qty': 10.0, 'price_unit': 10}
***************************************************************************************
create
{'name': '10 in', 'procure_method': 'make_to_order', 'location_id': stock_location.id, 'location_dest_id': customer_location.id, 'product_id': product_test.id, 'product_uom': unit, 'product_uom_qty': 10.0, 'price_unit': 10}
***************************************************************************************
search
[('partner_id', '=', vendor2.id), ('requisition_id', '=', requisition_blanket.id)]
***************************************************************************************
create
{'name': 'AAA', 'email': 'from.test@example.com'}
***************************************************************************************
create
{'name': vendor1.id, 'price': 50}
***************************************************************************************
create
{'name': 'product1', 'type': 'product', 'uom_id': unit, 'uom_po_id': unit, 'seller_ids': [(6, 0, [supplier_info1.id])], 'route_ids': [(6, 0, [route_buy, route_mto])]}
***************************************************************************************
create
{'name': 'product2', 'type': 'product', 'uom_id': unit, 'uom_po_id': unit, 'seller_ids': [(6, 0, [supplier_info1.id])], 'route_ids': [(6, 0, [route_buy, route_mto])]}
***************************************************************************************
create
{'name': 'Blanket test', 'quantity_copy': 'none'}
***************************************************************************************
create
{'line_ids': [line1], 'type_id': requisition_type.id, 'vendor_id': vendor1.id, 'currency_id': self.env.ref('base.USD').id}
***************************************************************************************
create
{'line_ids': [line2], 'type_id': requisition_type.id, 'vendor_id': vendor1.id, 'currency_id': self.env.ref('base.USD').id}
***************************************************************************************
create
{'name': '10 in', 'procure_method': 'make_to_order', 'location_id': stock_location.id, 'location_dest_id': customer_location.id, 'product_id': product_1.id, 'product_uom': unit, 'product_uom_qty': 10.0, 'price_unit': 100}
***************************************************************************************
create
{'name': '10 in', 'procure_method': 'make_to_order', 'location_id': stock_location.id, 'location_dest_id': customer_location.id, 'product_id': product_2.id, 'product_uom': unit, 'product_uom_qty': 10.0, 'price_unit': 100}
***************************************************************************************
search
[('product_id', '=', product_2.id), ('product_qty', '=', 5.0)]
***************************************************************************************
search
[('product_id', '=', product_1.id)]
***************************************************************************************
search
[('product_id', '=', product_2.id)]
***************************************************************************************
Procurement
self.product_1314self.env['uom.uom'].browse(self.ref('uom.product_uom_unit'))warehouse.lot_stock_id'/''/'self.env.company{'warehouse_id': warehouse, 'date_planned': date_planned}
***************************************************************************************
browse
self.ref('uom.product_uom_unit')
***************************************************************************************
create
{'name': 'prsds-product'}
***************************************************************************************
create
{'name': 'prsds-customer'}
***************************************************************************************
create
{'partner_id': customer.id, 'partner_invoice_id': customer.id, 'partner_shipping_id': customer.id, 'order_line': [Command.create({'name': product.name, 'product_id': product.id, 'product_uom_qty': 10.0, 'product_uom': product.uom_id.id, 'price_unit': 10})]}
***************************************************************************************
search
[('origin', '=', sale_order.name)]
***************************************************************************************
create
{'name': 'prsds-vendor'}
***************************************************************************************
precision_get
'Product Price'
***************************************************************************************
create
self._stock_account_prepare_anglo_saxon_in_lines_vals()
***************************************************************************************
search
[('purchase_line_id', '=', line.purchase_line_id.id), ('state', '=', 'done'), ('product_qty', '!=', 0.0)]
***************************************************************************************
read_group
domain['product_id', 'product_qty', 'order_id', 'product_uom', 'orderpoint_id']['order_id', 'product_id', 'product_uom', 'orderpoint_id']
***************************************************************************************
search
[('state', 'in', ('purchase', 'done')), ('order_line.product_id', 'in', self.product_tmpl_id.product_variant_ids.ids), ('partner_id', 'in', self.name.ids)]
***************************************************************************************
browse
orderpoint_id
***************************************************************************************
browse
orderpoint_id
***************************************************************************************
browse
group['product_id'][0]
***************************************************************************************
browse
group['product_uom'][0]
***************************************************************************************
browse
group['order_id'][0]
***************************************************************************************
search
[('action', '=', 'buy')]
***************************************************************************************
browse
group['orderpoint_id'][:1]
***************************************************************************************
_for_xml_id
'stock.action_picking_tree_all'
***************************************************************************************
_log_activity_get_documents
purchase_order_lines_quantities'move_ids''DOWN'_keys_in_sorted_keys_in_groupby
***************************************************************************************
_log_activity
_render_note_exception_quantity_pofiltered_documents
***************************************************************************************
search
[('code', '=', 'incoming'), ('warehouse_id.company_id', '=', company_id)]
***************************************************************************************
precision_get
'Product Price'
***************************************************************************************
create
values
***************************************************************************************
browse
[order_line.id for order in order_exceptions.values() for order_line in order[0]]
***************************************************************************************
concat
*rendering_context.keys()
***************************************************************************************
search
[('code', '=', 'incoming'), ('warehouse_id', '=', False)]
***************************************************************************************
create
res
***************************************************************************************
search
[('id', 'child_of', move.warehouse_id.view_location_id.id)]
***************************************************************************************
search
[('name', '=', 'sale'), ('state', '=', 'installed')]
***************************************************************************************
search
[('partner_id', 'in', self.ids), ('date_order', '>', fields.Date.today() - timedelta(365)), ('qty_received', '!=', 0), ('order_id.state', 'in', ['done', 'purchase'])]
***************************************************************************************
search
[('purchase_line_id', 'in', order_lines.ids), ('state', '=', 'done')]
***************************************************************************************
search_read
[('action', '=', 'buy')]['route_id']
***************************************************************************************
_for_xml_id
'purchase.purchase_rfq'
***************************************************************************************
search
[('orderpoint_id', '=', self.id)]
***************************************************************************************
_for_xml_id
'purchase.purchase_form_action'
***************************************************************************************
precision_get
'Product Price'
***************************************************************************************
search
[('orderpoint_id', 'in', self.ids)]
***************************************************************************************
search
[('action', '=', 'buy')]
***************************************************************************************
search
[('lot_id', '=', lot.id), ('state', '=', 'done')]
***************************************************************************************
Procurement
procurement.product_idquantityprocurement.product_uomprocurement.location_idprocurement.nameprocurement.originprocurement.company_idvalues
***************************************************************************************
_fix_tax_included_price_company
seller.priceline.product_id.supplier_taxes_idline.taxes_idcompany_id
***************************************************************************************
concat
*list(po_lines)
***************************************************************************************
with_company
company_id
***************************************************************************************
get_param
'purchase_stock.delta_days_merge'
***************************************************************************************
_prepare_purchase_order_line_from_procurement
procurement.product_idprocurement.product_qtyprocurement.product_uomprocurement.company_idprocurement.valuespo
***************************************************************************************
with_company
company_id
***************************************************************************************
search
[('code', '=', 'incoming')]
***************************************************************************************
concat
*picking_types_by_company.get(False, [])
***************************************************************************************
concat
*pt
***************************************************************************************
search
domain
***************************************************************************************
search_read
[('product_tmpl_id', 'in', product_template_ids)]['id']
***************************************************************************************
Procurement
productproduct_qtyself.uom_unitself.warehouse_1.lot_stock_idproduct.name'/'self.env.companyorder_values
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'currency_id': self.currency_data['currency'].id, 'order_line': [(0, 0, {'name': product.name, 'product_id': product.id, 'product_qty': quantity, 'product_uom': product.uom_po_id.id, 'price_unit': price_unit, 'date_planned': date, 'taxes_id': [(6, 0, product.supplier_taxes_id.ids)] if set_tax else False})], 'date_order': date}
***************************************************************************************
search
[('purchase_id', '=', purchase_order.id)]
***************************************************************************************
search
[('purchase_id', '=', purchase_order.id)]
***************************************************************************************
browse
stock_return_picking_action['res_id']
***************************************************************************************
browse
refund_invoice_wiz.reverse_moves()['res_id']
***************************************************************************************
search
[('purchase_id', '=', purchase_order.id)]
***************************************************************************************
search
[('purchase_id', '=', purchase_order.id)]
***************************************************************************************
create
{'name': 'Exclude tax', 'amount': '0.00', 'type_tax_use': 'purchase'}
***************************************************************************************
search
[('purchase_id', '=', purchase_order.id)]
***************************************************************************************
search
[('purchase_id', '=', purchase_order.id)]
***************************************************************************************
create
{'name': 'Gemini Partner'}
***************************************************************************************
create
{'default_code': 'AVG', 'name': 'Average Ice Cream', 'type': 'product', 'categ_id': self.stock_account_product_categ.id, 'list_price': 100.0, 'standard_price': 60.0, 'uom_id': self.env.ref('uom.product_uom_kgm').id, 'uom_po_id': self.env.ref('uom.product_uom_kgm').id, 'supplier_taxes_id': [], 'description': 'FIFO Ice Cream'}
***************************************************************************************
create
{'partner_id': res_partner_3.id, 'order_line': [(0, 0, {'name': 'Average Ice Cream', 'product_id': product_cable_management_box.id, 'product_qty': 10.0, 'product_uom': self.env.ref('uom.product_uom_kgm').id, 'price_unit': 60.0, 'date_planned': time.strftime('%Y-%m-%d')})]}
***************************************************************************************
create
{'partner_id': res_partner_3.id, 'order_line': [(0, 0, {'name': product_cable_management_box.name, 'product_id': product_cable_management_box.id, 'product_qty': 30.0, 'product_uom': self.env.ref('uom.product_uom_kgm').id, 'price_unit': 80.0, 'date_planned': time.strftime('%Y-%m-%d')})]}
***************************************************************************************
create
{'picking_type_id': self.company_data['default_warehouse'].out_type_id.id, 'location_id': self.company_data['default_warehouse'].lot_stock_id.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id, 'move_lines': [(0, 0, {'name': 'outgoing_shipment_avg_move', 'product_id': product_cable_management_box.id, 'product_uom_qty': 20.0, 'product_uom': self.env.ref('uom.product_uom_kgm').id, 'location_id': self.company_data['default_warehouse'].lot_stock_id.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id})]}
***************************************************************************************
create
{'partner_id': res_partner_3.id, 'order_line': [(0, 0, {'name': product_cable_management_box.name, 'product_id': product_cable_management_box.id, 'product_qty': 500.0, 'product_uom': self.ref('uom.product_uom_gram'), 'price_unit': 0.2, 'date_planned': time.strftime('%Y-%m-%d')})]}
***************************************************************************************
with_context
res['context']
***************************************************************************************
with_context
res['context']
***************************************************************************************
with_context
res['context']
***************************************************************************************
with_context
res['context']
***************************************************************************************
create
{'name': 'Wood Corner Partner'}
***************************************************************************************
create
{'name': 'Large Desk'}
***************************************************************************************
create
{'name': 'Conference Chair'}
***************************************************************************************
create
self.po_vals
***************************************************************************************
create
{'name': 'Jhon'}
***************************************************************************************
create
{'name': 'Roger'}
***************************************************************************************
create
{'name': partner.id, 'price': 12.0}
***************************************************************************************
create
{'name': 'product', 'type': 'product', 'route_ids': [(4, self.ref('stock.route_warehouse0_mto')), (4, self.ref('purchase_stock.route_warehouse0_buy'))], 'seller_ids': [(6, 0, [seller.id])], 'categ_id': self.env.ref('product.product_category_all').id, 'supplier_taxes_id': [(6, 0, [])]}
***************************************************************************************
create
{'name': 'move out', 'location_id': stock_location.id, 'location_dest_id': customer_location.id, 'product_id': product.id, 'product_uom': product.uom_id.id, 'product_uom_qty': 100.0, 'procure_method': 'make_to_order', 'picking_type_id': picking_type_out.id}
***************************************************************************************
search
[('partner_id', '=', partner.id)]
***************************************************************************************
create
self.po_vals
***************************************************************************************
create
{'name': 'Jhon'}
***************************************************************************************
create
{'name': partner.id, 'price': 12.0}
***************************************************************************************
create
{'name': 'product', 'type': 'product', 'route_ids': [(4, self.ref('stock.route_warehouse0_mto')), (4, self.ref('purchase_stock.route_warehouse0_buy'))], 'seller_ids': [(6, 0, [seller.id])], 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'location_id': stock_location.id, 'location_dest_id': customer_location.id, 'partner_id': partner.id, 'picking_type_id': picking_type_out.id}
***************************************************************************************
create
{'name': 'move out', 'location_id': stock_location.id, 'location_dest_id': customer_location.id, 'product_id': product.id, 'product_uom': product.uom_id.id, 'product_uom_qty': 80.0, 'procure_method': 'make_to_order', 'picking_id': customer_picking.id}
***************************************************************************************
search
[('partner_id', '=', partner.id)]
***************************************************************************************
create
{'name': 'move out', 'location_id': stock_location.id, 'location_dest_id': customer_location.id, 'product_id': product.id, 'product_uom': product.uom_id.id, 'product_uom_qty': 20.0, 'procure_method': 'make_to_order', 'picking_id': customer_picking.id}
***************************************************************************************
search
[('partner_id', '=', partner.id), ('state', '=', 'draft')]
***************************************************************************************
create
self.po_vals
***************************************************************************************
create
self.po_vals
***************************************************************************************
create
{'name': 'AAA', 'email': 'from.test@example.com'}
***************************************************************************************
create
{'name': partner.id, 'price': 50}
***************************************************************************************
create
{'name': 'Usb Keyboard', 'type': 'product', 'uom_id': unit, 'uom_po_id': unit, 'seller_ids': [(6, 0, [supplier_info1.id])], 'route_ids': [(6, 0, [route_buy.id, route_mto.id])]}
***************************************************************************************
create
{'location_id': stock_location.id, 'location_dest_id': customer_location.id, 'partner_id': partner.id, 'picking_type_id': picking_type_out.id}
***************************************************************************************
create
{'name': 'move out', 'location_id': stock_location.id, 'location_dest_id': customer_location.id, 'product_id': product.id, 'product_uom': product.uom_id.id, 'product_uom_qty': 10.0, 'procure_method': 'make_to_order', 'picking_id': delivery_order.id}
***************************************************************************************
search
[('partner_id', '=', partner.id)]
***************************************************************************************
search
[]
***************************************************************************************
search
[('group_id', '=', po.group_id.id)]
***************************************************************************************
create
self.po_vals
***************************************************************************************
browse
stock_return_picking_action['res_id']
***************************************************************************************
create
{'name': 'Jhon'}
***************************************************************************************
create
{'name': partner.id, 'price': 12.0}
***************************************************************************************
create
{'name': 'Roger'}
***************************************************************************************
create
{'name': 'product', 'type': 'product', 'route_ids': [(4, self.ref('stock.route_warehouse0_mto')), (4, self.ref('purchase_stock.route_warehouse0_buy'))], 'seller_ids': [(6, 0, [seller.id])], 'categ_id': self.env.ref('product.product_category_all').id, 'supplier_taxes_id': [(6, 0, [])]}
***************************************************************************************
create
{'move_type': 'direct', 'partner_id': vendor.id}
***************************************************************************************
search
[('group_id', '=', procurement_group.id)]
***************************************************************************************
search
[('partner_id', '=', partner.id)]
***************************************************************************************
search
[('partner_id', '=', partner.id)]
***************************************************************************************
search
[('partner_id', '=', partner.id)]
***************************************************************************************
_get_available_quantity
productstock_location
***************************************************************************************
run
[self.env['procurement.group'].Procurement(product, product_qty, self.uom_unit, vendor.property_stock_customer, product.name, '/', self.env.company, values)]
***************************************************************************************
with_user
self.user_purchase_user
***************************************************************************************
browse
self.ref('stock.route_warehouse0_mto')
***************************************************************************************
with_context
backorder_wizard_dict['context']
***************************************************************************************
Procurement
productproduct_qtyself.uom_unitvendor.property_stock_customerproduct.name'/'self.env.companyvalues
***************************************************************************************
create
{'name': 'Gemini Partner'}
***************************************************************************************
create
{'default_code': 'FIFO', 'name': 'FIFO Ice Cream', 'type': 'product', 'categ_id': self.stock_account_product_categ.id, 'list_price': 100.0, 'standard_price': 70.0, 'uom_id': self.env.ref('uom.product_uom_kgm').id, 'uom_po_id': self.env.ref('uom.product_uom_kgm').id, 'supplier_taxes_id': [], 'description': 'FIFO Ice Cream'}
***************************************************************************************
create
{'partner_id': res_partner_3.id, 'order_line': [(0, 0, {'name': 'FIFO Ice Cream', 'product_id': product_cable_management_box.id, 'product_qty': 10.0, 'product_uom': self.env.ref('uom.product_uom_kgm').id, 'price_unit': 50.0, 'date_planned': time.strftime('%Y-%m-%d')})]}
***************************************************************************************
create
{'partner_id': res_partner_3.id, 'order_line': [(0, 0, {'name': 'FIFO Ice Cream', 'product_id': product_cable_management_box.id, 'product_qty': 30.0, 'product_uom': self.env.ref('uom.product_uom_kgm').id, 'price_unit': 80.0, 'date_planned': time.strftime('%Y-%m-%d')})]}
***************************************************************************************
create
{'picking_type_id': self.company_data['default_warehouse'].out_type_id.id, 'location_id': self.company_data['default_warehouse'].lot_stock_id.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id, 'move_lines': [(0, 0, {'name': product_cable_management_box.name, 'product_id': product_cable_management_box.id, 'product_uom_qty': 20.0, 'product_uom': self.env.ref('uom.product_uom_kgm').id, 'location_id': self.company_data['default_warehouse'].lot_stock_id.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id, 'picking_type_id': self.company_data['default_warehouse'].out_type_id.id})]}
***************************************************************************************
create
{'picking_type_id': self.company_data['default_warehouse'].out_type_id.id, 'location_id': self.company_data['default_warehouse'].lot_stock_id.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id, 'move_lines': [(0, 0, {'name': product_cable_management_box.name, 'product_id': product_cable_management_box.id, 'product_uom_qty': 500.0, 'product_uom': self.env.ref('uom.product_uom_gram').id, 'location_id': self.company_data['default_warehouse'].lot_stock_id.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id, 'picking_type_id': self.company_data['default_warehouse'].out_type_id.id})]}
***************************************************************************************
create
{'name': 'new_usd', 'symbol': '$²', 'rate_ids': [(0, 0, {'rate': 1.2834, 'name': time.strftime('%Y-%m-%d')})]}
***************************************************************************************
create
{'partner_id': res_partner_3.id, 'currency_id': NewUSD.id, 'order_line': [(0, 0, {'name': 'FIFO Ice Cream', 'product_id': product_cable_management_box.id, 'product_qty': 30, 'product_uom': self.env.ref('uom.product_uom_kgm').id, 'price_unit': 0.15, 'date_planned': time.strftime('%Y-%m-%d')}), (0, 0, {'name': product_cable_management_box.name, 'product_id': product_cable_management_box.id, 'product_qty': 10.0, 'product_uom': self.env.ref('uom.product_uom_kgm').id, 'price_unit': 150.0, 'date_planned': time.strftime('%Y-%m-%d')})]}
***************************************************************************************
create
{'picking_type_id': self.company_data['default_warehouse'].out_type_id.id, 'location_id': self.company_data['default_warehouse'].lot_stock_id.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id, 'move_lines': [(0, 0, {'name': product_cable_management_box.name, 'product_id': product_cable_management_box.id, 'product_uom_qty': 49.5, 'product_uom': self.env.ref('uom.product_uom_kgm').id, 'location_id': self.company_data['default_warehouse'].lot_stock_id.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id, 'picking_type_id': self.company_data['default_warehouse'].out_type_id.id})]}
***************************************************************************************
create
{'picking_type_id': self.company_data['default_warehouse'].out_type_id.id, 'location_id': self.company_data['default_warehouse'].lot_stock_id.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id, 'move_lines': [(0, 0, {'name': product_cable_management_box.name, 'product_id': product_cable_management_box.id, 'product_uom_qty': 10, 'product_uom': self.env.ref('uom.product_uom_kgm').id, 'location_id': self.company_data['default_warehouse'].lot_stock_id.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id, 'picking_type_id': self.company_data['default_warehouse'].out_type_id.id})]}
***************************************************************************************
create
{'default_code': 'NEG', 'name': 'FIFO Negative', 'type': 'product', 'categ_id': self.stock_account_product_categ.id, 'list_price': 100.0, 'standard_price': 70.0, 'uom_id': self.env.ref('uom.product_uom_kgm').id, 'uom_po_id': self.env.ref('uom.product_uom_kgm').id, 'supplier_taxes_id': [], 'description': 'FIFO Ice Cream'}
***************************************************************************************
create
{'picking_type_id': self.company_data['default_warehouse'].out_type_id.id, 'location_id': self.company_data['default_warehouse'].lot_stock_id.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id, 'move_lines': [(0, 0, {'name': product_fifo_negative.name, 'product_id': product_fifo_negative.id, 'product_uom_qty': 100, 'product_uom': self.env.ref('uom.product_uom_kgm').id, 'location_id': self.company_data['default_warehouse'].lot_stock_id.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id, 'picking_type_id': self.company_data['default_warehouse'].out_type_id.id})]}
***************************************************************************************
create
{'picking_type_id': self.company_data['default_warehouse'].out_type_id.id, 'location_id': self.company_data['default_warehouse'].lot_stock_id.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id, 'move_lines': [(0, 0, {'name': product_fifo_negative.name, 'product_id': product_fifo_negative.id, 'product_uom_qty': 400, 'product_uom': self.env.ref('uom.product_uom_kgm').id, 'location_id': self.company_data['default_warehouse'].lot_stock_id.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id, 'picking_type_id': self.company_data['default_warehouse'].out_type_id.id})]}
***************************************************************************************
create
{'partner_id': res_partner_3.id, 'order_line': [(0, 0, {'name': 'FIFO Ice Cream', 'product_id': product_fifo_negative.id, 'product_qty': 50.0, 'product_uom': self.env.ref('uom.product_uom_kgm').id, 'price_unit': 50.0, 'date_planned': time.strftime('%Y-%m-%d')})]}
***************************************************************************************
create
{'partner_id': res_partner_3.id, 'order_line': [(0, 0, {'name': product_cable_management_box.name, 'product_id': product_fifo_negative.id, 'product_qty': 600.0, 'product_uom': self.env.ref('uom.product_uom_kgm').id, 'price_unit': 80.0, 'date_planned': time.strftime('%Y-%m-%d')})]}
***************************************************************************************
create
{'name': 'Dummy Tax', 'amount': '0.00', 'type_tax_use': 'purchase'}
***************************************************************************************
create
{'name': 'Super Product', 'type': 'product', 'categ_id': self.stock_account_product_categ.id, 'standard_price': 0.035}
***************************************************************************************
create
{'partner_id': self.env.ref('base.res_partner_3').id, 'order_line': [(0, 0, {'name': super_product.name, 'product_id': super_product.id, 'product_qty': 1000, 'product_uom': super_product.uom_id.id, 'price_unit': super_product.standard_price, 'date_planned': time.strftime('%Y-%m-%d'), 'taxes_id': [(4, tax.id)]})]}
***************************************************************************************
with_context
res['context']
***************************************************************************************
with_context
res['context']
***************************************************************************************
with_context
res['context']
***************************************************************************************
with_context
res['context']
***************************************************************************************
with_context
res['context']
***************************************************************************************
with_context
res['context']
***************************************************************************************
with_context
res['context']
***************************************************************************************
with_context
res['context']
***************************************************************************************
with_context
res['context']
***************************************************************************************
with_context
res['context']
***************************************************************************************
create
{'name': 'Gemini Partner'}
***************************************************************************************
create
{'default_code': 'FIFORET', 'name': 'FIFO Ice Cream', 'type': 'product', 'categ_id': self.stock_account_product_categ.id, 'standard_price': 0.0, 'uom_id': self.env.ref('uom.product_uom_kgm').id, 'uom_po_id': self.env.ref('uom.product_uom_kgm').id, 'description': 'FIFO Ice Cream'}
***************************************************************************************
create
{'partner_id': res_partner_3.id, 'order_line': [(0, 0, {'name': 'FIFO Ice Cream', 'product_id': product_fiforet_icecream.id, 'product_qty': 10.0, 'product_uom': self.env.ref('uom.product_uom_kgm').id, 'price_unit': 50.0, 'date_planned': time.strftime('%Y-%m-%d')})]}
***************************************************************************************
create
{'partner_id': res_partner_3.id, 'order_line': [(0, 0, {'name': 'FIFO Ice Cream', 'product_id': product_fiforet_icecream.id, 'product_qty': 30.0, 'product_uom': self.env.ref('uom.product_uom_kgm').id, 'price_unit': 80.0, 'date_planned': time.strftime('%Y-%m-%d')})]}
***************************************************************************************
browse
return_picking_id
***************************************************************************************
with_context
res['context']
***************************************************************************************
with_context
res['context']
***************************************************************************************
create
{'name': 'abc'}
***************************************************************************************
create
{'partner_id': self.customer.id, 'name': 'New Group'}
***************************************************************************************
create
{'name': self.customer.id, 'price': 100.0}
***************************************************************************************
create
{'name': 'Geyser', 'type': 'product', 'route_ids': [(4, self.route_mto), (4, self.route_buy)], 'seller_ids': [(6, 0, [seller.id])]}
***************************************************************************************
create
{'location_id': self.warehouse.out_type_id.default_location_src_id.id, 'location_dest_id': cust_location.id, 'partner_id': self.customer.id, 'group_id': self.group.id, 'picking_type_id': self.ref('stock.picking_type_out')}
***************************************************************************************
create
{'name': product.name, 'product_id': product.id, 'product_uom_qty': 10, 'product_uom': product.uom_id.id, 'picking_id': self.picking_out.id, 'group_id': self.group.id, 'location_id': self.warehouse.out_type_id.default_location_src_id.id, 'location_dest_id': cust_location.id, 'procure_method': 'make_to_order'}
***************************************************************************************
search
[('partner_id', '=', self.customer.id)]
***************************************************************************************
search
[('partner_id', '=', self.customer.id)]
***************************************************************************************
search
[('partner_id', '=', self.customer.id)]
***************************************************************************************
search
[('group_id', '=', self.group.id)]
***************************************************************************************
search
[('partner_id', '=', self.customer.id)]
***************************************************************************************
search
[('group_id', '=', self.group.id)]
***************************************************************************************
search
[('partner_id', '=', self.customer.id)]
***************************************************************************************
search
[('group_id', '=', self.group.id)]
***************************************************************************************
search
[('partner_id', '=', self.customer.id)]
***************************************************************************************
search
[('group_id', '=', self.group.id)]
***************************************************************************************
create
{'name': 'Steve'}
***************************************************************************************
create
{'name': partner.id, 'price': 10.0}
***************************************************************************************
create
{'name': 'Car', 'type': 'product', 'route_ids': [(4, self.ref('stock.route_warehouse0_mto')), (4, self.ref('purchase_stock.route_warehouse0_buy'))], 'seller_ids': [(6, 0, [seller.id])], 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'location_id': stock_location.id, 'location_dest_id': customer_location.id, 'partner_id': partner.id, 'picking_type_id': picking_type_out.id}
***************************************************************************************
create
{'name': 'move out', 'location_id': stock_location.id, 'location_dest_id': customer_location.id, 'product_id': product_car.id, 'product_uom': product_car.uom_id.id, 'product_uom_qty': 10.0, 'procure_method': 'make_to_order', 'picking_id': customer_picking.id}
***************************************************************************************
search
[('partner_id', '=', partner.id)]
***************************************************************************************
create
{'name': 'Ipad Unit'}
***************************************************************************************
create
{'name': 'Ipad', 'category_id': ipad_uom.id, 'uom_type': 'reference', 'rounding': 0.001}
***************************************************************************************
create
{'name': '10 Ipad', 'category_id': ipad_uom.id, 'uom_type': 'bigger', 'rounding': 0.001, 'factor_inv': 10}
***************************************************************************************
create
{'name': 'Conference Chair', 'standard_price': 100, 'uom_id': ipad_lot.id, 'uom_po_id': ipad_lot.id}
***************************************************************************************
create
{'name': 'Azure Interior'}
***************************************************************************************
create
{'name': partner.id, 'price': 12.0, 'delay': 1, 'product_code': 'VOB2a'}
***************************************************************************************
create
{'name': 'Rubber Duck', 'type': 'product', 'default_code': 'VOB2A', 'seller_ids': [seller.id], 'purchase_ok': True}
***************************************************************************************
create
{'name': 'My Partner'}
***************************************************************************************
create
{'partner_id': partner.id, 'state': 'purchase'}
***************************************************************************************
create
{'partner_id': partner.id, 'state': 'purchase'}
***************************************************************************************
create
{'partner_id': partner.id, 'state': 'draft'}
***************************************************************************************
run
[self.env['procurement.group'].Procurement(self.product_1, 5.0, self.uom_unit, self.warehouse_1.lot_stock_id, 'Test scheduler for RFQ', '/', self.env.company, {'warehouse_id': self.warehouse_1, 'date_planned': date_planned, 'date_deadline': date_planned, 'rule_id': self.warehouse_1.buy_pull_id, 'group_id': False, 'route_ids': []})]
***************************************************************************************
search
[('move_lines.product_id', 'in', (self.product_1.id, self.product_2.id)), ('picking_type_id', '=', self.warehouse_1.int_type_id.id), ('location_id', '=', self.warehouse_1.wh_input_stock_loc_id.id), ('location_dest_id', '=', self.warehouse_1.wh_qc_stock_loc_id.id)]
***************************************************************************************
search
[('picking_type_id', '=', self.warehouse_1.int_type_id.id), ('location_id', '=', self.warehouse_1.wh_qc_stock_loc_id.id), ('location_dest_id', '=', self.warehouse_1.lot_stock_id.id)]
***************************************************************************************
create
{'name': 'AAA', 'route_ids': [(4, self.route_buy)], 'seller_ids': [(0, 0, {'name': self.partner_1.id, 'delay': 5})]}
***************************************************************************************
create
{'name': 'move_1', 'product_id': product_1.id, 'product_uom': self.ref('uom.product_uom_unit'), 'location_id': self.ref('stock.stock_location_stock'), 'location_dest_id': self.ref('stock.stock_location_output'), 'product_uom_qty': 10, 'procure_method': 'make_to_order'}
***************************************************************************************
search
[('product_id', '=', product_1.id)]
***************************************************************************************
create
{'name': 'move_2', 'product_id': product_1.id, 'product_uom': self.ref('uom.product_uom_unit'), 'location_id': self.ref('stock.stock_location_stock'), 'location_dest_id': self.ref('stock.stock_location_output'), 'product_uom_qty': 5, 'procure_method': 'make_to_order'}
***************************************************************************************
search
[('product_id', '=', product_1.id)]
***************************************************************************************
create
{'name': 'Second Company'}
***************************************************************************************
create
{'name': 'Colruyt'}
***************************************************************************************
create
{'name': 'Delhaize'}
***************************************************************************************
create
{'name': 'Chicory', 'type': 'product', 'seller_ids': [(0, 0, {'name': vendor2.id, 'delay': 15.0, 'company_id': company2.id}), (0, 0, {'name': vendor.id, 'delay': 1.0, 'company_id': company.id})]}
***************************************************************************************
search
[]
***************************************************************************************
search
[('product_id', '=', product.id)]
***************************************************************************************
search
[('product_id', '=', product.id)]
***************************************************************************************
create
{'name': self.partner_1.id, 'min_qty': 1, 'price': 1, 'delay': 7, 'product_tmpl_id': self.product_1.product_tmpl_id.id}
***************************************************************************************
search
[('partner_id', '=', self.partner_1.id)]
***************************************************************************************
search
[('product_id', '=', self.product_1.id)]
***************************************************************************************
search
[('product_id', '=', self.product_1.id)]
***************************************************************************************
search
[('product_id', '=', self.product_2.id)]
***************************************************************************************
search
[('product_id', '=', self.product_1.id)]
***************************************************************************************
search
[('product_id', '=', self.t_shirt.id)]
***************************************************************************************
with_company
company2
***************************************************************************************
create
{'name': 'Delivery', 'date': datetime.today() + timedelta(days=i), 'product_id': product.id, 'product_uom': product.uom_id.id, 'product_uom_qty': 5.0, 'location_id': warehouse.lot_stock_id.id, 'location_dest_id': self.ref('stock.stock_location_customers')}
***************************************************************************************
Procurement
self.product_15.0self.uom_unitself.warehouse_1.lot_stock_id'Test scheduler for RFQ''/'self.env.company{'warehouse_id': self.warehouse_1, 'date_planned': date_planned, 'date_deadline': date_planned, 'rule_id': self.warehouse_1.buy_pull_id, 'group_id': False, 'route_ids': []}
***************************************************************************************
Procurement
self.t_shirt5self.uom_unitself.warehouse_1.lot_stock_idself.t_shirt.name'/'self.env.companyorder_1_values
***************************************************************************************
Procurement
self.t_shirt10self.uom_unitself.warehouse_1.lot_stock_idself.t_shirt.name'/'self.env.companyorder_2_values
***************************************************************************************
Procurement
self.t_shirt10self.uom_unitself.warehouse_1.lot_stock_idself.t_shirt.name'/'self.env.companyorder_3_values
***************************************************************************************
search
[]
***************************************************************************************
search
[('product_tmpl_id', '=', self.product_1.product_tmpl_id.id)]
***************************************************************************************
create
self.po_vals
***************************************************************************************
create
self.po_vals
***************************************************************************************
browse
res['res_id']
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'name': item1.name, 'product_id': item1.id, 'product_qty': 10, 'product_uom': uom_unit.id, 'price_unit': 123.0, 'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT)})]}
***************************************************************************************
browse
res['res_id']
***************************************************************************************
create
self.po_vals
***************************************************************************************
search
[('summary', '=', 'Date Updated'), ('res_model_id', '=', 'purchase.order'), ('res_id', '=', po.id)]
***************************************************************************************
create
{'name': 'Test Company', 'currency_id': self.env['res.currency'].with_context(active_test=False).search([('id', '!=', company_a.currency_id.id)], limit=1).id}
***************************************************************************************
create
dict(company_id=company_a.id, partner_id=self.partner_a.id)
***************************************************************************************
create
{'name': 'Test Company', 'currency_id': self.env['res.currency'].with_context(active_test=False).search([('id', '!=', company_a.currency_id.id)], limit=1).id}
***************************************************************************************
create
self.po_vals
***************************************************************************************
create
self.po_vals
***************************************************************************************
create
{'category_id': self.env.ref('uom.uom_categ_length').id, 'name': 'Yards', 'factor_inv': 0.9144, 'uom_type': 'bigger'}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'name': self.product_id_2.name, 'product_id': self.product_id_2.id, 'product_qty': 4.0, 'product_uom': self.product_id_2.uom_po_id.id, 'price_unit': 1.0, 'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT)})]}
***************************************************************************************
create
{'name': 'TempProduct', 'type': 'consu', 'company_id': self.env.user.company_id.id}
***************************************************************************************
create
{'company_id': self.env.user.company_id.id, 'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'name': _product.name, 'product_id': _product.id, 'product_qty': 25.0, 'price_unit': 250.0})]}
***************************************************************************************
search
[('code', '=', 'outgoing')]
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
backorder_wizard_dict['context']
***************************************************************************************
with_context
backorder_wizard_dict['context']
***************************************************************************************
with_context
backorder_wizard_dict['context']
***************************************************************************************
create
{'partner_id': self.env['res.partner'].create({'name': 'My Partner'}).id, 'state': 'draft'}
***************************************************************************************
create
{'name': 'Product with packaging', 'type': 'product'}
***************************************************************************************
create
{'name': 'box', 'product_id': product.id}
***************************************************************************************
create
{'partner_id': self.env['res.partner'].create({'name': 'My Partner'}).id, 'order_line': [(0, 0, {'product_id': product.id, 'product_qty': 1.0, 'product_uom': product.uom_id.id, 'product_packaging_id': packaging.id})]}
***************************************************************************************
create
{'name': 'My Partner'}
***************************************************************************************
create
{'name': 'My Partner'}
***************************************************************************************
browse
self.purchase_order.action_create_invoice()['res_id']
***************************************************************************************
browse
self.purchase_order.action_create_invoice()['res_id']
***************************************************************************************
with_context
{'active_model': 'purchase.order', 'active_ids': self.purchase_order.ids}
***************************************************************************************
search
wizard.create_entries()['domain']
***************************************************************************************
search
wizard.create_entries()['domain']
***************************************************************************************
with_context
{'active_model': 'purchase.order', 'active_ids': self.purchase_order.ids}
***************************************************************************************
search
wizard.create_entries()['domain']
***************************************************************************************
search
wizard.create_entries()['domain']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
search
[('company_id', '=', self.env.user.id)]
***************************************************************************************
create
{'name': 'WH 2', 'code': 'WH2', 'company_id': self.env.company.id, 'partner_id': self.env.company.partner_id.id, 'reception_steps': 'one_step'}
***************************************************************************************
search
[('partner_id', '=', self.partner.id)]
***************************************************************************************
search
[('company_id', '=', self.env.user.id)]
***************************************************************************************
create
{'name': 'subloc_1', 'location_id': warehouse_1.lot_stock_id.id}
***************************************************************************************
create
{'name': 'subloc_2', 'location_id': warehouse_1.lot_stock_id.id}
***************************************************************************************
search
[('partner_id', '=', self.partner.id)]
***************************************************************************************
search
[('company_id', '=', self.env.user.id)]
***************************************************************************************
create
{'name': 'outside', 'usage': 'internal', 'location_id': self.env.ref('stock.stock_location_locations').id}
***************************************************************************************
create
{'name': 'resupply outside', 'rule_ids': [(0, False, {'name': 'Buy', 'location_id': warehouse_1.lot_stock_id.id, 'company_id': self.env.company.id, 'action': 'buy', 'sequence': 2, 'procure_method': 'make_to_stock', 'picking_type_id': self.env.ref('stock.picking_type_in').id}), (0, False, {'name': 'ressuply from stock', 'location_src_id': warehouse_1.lot_stock_id.id, 'location_id': outside_loc.id, 'company_id': self.env.company.id, 'action': 'pull', 'procure_method': 'mts_else_mto', 'sequence': 1, 'picking_type_id': self.env.ref('stock.picking_type_out').id})]}
***************************************************************************************
create
{'name': 'AAA', 'email': 'from.test@example.com'}
***************************************************************************************
create
{'name': vendor1.id, 'price': 50}
***************************************************************************************
create
{'name': 'product_rr_3', 'type': 'product', 'route_ids': [(4, route.id)], 'seller_ids': [(6, 0, [supplier_info1.id])]}
***************************************************************************************
create
{'name': 'move out', 'product_id': product.id, 'product_uom': product.uom_id.id, 'product_uom_qty': 10, 'location_id': outside_loc.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
create
{'name': 'Tintin'}
***************************************************************************************
search
[('product_id', '=', product.id)]
***************************************************************************************
search
[('product_id', '=', product_buy_mto.id)]
***************************************************************************************
search
[('partner_id', '=', partner.id)]
***************************************************************************************
search
[('product_id', '=', product.id)]
***************************************************************************************
search
[('product_id', '=', product_buy_mto.id)]
***************************************************************************************
search
[('product_id', '=', product.id)]
***************************************************************************************
search
[('product_id', '=', product_buy_mto.id)]
***************************************************************************************
create
{'name': 'Tintin'}
***************************************************************************************
search
[]
***************************************************************************************
search
[('product_id', '=', product.id)]
***************************************************************************************
search
[('product_id', '=', product_buy_mto.id)]
***************************************************************************************
search
[('partner_id', '=', partner.id)]
***************************************************************************************
search
[('product_id', '=', product.id)]
***************************************************************************************
search
[('product_id', '=', product_buy_mto.id)]
***************************************************************************************
search
[('product_id', '=', product.id)]
***************************************************************************************
search
[('product_id', '=', product_buy_mto.id)]
***************************************************************************************
search
[('company_id', '=', self.env.company.id)]
***************************************************************************************
create
{'name': 'product TEST', 'standard_price': 100.0, 'type': 'product', 'uom_id': uom_unit.id, 'default_code': 'A', 'route_ids': [(6, 0, purchase_route.ids)]}
***************************************************************************************
create
{'name': 'Supplier A'}
***************************************************************************************
create
{'name': 'Supplier B'}
***************************************************************************************
create
{'name': default_vendor.id, 'product_tmpl_id': product.product_tmpl_id.id, 'delay': 7}
***************************************************************************************
create
{'name': secondary_vendor.id, 'product_tmpl_id': product.product_tmpl_id.id, 'delay': 10}
***************************************************************************************
search
[('product_id', '=', product.id)]
***************************************************************************************
run
[self.env['procurement.group'].Procurement(product, 100, uom_unit, warehouse.lot_stock_id, 'Test default vendor', '/', self.env.company, {'warehouse_id': warehouse, 'date_planned': dt.today() + td(days=15), 'rule_id': warehouse.buy_pull_id, 'group_id': False, 'route_ids': []})]
***************************************************************************************
search
[('product_id', '=', product.id)]
***************************************************************************************
search
[('product_id', '=', product.id)]
***************************************************************************************
run
[self.env['procurement.group'].Procurement(product, 100, uom_unit, warehouse.lot_stock_id, 'Test default vendor', '/', self.env.company, {'warehouse_id': warehouse, 'date_planned': dt.today() + td(days=15), 'rule_id': warehouse.buy_pull_id, 'group_id': False, 'route_ids': [], 'supplierinfo_name': secondary_vendor})]
***************************************************************************************
search
[('product_id', '=', product.id)]
***************************************************************************************
create
{'name': 'test warehouse', 'active': True, 'reception_steps': 'one_step', 'delivery_steps': 'ship_only', 'code': 'TEST'}
***************************************************************************************
search
[('warehouse_id', '=', warehouse.id), ('procure_method', '=', 'mts_else_mto'), ('location_id', '=', customer_loc.id)]
***************************************************************************************
create
{'name': 'MTO', 'active': True, 'sequence': 3, 'product_selectable': True, 'rule_ids': [(6, 0, [mto_rule.id])]}
***************************************************************************************
create
{'name': 'product TEST', 'standard_price': 100.0, 'type': 'product', 'uom_id': uom_unit.id, 'default_code': 'A', 'route_ids': [(6, 0, [route_mto.id, purchase_route.id])]}
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
_set_ids
'product.template,name''model''fr_FR'product.product_tmpl_id.ids'produit en français'
***************************************************************************************
_set_ids
'product.product,name''model''fr_FR'product.ids'produit en français'
***************************************************************************************
create
{'name': 'Supplier A'}
***************************************************************************************
create
{'name': default_vendor.id, 'product_tmpl_id': product.product_tmpl_id.id, 'delay': 7}
***************************************************************************************
create
{'name': 'Customer', 'lang': 'fr_FR'}
***************************************************************************************
create
{'partner_id': customer.id}
***************************************************************************************
Procurement
product100uom_unitcustomer.property_stock_customer'Test default vendor''/'self.env.company{'warehouse_id': warehouse, 'date_planned': dt.today() + td(days=15), 'group_id': proc_group, 'route_ids': []}
***************************************************************************************
run
[procurement]
***************************************************************************************
search
[('product_id', '=', product.id)]
***************************************************************************************
with_user
2
***************************************************************************************
search
[('product_id', '=', product.id)]
***************************************************************************************
Procurement
product100uom_unitwarehouse.lot_stock_id'Test default vendor''/'self.env.company{'warehouse_id': warehouse, 'date_planned': dt.today() + td(days=15), 'rule_id': warehouse.buy_pull_id, 'group_id': False, 'route_ids': []}
***************************************************************************************
Procurement
product100uom_unitwarehouse.lot_stock_id'Test default vendor''/'self.env.company{'warehouse_id': warehouse, 'date_planned': dt.today() + td(days=15), 'rule_id': warehouse.buy_pull_id, 'group_id': False, 'route_ids': [], 'supplierinfo_name': secondary_vendor}
***************************************************************************************
create
dict(name='The Replenisher')
***************************************************************************************
create
{'name': self.vendor.id, 'price': self.product1_price}
***************************************************************************************
create
{'name': 'product a', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id, 'seller_ids': [(4, self.supplierinfo.id, 0)], 'route_ids': [(4, self.env.ref('purchase_stock.route_warehouse0_buy').id, 0)]}
***************************************************************************************
search
[('company_id', '=', self.env.user.id)]
***************************************************************************************
create
{'product_id': self.product1.id, 'product_tmpl_id': self.product1.product_tmpl_id.id, 'product_uom_id': self.uom_unit.id, 'quantity': self.product_uom_qty, 'warehouse_id': self.wh.id}
***************************************************************************************
create
{'name': 'Furniture Service', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id, 'route_ids': [(4, self.env.ref('purchase_stock.route_warehouse0_buy').id, 0)]}
***************************************************************************************
create
{'name': 'vendor1', 'email': 'from.test@example.com'}
***************************************************************************************
create
{'product_tmpl_id': product_to_buy.product_tmpl_id.id, 'name': vendor1.id, 'min_qty': 1, 'price': 140, 'sequence': 1}
***************************************************************************************
create
{'product_tmpl_id': product_to_buy.product_tmpl_id.id, 'name': vendor1.id, 'min_qty': 10, 'price': 100, 'sequence': 2}
***************************************************************************************
create
{'product_id': product_to_buy.id, 'product_tmpl_id': product_to_buy.product_tmpl_id.id, 'product_uom_id': self.uom_unit.id, 'quantity': 10, 'warehouse_id': self.wh.id}
***************************************************************************************
create
{'name': 'Furniture Service', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id, 'route_ids': [(4, self.env.ref('purchase_stock.route_warehouse0_buy').id, 0)]}
***************************************************************************************
create
{'name': 'vendor1', 'email': 'from.test@example.com'}
***************************************************************************************
create
{'name': 'vendor2', 'email': 'from.test2@example.com'}
***************************************************************************************
create
{'product_tmpl_id': product_to_buy.product_tmpl_id.id, 'name': vendor1.id, 'min_qty': 1, 'price': 140, 'sequence': 1}
***************************************************************************************
create
{'product_tmpl_id': product_to_buy.product_tmpl_id.id, 'name': vendor2.id, 'min_qty': 10, 'price': 90, 'sequence': 2}
***************************************************************************************
create
{'product_tmpl_id': product_to_buy.product_tmpl_id.id, 'name': vendor1.id, 'min_qty': 10, 'price': 100, 'sequence': 3}
***************************************************************************************
create
{'product_id': product_to_buy.id, 'product_tmpl_id': product_to_buy.product_tmpl_id.id, 'product_uom_id': self.uom_unit.id, 'quantity': 10, 'warehouse_id': self.wh.id}
***************************************************************************************
create
{'name': 'Furniture Service', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id, 'route_ids': [(4, self.env.ref('purchase_stock.route_warehouse0_buy').id, 0)]}
***************************************************************************************
create
{'name': 'vendor1', 'email': 'from.test@example.com'}
***************************************************************************************
create
{'name': 'vendor2', 'email': 'from.test2@example.com'}
***************************************************************************************
create
{'product_tmpl_id': product_to_buy.product_tmpl_id.id, 'name': vendor1.id, 'price': 50, 'sequence': 2}
***************************************************************************************
create
{'product_tmpl_id': product_to_buy.product_tmpl_id.id, 'name': vendor2.id, 'price': 50, 'sequence': 1}
***************************************************************************************
create
{'product_id': product_to_buy.id, 'product_tmpl_id': product_to_buy.product_tmpl_id.id, 'product_uom_id': self.uom_unit.id, 'quantity': 10, 'warehouse_id': self.wh.id}
***************************************************************************************
create
{'name': 'Furniture Service', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id, 'route_ids': [(4, self.env.ref('purchase_stock.route_warehouse0_buy').id, 0)]}
***************************************************************************************
create
{'name': 'vendor1', 'email': 'from.test@example.com'}
***************************************************************************************
create
{'name': vendor1.id, 'price': 100, 'product_tmpl_id': product_to_buy.product_tmpl_id.id, 'min_qty': 2}
***************************************************************************************
create
{'name': vendor1.id, 'price': 60, 'product_tmpl_id': product_to_buy.product_tmpl_id.id, 'min_qty': 10}
***************************************************************************************
create
{'name': vendor1.id, 'price': 80, 'product_tmpl_id': product_to_buy.product_tmpl_id.id, 'min_qty': 5}
***************************************************************************************
create
{'product_id': product_to_buy.id, 'product_tmpl_id': product_to_buy.product_tmpl_id.id, 'product_uom_id': self.uom_unit.id, 'quantity': 10, 'warehouse_id': self.wh.id}
***************************************************************************************
search
[('origin', 'ilike', '%Manual Replenishment%'), ('partner_id', '=', self.vendor.id)]
***************************************************************************************
search
[('origin', 'ilike', '%Manual Replenishment%')]
***************************************************************************************
search
[('origin', 'ilike', '%Manual Replenishment%')]
***************************************************************************************
search
[('origin', 'ilike', '%Manual Replenishment%')]
***************************************************************************************
search
[('origin', 'ilike', '%Manual Replenishment%')]
***************************************************************************************
write
{'group_stock_adv_location': True, 'group_stock_multi_locations': True}
***************************************************************************************
search
[('company_id', '=', self.env.company.id)]
***************************************************************************************
create
{'name': 'loc1', 'location_id': warehouse.id}
***************************************************************************************
create
{'name': 'loc2', 'location_id': warehouse.id}
***************************************************************************************
create
{'name': 'Receipts from loc1', 'sequence_code': 'IN1', 'code': 'incoming', 'warehouse_id': warehouse.id, 'default_location_dest_id': location_1.id}
***************************************************************************************
create
{'name': 'Receipts from loc2', 'sequence_code': 'IN2', 'code': 'incoming', 'warehouse_id': warehouse.id, 'default_location_dest_id': location_2.id}
***************************************************************************************
create
{'name': 'Buy', 'company_id': False}
***************************************************************************************
create
{'name': 'Wood Corner Partner', 'company_id': self.env.user.company_id.id}
***************************************************************************************
create
{'name': 'Large Desk', 'standard_price': 1299.0, 'list_price': 1799.0, 'type': 'product'}
***************************************************************************************
create
{'name': 'Stock Journal', 'code': 'STJTEST', 'type': 'general'}
***************************************************************************************
create
{'partner_id': self.partner_id.id, 'order_line': [(0, 0, {'name': self.product1.name, 'product_id': self.product1.id, 'product_qty': 10.0, 'product_uom': self.product1.uom_po_id.id, 'price_unit': 100.0, 'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT)})]}
***************************************************************************************
create
{'partner_id': self.partner_id.id, 'order_line': [(0, 0, {'name': self.product1.name, 'product_id': self.product1.id, 'product_qty': 10.0, 'product_uom': self.product1.uom_po_id.id, 'price_unit': 11.0, 'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT)})]}
***************************************************************************************
create
{'partner_id': self.partner_id.id, 'order_line': [(0, 0, {'name': self.product1.name, 'product_id': self.product1.id, 'product_qty': 10.0, 'product_uom': self.product1.uom_po_id.id, 'price_unit': 100.0, 'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT)})]}
***************************************************************************************
create
{'partner_id': self.partner_id.id, 'order_line': [(0, 0, {'name': self.product1.name, 'product_id': self.product1.id, 'product_qty': 10.0, 'product_uom': self.product1.uom_po_id.id, 'price_unit': 100.0, 'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT)})]}
***************************************************************************************
create
{'partner_id': self.partner_id.id, 'currency_id': eur_currency.id, 'order_line': [(0, 0, {'name': self.product1.name, 'product_id': self.product1.id, 'product_qty': 10.0, 'product_uom': self.product1.uom_po_id.id, 'price_unit': 100.0, 'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT)})]}
***************************************************************************************
create
{'name': time.strftime('%Y-%m-%d'), 'rate': 2.0, 'currency_id': eur_currency.id, 'company_id': po1.company_id.id}
***************************************************************************************
create
{'partner_id': self.partner_id.id, 'order_line': [(0, 0, {'name': self.product1.name, 'product_id': self.product1.id, 'product_qty': 10.0, 'product_uom': self.product1.uom_po_id.id, 'price_unit': 10.0, 'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT)})]}
***************************************************************************************
create
{'partner_id': self.partner_id.id, 'order_line': [(0, 0, {'name': self.product1.name, 'product_id': self.product1.id, 'product_qty': 10.0, 'product_uom': self.product1.uom_po_id.id, 'price_unit': 20.0, 'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT)})]}
***************************************************************************************
browse
stock_return_picking_action['res_id']
***************************************************************************************
search
[('account_id', '=', self.price_diff_account.id)]
***************************************************************************************
search
[('account_id', '=', self.price_diff_account.id)]
***************************************************************************************
search
[('account_id', '=', self.stock_input_account.id)]
***************************************************************************************
create
{'name': 'Tax with no account', 'amount_type': 'fixed', 'amount': 5, 'sequence': 8}
***************************************************************************************
create
{'partner_id': self.partner_id.id, 'order_line': [(0, 0, {'name': self.product1.name, 'product_id': self.product1.id, 'taxes_id': [(4, tax_with_no_account.id)], 'product_qty': 10.0, 'product_uom': self.product1.uom_po_id.id, 'price_unit': 10.0, 'date_planned': datetime.today().strftime(DEFAULT_SERVER_DATETIME_FORMAT)})]}
***************************************************************************************
create
{'name': date_po, 'rate': 1.0, 'currency_id': self.usd_currency.id, 'company_id': company.id}
***************************************************************************************
create
{'name': date_po, 'rate': 1.5, 'currency_id': self.eur_currency.id, 'company_id': company.id}
***************************************************************************************
create
{'currency_id': self.eur_currency.id, 'partner_id': self.partner_id.id, 'order_line': [(0, 0, {'name': self.product1.name, 'product_id': self.product1.id, 'product_qty': 1.0, 'product_uom': self.product1.uom_po_id.id, 'price_unit': 100.0, 'date_planned': date_po})]}
***************************************************************************************
create
{'name': date_po, 'rate': 1.0, 'currency_id': self.usd_currency.id, 'company_id': company.id}
***************************************************************************************
create
{'name': date_po, 'rate': 1.5, 'currency_id': self.eur_currency.id, 'company_id': company.id}
***************************************************************************************
create
{'name': date_invoice, 'rate': 2, 'currency_id': self.eur_currency.id, 'company_id': company.id}
***************************************************************************************
create
{'currency_id': self.eur_currency.id, 'partner_id': self.partner_id.id, 'order_line': [(0, 0, {'name': self.product1.name, 'product_id': self.product1.id, 'product_qty': 1.0, 'product_uom': self.product1.uom_po_id.id, 'price_unit': 100.0, 'date_planned': date_po}), (0, 0, {'name': product_standard.name, 'product_id': product_standard.id, 'product_qty': 1.0, 'product_uom': product_standard.uom_po_id.id, 'price_unit': 40.0, 'date_planned': date_po})]}
***************************************************************************************
create
{'name': date_po, 'rate': 1.0, 'currency_id': self.usd_currency.id, 'company_id': company.id}
***************************************************************************************
create
{'name': date_po, 'rate': 1.5, 'currency_id': self.eur_currency.id, 'company_id': company.id}
***************************************************************************************
create
{'name': date_delivery, 'rate': 0.7, 'currency_id': self.eur_currency.id, 'company_id': company.id}
***************************************************************************************
create
{'name': date_invoice, 'rate': 2, 'currency_id': self.eur_currency.id, 'company_id': company.id}
***************************************************************************************
create
{'currency_id': self.eur_currency.id, 'partner_id': self.partner_id.id, 'order_line': [(0, 0, {'name': product_avg.name, 'product_id': product_avg.id, 'product_qty': 1.0, 'product_uom': product_avg.uom_po_id.id, 'price_unit': 30.0, 'date_planned': date_po})]}
***************************************************************************************
create
{'name': date_po, 'rate': 1.0, 'currency_id': self.usd_currency.id, 'company_id': company.id}
***************************************************************************************
create
{'name': date_po, 'rate': 1.5, 'currency_id': self.eur_currency.id, 'company_id': company.id}
***************************************************************************************
create
{'name': date_delivery, 'rate': 0.7, 'currency_id': self.eur_currency.id, 'company_id': company.id}
***************************************************************************************
create
{'name': date_delivery1, 'rate': 0.8, 'currency_id': self.eur_currency.id, 'company_id': company.id}
***************************************************************************************
create
{'name': date_invoice, 'rate': 2, 'currency_id': self.eur_currency.id, 'company_id': company.id}
***************************************************************************************
create
{'name': date_invoice1, 'rate': 2.2, 'currency_id': self.eur_currency.id, 'company_id': company.id}
***************************************************************************************
create
{'currency_id': self.eur_currency.id, 'partner_id': self.partner_id.id, 'date_order': date_po, 'order_line': [(0, 0, {'name': product_avg.name, 'product_id': product_avg.id, 'product_qty': 10.0, 'product_uom': product_avg.uom_po_id.id, 'price_unit': 30.0, 'date_planned': date_po})]}
***************************************************************************************
search
[('backorder_id', '=', picking.id)]
***************************************************************************************
search
[('account_id', '=', self.price_diff_account.id)]
***************************************************************************************
search
[('account_id', '=', self.stock_input_account.id)]
***************************************************************************************
search
[('account_id', '=', self.price_diff_account.id)]
***************************************************************************************
search
[('account_id', '=', self.stock_input_account.id)]
***************************************************************************************
search
[('account_id', '=', self.price_diff_account.id)]
***************************************************************************************
search
[('account_id', '=', self.stock_input_account.id)]
***************************************************************************************
browse
res_dict.get('res_id')
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
search
[('message_id', 'in', self.ids), ('consumed', '=', True)]
***************************************************************************************
_get_id
self._name
***************************************************************************************
browse
values['res_id']
***************************************************************************************
search
[('rating_ids', 'in', self.ids)]
***************************************************************************************
_get
parent_res_model._name
***************************************************************************************
read_group
domain['parent_res_id', 'rating']['parent_res_id', 'rating']
***************************************************************************************
read_group
domain['rating:avg']
***************************************************************************************
read_group
base_domain['rating']['rating', 'res_id']
***************************************************************************************
search
[('res_model', '=', self._name), ('res_id', '=', record.id), ('consumed', '=', True)]
***************************************************************************************
_xmlid_to_res_id
'mail.mt_note'
***************************************************************************************
search
[('access_token', '=', token)]
***************************************************************************************
search
[('res_model', '=', self._name), ('res_id', '=', self.ids[0])]
***************************************************************************************
_get_id
self._name
***************************************************************************************
with_user
self.user_emp
***************************************************************************************
with_user
self.user_portal
***************************************************************************************
with_user
self.user_public
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
_get_available_quantity
self.product_idself.location_idself.lot_id
***************************************************************************************
_get_available_quantity
self.product_idself.location_idself.lot_id
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
search
[('company_id', 'in', [self.env.company.id, False])]
***************************************************************************************
next_by_code
'repair.order'
***************************************************************************************
_get_available_quantity
repair.product_idrepair.location_idrepair.lot_id
***************************************************************************************
get_fiscal_position
partner_invoice.id
***************************************************************************************
search
[('company_id', '=', self.company_id.id)]
***************************************************************************************
get_fiscal_position
partner_invoice.id
***************************************************************************************
_get_available_quantity
move.product_idmove.location_id
***************************************************************************************
search
args
***************************************************************************************
search
[('usage', '=', 'production'), ('company_id', '=', self.repair_id.company_id.id)]
***************************************************************************************
get_fiscal_position
partner_invoice.id
***************************************************************************************
search
[('company_id', 'in', [self.env.company.id, False])]
***************************************************************************************
search
[('usage', '=', 'production'), ('company_id', '=', self.repair_id.company_id.id)]
***************************************************************************************
search
[('scrap_location', '=', True), ('company_id', 'in', [self.repair_id.company_id.id, False])]
***************************************************************************************
with_company
company_id
***************************************************************************************
search
[('lot_id', 'in', self.ids), ('state', '=', 'done')]
***************************************************************************************
create
{'product_id': product_to_repair.id, 'product_uom': product_to_repair.uom_id.id, 'address_id': partner.id, 'guarantee_limit': '2019-01-01', 'invoice_method': invoice_method, 'partner_invoice_id': partner.id, 'location_id': self.stock_warehouse.lot_stock_id.id, 'partner_id': self.res_partner_12.id}
***************************************************************************************
create
{'name': 'Add The product', 'type': 'add', 'product_id': product_to_add.id, 'product_uom_qty': qty, 'product_uom': product_to_add.uom_id.id, 'price_unit': price_unit, 'repair_id': repair_id, 'location_id': self.stock_warehouse.lot_stock_id.id, 'location_dest_id': product_to_add.property_stock_production.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'PC Assemble + Custom (PC on Demand)', 'product_id': product_service.id, 'product_uom_qty': qty, 'product_uom': product_service.uom_id.id, 'price_unit': price_unit, 'repair_id': repair_id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'group': True}
***************************************************************************************
create
{'name': 'SuperCompany'}
***************************************************************************************
create
{'name': 'C01 Tax', 'amount': '0.00', 'company_id': company01.id}
***************************************************************************************
create
{'name': 'C02 Tax', 'amount': '0.00', 'company_id': company02.id}
***************************************************************************************
create
{'name': 'SuperProduct', 'taxes_id': [(4, tax01.id), (4, tax02.id)]}
***************************************************************************************
browse
self._context['active_ids']
***************************************************************************************
create
{'name': _('Standard 40 hours/week'), 'company_id': company.id}
***************************************************************************************
get_week_type
today
***************************************************************************************
search
domain
***************************************************************************************
search
domain
***************************************************************************************
browse
company_id
***************************************************************************************
browse
res['company_id']
***************************************************************************************
browse
res['company_id']
***************************************************************************************
get_week_type
start
***************************************************************************************
browse
values['company_id']
***************************************************************************************
browse
values.get('user_id')
***************************************************************************************
browse
values.get('calendar_id')
***************************************************************************************
create
resource_vals
***************************************************************************************
browse
values.get('resource_calendar_id')
***************************************************************************************
create
{'name': name, 'tz': tz, 'attendance_ids': [(0, 0, {'name': '%s_%d' % (name, index), 'hour_from': att[0], 'hour_to': att[1], 'dayofweek': str(att[2])}) for (index, att) in enumerate(attendances)]}
***************************************************************************************
create
{'name': name, 'tz': tz, 'two_weeks_calendar': True, 'attendance_ids': [(0, 0, {'name': '%s_%d' % (name, index), 'hour_from': att[0], 'hour_to': att[1], 'dayofweek': str(att[2]), 'week_type': att[3], 'display_type': att[4], 'sequence': att[5]}) for (index, att) in enumerate(attendances)]}
***************************************************************************************
create
{'name': 'Jean', 'resource_calendar_id': self.calendar_jean.id}
***************************************************************************************
create
{'name': 'Patel', 'resource_calendar_id': self.calendar_patel.id}
***************************************************************************************
create
{'name': 'John', 'resource_calendar_id': self.calendar_john.id}
***************************************************************************************
create
{'name': 'Jules', 'resource_calendar_id': self.calendar_jules.id}
***************************************************************************************
create
{'name': 'Paul', 'resource_calendar_id': self.calendar_paul.id}
***************************************************************************************
create
{'name': 'Global Leave', 'resource_id': False, 'calendar_id': self.calendar_jean.id, 'date_from': datetime_str(2018, 4, 3, 0, 0, 0, tzinfo=self.jean.tz), 'date_to': datetime_str(2018, 4, 3, 23, 59, 59, tzinfo=self.jean.tz)}
***************************************************************************************
create
{'name': 'leave for Jean', 'calendar_id': self.calendar_jean.id, 'resource_id': self.jean.resource_id.id, 'date_from': datetime_str(2018, 4, 5, 0, 0, 0, tzinfo=self.jean.tz), 'date_to': datetime_str(2018, 4, 5, 23, 59, 59, tzinfo=self.jean.tz)}
***************************************************************************************
create
{'name': 'zero_length', 'calendar_id': self.calendar_patel.id, 'resource_id': False, 'date_from': datetime_str(2018, 4, 3, 0, 0, 0, tzinfo=self.patel.tz), 'date_to': datetime_str(2018, 4, 3, 0, 0, 0, tzinfo=self.patel.tz)}
***************************************************************************************
create
{'name': 'zero_length', 'calendar_id': self.calendar_patel.id, 'resource_id': False, 'date_from': datetime_str(2018, 4, 3, 9, 0, 0, tzinfo=self.patel.tz), 'date_to': datetime_str(2018, 4, 3, 12, 0, 0, tzinfo=self.patel.tz)}
***************************************************************************************
create
{'name': 'zero_length', 'calendar_id': self.calendar_patel.id, 'resource_id': False, 'date_from': datetime_str(2018, 4, 3, 0, 0, 0, tzinfo=self.patel.tz), 'date_to': datetime_str(2018, 4, 3, 0, 0, 10, tzinfo=self.patel.tz)}
***************************************************************************************
create
{'name': 'no timezone', 'calendar_id': self.calendar_patel.id, 'resource_id': False, 'date_from': datetime_str(2018, 4, 3, 4, 0, 0), 'date_to': datetime_str(2018, 4, 4, 4, 0, 0)}
***************************************************************************************
create
{'name': 'Leave Jules week 2', 'calendar_id': self.calendar_jules.id, 'resource_id': False, 'date_from': datetime_str(2018, 4, 11, 4, 0, 0, tzinfo=self.jules.tz), 'date_to': datetime_str(2018, 4, 13, 4, 0, 0, tzinfo=self.jules.tz)}
***************************************************************************************
create
{'name': 'Leave Jules week 2', 'calendar_id': self.calendar_jules.id, 'resource_id': False, 'date_from': datetime_str(2018, 4, 9, 0, 0, 0, tzinfo=self.jules.tz), 'date_to': datetime_str(2018, 4, 9, 23, 59, 0, tzinfo=self.jules.tz)}
***************************************************************************************
create
{'name': 'small leave', 'resource_id': False, 'date_from': datetime_str(2018, 4, 3, 9, 0, 0, tzinfo=self.patel.tz), 'date_to': datetime_str(2018, 4, 3, 12, 0, 0, tzinfo=self.patel.tz)}
***************************************************************************************
create
{'name': 'Att4', 'calendar_id': self.calendar_jean.id, 'dayofweek': '2', 'hour_from': 0, 'hour_to': 24}
***************************************************************************************
create
{'name': 'global', 'calendar_id': self.calendar_jean.id, 'resource_id': False, 'date_from': datetime_str(2018, 4, 11, 0, 0, 0, tzinfo=self.jean.tz), 'date_to': datetime_str(2018, 4, 11, 23, 59, 59, tzinfo=self.jean.tz)}
***************************************************************************************
create
{'name': 'global', 'calendar_id': self.calendar_jean.id, 'resource_id': False, 'date_from': datetime_str(2018, 4, 11, 0, 0, 0, tzinfo=self.jean.tz), 'date_to': datetime_str(2018, 4, 11, 23, 59, 59, tzinfo=self.jean.tz)}
***************************************************************************************
create
{'name': 'Att4', 'calendar_id': self.calendar_john.id, 'dayofweek': '4', 'hour_from': 5, 'hour_to': 6, 'resource_id': self.john.resource_id.id}
***************************************************************************************
create
{'name': 'half', 'calendar_id': self.calendar_jean.id, 'resource_id': self.jean.resource_id.id, 'date_from': datetime_str(2018, 4, 2, 10, 0, 0, tzinfo=self.jean.tz), 'date_to': datetime_str(2018, 4, 2, 14, 0, 0, tzinfo=self.jean.tz)}
***************************************************************************************
create
{'name': 'zero', 'calendar_id': self.calendar_jean.id, 'resource_id': False, 'date_from': datetime_str(2018, 4, 2, 10, 0, 0, tzinfo=self.jean.tz), 'date_to': datetime_str(2018, 4, 2, 10, 0, 0, tzinfo=self.jean.tz)}
***************************************************************************************
create
{'name': 'small', 'calendar_id': self.calendar_jean.id, 'resource_id': False, 'date_from': datetime_str(2018, 4, 2, 10, 0, 0, tzinfo=self.jean.tz), 'date_to': datetime_str(2018, 4, 2, 10, 0, 1, tzinfo=self.jean.tz)}
***************************************************************************************
create
{'name': 'Jean is visiting India', 'calendar_id': self.jean.resource_calendar_id.id, 'resource_id': self.jean.resource_id.id, 'date_from': datetime_str(2018, 4, 10, 8, 0, 0, tzinfo=self.jean.tz), 'date_to': datetime_str(2018, 4, 10, 16, 0, 0, tzinfo=self.jean.tz)}
***************************************************************************************
create
{'name': 'Jean is comming in USA', 'calendar_id': self.jean.resource_calendar_id.id, 'resource_id': self.jean.resource_id.id, 'date_from': datetime_str(2018, 4, 12, 8, 0, 0, tzinfo=self.john.tz), 'date_to': datetime_str(2018, 4, 12, 16, 0, 0, tzinfo=self.john.tz)}
***************************************************************************************
create
{'name': 'John is sick', 'calendar_id': self.john.resource_calendar_id.id, 'resource_id': self.john.resource_id.id, 'date_from': datetime_str(2018, 4, 10, 0, 0, 0, tzinfo=self.jean.tz), 'date_to': datetime_str(2018, 4, 10, 20, 0, 0, tzinfo=self.jean.tz)}
***************************************************************************************
create
{'name': 'John goes to holywood', 'calendar_id': self.john.resource_calendar_id.id, 'resource_id': self.john.resource_id.id, 'date_from': datetime_str(2018, 4, 13, 7, 0, 0, tzinfo=self.john.tz), 'date_to': datetime_str(2018, 4, 13, 18, 0, 0, tzinfo=self.john.tz)}
***************************************************************************************
create
{'name': 'half', 'calendar_id': self.calendar_jean.id, 'resource_id': self.jean.resource_id.id, 'date_from': datetime_str(2018, 4, 2, 10, 0, 0, tzinfo=self.jean.tz), 'date_to': datetime_str(2018, 4, 2, 14, 0, 0, tzinfo=self.jean.tz)}
***************************************************************************************
create
{'name': 'zero', 'calendar_id': self.calendar_jean.id, 'resource_id': False, 'date_from': datetime_str(2018, 4, 2, 10, 0, 0, tzinfo=self.jean.tz), 'date_to': datetime_str(2018, 4, 2, 10, 0, 0, tzinfo=self.jean.tz)}
***************************************************************************************
create
{'name': 'small', 'calendar_id': self.calendar_jean.id, 'resource_id': False, 'date_from': datetime_str(2018, 4, 2, 10, 0, 0, tzinfo=self.jean.tz), 'date_to': datetime_str(2018, 4, 2, 10, 0, 1, tzinfo=self.jean.tz)}
***************************************************************************************
create
{'name': "Jean's son is sick", 'calendar_id': self.jean.resource_calendar_id.id, 'resource_id': False, 'date_from': datetime_str(2018, 4, 10, 0, 0, 0, tzinfo=self.jean.tz), 'date_to': datetime_str(2018, 4, 10, 23, 59, 59, tzinfo=self.jean.tz)}
***************************************************************************************
create
{'name': 'half', 'calendar_id': self.jean.resource_calendar_id.id, 'resource_id': self.jean.resource_id.id, 'date_from': datetime_str(2018, 4, 2, 10, 0, 0, tzinfo=self.jean.tz), 'date_to': datetime_str(2018, 4, 2, 14, 0, 0, tzinfo=self.jean.tz)}
***************************************************************************************
create
{'name': 'small', 'calendar_id': self.jean.resource_calendar_id.id, 'resource_id': self.jean.resource_id.id, 'date_from': datetime_str(2018, 4, 2, 10, 0, 0, tzinfo=self.jean.tz), 'date_to': datetime_str(2018, 4, 2, 10, 0, 1, tzinfo=self.jean.tz)}
***************************************************************************************
create
{'name': 'zero', 'calendar_id': self.jean.resource_calendar_id.id, 'resource_id': self.jean.resource_id.id, 'date_from': datetime_str(2018, 4, 2, 10, 0, 0, tzinfo=self.jean.tz), 'date_to': datetime_str(2018, 4, 2, 10, 0, 0, tzinfo=self.jean.tz)}
***************************************************************************************
create
{'name': 'small', 'calendar_id': self.jean.resource_calendar_id.id, 'resource_id': self.jean.resource_id.id, 'date_from': datetime_str(2018, 4, 2, 10, 0, 0, tzinfo=self.jean.tz), 'date_to': datetime_str(2018, 4, 2, 14, 0, 0, tzinfo=self.jean.tz)}
***************************************************************************************
create
{'name': 'small', 'calendar_id': self.jean.resource_calendar_id.id, 'resource_id': self.jean.resource_id.id, 'date_from': datetime_str(2018, 4, 2, 10, 0, 0, tzinfo=self.jean.tz), 'date_to': datetime_str(2018, 4, 2, 10, 0, 1, tzinfo=self.jean.tz)}
***************************************************************************************
create
{'name': 'zero', 'calendar_id': self.jean.resource_calendar_id.id, 'resource_id': self.jean.resource_id.id, 'date_from': datetime_str(2018, 4, 2, 10, 0, 0, tzinfo=self.jean.tz), 'date_to': datetime_str(2018, 4, 2, 10, 0, 0, tzinfo=self.jean.tz)}
***************************************************************************************
create
{'name': '', 'calendar_id': self.jean.resource_calendar_id.id, 'resource_id': self.jean.resource_id.id, 'date_from': datetime_str(2018, 4, 9, 8, 0, 0, tzinfo=self.tz2), 'date_to': datetime_str(2018, 4, 9, 14, 0, 0, tzinfo=self.tz2)}
***************************************************************************************
create
{'name': '', 'calendar_id': self.jean.resource_calendar_id.id, 'resource_id': self.jean.resource_id.id, 'date_from': datetime_str(2018, 4, 9, 8, 0, 0, tzinfo=self.tz2), 'date_to': datetime_str(2018, 4, 9, 14, 0, 0, tzinfo=self.tz2)}
***************************************************************************************
create
{'name': 'error cannot return in the past', 'resource_id': False, 'calendar_id': self.calendar_jean.id, 'date_from': datetime_str(2018, 4, 3, 20, 0, 0, tzinfo=self.jean.tz), 'date_to': datetime_str(2018, 4, 3, 0, 0, 0, tzinfo=self.jean.tz)}
***************************************************************************************
create
{'name': 'error caused by timezones', 'resource_id': False, 'calendar_id': self.calendar_jean.id, 'date_from': datetime_str(2018, 4, 3, 10, 0, 0, tzinfo='UTC'), 'date_to': datetime_str(2018, 4, 3, 12, 0, 0, tzinfo='Etc/GMT-6')}
***************************************************************************************
with_company
self.company_id
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
create
sale_line_values_to_create
***************************************************************************************
search
[('order_id', '=', order.id)]
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
search
[('analytic_account_id', 'in', analytic_accounts.ids), ('state', '=', 'sale')]
***************************************************************************************
search
[('analytic_account_id', 'in', analytic_accounts_without_open_order.ids)]
***************************************************************************************
search
[('order_id', '=', sale_order.id), ('price_unit', '=', price), ('product_id', '=', move_line.product_id.id), ('is_expense', '=', True)]
***************************************************************************************
_where_calc
[('team_id', 'in', self.ids), ('state', 'in', ['draft', 'sent'])]
***************************************************************************************
_apply_ir_rules
query'read'
***************************************************************************************
read_group
[('team_id', 'in', self.ids), ('invoice_status', '=', 'to invoice')]['team_id']['team_id']
***************************************************************************************
read_group
[('team_id', 'in', self.ids), ('state', '!=', 'cancel')]['team_id']['team_id']
***************************************************************************************
_for_xml_id
'sale.action_order_report_so_salesteam'
***************************************************************************************
browse
order_ids
***************************************************************************************
read_group
domain['product_id', 'product_uom_qty']['product_id']
***************************************************************************************
_for_xml_id
'sale.report_all_channels_sales_action'
***************************************************************************************
read_group
domain['product_id']['product_id']
***************************************************************************************
_for_xml_id
'sale.report_all_channels_sales_action'
***************************************************************************************
browse
json.loads(product_template_attribute_value_ids)
***************************************************************************************
_for_xml_id
'sale.action_open_sale_onboarding_payment_acquirer_wizard'
***************************************************************************************
search
[('company_id', '=', company_id), ('partner_id', '=', partner.id), ('state', '=', 'draft')]
***************************************************************************************
_for_xml_id
'sale.action_orders'
***************************************************************************************
create
{'partner_id': partner.id}
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': _('Sample Order Line'), 'product_id': product.id, 'product_uom_qty': 10, 'price_unit': 123, 'order_id': sample_sales_order.id, 'company_id': sample_sales_order.company_id.id}
***************************************************************************************
create
{'name': _('Sample Product'), 'active': False, 'image_1920': base64.b64encode(open(default_image_path, 'rb').read())}
***************************************************************************************
set_param
'sale.automatic_invoice'False
***************************************************************************************
default_get
['quotation_validity_days']
***************************************************************************************
default_get
['quotation_validity_days']
***************************************************************************************
_for_xml_id
'account.action_move_out_invoice_type'
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
browse
invoiceable_line_ids + down_payment_line_ids
***************************************************************************************
browse
template_id
***************************************************************************************
_fix_tax_included_price_company
line._get_display_price(product)line.product_id.taxes_idline.tax_idline.company_id
***************************************************************************************
browse
vals.get('partner_id')
***************************************************************************************
check_access_rights
'create'False
***************************************************************************************
_xmlid_to_res_id
'sale.email_template_edi_sale'
***************************************************************************************
create
order._prepare_analytic_account_data(prefix)
***************************************************************************************
read_group
[('order_id', 'in', confirmed_orders.ids), ('is_downpayment', '=', False), ('display_type', '=', False)]['order_id', 'invoice_status']['order_id', 'invoice_status']
***************************************************************************************
with_company
self.company_id
***************************************************************************************
next_by_code
'sale.order'
***************************************************************************************
search
[('id', '=', template_id)]
***************************************************************************************
_xmlid_to_res_id
'sale.mail_template_sale_confirmation'
***************************************************************************************
_get_conversion_rate
order.company_id.currency_idorder.currency_idorder.company_idorder.date_order
***************************************************************************************
default_get
['invoice_payment_term_id']
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
read_group
domain['so_line', 'unit_amount', 'product_uom_id']['product_uom_id', 'so_line']
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
search
[('name', 'in', protected_fields_modified), ('model', '=', self._name)]
***************************************************************************************
_fix_tax_included_price_company
self._get_display_price(product)product.taxes_idself.tax_idself.company_id
***************************************************************************************
_fix_tax_included_price_company
self._get_display_price(product)product.taxes_idself.tax_idself.company_id
***************************************************************************************
browse
product_uom_ids
***************************************************************************************
read_group
[('campaign_id', 'in', self.ids)]['campaign_id']['campaign_id']
***************************************************************************************
flush
['balance', 'move_id', 'account_id', 'exclude_from_invoice_tab']
***************************************************************************************
flush
['state', 'campaign_id', 'move_type']
***************************************************************************************
_for_xml_id
'sale.action_quotations_with_onboarding'
***************************************************************************************
_for_xml_id
'account.action_move_journal_line'
***************************************************************************************
search
[('campaign_id', '=', self.id)]
***************************************************************************************
search
[('id', 'in', attribute_ids), ('display_type', '=', 'color')]
***************************************************************************************
browse
self.env.registry.populated_models['res.partner']
***************************************************************************************
browse
self.env.registry.populated_models['product.pricelist']
***************************************************************************************
browse
self.env.registry.populated_models['res.users']
***************************************************************************************
browse
random.sample(order_ids, int(len(order_ids) * sample_ratio))
***************************************************************************************
search
[('product_tmpl_id', 'in', self.env.registry.populated_models['product.template'])]
***************************************************************************************
concat
*x_by_company.get(False, [])
***************************************************************************************
browse
product_ids
***************************************************************************************
browse
values['product_id']
***************************************************************************************
concat
*x_records
***************************************************************************************
browse
docids
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
with_user
self.company_data['default_user_salesman_2']
***************************************************************************************
with_user
self.company_data['default_user_portal']
***************************************************************************************
with_user
self.company_data['default_user_employee']
***************************************************************************************
search
self.wizard.create_entries()['domain']
***************************************************************************************
search
self.wizard.create_entries()['domain']
***************************************************************************************
create
{'name': 'Virtual Home Staging', 'list_price': 100}
***************************************************************************************
create
{'name': 'Christmas pricelist', 'item_ids': [(0, 0, {'date_start': '2017-12-01', 'date_end': '2017-12-24', 'compute_price': 'percentage', 'base': 'list_price', 'percent_price': 20, 'applied_on': '3_global', 'name': 'Pre-Christmas discount'}), (0, 0, {'date_start': '2017-12-25', 'date_end': '2017-12-31', 'compute_price': 'percentage', 'base': 'list_price', 'percent_price': 50, 'applied_on': '3_global', 'name': 'Post-Christmas super-discount'})]}
***************************************************************************************
create
{'name': 'Drawer Black', 'list_price': 100}
***************************************************************************************
create
{'name': '10 units', 'factor_inv': 10, 'uom_type': 'bigger', 'rounding': 1.0, 'category_id': categ_unit_id}
***************************************************************************************
create
{'name': 'Christmas pricelist', 'discount_policy': 'without_discount', 'item_ids': [(0, 0, {'date_start': '2017-12-01', 'date_end': '2017-12-30', 'compute_price': 'percentage', 'base': 'list_price', 'percent_price': 10, 'applied_on': '3_global', 'name': 'Christmas discount'})]}
***************************************************************************************
create
{'partner_id': partner.id, 'date_order': '2017-12-20', 'pricelist_id': christmas_pricelist.id}
***************************************************************************************
new
{'order_id': so.id, 'product_id': computer_case.id}
***************************************************************************************
create
{'name': 'Drawer Black', 'list_price': 100}
***************************************************************************************
create
{'name': 'First pricelist', 'discount_policy': 'without_discount', 'item_ids': [(0, 0, {'compute_price': 'percentage', 'base': 'list_price', 'percent_price': 10, 'applied_on': '3_global', 'name': 'First discount'})]}
***************************************************************************************
create
{'name': 'Second pricelist', 'discount_policy': 'without_discount', 'item_ids': [(0, 0, {'compute_price': 'formula', 'base': 'pricelist', 'base_pricelist_id': first_pricelist.id, 'price_discount': 10, 'applied_on': '3_global', 'name': 'Second discount'})]}
***************************************************************************************
create
{'partner_id': partner.id, 'date_order': '2018-07-11', 'pricelist_id': second_pricelist.id}
***************************************************************************************
new
{'order_id': so.id, 'product_id': computer_case.id}
***************************************************************************************
create
{'name': 'Drawer Black', 'list_price': 100}
***************************************************************************************
create
{'name': 'other currency', 'symbol': 'other'}
***************************************************************************************
create
{'name': '2018-07-11', 'rate': 2.0, 'currency_id': other_currency.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': '10 units', 'factor_inv': 10, 'uom_type': 'bigger', 'rounding': 1.0, 'category_id': categ_unit_id}
***************************************************************************************
create
{'name': 'First pricelist', 'currency_id': other_currency.id, 'discount_policy': 'with_discount', 'item_ids': [(0, 0, {'compute_price': 'percentage', 'base': 'list_price', 'percent_price': 10, 'applied_on': '3_global', 'name': 'First discount'})]}
***************************************************************************************
create
{'partner_id': partner.id, 'date_order': '2018-07-12', 'pricelist_id': first_pricelist.id}
***************************************************************************************
new
{'order_id': so.id, 'product_id': computer_case.id}
***************************************************************************************
create
{'name': 'Test', 'sale_warn': 'warning', 'sale_warn_msg': 'Highly infectious disease'}
***************************************************************************************
create
{'name': 'Test2', 'sale_warn': 'block', 'sale_warn_msg': 'Cannot afford our services'}
***************************************************************************************
create
{'partner_id': partner_with_warning.id}
***************************************************************************************
create
{'name': 'Test Product', 'sale_line_warn': 'warning', 'sale_line_warn_msg': 'Highly corrosive'}
***************************************************************************************
create
{'name': 'Test Product (2)', 'sale_line_warn': 'block', 'sale_line_warn_msg': 'Not produced anymore'}
***************************************************************************************
create
{'order_id': sale_order.id, 'product_id': product_with_warning.id}
***************************************************************************************
search
[('currency_id', '=', self.env.company.currency_id.id)]
***************************************************************************************
create
{'name': self.company_data['product_order_cost'].name, 'product_id': self.company_data['product_order_cost'].id, 'product_uom_qty': 2, 'qty_delivered': 1, 'product_uom': self.company_data['product_order_cost'].uom_id.id, 'price_unit': self.company_data['product_order_cost'].list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'name': self.company_data['product_delivery_cost'].name, 'product_id': self.company_data['product_delivery_cost'].id, 'product_uom_qty': 4, 'qty_delivered': 1, 'product_uom': self.company_data['product_delivery_cost'].uom_id.id, 'price_unit': self.company_data['product_delivery_cost'].list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
[{'move_type': 'out_invoice', 'partner_id': self.partner_a.id, 'invoice_date': '2020-01-10', 'invoice_line_ids': [(0, 0, {'product_id': self.product_a.id, 'price_unit': 1000.0})]}, {'move_type': 'out_refund', 'partner_id': self.partner_a.id, 'invoice_date': '2020-01-10', 'invoice_line_ids': [(0, 0, {'product_id': self.product_a.id, 'price_unit': 500.0})]}, {'move_type': 'in_invoice', 'partner_id': self.partner_a.id, 'invoice_date': '2020-01-01', 'date': '2020-01-01', 'invoice_line_ids': [(0, 0, {'product_id': self.product_a.id, 'price_unit': 800.0})]}]
***************************************************************************************
create
{'name': self.company_data['product_delivery_sales_price'].name, 'product_id': self.company_data['product_delivery_sales_price'].id, 'product_uom_qty': 2, 'qty_delivered': 1, 'product_uom': self.company_data['product_delivery_sales_price'].uom_id.id, 'price_unit': self.company_data['product_delivery_sales_price'].list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'name': self.company_data['product_order_sales_price'].name, 'product_id': self.company_data['product_order_sales_price'].id, 'product_uom_qty': 3, 'qty_delivered': 1, 'product_uom': self.company_data['product_order_sales_price'].uom_id.id, 'price_unit': self.company_data['product_order_sales_price'].list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'name': self.company_data['product_delivery_no'].name, 'product_id': self.company_data['product_delivery_no'].id, 'product_uom_qty': 2, 'qty_delivered': 1, 'product_uom': self.company_data['product_delivery_no'].uom_id.id, 'price_unit': self.company_data['product_delivery_no'].list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'name': self.company_data['product_delivery_cost'].name, 'product_id': self.company_data['product_delivery_cost'].id, 'product_uom_qty': 1, 'product_uom': self.company_data['product_delivery_cost'].uom_id.id, 'price_unit': self.company_data['product_delivery_cost'].list_price, 'discount': 100.0, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'name': self.company_data['product_delivery_sales_price'].name, 'product_id': self.company_data['product_delivery_sales_price'].id, 'product_uom_qty': 1, 'product_uom': self.company_data['product_delivery_sales_price'].uom_id.id, 'price_unit': self.company_data['product_delivery_sales_price'].list_price, 'discount': 100.0, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'name': 'Ordered at cost', 'standard_price': 160, 'list_price': 180, 'type': 'consu', 'invoice_policy': 'order', 'expense_policy': 'cost', 'default_code': 'PROD_COST', 'service_type': 'manual'}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'partner_invoice_id': self.partner_a.id, 'partner_shipping_id': self.partner_a.id, 'order_line': [(0, 0, {'name': prod_gap.name, 'product_id': prod_gap.id, 'product_uom_qty': 2, 'product_uom': prod_gap.uom_id.id, 'price_unit': prod_gap.list_price})], 'pricelist_id': self.company_data['default_pricelist'].id}
***************************************************************************************
create
{'name': 'Tax with price include', 'amount': 10, 'price_include': True}
***************************************************************************************
create
{'name': 'Tax with no price include', 'amount': 10}
***************************************************************************************
create
{'name': 'shared product', 'invoice_policy': 'order', 'taxes_id': [(6, False, (self.company_data['default_tax_sale'] + self.company_data_2['default_tax_sale']).ids)], 'property_account_income_id': self.company_data['default_account_revenue'].id}
***************************************************************************************
create
{'name': 'EUR', 'currency_id': self.env.ref('base.EUR').id}
***************************************************************************************
create
{'name': 'USD', 'currency_id': self.env.ref('base.USD').id}
***************************************************************************************
create
{'name': 'This is a note', 'display_type': 'line_note', 'product_id': False, 'product_uom_qty': 0, 'product_uom': False, 'price_unit': 0, 'order_id': self.sale_order.id, 'tax_id': False}
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'Test', 'currency_id': other_curr.id}
***************************************************************************************
create
{'company_id': other_company.id, 'company_ids': [(6, 0, [other_company.id])], 'name': 'E.T', 'login': 'hohoho'}
***************************************************************************************
create
{'name': '2010-01-01', 'rate': 2.0, 'currency_id': main_curr.id, 'company_id': False}
***************************************************************************************
create
{'name': 'Test multi-currency', 'discount_policy': 'without_discount', 'currency_id': other_curr.id, 'item_ids': [(0, 0, {'base': 'list_price', 'product_id': product_1.id, 'compute_price': 'percentage', 'percent_price': 20}), (0, 0, {'base': 'standard_price', 'product_id': product_2.id, 'compute_price': 'percentage', 'percent_price': 10})]}
***************************************************************************************
create
{'name': 'Customer of User In Team', 'user_id': self.user_in_team.id, 'team_id': self.crm_team1.id}
***************************************************************************************
create
{'partner_id': partner.id}
***************************************************************************************
create
{'name': 'Customer of User Not In Team', 'user_id': self.user_not_in_team.id, 'team_id': self.crm_team1.id}
***************************************************************************************
create
{'partner_id': partner.id}
***************************************************************************************
create
{'user_id': self.user_not_in_team.id, 'partner_id': self.partner_a.id, 'team_id': self.crm_team1.id}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'team_id': self.crm_team1.id}
***************************************************************************************
create
{'name': "I'm a partner"}
***************************************************************************************
create
{'name': "I'm a product"}
***************************************************************************************
create
{'name': "I'm a packaging", 'product_id': product.id, 'qty': 1.0}
***************************************************************************************
create
{'name': "I'm also a packaging", 'product_id': product.id, 'qty': 12.0}
***************************************************************************************
create
{'partner_id': partner.id}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'partner_invoice_id': self.partner_a.id, 'partner_shipping_id': self.partner_a.id, 'pricelist_id': self.company_data['default_pricelist'].id}
***************************************************************************************
invalidate_cache
['price']
***************************************************************************************
invalidate_cache
['price']
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'product_id': self.product_a.id, 'product_uom_qty': 38, 'price_unit': 541.26, 'discount': 2.0})]}
***************************************************************************************
with_user
self.company_data['default_user_salesman']
***************************************************************************************
browse
email_ctx.get('default_template_id')
***************************************************************************************
search
[('code', '=', 'sale.order')]
***************************************************************************************
with_user
self.company_data['default_user_salesman']
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'A partner'}
***************************************************************************************
create
{'name': 'test pl', 'currency_id': to_currency.id, 'company_id': self.computer.company_id.id}
***************************************************************************************
create
{'min_quantity': 2, 'compute_price': 'percentage', 'percent_price': discount, 'pricelist_id': pricelist.id}
***************************************************************************************
create
{'product_tmpl_id': self.computer.id, 'attribute_id': self.ssd_attribute.id, 'value_ids': [(6, 0, [self.ssd_256.id, self.ssd_512.id])]}
***************************************************************************************
create
{'name': 'Keyboard', 'sequence': 6, 'create_variant': 'dynamic'}
***************************************************************************************
create
{'name': 'Included', 'attribute_id': self.keyboard_attribute.id, 'sequence': 1}
***************************************************************************************
create
{'name': 'Excluded', 'attribute_id': self.keyboard_attribute.id, 'sequence': 2}
***************************************************************************************
create
{'product_tmpl_id': self.computer.id, 'attribute_id': self.keyboard_attribute.id, 'value_ids': [(6, 0, [self.keyboard_included.id, self.keyboard_excluded.id])]}
***************************************************************************************
create
{'partner_id': 1}
***************************************************************************************
create
{'order_id': so.id, 'name': 'test', 'product_id': variant.id}
***************************************************************************************
create
{'order_id': so.id, 'name': 'test', 'product_id': variant2.id}
***************************************************************************************
create
{'order_id': so.id, 'name': 'test', 'product_id': variant4.id}
***************************************************************************************
create
{'order_id': so.id, 'name': 'test', 'product_id': variant5.id}
***************************************************************************************
browse
credit_note_wizard.reverse_moves()['res_id']
***************************************************************************************
browse
credit_note_wizard.reverse_moves()['res_id']
***************************************************************************************
with_context
{'active_ids': [self.invoice.id], 'active_id': self.invoice.id, 'active_model': 'account.move'}
***************************************************************************************
with_context
{'active_ids': self.invoice.ids, 'active_id': self.invoice.id, 'active_model': 'account.move'}
***************************************************************************************
with_context
{'active_ids': [self.invoice.id], 'active_id': self.invoice.id, 'active_model': 'account.move'}
***************************************************************************************
create
{'name': 'test SO', 'partner_id': portal_user.id, 'state': 'sent', 'require_payment': False}
***************************************************************************************
create
{'order_id': sales_order.id, 'product_id': self.env['product.product'].create({'name': 'A product'}).id}
***************************************************************************************
create
{'name': 'A product'}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': lines_vals}
***************************************************************************************
search
domain
***************************************************************************************
with_context
self.context
***************************************************************************************
with_context
self.context
***************************************************************************************
with_context
self.context
***************************************************************************************
browse
int(product_id)
***************************************************************************************
with_context
self.context
***************************************************************************************
with_context
self.context
***************************************************************************************
with_context
self.context
***************************************************************************************
with_context
self.context
***************************************************************************************
with_context
self.context
***************************************************************************************
browse
self._context.get('active_ids', [])
***************************************************************************************
browse
self._context.get('active_id')
***************************************************************************************
browse
self._context.get('active_id')
***************************************************************************************
browse
int(product_id)
***************************************************************************************
create
vals
***************************************************************************************
browse
res['res_id']
***************************************************************************************
browse
payment_link.res_id
***************************************************************************************
search_count
[('product_id', '=', program.discount_line_product_id.id)]
***************************************************************************************
search
[('product_id', '=', self.discount_line_product_id.id)]
***************************************************************************************
search
[('program_id', '=', program.id), ('state', '=', 'expired'), ('partner_id', '=', self.partner_id.id), ('order_id', '=', self.id), ('discount_line_product_id', '=', program.discount_line_product_id.id)]
***************************************************************************************
search
[('discount_line_product_id', '=', line.product_id.id)]
***************************************************************************************
search
[('reward_type', '=', 'product')]
***************************************************************************************
search
[('reward_type', '=', 'product'), ('reward_product_id', 'in', program.discount_specific_product_ids.ids)]
***************************************************************************************
create
dict(name='TEST')
***************************************************************************************
create
{'name': 'Buy A + 1 B, 1 B are free', 'promo_code_usage': 'no_code_needed', 'reward_type': 'product', 'reward_product_id': self.product_B.id, 'rule_products_domain': "[('id', 'in', [%s])]" % self.product_A.id, 'active': True, 'company_id': self.company_b.id}
***************************************************************************************
create
{'company_id': self.company_b.id, 'partner_id': order.partner_id.id}
***************************************************************************************
create
{'name': 'Large Cabinet', 'list_price': 320.0, 'taxes_id': False}
***************************************************************************************
create
{'name': 'Conference Chair', 'list_price': 16.5, 'taxes_id': False}
***************************************************************************************
create
{'name': 'Pedal Bin', 'list_price': 47.0, 'taxes_id': False}
***************************************************************************************
create
{'name': 'Drawer Black', 'list_price': 25.0, 'taxes_id': False}
***************************************************************************************
create
{'name': 'Large Meeting Table', 'list_price': 40000.0, 'taxes_id': False}
***************************************************************************************
create
{'name': 'Steve Bucknor', 'email': 'steve.bucknor@example.com'}
***************************************************************************************
create
{'partner_id': self.steve.id}
***************************************************************************************
create
{'name': 'Code for 10% on orders', 'promo_code_usage': 'code_needed', 'promo_code': 'test_10pc', 'discount_type': 'percentage', 'discount_percentage': 10.0, 'program_type': 'promotion_program'}
***************************************************************************************
create
{'name': 'Buy 3 cabinets, get one for free', 'promo_code_usage': 'no_code_needed', 'reward_type': 'product', 'program_type': 'promotion_program', 'reward_product_id': self.largeCabinet.id, 'rule_min_quantity': 3, 'rule_products_domain': '[["name","ilike","large cabinet"]]'}
***************************************************************************************
create
{'name': 'Buy 1 drawer black, get a free Large Meeting Table', 'promo_code_usage': 'no_code_needed', 'reward_type': 'product', 'program_type': 'promotion_program', 'reward_product_id': self.largeMeetingTable.id, 'rule_products_domain': '[["name","ilike","drawer black"]]'}
***************************************************************************************
create
{'name': '$100 coupon', 'program_type': 'coupon_program', 'reward_type': 'discount', 'discount_type': 'fixed_amount', 'discount_fixed_amount': 100, 'active': True, 'discount_apply_on': 'on_order', 'rule_minimum_amount': 100.0}
***************************************************************************************
create
{'product_id': self.largeCabinet.id, 'name': 'Large Cabinet', 'product_uom_qty': 4.0, 'order_id': order.id}
***************************************************************************************
create
{'product_id': self.drawerBlack.id, 'name': 'drawer black', 'product_uom_qty': 4.0, 'order_id': order.id}
***************************************************************************************
create
{'product_id': self.largeMeetingTable.id, 'name': 'Large Meeting Table', 'product_uom_qty': 1.0, 'order_id': order.id}
***************************************************************************************
create
{'product_id': self.largeCabinet.id, 'name': 'Large Cabinet', 'product_uom_qty': 4.0, 'order_id': order.id}
***************************************************************************************
create
{'name': '15% Tax', 'amount_type': 'percent', 'amount': 15, 'price_include': True}
***************************************************************************************
create
{'name': '20% reduction on Large Cabinet in cart', 'promo_code_usage': 'no_code_needed', 'reward_type': 'discount', 'program_type': 'promotion_program', 'discount_type': 'percentage', 'discount_percentage': 20.0, 'rule_minimum_amount': 320.0, 'discount_apply_on': 'specific_products', 'discount_specific_product_ids': [(6, 0, [self.largeCabinet.id])]}
***************************************************************************************
create
{'product_id': self.largeCabinet.id, 'name': 'Large Cabinet', 'product_uom_qty': 1.0, 'order_id': order.id}
***************************************************************************************
create
{'product_id': self.drawerBlack.id, 'name': 'Drawer Black', 'product_uom_qty': 10.0, 'order_id': order.id}
***************************************************************************************
create
{'name': '15% Tax excl', 'amount_type': 'percent', 'amount': 15}
***************************************************************************************
create
{'name': '50% Tax excl', 'amount_type': 'percent', 'amount': 50}
***************************************************************************************
create
{'name': '35% Tax incl', 'amount_type': 'percent', 'amount': 35, 'price_include': True}
***************************************************************************************
create
{'product_id': self.largeCabinet.id, 'name': 'Large Cabinet', 'product_uom_qty': 7.0, 'order_id': order.id}
***************************************************************************************
create
{'product_id': self.conferenceChair.id, 'name': 'Conference Chair', 'product_uom_qty': 5.0, 'order_id': order.id}
***************************************************************************************
create
{'product_id': self.pedalBin.id, 'name': 'Pedal Bin', 'product_uom_qty': 10.0, 'order_id': order.id}
***************************************************************************************
create
{'product_id': self.product_A.id, 'name': 'product A with multiple taxes', 'product_uom_qty': 3.0, 'order_id': order.id}
***************************************************************************************
create
{'product_id': self.drawerBlack.id, 'name': 'Drawer Black', 'product_uom_qty': 2.0, 'order_id': order.id}
***************************************************************************************
create
{'name': 'Buy 1 large cabinet, get one for free', 'promo_code_usage': 'no_code_needed', 'reward_type': 'product', 'program_type': 'promotion_program', 'reward_product_id': self.largeCabinet.id, 'rule_products_domain': '[["name","ilike","large cabinet"]]'}
***************************************************************************************
create
{'name': 'Buy 1 chair, get one for free', 'promo_code_usage': 'no_code_needed', 'reward_type': 'product', 'program_type': 'promotion_program', 'reward_product_id': self.conferenceChair.id, 'rule_products_domain': '[["name","ilike","conference chair"]]'}
***************************************************************************************
create
{'name': 'Buy 1 bin, get one for free', 'promo_code_usage': 'no_code_needed', 'reward_type': 'product', 'program_type': 'promotion_program', 'reward_product_id': self.pedalBin.id, 'rule_products_domain': '[["name","ilike","pedal bin"]]'}
***************************************************************************************
create
{'name': '20% reduction on Large Cabinet in cart', 'promo_code_usage': 'no_code_needed', 'reward_type': 'discount', 'program_type': 'promotion_program', 'discount_type': 'percentage', 'discount_percentage': 20.0, 'discount_apply_on': 'specific_products', 'discount_specific_product_ids': [(6, 0, [self.largeCabinet.id])]}
***************************************************************************************
create
{'product_id': self.largeCabinet.id, 'name': 'Large Cabinet', 'product_uom_qty': 1.0, 'order_id': order.id}
***************************************************************************************
create
{'name': '$249 discount', 'promo_code_usage': 'no_code_needed', 'program_type': 'promotion_program', 'discount_type': 'fixed_amount', 'discount_fixed_amount': 249.0}
***************************************************************************************
create
{'name': '0% Tax excl', 'amount_type': 'percent', 'amount': 0}
***************************************************************************************
create
{'product_id': self.drawerBlack.id, 'name': 'Drawer Black', 'product_uom_qty': 1.0, 'order_id': order.id}
***************************************************************************************
create
{'name': 'Free Pedal Bin if at least 1 article', 'promo_code_usage': 'no_code_needed', 'promo_applicability': 'on_next_order', 'program_type': 'promotion_program', 'reward_type': 'product', 'reward_product_id': self.pedalBin.id, 'rule_min_quantity': 2}
***************************************************************************************
create
{'product_id': self.largeCabinet.id, 'name': 'Large Cabinet', 'product_uom_qty': 1.0, 'order_id': order.id}
***************************************************************************************
create
{'product_id': self.conferenceChair.id, 'name': 'Conference Chair', 'product_uom_qty': 10.0, 'order_id': order.id}
***************************************************************************************
create
{'product_id': self.conferenceChair.id, 'name': 'Conference Chair', 'product_uom_qty': 10.0, 'order_id': order.id}
***************************************************************************************
create
{'name': '$100 promotion program', 'program_type': 'promotion_program', 'promo_code_usage': 'code_needed', 'promo_code': 'testpromo', 'reward_type': 'discount', 'discount_type': 'fixed_amount', 'discount_fixed_amount': 100, 'active': True, 'discount_apply_on': 'on_order', 'rule_minimum_amount': 100.0}
***************************************************************************************
create
{'name': '$288.5 coupon', 'program_type': 'coupon_program', 'reward_type': 'discount', 'discount_type': 'fixed_amount', 'discount_fixed_amount': 288.5, 'active': True, 'discount_apply_on': 'on_order'}
***************************************************************************************
create
[{'product_id': self.conferenceChair.id, 'name': 'Conference Chair', 'product_uom_qty': 1.0, 'price_unit': 100.0, 'order_id': order.id, 'tax_id': [(6, 0, (self.tax_15pc_excl.id,))]}, {'product_id': self.pedalBin.id, 'name': 'Computer Case', 'product_uom_qty': 1.0, 'price_unit': 100.0, 'order_id': order.id, 'tax_id': [(6, 0, [])]}, {'product_id': self.product_A.id, 'name': 'Computer Case', 'product_uom_qty': 1.0, 'price_unit': 100.0, 'order_id': order.id, 'tax_id': [(6, 0, [])]}]
***************************************************************************************
create
{'name': '$290 coupon', 'program_type': 'coupon_program', 'reward_type': 'discount', 'discount_type': 'fixed_amount', 'discount_fixed_amount': 290, 'active': True, 'discount_apply_on': 'on_order'}
***************************************************************************************
create
[{'product_id': self.conferenceChair.id, 'name': 'Conference Chair', 'product_uom_qty': 1.0, 'price_unit': 100.0, 'order_id': order.id, 'tax_id': [(6, 0, (self.tax_10pc_incl.id,))]}, {'product_id': self.pedalBin.id, 'name': 'Computer Case', 'product_uom_qty': 1.0, 'price_unit': 100.0, 'order_id': order.id, 'tax_id': [(6, 0, [])]}, {'product_id': self.product_A.id, 'name': 'Computer Case', 'product_uom_qty': 1.0, 'price_unit': 100.0, 'order_id': order.id, 'tax_id': [(6, 0, [])]}]
***************************************************************************************
create
{'name': '20% reduction on Conference Chair and Drawer Black in cart', 'promo_code_usage': 'no_code_needed', 'reward_type': 'discount', 'program_type': 'promotion_program', 'discount_type': 'percentage', 'discount_percentage': 25.0, 'discount_apply_on': 'specific_products', 'discount_specific_product_ids': [(6, 0, [self.conferenceChair.id, self.drawerBlack.id])]}
***************************************************************************************
create
{'product_id': self.conferenceChair.id, 'name': 'Conference Chair', 'product_uom_qty': 4.0, 'order_id': order.id}
***************************************************************************************
create
{'product_id': self.drawerBlack.id, 'name': 'Drawer Black', 'product_uom_qty': 2.0, 'order_id': order.id}
***************************************************************************************
create
{'name': '30% Tax', 'amount_type': 'percent', 'amount': 30, 'price_include': True}
***************************************************************************************
create
{'name': 'Buy 2 Chairs, get 1 free', 'promo_code_usage': 'no_code_needed', 'reward_type': 'product', 'program_type': 'promotion_program', 'reward_product_id': self.conferenceChair.id, 'rule_min_quantity': 2, 'rule_minimum_amount': self.conferenceChair.lst_price * 2, 'rule_products_domain': '[["sale_ok","=",True], ["id","=", %d]]' % self.conferenceChair.id}
***************************************************************************************
create
{'product_id': self.conferenceChair.id, 'name': 'Conf Chair', 'product_uom_qty': 2.0, 'order_id': order.id}
***************************************************************************************
create
{'product_id': self.drawerBlack.id, 'name': 'Drawer', 'product_uom_qty': 1.0, 'order_id': order.id}
***************************************************************************************
create
{'name': 'testprod', 'lst_price': 118.0}
***************************************************************************************
create
{'name': '10% discount', 'promo_code_usage': 'no_code_needed', 'program_type': 'promotion_program', 'discount_type': 'percentage', 'discount_percentage': 10.0, 'rule_minimum_amount': 1500.0, 'rule_minimum_amount_tax_inclusion': 'tax_included'}
***************************************************************************************
create
{'name': '15% discount', 'promo_code_usage': 'no_code_needed', 'program_type': 'promotion_program', 'discount_type': 'percentage', 'discount_percentage': 15.0, 'rule_minimum_amount': 1750.0, 'rule_minimum_amount_tax_inclusion': 'tax_included'}
***************************************************************************************
create
{'name': '20% discount', 'promo_code_usage': 'no_code_needed', 'program_type': 'promotion_program', 'discount_type': 'percentage', 'discount_percentage': 20.0, 'rule_minimum_amount': 2000.0, 'rule_minimum_amount_tax_inclusion': 'tax_included'}
***************************************************************************************
create
{'name': '25% discount', 'promo_code_usage': 'no_code_needed', 'program_type': 'promotion_program', 'discount_type': 'percentage', 'discount_percentage': 25.0, 'rule_minimum_amount': 2500.0, 'rule_minimum_amount_tax_inclusion': 'tax_included'}
***************************************************************************************
create
{'product_id': testprod.id, 'name': 'testprod', 'product_uom_qty': 14.0, 'price_unit': 118.0, 'order_id': order.id, 'tax_id': False}
***************************************************************************************
create
{'name': '2 free conference chair if at least 1 large cabinet', 'promo_code_usage': 'code_needed', 'program_type': 'promotion_program', 'reward_type': 'product', 'reward_product_quantity': 2, 'reward_product_id': self.conferenceChair.id, 'rule_min_quantity': 1, 'rule_products_domain': '["&", ["sale_ok","=",True], ["name","ilike","large cabinet"]]'}
***************************************************************************************
create
{'product_id': self.largeCabinet.id, 'name': 'Large Cabinet', 'product_uom_qty': 1.0, 'order_id': order.id}
***************************************************************************************
create
{'product_id': self.conferenceChair.id, 'name': 'Conference chair', 'product_uom_qty': 2.0, 'order_id': order.id}
***************************************************************************************
create
{'product_id': self.drawerBlack.id, 'product_uom_qty': 2.0, 'order_id': order.id}
***************************************************************************************
create
{'product_id': self.largeMeetingTable.id, 'product_uom_qty': 1.0, 'order_id': order.id}
***************************************************************************************
create
{'name': 'Product F', 'list_price': 100, 'sale_ok': True, 'taxes_id': [(6, 0, [])]}
***************************************************************************************
create
{'name': '1 Product F = 5$ discount', 'promo_code_usage': 'no_code_needed', 'reward_type': 'discount', 'discount_type': 'fixed_amount', 'discount_fixed_amount': 5, 'rule_products_domain': "[('id', 'in', [%s])]" % product_F.id, 'active': True}
***************************************************************************************
create
{'product_id': product_F.id, 'product_uom_qty': 2.0, 'order_id': order.id}
***************************************************************************************
create
{'partner_id': self.env['res.partner'].create({'name': 'My Partner'}).id}
***************************************************************************************
create
{'partner_id': self.steve.id}
***************************************************************************************
create
{'partner_id': self.steve.id}
***************************************************************************************
create
{'partner_id': self.env['res.partner'].create({'name': 'My Partner'}).id}
***************************************************************************************
create
{'name': 'Get 10% discount if buy at least 4 Product A and $320', 'program_type': 'coupon_program', 'reward_type': 'discount', 'discount_type': 'percentage', 'discount_percentage': 10.0, 'rule_products_domain': "[('id', 'in', [%s])]" % self.product_A.id, 'rule_min_quantity': 3, 'rule_minimum_amount': 320.0}
***************************************************************************************
create
{'product_id': self.product_A.id, 'name': 'Product A', 'product_uom_qty': 2.0, 'order_id': order.id}
***************************************************************************************
create
{'product_id': self.product_B.id, 'name': 'Product B', 'product_uom_qty': 4.0, 'order_id': order.id}
***************************************************************************************
create
{'name': 'Get 5% discount if buy at least 2 Product', 'program_type': 'promotion_program', 'reward_type': 'discount', 'discount_type': 'percentage', 'discount_percentage': 5.0, 'rule_min_quantity': 2, 'promo_code_usage': 'no_code_needed'}
***************************************************************************************
create
{'name': 'Get 10% discount if buy at least 4 Product', 'program_type': 'promotion_program', 'reward_type': 'discount', 'discount_type': 'percentage', 'discount_percentage': 10.0, 'rule_min_quantity': 4, 'promo_code_usage': 'no_code_needed'}
***************************************************************************************
create
{'product_id': self.product_A.id, 'name': 'Product A', 'product_uom_qty': 1.0, 'order_id': order.id}
***************************************************************************************
create
{'name': 'My Partner'}
***************************************************************************************
create
{'name': 'My Partner'}
***************************************************************************************
create
{'partner_id': self.env['res.partner'].create({'name': 'My Partner'}).id}
***************************************************************************************
create
{'name': 'First pricelist', 'discount_policy': 'with_discount', 'item_ids': [(0, 0, {'compute_price': 'percentage', 'base': 'list_price', 'percent_price': 10, 'applied_on': '3_global', 'name': 'First discount'})]}
***************************************************************************************
create
{'name': 'Code for 10% on next order', 'discount_type': 'percentage', 'discount_percentage': 10.0, 'program_type': 'promotion_program', 'promo_code_usage': 'no_code_needed', 'promo_applicability': 'on_next_order'}
***************************************************************************************
create
{'name': 'Thrid Product', 'list_price': 5, 'sale_ok': True}
***************************************************************************************
create
{'name': 'Promo fixed amount', 'promo_code_usage': 'no_code_needed', 'discount_type': 'fixed_amount', 'discount_fixed_amount': 10.0, 'program_type': 'promotion_program'}
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'My Partner'}
***************************************************************************************
create
{'name': '10% Discount', 'program_type': 'coupon_program', 'reward_type': 'discount', 'discount_apply_on': 'on_order', 'promo_code_usage': 'no_code_needed'}
***************************************************************************************
create
{'invoice_policy': 'delivery', 'name': 'Product invoiced on delivery', 'lst_price': 500}
***************************************************************************************
browse
self.env.context.get('active_id')
***************************************************************************************
search
[('promo_code', '=', coupon_code)]
***************************************************************************************
search
[('code', '=', coupon_code)]
***************************************************************************************
search
[('reward_type', '=', 'free_shipping')]
***************************************************************************************
search
[('reward_type', '=', 'product')]
***************************************************************************************
create
{'name': 'Free Shipping if at least 100 euros', 'promo_code_usage': 'no_code_needed', 'reward_type': 'free_shipping', 'rule_minimum_amount': 100.0, 'rule_minimum_amount_tax_inclusion': 'tax_included', 'active': True}
***************************************************************************************
create
{'partner_id': self.steve.id}
***************************************************************************************
create
{'name': 'free shipping if > 872 tax exl', 'promo_code_usage': 'no_code_needed', 'reward_type': 'free_shipping', 'program_type': 'promotion_program', 'rule_minimum_amount': 872}
***************************************************************************************
create
{'name': '10% reduction if > 872 tax exl', 'promo_code_usage': 'no_code_needed', 'reward_type': 'discount', 'program_type': 'promotion_program', 'discount_type': 'percentage', 'discount_percentage': 10.0, 'rule_minimum_amount': 872}
***************************************************************************************
create
{'product_id': self.iPadMini.id, 'name': 'Large Cabinet', 'product_uom_qty': 3.0, 'order_id': order.id}
***************************************************************************************
create
{'name': 'free shipping if > 872 tax exl', 'promo_code_usage': 'code_needed', 'promo_code': 'free_shipping', 'reward_type': 'free_shipping', 'program_type': 'promotion_program', 'rule_minimum_amount': 872}
***************************************************************************************
create
{'name': 'Buy 4 large cabinet, get one for free', 'promo_code_usage': 'no_code_needed', 'reward_type': 'product', 'program_type': 'promotion_program', 'reward_product_id': self.iPadMini.id, 'rule_min_quantity': 3, 'rule_products_domain': '[["name","ilike","large cabinet"]]'}
***************************************************************************************
create
{'product_id': self.iPadMini.id, 'name': 'Large Cabinet', 'product_uom_qty': 3.0, 'order_id': order.id}
***************************************************************************************
create
{'name': '20% reduction on large cabinet in cart', 'promo_code_usage': 'no_code_needed', 'reward_type': 'discount', 'program_type': 'promotion_program', 'discount_type': 'percentage', 'discount_percentage': 20.0, 'discount_apply_on': 'cheapest_product'}
***************************************************************************************
with_context
{'default_order_id': order.id, 'default_carrier_id': self.env['delivery.carrier'].search([])[1]}
***************************************************************************************
search
[]
***************************************************************************************
with_context
{'default_order_id': order.id, 'default_carrier_id': self.env['delivery.carrier'].search([])[1]}
***************************************************************************************
with_context
{'default_order_id': order.id, 'default_carrier_id': self.env['delivery.carrier'].search([])[1]}
***************************************************************************************
with_context
{'default_order_id': order.id, 'default_carrier_id': self.carrier.id}
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
_for_xml_id
'sale_crm.sale_action_quotations_new'
***************************************************************************************
_for_xml_id
'sale.action_quotations_with_onboarding'
***************************************************************************************
_for_xml_id
'sale.action_orders'
***************************************************************************************
_for_xml_id
'sale_crm.crm_quotation_partner_action'
***************************************************************************************
_for_xml_id
'sale.action_order_report_so_salesteam'
***************************************************************************************
search
[('email_normalized', '=', 'amy.wong@test.example.com')]
***************************************************************************************
search
[('email_normalized', '=', 'amy.wong@test.example.com')]
***************************************************************************************
search
[('email_normalized', '=', 'amy.wong@test.example.com')]
***************************************************************************************
search
[('email_normalized', '=', 'amy.wong@test.example.com')]
***************************************************************************************
search
[('email_normalized', '=', 'amy.wong@test.example.com')]
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_id': lead.id}
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_id': lead.id}
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_id': lead.id}
***************************************************************************************
with_context
{'active_model': 'crm.lead', 'active_id': lead.id, 'default_action': 'nothing'}
***************************************************************************************
browse
self.leads.ids
***************************************************************************************
browse
result['lead_id']
***************************************************************************************
browse
self._context['active_id']
***************************************************************************************
read_group
[('sale_order_id', 'in', self.ids)]['sale_order_id']['sale_order_id']
***************************************************************************************
create
{'name': 'First Expense for employee', 'employee_id': self.expense_employee.id, 'journal_id': self.company_data['default_journal_purchase'].id, 'accounting_date': '2017-01-01', 'expense_line_ids': [(0, 0, {'name': 'expense_1', 'date': '2016-01-01', 'product_id': self.company_data['product_order_sales_price'].id, 'unit_amount': self.company_data['product_order_sales_price'].list_price, 'analytic_account_id': self.analytic_account_1.id, 'employee_id': self.expense_employee.id, 'sale_order_id': sale_order.id}), (0, 0, {'name': 'expense_2', 'date': '2016-01-01', 'product_id': self.company_data['product_delivery_sales_price'].id, 'unit_amount': self.company_data['product_delivery_sales_price'].list_price, 'analytic_account_id': self.analytic_account_1.id, 'employee_id': self.expense_employee.id, 'sale_order_id': sale_order.id}), (0, 0, {'name': 'expense_3', 'date': '2016-01-01', 'product_id': self.company_data['product_order_sales_price'].id, 'unit_amount': self.company_data['product_order_sales_price'].list_price, 'analytic_account_id': self.analytic_account_1.id, 'employee_id': self.expense_employee.id, 'sale_order_id': sale_order.id}), (0, 0, {'name': 'expense_4', 'date': '2016-01-01', 'product_id': self.company_data['product_delivery_sales_price'].id, 'unit_amount': self.company_data['product_delivery_sales_price'].list_price, 'analytic_account_id': self.analytic_account_1.id, 'employee_id': self.expense_employee.id, 'sale_order_id': sale_order.id}), (0, 0, {'name': 'expense_5', 'date': '2016-01-01', 'product_id': self.company_data['product_delivery_sales_price'].id, 'unit_amount': self.company_data['product_delivery_sales_price'].list_price, 'analytic_account_id': self.analytic_account_1.id, 'employee_id': self.expense_employee.id, 'sale_order_id': sale_order.id})]}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'partner_invoice_id': self.partner_a.id, 'partner_shipping_id': self.partner_a.id, 'order_line': [(0, 0, {'name': self.company_data['product_delivery_no'].name, 'product_id': self.company_data['product_delivery_no'].id, 'product_uom_qty': 2, 'product_uom': self.company_data['product_delivery_no'].uom_id.id, 'price_unit': self.company_data['product_delivery_no'].list_price})], 'pricelist_id': self.env.ref('product.list0').id}
***************************************************************************************
create
{'name': 'Expense for John Smith', 'employee_id': self.expense_employee.id, 'journal_id': self.company_data['default_journal_purchase'].id}
***************************************************************************************
create
{'name': 'Air Travel', 'product_id': self.company_data['product_delivery_cost'].id, 'analytic_account_id': so.analytic_account_id.id, 'unit_amount': 621.54, 'employee_id': self.expense_employee.id, 'sheet_id': sheet.id, 'sale_order_id': so.id}
***************************************************************************************
create
{'name': 'Car Travel', 'expense_policy': 'sales_price', 'type': 'service', 'can_be_expensed': True, 'invoice_policy': 'delivery', 'list_price': 0.5, 'uom_id': self.env.ref('uom.product_uom_km').id, 'uom_po_id': self.env.ref('uom.product_uom_km').id}
***************************************************************************************
create
{'name': 'Expense for John Smith', 'employee_id': self.expense_employee.id, 'journal_id': self.company_data['default_journal_purchase'].id}
***************************************************************************************
create
{'name': 'Car Travel', 'product_id': prod_exp_2.id, 'analytic_account_id': so.analytic_account_id.id, 'product_uom_id': self.env.ref('uom.product_uom_km').id, 'unit_amount': 0.15, 'quantity': 100, 'employee_id': self.expense_employee.id, 'sheet_id': sheet.id, 'sale_order_id': so.id}
***************************************************************************************
create
[self._build_gift_card() for _ in range(int(self.product_uom_qty))]
***************************************************************************************
create
{'product_id': pay_gift_card_id.id, 'price_unit': -amount, 'product_uom_qty': 1, 'product_uom': pay_gift_card_id.uom_id.id, 'gift_card_id': gift_card.id, 'order_id': self.id}
***************************************************************************************
create
{'initial_amount': 100}
***************************************************************************************
create
{'initial_amount': 100}
***************************************************************************************
create
{'initial_amount': 100}
***************************************************************************************
search
[('purchase_ok', '=', False), ('sale_ok', '=', False)]
***************************************************************************************
read_group
[('date', '>=', start), ('date', '<', end), ('state', 'not in', ['draft', 'cancel', 'sent']), ('company_id', '=', company.id)]['price_total']['price_total']
***************************************************************************************
new
values
***************************************************************************************
create
values
***************************************************************************************
browse
company_id
***************************************************************************************
search
[('active', '=', 'true')]
***************************************************************************************
search
[('name', '=', model_name), ('res_id', '=', res_id), ('lang', '=', lang_code)]
***************************************************************************************
create
data
***************************************************************************************
flush
['margin']
***************************************************************************************
read_group
[('order_id', 'in', self.ids)]['margin', 'order_id']['order_id']
***************************************************************************************
create
{'name': 'Individual Workplace'}
***************************************************************************************
create
{'name': 'A test partner'}
***************************************************************************************
create
{'name': 'A test partner address', 'parent_id': self.partner_id}
***************************************************************************************
browse
product_id
***************************************************************************************
read_group
[('sale_id', 'in', self.ids)]['ids:array_agg(id)']['sale_id']
***************************************************************************************
search
[('sale_id', 'in', self.ids)]
***************************************************************************************
browse
item['ids']
***************************************************************************************
_bom_find
self.product_id
***************************************************************************************
browse
components[product]['uom']
***************************************************************************************
browse
product
***************************************************************************************
create
{'name': 'My Test Partner'}
***************************************************************************************
search
[('origin', '=', self.sale_order.name), ('product_id', '=', self.product_manu.id)]
***************************************************************************************
search
[('product_id', '=', self.product_raw.id)]
***************************************************************************************
search
[('product_id', '=', self.product_manu.id)]
***************************************************************************************
search
[('res_model', '=', 'mrp.production'), ('res_id', '=', manufaturing_from_so.id)]
***************************************************************************************
create
{'name': 'My Test Partner'}
***************************************************************************************
search
[('product_id', '=', product_a.id)]
***************************************************************************************
create
{'name': 'Table Kit', 'type': 'consu', 'invoice_policy': 'delivery', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'name': 'Wood Panel', 'type': 'product'}
***************************************************************************************
create
{'name': 'Bolt', 'type': 'product'}
***************************************************************************************
create
{'product_tmpl_id': product.product_tmpl_id.id, 'product_uom_id': self.env.ref('uom.product_uom_unit').id, 'sequence': 2, 'type': 'phantom', 'bom_line_ids': [(0, 0, {'product_id': product_wood_panel.id, 'product_qty': 1, 'product_uom_id': self.env.ref('uom.product_uom_unit').id}), (0, 0, {'product_id': product_desk_bolt.id, 'product_qty': 4, 'product_uom_id': self.env.ref('uom.product_uom_unit').id})]}
***************************************************************************************
create
{'name': 'My Test Partner'}
***************************************************************************************
create
{'name': 'My Test Partner'}
***************************************************************************************
create
{'name': 'RCV type', 'type': 'other', 'internal_group': 'asset'}
***************************************************************************************
create
{'name': 'Receivable', 'code': 'RCV00', 'user_type_id': account_type.id, 'reconcile': True}
***************************************************************************************
create
{'name': 'Expense', 'code': 'EXP00', 'user_type_id': account_type.id, 'reconcile': True}
***************************************************************************************
create
{'name': 'Output', 'code': 'OUT00', 'user_type_id': account_type.id, 'reconcile': True}
***************************************************************************************
create
{'name': 'Valuation', 'code': 'STV00', 'user_type_id': account_type.id, 'reconcile': True}
***************************************************************************************
create
{'name': 'Stock journal', 'type': 'sale', 'code': 'STK00'}
***************************************************************************************
create
{'product_tmpl_id': self.finished_product.product_tmpl_id.id, 'product_qty': 1.0, 'type': 'phantom'}
***************************************************************************************
create
so_vals
***************************************************************************************
_update_available_quantity
self.component_astock_location20
***************************************************************************************
_update_available_quantity
self.component_bstock_location10
***************************************************************************************
_update_available_quantity
self.component_cstock_location30
***************************************************************************************
create
{'name': 'My Test Partner'}
***************************************************************************************
_update_available_quantity
self.component_astock_location56
***************************************************************************************
_update_available_quantity
self.component_bstock_location28
***************************************************************************************
_update_available_quantity
self.component_cstock_location84
***************************************************************************************
_update_available_quantity
self.component_dstock_location14
***************************************************************************************
_update_available_quantity
self.component_estock_location7
***************************************************************************************
_update_available_quantity
self.component_fstock_location14
***************************************************************************************
_update_available_quantity
self.component_gstock_location28
***************************************************************************************
create
{'name': 'My Test Partner'}
***************************************************************************************
browse
res['res_id']
***************************************************************************************
browse
res['res_id']
***************************************************************************************
create
{'name': 'Warehouse 1', 'code': 'WH1'}
***************************************************************************************
create
{'name': 'Warehouse 2', 'code': 'WH2'}
***************************************************************************************
_update_available_quantity
self.component_awarehouse_1.lot_stock_id8
***************************************************************************************
_update_available_quantity
self.component_bwarehouse_1.lot_stock_id4
***************************************************************************************
_update_available_quantity
self.component_cwarehouse_1.lot_stock_id12
***************************************************************************************
_update_available_quantity
self.component_dwarehouse_1.lot_stock_id2
***************************************************************************************
_update_available_quantity
self.component_ewarehouse_1.lot_stock_id1
***************************************************************************************
_update_available_quantity
self.component_fwarehouse_1.lot_stock_id2
***************************************************************************************
_update_available_quantity
self.component_gwarehouse_1.lot_stock_id4
***************************************************************************************
_update_available_quantity
self.component_awarehouse_2.lot_stock_id7
***************************************************************************************
_update_available_quantity
self.component_bwarehouse_2.lot_stock_id3
***************************************************************************************
_update_available_quantity
self.component_cwarehouse_2.lot_stock_id12
***************************************************************************************
_update_available_quantity
self.component_dwarehouse_2.lot_stock_id1
***************************************************************************************
_update_available_quantity
self.component_ewarehouse_2.lot_stock_id1
***************************************************************************************
_update_available_quantity
self.component_fwarehouse_2.lot_stock_id1
***************************************************************************************
_update_available_quantity
self.component_gwarehouse_2.lot_stock_id4
***************************************************************************************
create
{'name': 'My Test Partner'}
***************************************************************************************
create
{'product_tmpl_id': kit_uom_1.product_tmpl_id.id, 'product_qty': 1.0, 'type': 'phantom'}
***************************************************************************************
_update_available_quantity
component_uom_unitstock_location240
***************************************************************************************
_update_available_quantity
component_uom_dozenstock_location10
***************************************************************************************
_update_available_quantity
component_uom_kgstock_location0.03
***************************************************************************************
create
{'name': 'My Test Partner'}
***************************************************************************************
create
{'product_tmpl_id': kit_uom_1.product_tmpl_id.id, 'product_qty': 1.0, 'type': 'phantom'}
***************************************************************************************
create
{'product_tmpl_id': kit_uom_in_kit.product_tmpl_id.id, 'product_qty': 1.0, 'type': 'phantom'}
***************************************************************************************
create
{'name': 'Warehouse 1', 'code': 'WH1'}
***************************************************************************************
_update_available_quantity
component_uom_unitwarehouse_1.lot_stock_id576
***************************************************************************************
_update_available_quantity
component_uom_dozenwarehouse_1.lot_stock_id24
***************************************************************************************
_update_available_quantity
component_uom_kgwarehouse_1.lot_stock_id0.12
***************************************************************************************
_update_available_quantity
component_uom_gmwarehouse_1.lot_stock_id3000
***************************************************************************************
create
{'name': 'My Test Partner'}
***************************************************************************************
create
{'name': 'Shelf 1', 'location_id': self.company_data['default_warehouse'].lot_stock_id.id}
***************************************************************************************
create
{'name': 'Shelf 2', 'location_id': self.company_data['default_warehouse'].lot_stock_id.id}
***************************************************************************************
create
{'name': 'Shelf1 -> Customer', 'product_selectable': True, 'rule_ids': [(0, 0, {'name': 'Shelf1 -> Customer', 'action': 'pull', 'picking_type_id': self.company_data['default_warehouse'].in_type_id.id, 'location_src_id': stock_location_components.id, 'location_id': self.ref('stock.stock_location_customers')})]}
***************************************************************************************
create
{'name': 'Shelf2 -> Customer', 'product_selectable': True, 'rule_ids': [(0, 0, {'name': 'Shelf2 -> Customer', 'action': 'pull', 'picking_type_id': self.company_data['default_warehouse'].in_type_id.id, 'location_src_id': stock_location_14.id, 'location_id': self.ref('stock.stock_location_customers')})]}
***************************************************************************************
_update_available_quantity
component_shelf1self.company_data['default_warehouse'].lot_stock_id15
***************************************************************************************
_update_available_quantity
component_shelf2self.company_data['default_warehouse'].lot_stock_id10
***************************************************************************************
create
{'name': 'My Test Partner'}
***************************************************************************************
create
{'name': 'Warehouse 1', 'code': 'WH1'}
***************************************************************************************
_update_available_quantity
component_unitwarehouse_1.lot_stock_id12
***************************************************************************************
_update_available_quantity
component_kgwarehouse_1.lot_stock_id14
***************************************************************************************
create
{'name': 'My Test Partner'}
***************************************************************************************
create
{'name': 'Geyser', 'type': 'product', 'route_ids': [(4, route_mto), (4, route_manufacture)]}
***************************************************************************************
create
{'name': 'raw Geyser', 'type': 'service'}
***************************************************************************************
create
{'product_id': finished_product.id, 'product_tmpl_id': finished_product.product_tmpl_id.id, 'product_uom_id': self.env.ref('uom.product_uom_unit').id, 'product_qty': 1.0, 'type': 'normal', 'bom_line_ids': [(5, 0), (0, 0, {'product_id': product_raw.id})]}
***************************************************************************************
create
{'name': 'My Test Partner'}
***************************************************************************************
search
[('product_id', '=', finished_product.id)]
***************************************************************************************
create
{'name': 'Geyser', 'type': 'product', 'route_ids': [(4, route_mto), (4, route_manufacture)]}
***************************************************************************************
create
{'name': 'raw Geyser', 'type': 'product'}
***************************************************************************************
create
{'product_id': finished_product.id, 'product_tmpl_id': finished_product.product_tmpl_id.id, 'product_uom_id': self.env.ref('uom.product_uom_unit').id, 'product_qty': 1.0, 'type': 'normal', 'bom_line_ids': [(5, 0), (0, 0, {'product_id': product_raw.id})]}
***************************************************************************************
create
{'name': 'My Test Partner'}
***************************************************************************************
search
[('product_id', '=', finished_product.id)]
***************************************************************************************
search
[('product_id', '=', finished_product.id)]
***************************************************************************************
create
{'name': 'Geyser', 'type': 'product', 'route_ids': [(4, route_mto), (4, route_manufacture)]}
***************************************************************************************
create
{'name': 'raw Geyser', 'type': 'product'}
***************************************************************************************
create
{'product_id': finished_product.id, 'product_tmpl_id': finished_product.product_tmpl_id.id, 'product_uom_id': self.env.ref('uom.product_uom_unit').id, 'product_qty': 1.0, 'type': 'normal', 'bom_line_ids': [(5, 0), (0, 0, {'product_id': product_raw.id})]}
***************************************************************************************
create
{'name': 'My Test Partner'}
***************************************************************************************
search
[('product_id', '=', finished_product.id)]
***************************************************************************************
search
[('product_id', '=', finished_product.id)]
***************************************************************************************
create
{'name': 'My Test Partner'}
***************************************************************************************
create
{'name': 'RCV type', 'type': 'other', 'internal_group': 'asset'}
***************************************************************************************
create
{'name': 'Receivable', 'code': 'RCV00', 'user_type_id': account_type.id, 'reconcile': True}
***************************************************************************************
create
{'name': 'Expense', 'code': 'EXP00', 'user_type_id': account_type.id, 'reconcile': True}
***************************************************************************************
create
{'name': 'Output', 'code': 'OUT00', 'user_type_id': account_type.id, 'reconcile': True}
***************************************************************************************
create
{'name': 'Valuation', 'code': 'STV00', 'user_type_id': account_type.id, 'reconcile': True}
***************************************************************************************
create
{'name': 'Stock journal', 'type': 'sale', 'code': 'STK00'}
***************************************************************************************
create
{'name': 'Color'}
***************************************************************************************
create
{'name': 'red', 'attribute_id': self.prod_att_1.id, 'sequence': 1}
***************************************************************************************
create
{'name': 'blue', 'attribute_id': self.prod_att_1.id, 'sequence': 2}
***************************************************************************************
create
{'name': 'Product Template', 'type': 'product', 'uom_id': self.uom_unit.id, 'invoice_policy': 'delivery', 'categ_id': self.category.id, 'attribute_line_ids': [(0, 0, {'attribute_id': self.prod_att_1.id, 'value_ids': [(6, 0, [self.prod_attr1_v1.id, self.prod_attr1_v2.id])]})]}
***************************************************************************************
create
{'name': 'Main Kit', 'type': 'product'}
***************************************************************************************
create
{'name': 'Nested Kit', 'type': 'product'}
***************************************************************************************
create
{'name': 'Screw', 'type': 'product'}
***************************************************************************************
create
{'product_id': nested_kit_product.id, 'product_tmpl_id': nested_kit_product.product_tmpl_id.id, 'product_qty': 1.0, 'type': 'phantom', 'bom_line_ids': [(5, 0), (0, 0, {'product_id': product.id})]}
***************************************************************************************
create
{'product_id': main_kit_product.id, 'product_tmpl_id': main_kit_product.product_tmpl_id.id, 'product_qty': 1.0, 'type': 'phantom', 'bom_line_ids': [(5, 0), (0, 0, {'product_id': nested_kit_product.id})]}
***************************************************************************************
browse
res['res_id']
***************************************************************************************
_update_available_quantity
self.component_astock_location1
***************************************************************************************
create
{'product_tmpl_id': p1.product_tmpl_id.id, 'product_qty': 1.0, 'type': 'phantom', 'bom_line_ids': [(0, 0, {'product_id': p2.id, 'product_qty': 1.0})]}
***************************************************************************************
create
{'product_tmpl_id': p2.product_tmpl_id.id, 'product_qty': 1.0, 'type': 'phantom', 'bom_line_ids': [(0, 0, {'product_id': p3.id, 'product_qty': 1.0})]}
***************************************************************************************
create
{'name': 'Super Partner'}
***************************************************************************************
_bom_find
self.kit_1
***************************************************************************************
create
{'name': 'Component ' + name, 'type': 'product', 'uom_id': self.uom_unit.id, 'categ_id': self.category.id, 'standard_price': price}
***************************************************************************************
create
{'product_tmpl_id': self.product_template.id, 'product_id': product.id, 'product_qty': 1.0, 'type': 'phantom'}
***************************************************************************************
create
{'product_id': component.id, 'product_qty': 1.0, 'bom_id': bom.id}
***************************************************************************************
create
so_vals
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
res['context']
***************************************************************************************
create
{'name': name, 'type': product_type, 'standard_price': price}
***************************************************************************************
create
{'name': 'Stock Input', 'code': 'StockIn', 'user_type_id': self.env.ref('account.data_account_type_current_assets').id}
***************************************************************************************
create
{'name': 'Stock Output', 'code': 'StockOut', 'reconcile': True, 'user_type_id': self.env.ref('account.data_account_type_current_assets').id}
***************************************************************************************
create
{'name': 'Stock Valuation', 'code': 'StockVal', 'user_type_id': self.env.ref('account.data_account_type_current_assets').id}
***************************************************************************************
create
{'name': 'Expense Account', 'code': 'Exp', 'user_type_id': self.env.ref('account.data_account_type_expenses').id}
***************************************************************************************
create
{'name': 'Income Account', 'code': 'Inc', 'user_type_id': self.env.ref('account.data_account_type_expenses').id}
***************************************************************************************
create
{'name': 'Stock Journal', 'code': 'STJTEST', 'type': 'general'}
***************************************************************************************
create
{'name': 'account receivable', 'code': 'RECV', 'user_type_id': self.env.ref('account.data_account_type_receivable').id, 'reconcile': True}
***************************************************************************************
create
{'name': 'account payable', 'code': 'PAY', 'user_type_id': self.env.ref('account.data_account_type_payable').id, 'reconcile': True}
***************************************************************************************
create
{'name': 'customer', 'property_account_receivable_id': self.recv_account.id, 'property_account_payable_id': self.pay_account.id}
***************************************************************************************
create
{'name': 'Sale Journal - Test', 'code': 'AJ-SALE', 'type': 'sale', 'company_id': self.env.user.company_id.id}
***************************************************************************************
create
{'partner_id': self.customer.id, 'order_line': [(0, 0, {'name': self.kit_a.name, 'product_id': self.kit_a.id, 'product_uom_qty': 1.0, 'product_uom': self.kit_a.uom_id.id, 'price_unit': 1, 'tax_id': False})]}
***************************************************************************************
create
{'name': 'compo 1'}
***************************************************************************************
create
{'name': 'compo 2'}
***************************************************************************************
create
{'name': 'test avco kit', 'property_cost_method': 'average'}
***************************************************************************************
create
{'name': 'Legs'}
***************************************************************************************
create
{'attribute_id': attributes.id, 'name': 'Steel'}
***************************************************************************************
create
{'attribute_id': attributes.id, 'name': 'Aluminium'}
***************************************************************************************
create
{'name': 'test product', 'categ_id': product_category.id, 'attribute_line_ids': [(0, 0, {'attribute_id': attributes.id, 'value_ids': [(6, 0, [steel_legs.id, aluminium_legs.id])]})]}
***************************************************************************************
create
{'product_id': product_variant_ids[0].id, 'product_tmpl_id': product_variant_ids[0].product_tmpl_id.id, 'product_qty': 1.0, 'consumption': 'flexible', 'type': 'phantom', 'bom_line_ids': [(0, 0, {'product_id': component_1.id, 'product_qty': 1})]}
***************************************************************************************
create
{'product_id': product_variant_ids[1].id, 'product_tmpl_id': product_variant_ids[1].product_tmpl_id.id, 'product_qty': 1.0, 'consumption': 'flexible', 'type': 'phantom', 'bom_line_ids': [(0, 0, {'product_id': component_2.id, 'product_qty': 1})]}
***************************************************************************************
create
{'name': 'Testing Man'}
***************************************************************************************
create
{'partner_id': partner.id}
***************************************************************************************
create
{'name': 'Order line', 'product_id': product_variant_ids[0].id, 'order_id': so.id}
***************************************************************************************
create
{'name': 'customer'}
***************************************************************************************
create
{'name': 'fifo', 'property_cost_method': 'fifo'}
***************************************************************************************
create
{'product_tmpl_id': self.kit_product.product_tmpl_id.id, 'product_qty': 1.0, 'type': 'phantom'}
***************************************************************************************
create
{'product_id': self.component_a.id, 'product_qty': 1.0, 'bom_id': self.bom.id, 'product_uom_id': self.env.ref('uom.product_uom_dozen').id}
***************************************************************************************
create
{'product_id': self.component_b.id, 'product_qty': 2.0, 'bom_id': self.bom.id, 'product_uom_id': self.env.ref('uom.product_uom_unit').id}
***************************************************************************************
create
{'partner_id': self.customer.id, 'order_line': [(0, 0, {'name': self.kit_product.name, 'product_id': self.kit_product.id, 'product_uom_qty': 1.0, 'product_uom': self.kit_product.uom_id.id})]}
***************************************************************************************
create
{'name': 'customer'}
***************************************************************************************
create
{'partner_id': self.customer.id, 'order_line': [(0, 0, {'name': self.kit.name, 'product_id': self.kit.id, 'product_uom_qty': 10.0, 'product_uom': self.kit.uom_id.id, 'price_unit': 1, 'tax_id': False})]}
***************************************************************************************
search
[('product_id', '=', self.product_1.id), ('move_dest_ids', 'in', order.picking_ids[0].move_lines.ids)]
***************************************************************************************
search
[('product_id', '=', self.product_1.id)]
***************************************************************************************
create
{'name': 'Another Test Partner'}
***************************************************************************************
search
[('origin', 'like', sale_order_so0.name)]
***************************************************************************************
_xmlid_to_res_id
'stock.stock_location_customers'
***************************************************************************************
create
{'name': 'Test Warehouse', 'code': 'TWH'}
***************************************************************************************
create
{'name': 'Another Test Partner'}
***************************************************************************************
create
{'name': 'Custom pricelist (TEST)', 'item_ids': [(0, 0, {'base': 'list_price', 'applied_on': '1_product', 'product_tmpl_id': self.product_product_custo_desk.id, 'price_discount': 20, 'min_quantity': 2, 'compute_price': 'formula'})]}
***************************************************************************************
create
[{'name': 'PA1', 'display_type': 'radio', 'create_variant': 'dynamic'}, {'name': 'PA2', 'display_type': 'radio', 'create_variant': 'always'}, {'name': 'PA3', 'display_type': 'radio', 'create_variant': 'dynamic'}, {'name': 'PA4', 'display_type': 'select', 'create_variant': 'no_variant'}, {'name': 'PA5', 'display_type': 'select', 'create_variant': 'no_variant'}, {'name': 'PA7', 'display_type': 'color', 'create_variant': 'no_variant'}, {'name': 'PA8', 'display_type': 'radio', 'create_variant': 'no_variant'}]
***************************************************************************************
create
[{'name': 'PAV' + str(i), 'is_custom': i == 9, 'attribute_id': product_attribute.id} for i in range(1, 11) for product_attribute in product_attributes]
***************************************************************************************
create
[{'attribute_id': product_attribute.id, 'product_tmpl_id': product_template.id, 'value_ids': [(6, 0, product_attribute.value_ids.ids)]} for product_attribute in product_attributes]
***************************************************************************************
create
[{'name': 'product attribute', 'display_type': 'radio', 'create_variant': 'always'}]
***************************************************************************************
create
[{'name': 'single product attribute value', 'is_custom': True, 'attribute_id': product_attributes[0].id}]
***************************************************************************************
create
[{'attribute_id': product_attributes[0].id, 'product_tmpl_id': product_template.id, 'value_ids': [(6, 0, [product_attribute_values[0].id])]}]
***************************************************************************************
create
{'name': 'Test tax', 'amount': 15}
***************************************************************************************
create
{'name': 'Office Chair Black'}
***************************************************************************************
browse
grid['product_template_id']
***************************************************************************************
search
[('product_id', 'in', self.matrix_template.product_variant_ids.ids)]
***************************************************************************************
search
[('product_id', 'in', self.matrix_template.product_variant_ids.ids)]
***************************************************************************************
search
['|', ('sale_order_id.invoice_status', '=', 'to invoice'), ('tasks.sale_order_id.invoice_status', '=', 'to invoice'), ('id', 'in', self.ids)]
***************************************************************************************
_for_xml_id
'sale.action_view_sale_advance_payment_inv'
***************************************************************************************
search
['&', ('display_project_id', '!=', 'False'), '|', ('sale_line_id', 'in', order.order_line.ids), ('sale_order_id', '=', order.id)]
***************************************************************************************
_for_xml_id
'project.action_view_task'
***************************************************************************************
create
values
***************************************************************************************
create
{'name': _('New')}
***************************************************************************************
search
[('task_ids.sale_line_id', '=', self.id)]
***************************************************************************************
read_group
[('sale_line_id', '=', self.id), ('analytic_account_id', '!=', False)]['analytic_account_id']['analytic_account_id']
***************************************************************************************
read_group
[('analytic_account_id', '!=', False), '|', ('sale_line_id', '=', self.id), '&', ('tasks.sale_line_id', '=', self.id), ('tasks.analytic_account_id', '=', False)]['analytic_account_id']['analytic_account_id']
***************************************************************************************
create
{'name': 'parent', 'user_ids': [(4, self.user.id)]}
***************************************************************************************
create
{'name': 'child', 'parent_id': parent.id, 'user_ids': False}
***************************************************************************************
create
{'name': 'parent', 'partner_id': self.user.partner_id.id}
***************************************************************************************
create
{'name': 'child', 'parent_id': parent.id}
***************************************************************************************
create
{'name': 'parent', 'email_from': 'a@c.be'}
***************************************************************************************
create
{'name': 'child', 'parent_id': parent.id}
***************************************************************************************
create
{'name': 'parent', 'partner_id': self.partner.id, 'sale_line_id': self.order_line.id}
***************************************************************************************
create
{'name': 'child', 'partner_id': self.partner.id, 'parent_id': parent.id}
***************************************************************************************
create
{'name': 'parent', 'partner_id': self.partner.id, 'sale_line_id': self.order_line.id}
***************************************************************************************
create
{'name': 'child', 'parent_id': parent.id}
***************************************************************************************
create
{'name': 'parent', 'partner_id': self.partner.id, 'sale_line_id': self.order_line.id}
***************************************************************************************
create
{'name': 'child', 'partner_id': self.user.partner_id.id, 'parent_id': parent.id}
***************************************************************************************
create
{'name': 'Jémémy'}
***************************************************************************************
create
{'name': 'parent', 'partner_id': self.partner.id, 'sale_line_id': self.order_line.id}
***************************************************************************************
create
{'name': 'child', 'partner_id': self.user.partner_id.id, 'parent_id': parent.id}
***************************************************************************************
create
{'name': 'parent', 'user_ids': False}
***************************************************************************************
create
{'name': 'child', 'user_ids': False, 'parent_id': parent.id}
***************************************************************************************
create
{'name': 'parent', 'partner_id': False}
***************************************************************************************
create
{'name': 'child', 'partner_id': False, 'parent_id': parent.id}
***************************************************************************************
create
{'name': 'parent'}
***************************************************************************************
create
{'name': 'child', 'parent_id': parent.id}
***************************************************************************************
create
{'name': 'parent', 'partner_id': self.partner.id}
***************************************************************************************
create
{'name': 'child', 'parent_id': parent.id, 'partner_id': self.partner.id}
***************************************************************************************
create
{'name': 'parent', 'partner_id': self.partner.id}
***************************************************************************************
create
{'name': 'child', 'parent_id': parent.id}
***************************************************************************************
create
{'name': 'parent', 'partner_id': self.partner.id}
***************************************************************************************
create
{'name': 'child', 'parent_id': parent.id, 'partner_id': self.user.partner_id.id}
***************************************************************************************
create
{'name': 'parent', 'user_ids': [(4, self.user.id)]}
***************************************************************************************
create
{'name': 'child', 'user_ids': False}
***************************************************************************************
create
{'name': 'parent', 'partner_id': self.user.partner_id.id}
***************************************************************************************
create
{'name': 'child', 'partner_id': False}
***************************************************************************************
create
{'name': 'parent', 'email_from': 'a@c.be'}
***************************************************************************************
create
{'name': 'child', 'email_from': False}
***************************************************************************************
create
{'name': 'parent', 'partner_id': self.partner.id, 'sale_line_id': self.order_line.id}
***************************************************************************************
create
{'name': 'child', 'partner_id': self.partner.id}
***************************************************************************************
create
{'name': 'parent', 'partner_id': self.partner.id, 'sale_line_id': self.order_line.id}
***************************************************************************************
create
{'name': 'child', 'partner_id': False}
***************************************************************************************
create
{'name': 'parent', 'partner_id': self.partner.id, 'sale_line_id': self.order_line.id}
***************************************************************************************
create
{'name': 'child', 'partner_id': self.user.partner_id.id}
***************************************************************************************
create
{'name': 'parent', 'user_ids': False, 'partner_id': self.partner.id}
***************************************************************************************
create
children_values
***************************************************************************************
create
{'name': 'parent', 'partner_id': self.partner.id, 'sale_line_id': self.order_line.id, 'user_ids': [(4, self.user.id)]}
***************************************************************************************
create
children_values
***************************************************************************************
create
{'name': 'Mur en béton'}
***************************************************************************************
search
[('line_ids.analytic_account_id', '!=', False), ('line_ids.analytic_account_id', 'in', self.analytic_account_id.ids), ('move_type', '=', 'in_invoice')]
***************************************************************************************
search
[('sale_line_id', 'in', self.mapped('order_line').ids), ('state', '!=', 'cancel')]
***************************************************************************************
search
[('sale_line_id', 'in', self.ids)]
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
search
[('sale_line_id', '=', line.id)]
***************************************************************************************
with_user
self.user_salesperson
***************************************************************************************
with_user
self.user_purchaseperson
***************************************************************************************
with_user
self.user_salesperson
***************************************************************************************
search
[('partner_id', '=', self.supplierinfo1.name.id), ('state', '=', 'draft')]
***************************************************************************************
search
[('sale_line_id', 'in', self.sale_order_1.order_line.ids)]
***************************************************************************************
search
[('sale_line_id', 'in', self.sale_order_2.order_line.ids)]
***************************************************************************************
search
[('sale_line_id', '=', self.sol2_service_purchase_2.id)]
***************************************************************************************
search
[('partner_id', '=', self.supplierinfo1.name.id), ('state', '=', 'draft')]
***************************************************************************************
search
[('sale_line_id', 'in', self.sale_order_1.order_line.ids)]
***************************************************************************************
search
[('partner_id', '=', self.supplierinfo1.name.id), ('state', '=', 'draft')]
***************************************************************************************
search
[('sale_line_id', 'in', self.sale_order_1.order_line.ids)]
***************************************************************************************
search
[('partner_id', '=', self.supplierinfo1.name.id), ('state', '=', 'draft')]
***************************************************************************************
search
[('sale_line_id', 'in', self.sale_order_1.order_line.ids)]
***************************************************************************************
search
[('partner_id', '=', self.supplierinfo1.name.id), ('state', '=', 'draft')]
***************************************************************************************
search
[('sale_line_id', 'in', self.sale_order_1.order_line.ids)]
***************************************************************************************
search
[('partner_id', '=', self.supplierinfo1.name.id), ('state', '=', 'draft')]
***************************************************************************************
search
[('sale_line_id', 'in', self.sale_order_1.order_line.ids)]
***************************************************************************************
browse
values['product_id']
***************************************************************************************
browse
values['product_id']
***************************************************************************************
search
[('company_id', '=', self.env.company.id)]
***************************************************************************************
search
[('company_id', '=', self.env.company.id)]
***************************************************************************************
_for_xml_id
'stock.action_picking_tree_all'
***************************************************************************************
_log_activity
_render_note_exception_quantity_sodocuments
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
browse
vals.get('user_id', False)
***************************************************************************************
browse
values.get('partner_shipping_id')
***************************************************************************************
concat
*visited_moves
***************************************************************************************
browse
[order_line.id for order in order_exceptions.values() for order_line in order[0]]
***************************************************************************************
run
procurements
***************************************************************************************
_log_activity_get_documents
sale_order_lines_quantities'move_ids''UP'
***************************************************************************************
create
line._prepare_procurement_group_vals()
***************************************************************************************
Procurement
line.product_idproduct_qtyprocurement_uomline.order_id.partner_shipping_id.property_stock_customerline.nameline.order_id.nameline.order_id.company_idvalues
***************************************************************************************
_log_activity_get_documents
to_log'move_ids''UP'
***************************************************************************************
get_model_defaults
'sale.order'
***************************************************************************************
_find_global_route
'stock.route_warehouse0_mto'_('Make To Order')
***************************************************************************************
search
[('lot_id', 'in', self.ids), ('state', '=', 'done')]
***************************************************************************************
_for_xml_id
'sale.action_orders'
***************************************************************************************
create
sale_order_lines_vals
***************************************************************************************
browse
[move.id for move_orig in moves_information.values() for move in move_orig[0]]
***************************************************************************************
search
domain
***************************************************************************************
browse
data['so_route_ids']
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'name': self.product.name, 'product_id': self.product.id, 'product_uom_qty': 2.0, 'product_uom': self.product.uom_id.id, 'price_unit': 12, 'tax_id': False})]}
***************************************************************************************
create
{'name': 'a', 'product_id': self.product.id, 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': self.company_data['default_warehouse'].lot_stock_id.id, 'product_uom': self.product.uom_id.id, 'product_uom_qty': 1, 'price_unit': 8}
***************************************************************************************
create
{'name': 'a', 'product_id': self.product.id, 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': self.company_data['default_warehouse'].lot_stock_id.id, 'product_uom': self.product.uom_id.id, 'product_uom_qty': 1, 'price_unit': 10}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'partner_invoice_id': self.partner_a.id, 'partner_shipping_id': self.partner_a.id, 'order_line': [(0, 0, {'name': product.name, 'product_id': product.id, 'product_uom_qty': 5.0, 'product_uom': product.uom_id.id, 'price_unit': product.list_price})]}
***************************************************************************************
browse
res['res_id']
***************************************************************************************
create
{'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': self.company_data['default_warehouse'].lot_stock_id.id, 'picking_type_id': self.company_data['default_warehouse'].in_type_id.id}
***************************************************************************************
create
{'name': 'test_immediate_validate_1', 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': self.company_data['default_warehouse'].lot_stock_id.id, 'picking_id': picking.id, 'product_id': product.id, 'product_uom': product.uom_id.id, 'quantity_done': 1}
***************************************************************************************
create
{'name': 'a', 'product_id': self.product.id, 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': self.company_data['default_warehouse'].lot_stock_id.id, 'product_uom': self.product.uom_id.id, 'product_uom_qty': 8, 'price_unit': 10}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'name': self.product.name, 'product_id': self.product.id, 'product_uom_qty': 10.0, 'product_uom': self.product.uom_id.id, 'price_unit': 12, 'tax_id': False})]}
***************************************************************************************
create
{'name': 'a', 'product_id': self.product.id, 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': self.company_data['default_warehouse'].lot_stock_id.id, 'product_uom': self.product.uom_id.id, 'product_uom_qty': 2, 'price_unit': 12}
***************************************************************************************
create
{'name': 'a', 'product_id': self.product.id, 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': self.company_data['default_warehouse'].lot_stock_id.id, 'product_uom': self.product.uom_id.id, 'product_uom_qty': 5, 'price_unit': 8}
***************************************************************************************
create
{'name': 'a', 'product_id': self.product.id, 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': self.company_data['default_warehouse'].lot_stock_id.id, 'product_uom': self.product.uom_id.id, 'product_uom_qty': 8, 'price_unit': 12}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'name': self.product.name, 'product_id': self.product.id, 'product_uom_qty': 1, 'product_uom': self.product.uom_id.id, 'price_unit': 20, 'tax_id': False})]}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'name': self.product.name, 'product_id': self.product.id, 'product_uom_qty': 6, 'product_uom': self.product.uom_id.id, 'price_unit': 20, 'tax_id': False})]}
***************************************************************************************
create
{'name': 'a', 'product_id': self.product.id, 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': self.company_data['default_warehouse'].lot_stock_id.id, 'product_uom': self.product.uom_id.id, 'product_uom_qty': 8, 'price_unit': 10}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'name': self.product.name, 'product_id': self.product.id, 'product_uom_qty': 10.0, 'product_uom': self.product.uom_id.id, 'price_unit': 12, 'tax_id': False})]}
***************************************************************************************
create
{'name': 'a', 'product_id': self.product.id, 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': self.company_data['default_warehouse'].lot_stock_id.id, 'product_uom': self.product.uom_id.id, 'product_uom_qty': 2, 'price_unit': 12}
***************************************************************************************
create
{'name': 'a', 'product_id': self.product.id, 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': self.company_data['default_warehouse'].lot_stock_id.id, 'product_uom': self.product.uom_id.id, 'product_uom_qty': 2, 'price_unit': 10}
***************************************************************************************
browse
stock_return_picking_action['res_id']
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'name': self.product.name, 'product_id': self.product.id, 'product_uom_qty': 1.0, 'product_uom': self.product.uom_id.id, 'price_unit': 12, 'tax_id': False})]}
***************************************************************************************
create
{'name': 'a', 'product_id': self.product.id, 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': self.company_data['default_warehouse'].lot_stock_id.id, 'product_uom': self.product.uom_id.id, 'product_uom_qty': 1, 'price_unit': 20}
***************************************************************************************
browse
stock_redeliver_picking_action['res_id']
***************************************************************************************
create
{'name': 'Pack of 12 units', 'category_id': self.product.uom_id.category_id.id, 'uom_type': 'bigger', 'factor_inv': 12, 'rounding': 1}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'name': self.product.name, 'product_id': self.product.id, 'product_uom_qty': 1, 'product_uom': unit_12.id, 'price_unit': 18, 'tax_id': False})]}
***************************************************************************************
create
{'name': 'a', 'product_id': self.product.id, 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': self.company_data['default_warehouse'].lot_stock_id.id, 'product_uom': self.product.uom_id.id, 'product_uom_qty': quantity, 'price_unit': 1.0}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'name': self.product.name, 'product_id': self.product.id, 'product_uom_qty': 1, 'product_uom': unit_12.id, 'price_unit': 18, 'tax_id': False})]}
***************************************************************************************
with_context
wiz['context']
***************************************************************************************
with_context
wiz['context']
***************************************************************************************
with_context
wiz['context']
***************************************************************************************
with_context
wiz['context']
***************************************************************************************
with_context
wiz['context']
***************************************************************************************
with_context
wiz['context']
***************************************************************************************
with_context
wiz['context']
***************************************************************************************
with_context
wiz['context']
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'currency_id': self.currency_data['currency'].id, 'order_line': [(0, 0, {'name': product.name, 'product_id': product.id, 'product_uom_qty': quantity, 'product_uom': product.uom_po_id.id, 'price_unit': 66.0})], 'date_order': date}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'currency_id': self.currency_data['currency'].id, 'move_type': 'out_invoice', 'invoice_date': date, 'invoice_line_ids': [(0, 0, {'name': 'test line', 'account_id': self.company_data['default_account_revenue'].id, 'price_unit': 66.0, 'quantity': quantity, 'discount': 0.0, 'product_uom_id': product.uom_id.id, 'product_id': product.id, 'sale_line_ids': [(6, 0, sale_order.order_line.ids)]})]}
***************************************************************************************
create
{'name': 'Initial stock', 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': self.company_data['default_warehouse'].lot_stock_id.id, 'product_id': product.id, 'product_uom': product.uom_id.id, 'product_uom_qty': 11, 'price_unit': 13}
***************************************************************************************
search
[('sale_id', '=', sale_order.id)]
***************************************************************************************
search
[('sale_id', '=', sale_order.id)]
***************************************************************************************
browse
stock_return_picking_action['res_id']
***************************************************************************************
browse
refund_invoice_wiz.reverse_moves()['res_id']
***************************************************************************************
search
[('sale_id', '=', sale_order.id)]
***************************************************************************************
search
[('sale_id', '=', sale_order.id)]
***************************************************************************************
_update_available_quantity
product_Aself.company_data['default_warehouse'].lot_stock_id10
***************************************************************************************
_update_available_quantity
product_Bself.company_data['default_warehouse'].lot_stock_id10
***************************************************************************************
_update_available_quantity
product_Cself.company_data['default_warehouse'].lot_stock_id10
***************************************************************************************
create
{'partner_id': self.env['res.partner'].create({'name': 'A Customer'}).id, 'picking_policy': 'direct', 'order_line': [(0, 0, {'name': product_A.name, 'product_id': product_A.id, 'customer_lead': product_A.sale_delay, 'product_uom_qty': 5}), (0, 0, {'name': product_B.name, 'product_id': product_B.id, 'customer_lead': product_B.sale_delay, 'product_uom_qty': 5}), (0, 0, {'name': product_C.name, 'product_id': product_C.id, 'customer_lead': product_C.sale_delay, 'product_uom_qty': 5})]}
***************************************************************************************
create
{'partner_id': self.env['res.partner'].create({'name': 'A Partner'}).id, 'order_line': [(0, 0, {'name': 'A product', 'product_id': self.env['product.product'].create({'name': 'A product', 'type': 'product'}).id, 'product_uom_qty': 1, 'price_unit': 750})], 'commitment_date': '2010-07-12'}
***************************************************************************************
create
{'name': 'A Customer'}
***************************************************************************************
create
{'name': 'A Partner'}
***************************************************************************************
create
{'name': 'A product', 'type': 'product'}
***************************************************************************************
create
sale_order_vals
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'partner_invoice_id': self.partner_a.id, 'partner_shipping_id': self.partner_a.id, 'order_line': [(0, 0, {'name': p.name, 'product_id': p.id, 'product_uom_qty': 2, 'product_uom': p.uom_id.id, 'price_unit': p.list_price}) for p in (self.company_data['product_order_no'], self.company_data['product_service_delivery'], self.company_data['product_service_order'], self.company_data['product_delivery_no'])], 'pricelist_id': self.company_data['default_pricelist'].id, 'picking_policy': 'direct'}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'partner_invoice_id': self.partner_a.id, 'partner_shipping_id': self.partner_a.id, 'order_line': [(0, 0, {'name': p.name, 'product_id': p.id, 'product_uom_qty': 2, 'product_uom': p.uom_id.id, 'price_unit': p.list_price}) for p in (self.company_data['product_order_no'], self.company_data['product_service_delivery'], self.company_data['product_service_order'], self.company_data['product_delivery_no'])], 'pricelist_id': self.company_data['default_pricelist'].id, 'picking_policy': 'direct'}
***************************************************************************************
create
{'name': 'Deposit', 'type': 'service', 'invoice_policy': 'order'}
***************************************************************************************
browse
act['res_id']
***************************************************************************************
create
so_vals
***************************************************************************************
browse
res['res_id']
***************************************************************************************
create
so_vals
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'name': item1.name, 'product_id': item1.id, 'product_uom_qty': 1, 'product_uom': item1.uom_id.id, 'price_unit': item1.list_price}), (0, 0, {'name': item2.name, 'product_id': item2.id, 'product_uom_qty': 1, 'product_uom': item2.uom_id.id, 'price_unit': item2.list_price})]}
***************************************************************************************
_update_available_quantity
item2self.company_data['default_warehouse'].lot_stock_id2
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'name': item1.name, 'product_id': item1.id, 'product_uom_qty': 1, 'product_uom': item1.uom_id.id, 'price_unit': item1.list_price}), (0, 0, {'name': item2.name, 'product_id': item2.id, 'product_uom_qty': 1, 'product_uom': item2.uom_id.id, 'price_unit': item2.list_price})]}
***************************************************************************************
create
{'name': 'Another Test Partner'}
***************************************************************************************
create
{'partner_id': partner1, 'order_line': [(0, 0, {'name': item1.name, 'product_id': item1.id, 'product_uom_qty': 1, 'product_uom': item1.uom_id.id, 'price_unit': item1.list_price})]}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'name': item1.name, 'product_id': item1.id, 'product_uom_qty': 1, 'product_uom': uom_dozen.id, 'price_unit': item1.list_price})]}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'name': item1.name, 'product_id': item1.id, 'product_uom_qty': 1, 'product_uom': uom_dozen.id, 'price_unit': item1.list_price}), (0, 0, {'name': item1.name, 'product_id': item1.id, 'product_uom_qty': 1, 'product_uom': uom_dozen.id, 'price_unit': item1.list_price}), (0, 0, {'name': item1.name, 'product_id': item1.id, 'product_uom_qty': 1, 'product_uom': uom_dozen.id, 'price_unit': item1.list_price})]}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'name': item1.name, 'product_id': item1.id, 'product_uom_qty': 10, 'product_uom': uom_unit.id, 'price_unit': item1.list_price})]}
***************************************************************************************
browse
res['res_id']
***************************************************************************************
_update_available_quantity
item1warehouse1.lot_stock_id10
***************************************************************************************
_update_reserved_quantity
item1warehouse1.lot_stock_id3
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'name': 'Zizizatestwarehouse', 'code': 'Test'}
***************************************************************************************
_update_available_quantity
item1warehouse2.lot_stock_id5
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'name': item1.name, 'product_id': item1.id, 'product_uom_qty': 1, 'product_uom': item1.uom_id.id, 'price_unit': item1.list_price})]}
***************************************************************************************
_update_available_quantity
item1self.company_data['default_warehouse'].lot_stock_id10
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'name': item1.name, 'product_id': item1.id, 'product_uom_qty': 5, 'product_uom': item1.uom_id.id, 'price_unit': item1.list_price}), (0, 0, {'name': item1.name, 'product_id': item1.id, 'product_uom_qty': 5, 'product_uom': item1.uom_id.id, 'price_unit': item1.list_price}), (0, 0, {'name': item1.name, 'product_id': item1.id, 'product_uom_qty': 5, 'product_uom': item1.uom_id.id, 'price_unit': item1.list_price})]}
***************************************************************************************
browse
res['res_id']
***************************************************************************************
browse
res['res_id']
***************************************************************************************
create
{'name': 'Shenaniffluffy', 'type': 'consu', 'invoice_policy': 'order', 'list_price': 55.0}
***************************************************************************************
create
{'name': 'Shenaniffluffy', 'type': 'consu', 'invoice_policy': 'order', 'list_price': 55.0}
***************************************************************************************
create
so_vals
***************************************************************************************
_update_available_quantity
productself.company_data['default_warehouse'].lot_stock_id20
***************************************************************************************
create
{'name': 'Product with packaging', 'type': 'product'}
***************************************************************************************
create
{'name': 'box', 'product_id': product.id}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'product_id': product.id, 'product_uom_qty': 1.0, 'product_uom': product.uom_id.id, 'product_packaging_id': packaging.id})]}
***************************************************************************************
create
{'partner_id': partner.id, 'partner_invoice_id': partner.id, 'partner_shipping_id': partner.id, 'order_line': [(0, 0, {'name': product.name, 'product_id': product.id, 'product_uom_qty': 2, 'product_uom': product.uom_id.id, 'price_unit': product.list_price})], 'pricelist_id': self.env.ref('product.list0').id}
***************************************************************************************
create
{'category_id': self.env.ref('uom.uom_categ_length').id, 'name': 'Yards', 'factor_inv': 0.9144, 'uom_type': 'bigger'}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'name': product.name, 'product_id': product.id, 'product_uom_qty': 4.0, 'product_uom': yards_uom.id, 'price_unit': 1.0})]}
***************************************************************************************
_update_available_quantity
productself.company_data['default_warehouse'].lot_stock_id50
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'name': product.name, 'product_id': product.id, 'product_uom_qty': 50, 'product_uom': product.uom_id.id, 'price_unit': product.list_price})]}
***************************************************************************************
search
[('code', '=', 'incoming')]
***************************************************************************************
with_context
{'order_id': so.id}
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
{'active_model': 'sale.order', 'active_ids': self.sale_order.ids}
***************************************************************************************
search
wizard.create_entries()['domain']
***************************************************************************************
search
wizard.create_entries()['domain']
***************************************************************************************
with_context
{'active_model': 'sale.order', 'active_ids': self.sale_order.ids}
***************************************************************************************
search
wizard.create_entries()['domain']
***************************************************************************************
search
wizard.create_entries()['domain']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
with_context
wiz_act['context']
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'partner_invoice_id': self.partner_a.id, 'partner_shipping_id': self.partner_a.id, 'pricelist_id': self.company_data['default_pricelist'].id, 'picking_policy': 'direct', 'warehouse_id': self.company_data['default_warehouse'].id, 'order_line': [(0, 0, {'name': self.test_product_order.name, 'product_id': self.test_product_order.id, 'product_uom_qty': 10, 'product_uom': self.env.ref('uom.product_uom_unit').id, 'customer_lead': self.test_product_order.sale_delay})]}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'partner_invoice_id': self.partner_a.id, 'partner_shipping_id': self.partner_a.id, 'pricelist_id': self.company_data['default_pricelist'].id, 'picking_policy': 'direct', 'warehouse_id': self.company_data['default_warehouse'].id, 'order_line': [(0, 0, {'name': self.test_product_order.name, 'product_id': self.test_product_order.id, 'product_uom_qty': 5, 'product_uom': self.env.ref('uom.product_uom_unit').id, 'customer_lead': self.test_product_order.sale_delay})]}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'partner_invoice_id': self.partner_a.id, 'partner_shipping_id': self.partner_a.id, 'pricelist_id': self.company_data['default_pricelist'].id, 'picking_policy': 'direct', 'warehouse_id': self.company_data['default_warehouse'].id, 'order_line': [(0, 0, {'name': self.test_product_order.name, 'product_id': self.test_product_order.id, 'product_uom_qty': 5, 'product_uom': self.env.ref('uom.product_uom_unit').id, 'customer_lead': self.test_product_order.sale_delay})]}
***************************************************************************************
create
quant_vals
***************************************************************************************
create
{'name': 'Sale order', 'partner_id': self.env.ref('base.partner_admin').id, 'partner_invoice_id': self.env.ref('base.partner_admin').id, 'pricelist_id': self.pricelist.id}
***************************************************************************************
create
{'name': 'Sale order', 'order_id': sale_order.id, 'price_unit': price_unit, 'product_id': product.id, 'product_uom_qty': quantity, 'product_uom': self.env.ref('uom.product_uom_unit').id}
***************************************************************************************
create
{'name': 'Super product', 'type': 'product'}
***************************************************************************************
create
{'name': 'Super Pricelist', 'currency_id': other_currency.id}
***************************************************************************************
create
[{'currency_id': main_company_currency.id, 'rate': 1, 'name': date, 'company_id': False}, {'currency_id': new_company_currency.id, 'rate': 3, 'name': date, 'company_id': False}]
***************************************************************************************
create
{'name': 'Super Company', 'currency_id': new_company_currency.id}
***************************************************************************************
search
[('company_id', '=', new_company.id), ('code', '=', 'incoming')]
***************************************************************************************
search
[('company_id', '=', new_company.id), ('usage', '=', 'production')]
***************************************************************************************
create
{'picking_type_id': incoming_picking_type.id, 'location_id': production_location.id, 'location_dest_id': incoming_picking_type.default_location_dest_id.id}
***************************************************************************************
create
{'name': 'Incoming Product', 'product_id': product.id, 'location_id': production_location.id, 'location_dest_id': incoming_picking_type.default_location_dest_id.id, 'product_uom': product.uom_id.id, 'product_uom_qty': 1, 'price_unit': 100, 'picking_type_id': incoming_picking_type.id, 'picking_id': picking.id}
***************************************************************************************
create
{'name': 'Super Partner'}
***************************************************************************************
create
{'name': 'Sale order', 'partner_id': partner.id, 'partner_invoice_id': partner.id, 'pricelist_id': self.pricelist.id}
***************************************************************************************
search
[]
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res['context']
***************************************************************************************
with_context
res['context']
***************************************************************************************
search
[('project_id', '=', self.project_id.id), ('employee_id', '=', self.employee_id.id)]
***************************************************************************************
browse
values.get('task_id')
***************************************************************************************
read_group
[('timesheet_invoice_id', 'in', self.ids)]['timesheet_invoice_id', 'unit_amount']['timesheet_invoice_id']
***************************************************************************************
read_group
[('timesheet_invoice_id', 'in', self.ids)]['timesheet_invoice_id']['timesheet_invoice_id']
***************************************************************************************
read_group
[('project_id', 'in', self.ids)]['project_id', 'so_line', 'unit_amount']['project_id', 'so_line']
***************************************************************************************
read_group
[('task_id', 'in', projects.task_ids.ids)]['employee_id', 'project_id']['employee_id', 'project_id']['employee_id', 'project_id']
***************************************************************************************
search
[('line_ids.analytic_account_id', '!=', False), ('line_ids.analytic_account_id', 'in', self.analytic_account_id.ids), ('move_type', '=', 'out_invoice')]
***************************************************************************************
_for_xml_id
'hr_timesheet.timesheet_action_all'
***************************************************************************************
search
[('order_id', 'in', sale_orders.ids), ('is_service', '=', True)]
***************************************************************************************
read_group
[('project_id', '=', self.id)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues', 'expense_cost', 'timesheet_cost', 'margin']['project_id']
***************************************************************************************
search
domain
***************************************************************************************
search
[('is_service', '=', True), ('order_partner_id', 'child_of', project.partner_id.commercial_partner_id.id), ('is_expense', '=', False), ('state', 'in', ['sale', 'done']), ('remaining_hours', '>', 0)]
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
_for_xml_id
'sale_timesheet.timesheet_action_from_sales_order'
***************************************************************************************
browse
timesheet_ids
***************************************************************************************
create
[{'order_id': self.so.id, 'name': self.product_delivery_timesheet1.name, 'product_id': self.product_delivery_timesheet1.id, 'product_uom_qty': 10, 'price_unit': self.product_delivery_timesheet1.list_price}, {'order_id': self.so.id, 'product_id': self.product_delivery_timesheet2.id, 'product_uom_qty': 5}, {'order_id': self.so.id, 'product_id': self.product_delivery_timesheet3.id, 'product_uom_qty': 5}, {'order_id': self.so.id, 'product_id': self.product_order_timesheet1.id, 'product_uom_qty': 2}]
***************************************************************************************
create
{'name': 'Task', 'project_id': self.project_task_rate.id, 'sale_line_id': self.so.order_line[0].id}
***************************************************************************************
create
{'name': 'Test Line', 'project_id': self.project_task_rate.id, 'task_id': self.task_rate_task.id, 'unit_amount': 5, 'employee_id': self.employee_manager.id}
***************************************************************************************
browse
action['res_id']
***************************************************************************************
browse
action['res_id']
***************************************************************************************
with_context
{'tracking_disable': True}
***************************************************************************************
browse
action['res_id']
***************************************************************************************
_get_template_values
self.project_pigs
***************************************************************************************
create
{'name': self.company_data['product_order_cost'].name, 'product_id': self.company_data['product_order_cost'].id, 'product_uom_qty': 2, 'product_uom': self.company_data['product_order_cost'].uom_id.id, 'price_unit': self.company_data['product_order_cost'].list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'name': self.company_data['product_delivery_cost'].name, 'product_id': self.company_data['product_delivery_cost'].id, 'product_uom_qty': 4, 'product_uom': self.company_data['product_delivery_cost'].uom_id.id, 'price_unit': self.company_data['product_delivery_cost'].list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'name': 'Test Line', 'project_id': task_sol1.project_id.id, 'task_id': task_sol1.id, 'unit_amount': 1, 'employee_id': self.employee_user.id, 'company_id': self.company_data['company'].id}
***************************************************************************************
create
{'name': self.company_data['product_delivery_sales_price'].name, 'product_id': self.company_data['product_delivery_sales_price'].id, 'product_uom_qty': 2, 'qty_delivered': 1, 'product_uom': self.company_data['product_delivery_sales_price'].uom_id.id, 'price_unit': self.company_data['product_delivery_sales_price'].list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'name': self.company_data['product_order_sales_price'].name, 'product_id': self.company_data['product_order_sales_price'].id, 'product_uom_qty': 3, 'qty_delivered': 1, 'product_uom': self.company_data['product_order_sales_price'].uom_id.id, 'price_unit': self.company_data['product_order_sales_price'].list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'name': 'Test Line', 'project_id': task_sol1.project_id.id, 'task_id': task_sol1.id, 'unit_amount': 1, 'employee_id': self.employee_user.id}
***************************************************************************************
create
{'name': self.company_data['product_order_no'].name, 'product_id': self.company_data['product_order_no'].id, 'product_uom_qty': 2, 'qty_delivered': 1, 'product_uom': self.company_data['product_order_no'].uom_id.id, 'price_unit': self.company_data['product_order_no'].list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'name': 'Test Line', 'project_id': task_sol1.project_id.id, 'task_id': task_sol1.id, 'unit_amount': 1, 'employee_id': self.employee_user.id}
***************************************************************************************
create
{'name': 'Service delivered, create task in global project', 'standard_price': 30, 'list_price': 90, 'type': 'service', 'service_policy': 'delivered_timesheet', 'invoice_policy': 'delivery', 'default_code': 'SERV-DELI2', 'service_type': 'timesheet', 'service_tracking': 'task_global_project', 'project_id': self.project_global.id, 'taxes_id': False, 'property_account_income_id': self.account_sale.id}
***************************************************************************************
create
{'name': 'Toto'}
***************************************************************************************
create
{'name': 'Test Line', 'project_id': task.project_id.id, 'task_id': task.id, 'unit_amount': 1, 'employee_id': self.employee_user.id, 'company_id': self.company_data['company'].id}
***************************************************************************************
browse
invoice_dict['res_id']
***************************************************************************************
browse
refund_invoice_wiz.reverse_moves()['res_id']
***************************************************************************************
with_context
context
***************************************************************************************
with_context
wiz_context
***************************************************************************************
with_context
context
***************************************************************************************
browse
invoice_id
***************************************************************************************
browse
invoice_id
***************************************************************************************
browse
invoice_id
***************************************************************************************
create
{'name': self.product_expense.name, 'product_id': self.product_expense.id, 'product_uom_qty': 0.0, 'product_uom': self.product_expense.uom_id.id, 'price_unit': self.product_expense.list_price, 'order_id': self.sale_order_1.id, 'is_expense': True}
***************************************************************************************
browse
invoice_id
***************************************************************************************
search
expression.AND([action_invoice['domain'], [('id', 'not in', posted_invoice_res_ids)]])
***************************************************************************************
browse
credit_id
***************************************************************************************
create
{'name': self.product_expense.name, 'product_id': self.product_expense.id, 'product_uom_qty': 0.0, 'product_uom': self.product_expense.uom_id.id, 'price_unit': self.product_expense.list_price, 'order_id': self.sale_order_2.id, 'is_expense': True}
***************************************************************************************
create
{'name': 'expense on project_so_2', 'account_id': project_so_2.analytic_account_id.id, 'so_line': so_line_expense.id, 'employee_id': self.employee_user.id, 'unit_amount': 4, 'amount': 4 * self.product_expense.list_price * -1, 'product_id': self.product_expense.id, 'product_uom_id': self.product_expense.uom_id.id}
***************************************************************************************
search
expression.AND([action_invoice['domain'], [('id', 'not in', posted_invoice_res_ids)]])
***************************************************************************************
browse
credit_id
***************************************************************************************
create
{'name': self.product_delivery_manual1.name, 'product_id': self.product_delivery_manual1.id, 'product_uom_qty': 50, 'product_uom': self.product_delivery_manual1.uom_id.id, 'price_unit': self.product_delivery_manual1.list_price, 'order_id': self.sale_order_2.id}
***************************************************************************************
create
{'name': 'Task with milestone not tracked', 'project_id': project_so_2.id, 'partner_id': project_so_2.partner_id.id, 'sale_line_id': so_line_deliver_no_task.id}
***************************************************************************************
browse
action_invoice['res_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_1.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_2.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_3.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', self.project_global.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_1.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_2.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_3.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', self.project_global.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_1.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_2.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_3.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', self.project_global.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_1.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_2.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_3.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', self.project_global.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_1.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_2.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_3.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', self.project_global.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_1.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_2.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_3.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', self.project_global.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_1.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_2.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', self.project_global.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_2.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_2.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_2.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_2.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_2.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_2.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_2.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
read_group
[('project_id', 'in', project_so_2.ids)]['project_id', 'amount_untaxed_to_invoice', 'amount_untaxed_invoiced', 'timesheet_unit_amount', 'timesheet_cost', 'expense_cost', 'expense_amount_untaxed_to_invoice', 'expense_amount_untaxed_invoiced', 'other_revenues']['project_id']
***************************************************************************************
with_context
context
***************************************************************************************
with_context
context
***************************************************************************************
with_context
{'active_ids': invoice_downpayment2.ids, 'active_id': invoice_downpayment2.id, 'active_model': 'account.move'}
***************************************************************************************
with_context
{'active_ids': invoice_payment.ids, 'active_id': invoice_payment.id, 'active_model': 'account.move'}
***************************************************************************************
search
[('project_id', '=', self.project_global.id)]
***************************************************************************************
create
{'order_id': self.sale_order.id, 'name': self.product_delivery_timesheet2.name, 'product_id': self.product_delivery_timesheet2.id, 'product_uom_qty': 50, 'product_uom': self.product_delivery_timesheet2.uom_id.id, 'price_unit': self.product_delivery_timesheet2.list_price}
***************************************************************************************
create
{'name': 'Test Line', 'project_id': project.id, 'task_id': task.id, 'unit_amount': 50, 'employee_id': self.employee_manager.id}
***************************************************************************************
create
{'name': 'Delivered Service', 'standard_price': 30, 'list_price': 90, 'type': 'service', 'invoice_policy': 'delivery', 'uom_id': self.env.ref('uom.product_uom_hour').id, 'uom_po_id': self.env.ref('uom.product_uom_hour').id, 'default_code': 'SERV-DELI', 'service_type': 'timesheet', 'service_tracking': 'task_global_project', 'project_id': project.id}
***************************************************************************************
create
{'name': product_service_task.name, 'product_id': product_service_task.id, 'product_uom_qty': 10, 'product_uom': product_service_task.uom_id.id, 'price_unit': product_service_task.list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'order_id': self.sale_order.id, 'name': self.product_delivery_timesheet3.name, 'product_id': self.product_delivery_timesheet3.id, 'product_uom_qty': 5, 'product_uom': uom_days.id, 'price_unit': self.product_delivery_timesheet3.list_price}
***************************************************************************************
search
[('sale_line_id', '=', sale_order_line.id)]
***************************************************************************************
create
{'name': 'Test Line', 'project_id': task.project_id.id, 'task_id': task.id, 'unit_amount': 16, 'employee_id': self.employee_manager.id}
***************************************************************************************
create
{'name': 'Test Line', 'project_id': task.project_id.id, 'task_id': task.id, 'unit_amount': 24, 'employee_id': self.employee_user.id}
***************************************************************************************
create
{'name': self.product_delivery_timesheet2.name, 'product_id': self.product_delivery_timesheet2.id, 'product_uom_qty': 10, 'product_uom': self.product_delivery_timesheet2.uom_id.id, 'price_unit': self.product_delivery_timesheet2.list_price, 'order_id': self.sale_order.id}
***************************************************************************************
search
[('sale_line_id', '=', so_line_deliver_global_project.id)]
***************************************************************************************
create
{'name': 'Test Line', 'project_id': task_serv2.project_id.id, 'task_id': task_serv2.id, 'unit_amount': 4, 'employee_id': self.employee_user.id}
***************************************************************************************
create
{'name': 'Test Line', 'project_id': task_serv2.project_id.id, 'task_id': task_serv2.id, 'unit_amount': 1, 'employee_id': self.employee_manager.id}
***************************************************************************************
create
{'name': self.product_delivery_timesheet3.name, 'product_id': self.product_delivery_timesheet3.id, 'product_uom_qty': 10, 'product_uom': self.product_delivery_timesheet3.uom_id.id, 'price_unit': self.product_delivery_timesheet3.list_price, 'order_id': self.sale_order.id}
***************************************************************************************
search
[('sale_line_id', '=', so_line_deliver_new_task_project.id)]
***************************************************************************************
create
{'name': 'Test Line', 'project_id': task_serv2.project_id.id, 'task_id': task_serv2.id, 'unit_amount': 4, 'employee_id': self.employee_user.id}
***************************************************************************************
create
{'name': 'Test Line 2', 'project_id': task_serv2.project_id.id, 'task_id': task_serv2.id, 'unit_amount': 4, 'employee_id': self.employee_user.id}
***************************************************************************************
create
{'name': 'Test Line 3', 'project_id': task_serv2.project_id.id, 'task_id': task_serv2.id, 'unit_amount': 2, 'employee_id': self.employee_user.id}
***************************************************************************************
create
{'name': self.product_delivery_timesheet3.name, 'product_id': self.product_delivery_timesheet3.id, 'product_uom_qty': 7, 'product_uom': self.product_delivery_timesheet3.uom_id.id, 'price_unit': self.product_delivery_timesheet3.list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'name': 'Second Project TEMPLATE for services', 'allow_timesheets': True, 'active': False}
***************************************************************************************
create
{'name': 'Service delivered, create project only based on template B', 'standard_price': 17, 'list_price': 34, 'type': 'service', 'invoice_policy': 'delivery', 'uom_id': self.env.ref('uom.product_uom_hour').id, 'uom_po_id': self.env.ref('uom.product_uom_hour').id, 'default_code': 'SERV-DELI4', 'service_type': 'timesheet', 'service_tracking': 'project_only', 'project_template_id': project_template2.id, 'project_id': False, 'taxes_id': False, 'property_account_income_id': self.account_sale.id}
***************************************************************************************
create
{'name': self.product_delivery_timesheet5.name, 'product_id': self.product_delivery_timesheet5.id, 'product_uom_qty': 11, 'product_uom': self.product_delivery_timesheet5.uom_id.id, 'price_unit': self.product_delivery_timesheet5.list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'name': self.product_order_timesheet4.name, 'product_id': self.product_order_timesheet4.id, 'product_uom_qty': 10, 'product_uom': self.product_order_timesheet4.uom_id.id, 'price_unit': self.product_order_timesheet4.list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'name': self.product_delivery_timesheet5.name, 'product_id': self.product_delivery_timesheet5.id, 'product_uom_qty': 5, 'product_uom': self.product_delivery_timesheet5.uom_id.id, 'price_unit': self.product_delivery_timesheet5.list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'name': self.product_delivery_manual3.name, 'product_id': self.product_delivery_manual3.id, 'product_uom_qty': 4, 'product_uom': self.product_delivery_manual3.uom_id.id, 'price_unit': self.product_delivery_manual3.list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'name': product_deli_ts_tmpl.name, 'product_id': product_deli_ts_tmpl.id, 'product_uom_qty': 8, 'product_uom': product_deli_ts_tmpl.uom_id.id, 'price_unit': product_deli_ts_tmpl.list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'name': self.product_order_timesheet3.name, 'product_id': self.product_order_timesheet3.id, 'product_uom_qty': 11, 'product_uom': self.product_order_timesheet3.uom_id.id, 'price_unit': self.product_order_timesheet3.list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'name': self.product_order_timesheet3.name, 'product_id': self.product_order_timesheet3.id, 'product_uom_qty': 10, 'product_uom': self.product_order_timesheet3.uom_id.id, 'price_unit': self.product_order_timesheet3.list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'name': self.product_order_timesheet4.name, 'product_id': self.product_order_timesheet4.id, 'product_uom_qty': 5, 'product_uom': self.product_order_timesheet4.uom_id.id, 'price_unit': self.product_order_timesheet4.list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'name': self.product_order_timesheet3.name, 'product_id': self.product_order_timesheet3.id, 'product_uom_qty': 10, 'product_uom': self.product_order_timesheet3.uom_id.id, 'price_unit': self.product_order_timesheet3.list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'name': self.product_delivery_timesheet3.name, 'product_id': self.product_delivery_timesheet3.id, 'product_uom_qty': 10, 'product_uom': self.product_delivery_timesheet3.uom_id.id, 'price_unit': self.product_delivery_timesheet3.list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'name': self.product_delivery_timesheet3.name + '(2)', 'product_id': self.product_delivery_timesheet3.id, 'product_uom_qty': 10, 'product_uom': self.product_delivery_timesheet3.uom_id.id, 'price_unit': self.product_delivery_timesheet3.list_price, 'order_id': self.sale_order.id}
***************************************************************************************
create
{'parent_id': task.id, 'project_id': project.id, 'name': '%s: substask1' % (task.name,)}
***************************************************************************************
create
{'project_id': project.id, 'name': '%s: substask1' % (task.name,)}
***************************************************************************************
create
{'order_id': self.sale_order.id, 'name': self.product_delivery_timesheet2.name, 'product_id': self.product_delivery_timesheet2.id, 'product_uom_qty': 50, 'product_uom': self.product_delivery_timesheet2.uom_id.id, 'price_unit': self.product_delivery_timesheet2.list_price}
***************************************************************************************
create
{'order_id': self.sale_order.id, 'name': self.product_delivery_timesheet3.name, 'product_id': self.product_delivery_timesheet3.id, 'product_uom_qty': 5, 'product_uom': self.product_delivery_timesheet3.uom_id.id, 'price_unit': self.product_delivery_timesheet3.list_price}
***************************************************************************************
search
[('sale_line_id', '=', sale_order_line.id)]
***************************************************************************************
create
{'name': 'Test task', 'project_id': self.project_task_rate.id}
***************************************************************************************
create
{'name': 'Test Timesheet', 'project_id': self.project_task_rate.id, 'task_id': task.id, 'unit_amount': 1}
***************************************************************************************
new
{'name': 'Test Timesheet', 'project_id': self.project_task_rate.id, 'task_id': task.id, 'unit_amount': 1, 'so_line': prepaid_service_sol.id, 'is_so_line_edited': True}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'partner_invoice_id': self.partner_a.id, 'partner_shipping_id': self.partner_a.id, 'pricelist_id': self.company_data['default_pricelist'].id}
***************************************************************************************
create
{'name': self.product_order_timesheet4.name, 'product_id': self.product_order_timesheet4.id, 'product_uom_qty': 10, 'product_uom': self.product_order_timesheet4.uom_id.id, 'price_unit': self.product_order_timesheet4.list_price, 'order_id': sale_order.id}
***************************************************************************************
create
{'name': self.product_order_timesheet2.name, 'product_id': self.product_order_timesheet2.id, 'product_uom_qty': 50, 'product_uom': self.product_order_timesheet2.uom_id.id, 'price_unit': self.product_order_timesheet2.list_price, 'order_id': sale_order.id}
***************************************************************************************
search
[('sale_line_id', '=', so_line_ordered_global_project.id)]
***************************************************************************************
search
[('sale_line_id', '=', so_line_ordered_project_only.id)]
***************************************************************************************
create
{'name': 'Test Line', 'project_id': task_serv2.project_id.id, 'task_id': task_serv2.id, 'unit_amount': 10.5, 'employee_id': self.employee_user.id}
***************************************************************************************
create
{'name': 'Test Line', 'project_id': task_serv2.project_id.id, 'task_id': task_serv2.id, 'unit_amount': 39.5, 'employee_id': self.employee_user.id}
***************************************************************************************
create
{'name': 'Test Line', 'project_id': task_serv2.project_id.id, 'unit_amount': 10, 'employee_id': self.employee_user.id}
***************************************************************************************
create
{'name': 'Test Line', 'project_id': task_serv2.project_id.id, 'task_id': task_serv2.id, 'unit_amount': 5, 'employee_id': self.employee_user.id}
***************************************************************************************
create
{'name': self.product_order_timesheet3.name, 'product_id': self.product_order_timesheet3.id, 'product_uom_qty': 3, 'product_uom': self.product_order_timesheet3.uom_id.id, 'price_unit': self.product_order_timesheet3.list_price, 'order_id': sale_order.id}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'partner_invoice_id': self.partner_a.id, 'partner_shipping_id': self.partner_a.id, 'pricelist_id': self.company_data['default_pricelist'].id}
***************************************************************************************
create
{'name': self.product_delivery_timesheet2.name, 'product_id': self.product_delivery_timesheet2.id, 'product_uom_qty': 50, 'product_uom': self.product_delivery_timesheet2.uom_id.id, 'price_unit': self.product_delivery_timesheet2.list_price, 'order_id': sale_order.id}
***************************************************************************************
create
{'name': self.product_delivery_timesheet3.name, 'product_id': self.product_delivery_timesheet3.id, 'product_uom_qty': 20, 'product_uom': self.product_delivery_timesheet3.uom_id.id, 'price_unit': self.product_delivery_timesheet3.list_price, 'order_id': sale_order.id}
***************************************************************************************
search
[('sale_line_id', '=', so_line_deliver_global_project.id)]
***************************************************************************************
search
[('sale_line_id', '=', so_line_deliver_task_project.id)]
***************************************************************************************
search
[('sale_line_id', '=', so_line_deliver_task_project.id)]
***************************************************************************************
create
{'name': 'Test Line', 'project_id': task_serv1.project_id.id, 'task_id': task_serv1.id, 'unit_amount': 10.5, 'employee_id': self.employee_manager.id}
***************************************************************************************
create
{'name': 'Test Line', 'project_id': task_serv1.project_id.id, 'task_id': task_serv1.id, 'unit_amount': 39.5, 'employee_id': self.employee_user.id}
***************************************************************************************
create
{'name': self.product_delivery_timesheet4.name, 'product_id': self.product_delivery_timesheet4.id, 'product_uom_qty': 5, 'product_uom': self.product_delivery_timesheet4.uom_id.id, 'price_unit': self.product_delivery_timesheet4.list_price, 'order_id': sale_order.id}
***************************************************************************************
create
{'name': 'Test Line', 'project_id': project_serv2.id, 'unit_amount': 7, 'employee_id': self.employee_user.id}
***************************************************************************************
create
{'name': 'Test Line 4', 'project_id': task_serv2.project_id.id, 'task_id': task_serv2.id, 'unit_amount': 7, 'employee_id': self.employee_user.id}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'partner_invoice_id': self.partner_a.id, 'partner_shipping_id': self.partner_a.id, 'pricelist_id': self.company_data['default_pricelist'].id}
***************************************************************************************
create
{'name': self.product_delivery_manual2.name, 'product_id': self.product_delivery_manual2.id, 'product_uom_qty': 50, 'product_uom': self.product_delivery_manual2.uom_id.id, 'price_unit': self.product_delivery_manual2.list_price, 'order_id': sale_order.id}
***************************************************************************************
create
{'name': self.product_delivery_manual4.name, 'product_id': self.product_delivery_manual4.id, 'product_uom_qty': 20, 'product_uom': self.product_delivery_manual4.uom_id.id, 'price_unit': self.product_delivery_manual4.list_price, 'order_id': sale_order.id}
***************************************************************************************
create
{'name': 'Test Line', 'project_id': self.project_global.id, 'task_id': so_line_manual_global_project.task_id.id, 'unit_amount': 6, 'employee_id': self.employee_manager.id}
***************************************************************************************
create
{'name': 'Test Line', 'project_id': self.project_global.id, 'unit_amount': 3, 'employee_id': self.employee_manager.id}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'partner_invoice_id': self.partner_a.id, 'partner_shipping_id': self.partner_a.id, 'pricelist_id': self.company_data['default_pricelist'].id}
***************************************************************************************
create
{'name': 'Section Name', 'order_id': sale_order.id, 'display_type': 'line_section'}
***************************************************************************************
create
{'name': self.product_delivery_timesheet2.name, 'product_id': self.product_delivery_timesheet2.id, 'product_uom_qty': 50, 'product_uom': self.product_delivery_timesheet2.uom_id.id, 'price_unit': self.product_delivery_timesheet2.list_price, 'order_id': sale_order.id}
***************************************************************************************
create
{'name': self.product_delivery_timesheet3.name, 'product_id': self.product_delivery_timesheet3.id, 'product_uom_qty': 20, 'product_uom': self.product_delivery_timesheet3.uom_id.id, 'price_unit': self.product_delivery_timesheet3.list_price, 'order_id': sale_order.id}
***************************************************************************************
search
[('sale_line_id', '=', so_line_deliver_global_project.id)]
***************************************************************************************
search
[('sale_line_id', '=', so_line_deliver_task_project.id)]
***************************************************************************************
search
[('sale_line_id', '=', so_line_deliver_task_project.id)]
***************************************************************************************
create
{'name': 'Test Line', 'project_id': task_serv1.project_id.id, 'task_id': task_serv1.id, 'unit_amount': 10, 'employee_id': self.employee_manager.id, 'date': today - timedelta(days=6)}
***************************************************************************************
create
{'name': 'Test Line 2', 'project_id': task_serv1.project_id.id, 'task_id': task_serv1.id, 'unit_amount': 20, 'employee_id': self.employee_manager.id, 'date': today - timedelta(days=1)}
***************************************************************************************
create
{'name': 'Test Line 3', 'project_id': task_serv1.project_id.id, 'task_id': task_serv1.id, 'unit_amount': 10, 'employee_id': self.employee_manager.id, 'date': today - timedelta(days=5)}
***************************************************************************************
create
{'name': 'Test Line 4', 'project_id': task_serv2.project_id.id, 'task_id': task_serv2.id, 'unit_amount': 30, 'employee_id': self.employee_manager.id}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'partner_invoice_id': self.partner_a.id, 'partner_shipping_id': self.partner_a.id, 'pricelist_id': self.company_data['default_pricelist'].id}
***************************************************************************************
create
{'partner_id': self.partner_b.id, 'partner_invoice_id': self.partner_b.id, 'partner_shipping_id': self.partner_b.id, 'pricelist_id': self.company_data['default_pricelist'].id}
***************************************************************************************
create
{'name': self.product_delivery_timesheet2.name, 'product_id': self.product_delivery_timesheet2.id, 'product_uom_qty': 50, 'product_uom': self.product_delivery_timesheet2.uom_id.id, 'price_unit': self.product_delivery_timesheet2.list_price, 'order_id': sale_order1.id}
***************************************************************************************
create
{'name': self.product_delivery_timesheet2.name, 'product_id': self.product_delivery_timesheet2.id, 'product_uom_qty': 20, 'product_uom': self.product_delivery_timesheet2.uom_id.id, 'price_unit': self.product_delivery_timesheet2.list_price, 'order_id': sale_order2.id}
***************************************************************************************
search
[('sale_line_id', '=', so1_product_global_project_so_line.id)]
***************************************************************************************
search
[('sale_line_id', '=', so2_product_global_project_so_line.id)]
***************************************************************************************
create
{'name': 'Test Line1', 'project_id': task_so1.project_id.id, 'task_id': task_so1.id, 'unit_amount': 5, 'employee_id': self.employee_user.id}
***************************************************************************************
create
{'name': 'Test Line2', 'project_id': task_so1.project_id.id, 'task_id': task_so1.id, 'unit_amount': 3, 'employee_id': self.employee_user.id}
***************************************************************************************
with_context
self.context
***************************************************************************************
with_context
context
***************************************************************************************
create
{'name': 'Test Line', 'project_id': self.task.project_id.id, 'task_id': self.task.id, 'unit_amount': unit_amount, 'employee_id': self.employee_manager.id, 'date': date}
***************************************************************************************
with_context
{'active_model': 'sale.order', 'active_ids': self.sale_order.ids}
***************************************************************************************
search
wizard.create_entries()['domain']
***************************************************************************************
search
wizard.create_entries()['domain']
***************************************************************************************
with_context
{'active_model': 'sale.order', 'active_ids': self.sale_order.ids}
***************************************************************************************
search
wizard.create_entries()['domain']
***************************************************************************************
search
wizard.create_entries()['domain']
***************************************************************************************
create
{'name': 'Task', 'project_id': self.project_task_rate.id}
***************************************************************************************
create
{'name': 'Test Line', 'unit_amount': 2, 'employee_id': self.employee_manager.id, 'project_id': self.project_task_rate.id, 'task_id': task.id}
***************************************************************************************
create
{'name': 'Task 2', 'project_id': self.project_task_rate.id}
***************************************************************************************
create
{'name': 'Task', 'project_id': self.project_project_rate.id}
***************************************************************************************
create
{'name': 'Test Line', 'unit_amount': 1, 'employee_id': self.employee_manager.id, 'project_id': self.project_project_rate.id, 'task_id': task.id}
***************************************************************************************
create
{'name': 'Task', 'project_id': self.project_employee_rate.id}
***************************************************************************************
create
{'name': 'Test Line', 'unit_amount': 1, 'employee_id': self.employee_manager.id, 'project_id': self.project_employee_rate.id, 'task_id': task.id}
***************************************************************************************
create
{'name': 'Test Task', 'project_id': self.project_non_billable.id, 'partner_id': self.partner_a.id}
***************************************************************************************
create
{'name': 'Test Line', 'unit_amount': 1, 'employee_id': self.employee_manager.id, 'project_id': task.project_id.id, 'task_id': task.id}
***************************************************************************************
create
{'name': 'Test Task', 'project_id': self.project_task_rate.id}
***************************************************************************************
create
{'name': 'Test Line', 'unit_amount': 1, 'employee_id': self.employee_manager.id, 'project_id': task.project_id.id, 'task_id': task.id}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'partner_invoice_id': self.partner_a.id, 'partner_shipping_id': self.partner_a.id}
***************************************************************************************
create
{'order_id': so.id, 'name': self.product_order_timesheet1.name, 'product_id': self.product_order_timesheet1.id, 'product_uom_qty': 10, 'price_unit': self.product_order_timesheet1.list_price}
***************************************************************************************
create
{'name': 'Project', 'allow_timesheets': True, 'allow_billable': True, 'partner_id': self.partner_a.id, 'analytic_account_id': self.analytic_account_sale.id}
***************************************************************************************
create
{'name': 'Task Test', 'project_id': project.id}
***************************************************************************************
create
{'name': 'Test Line', 'unit_amount': 5, 'employee_id': self.employee_manager.id, 'project_id': project.id, 'task_id': task.id}
***************************************************************************************
_for_xml_id
'sale.action_view_sale_advance_payment_inv'
***************************************************************************************
search_count
[('task_id', 'in', self.project_id.tasks.ids), ('so_line', '!=', False)]
***************************************************************************************
_for_xml_id
'sale.action_orders'
***************************************************************************************
create
{'project_id': self.project_id.id, 'partner_id': self.partner_id.id, 'analytic_account_id': self.project_id.analytic_account_id.id, 'client_order_ref': self.project_id.name, 'company_id': self.project_id.company_id.id}
***************************************************************************************
browse
active_id
***************************************************************************************
read_group
domain + [('task_id', 'in', line.project_id.tasks.ids), ('so_line', '=', False), ('timesheet_invoice_id', '=', False)]['unit_amount']['task_id']
***************************************************************************************
create
{'order_id': sale_order.id, 'product_id': wizard_line.product_id.id, 'price_unit': wizard_line.price_unit, 'project_id': self.project_id.id, 'task_id': task_id, 'product_uom_qty': 0.0}
***************************************************************************************
search
[('project_id', '=', self.project_id.id)]
***************************************************************************************
create
values
***************************************************************************************
search
[('task_id', 'in', self.project_id.tasks.ids)]
***************************************************************************************
search
search_domain
***************************************************************************************
search
search_domain
***************************************************************************************
browse
self._context.get('active_id') or self._context.get('active_ids')
***************************************************************************************
browse
self._context.get('active_ids', [])
***************************************************************************************
read_group
[('so_line', 'in', timesheet_sols.ids), ('project_id', '!=', False)]['so_line', 'amount:sum', 'unit_amount:sum']['so_line']
***************************************************************************************
search
[('company_id', 'in', valid_cids), '|', ('user_id', '=', user.id), ('member_ids', 'in', [user.id])]
***************************************************************************************
search
[]
***************************************************************************************
browse
self.env.context.get('default_team_id')
***************************************************************************************
search
[('company_id', 'in', valid_cids)]
***************************************************************************************
create
[{'crm_team_id': team.id, 'user_id': user.id} for user in users_new]
***************************************************************************************
search
[('crm_team_id', '!=', team.id if team.ids else False), ('user_id', 'in', team.member_ids.ids)]
***************************************************************************************
search
[('crm_team_id', 'in', self.crm_team_id.ids), ('user_id', 'in', self.user_id.ids), ('active', '=', True)]
***************************************************************************************
search
[]
***************************************************************************************
search
[('user_id', 'in', active.user_id.ids)]
***************************************************************************************
search
[('id', 'not in', self.ids)]
***************************************************************************************
search
[]
***************************************************************************************
browse
self.env.context['default_crm_team_id']
***************************************************************************************
browse
self.team_c2.id
***************************************************************************************
browse
self.team_c2.id
***************************************************************************************
create
{'name': 'Test Sales Team', 'sequence': 5, 'company_id': False, 'user_id': self.env.user.id}
***************************************************************************************
create
{'user_id': self.user_sales_leads.id, 'crm_team_id': self.sales_team_1.id}
***************************************************************************************
create
{'user_id': self.user_sales_leads.id, 'crm_team_id': self.sales_team_1.id}
***************************************************************************************
search
[('user_id', '=', self.user_sales_leads.id), ('crm_team_id', '=', self.sales_team_1.id)]
***************************************************************************************
create
{'user_id': self.user_sales_leads.id, 'crm_team_id': self.sales_team_1.id}
***************************************************************************************
create
[{'user_id': self.user_sales_leads.id, 'crm_team_id': self.sales_team_1.id}, {'user_id': self.user_sales_leads.id, 'crm_team_id': self.sales_team_1.id}]
***************************************************************************************
search
[('login', '=', 'mcfly@test.example.com')]
***************************************************************************************
search
[('login', '=', 'mcfly@test.example.com')]
***************************************************************************************
browse
self.sales_team_1.ids
***************************************************************************************
browse
self.new_team.ids
***************************************************************************************
browse
self.sales_team_1.ids
***************************************************************************************
browse
self.new_team.ids
***************************************************************************************
browse
self.sales_team_1.ids
***************************************************************************************
browse
self.new_team.ids
***************************************************************************************
create
{'user_id': self.env.user.id, 'crm_team_id': self.new_team.id}
***************************************************************************************
search
[('crm_team_id', '=', new_team.id), ('user_id', '=', self.user_sales_leads.id)]
***************************************************************************************
search
[('crm_team_id', '=', sales_team_1.id), ('user_id', '=', self.user_admin.id)]
***************************************************************************************
create
{'crm_team_id': new_team.id, 'user_id': self.user_admin.id, 'active': False}
***************************************************************************************
create
{'crm_team_id': new_team.id, 'user_id': new_user.id}
***************************************************************************************
create
{'crm_team_id': new_team.id, 'user_id': new_user.id}
***************************************************************************************
_xmlid_to_res_id
'mail.mt_note'
***************************************************************************************
_render_template
template_fallbackself._nameself.ids
***************************************************************************************
get
'sms'
***************************************************************************************
_send_sms_batch
iap_data
***************************************************************************************
_get
res['model']
***************************************************************************************
concat
*list((p['partner'] for p in recipients_info if p.get('partner')))
***************************************************************************************
search
base_domain
***************************************************************************************
search
base_domain
***************************************************************************************
browse
self.sms_templates.ids
***************************************************************************************
browse
self.sms_templates.ids
***************************************************************************************
create
{'composition_mode': 'comment', 'template_id': self.sms_dynamic_template.id, 'res_id': self.partner.id, 'res_model': 'res.partner'}
***************************************************************************************
create
{'composition_mode': 'comment', 'template_id': self.sms_dynamic_template.id, 'res_id': self.partner.id, 'res_model': 'res.partner'}
***************************************************************************************
create
{'name': 'New SMS Template ' + sms_template.model_id.name, 'body': 'Body Test', 'model_id': sms_template.model_id.id}
***************************************************************************************
create
{'name': 'New SMS Template ' + sms_template.model_id.name, 'body': 'Body Test', 'model_id': sms_template.model_id.id}
***************************************************************************************
with_user
admin
***************************************************************************************
browse
message_ids
***************************************************************************************
browse
notif_ids
***************************************************************************************
_send_sms_batch
[{'res_id': 0, 'number': number, 'content': self.body} for number in self.sanitized_numbers.split(',')]
***************************************************************************************
_xmlid_to_res_id
'mail.mt_note'
***************************************************************************************
_render_template
self.bodyrecords._namerecords.ids
***************************************************************************************
search
active_domain
***************************************************************************************
search_count
literal_eval(composer.active_domain or '[]')
***************************************************************************************
browse
template_id
***************************************************************************************
browse
template_id
***************************************************************************************
browse
literal_eval(self.res_ids)
***************************************************************************************
browse
template_id
***************************************************************************************
browse
self.res_id
***************************************************************************************
browse
self.mail_message_id.res_id
***************************************************************************************
browse
result['mail_message_id']
***************************************************************************************
browse
self.mail_message_id.res_id
***************************************************************************************
_get_recipient_data
record'sms'False
***************************************************************************************
browse
sms_template_id
***************************************************************************************
search
[]
***************************************************************************************
search_count
[]
***************************************************************************************
search
[('state', 'not in', ['sent', 'canceled']), ('partner_id', 'in', self.ids)]
***************************************************************************************
browse
self.res_id
***************************************************************************************
browse
vals['partner_id']
***************************************************************************************
create
{'name': filename, 'datas': base64.b64encode(pdf_bin), 'res_model': 'snailmail.letter', 'res_id': self.id, 'type': 'binary'}
***************************************************************************************
get
'snailmail'
***************************************************************************************
_get_report_from_name
report_name
***************************************************************************************
browse
vals['res_id']
***************************************************************************************
search
[('state', 'not in', ['sent', 'canceled', 'pending']), ('user_id', '=', author_id), ('model', '=', wizard.model)]
***************************************************************************************
search
[('error_code', '=', 'FORMAT_ERROR')]
***************************************************************************************
search
[('partner_id', '=', self.partner_id.id), ('error_code', '=', 'MISSING_REQUIRED_FIELDS')]
***************************************************************************************
browse
defaults.get('letter_id')
***************************************************************************************
create
{'partner_id': self.sample_invoice.partner_id.id, 'model': 'account.move', 'res_id': self.sample_invoice.id, 'user_id': self.env.user.id, 'company_id': self.sample_invoice.company_id.id, 'report_template': self.env.ref('account.account_invoices').id}
***************************************************************************************
_sendone
self.env.user.partner_id'snailmail_invalid_address'{'title': _('Invalid Addresses'), 'message': _('%s of the selected invoice(s) had an invalid address and were not sent', self.invalid_invoices)}
***************************************************************************************
create
{'partner_id': invoice.partner_id.id, 'model': 'account.move', 'res_id': invoice.id, 'user_id': self.env.user.id, 'company_id': invoice.company_id.id, 'report_template': self.env.ref('account.account_invoices').id}
***************************************************************************************
create
{'model_name': _('Invoice'), 'invoice_send_id': self.id}
***************************************************************************************
_is_valid_address
i.partner_id
***************************************************************************************
read_group
[('product_id', 'in', self.ids), ('state', '=', 'done'), ('picking_code', '=', 'incoming'), ('date', '>=', fields.Datetime.now() - relativedelta(years=1))]['product_id']['product_id']
***************************************************************************************
read_group
[('product_id', 'in', self.ids), ('state', '=', 'done'), ('picking_code', '=', 'outgoing'), ('date', '>=', fields.Datetime.now() - relativedelta(years=1))]['product_id']['product_id']
***************************************************************************************
browse
location_ids
***************************************************************************************
read_group
domain_quant['product_id', 'quantity']['product_id']
***************************************************************************************
read_group
[('product_id', 'in', self.ids)]['product_id', 'product_min_qty', 'product_max_qty']['product_id']
***************************************************************************************
_for_xml_id
'stock.action_orderpoint'
***************************************************************************************
_for_xml_id
'stock.stock_move_line_action'
***************************************************************************************
_get_action_view_related_putaway_rules
domain
***************************************************************************************
_for_xml_id
'stock.action_storage_category_capacity'
***************************************************************************************
_for_xml_id
'stock.action_production_lot_form'
***************************************************************************************
_for_xml_id
'stock.stock_replenishment_product_product_action'
***************************************************************************************
browse
product_id
***************************************************************************************
browse
location_id
***************************************************************************************
browse
lot_id
***************************************************************************************
browse
package_id
***************************************************************************************
browse
owner_id
***************************************************************************************
browse
to_uom
***************************************************************************************
_gather
product_idlocation_id
***************************************************************************************
_get_rule
selflocation{'route_ids': route_ids, 'warehouse_id': location.warehouse_id}
***************************************************************************************
read_group
domain_quant['product_id', 'quantity']['product_id']
***************************************************************************************
read_group
domain['product_id']['product_id']
***************************************************************************************
search_count
[('product_selectable', '=', True)]
***************************************************************************************
read_group
[('product_id.product_tmpl_id', 'in', self.ids), ('state', '=', 'done'), ('picking_code', '=', 'incoming'), ('date', '>=', fields.Datetime.now() - relativedelta(years=1))]['product_id']['product_id']
***************************************************************************************
read_group
[('product_id.product_tmpl_id', 'in', self.ids), ('state', '=', 'done'), ('picking_code', '=', 'outgoing'), ('date', '>=', fields.Datetime.now() - relativedelta(years=1))]['product_id']['product_id']
***************************************************************************************
_search
domain
***************************************************************************************
_search
domain
***************************************************************************************
_search
domain
***************************************************************************************
_search
domain
***************************************************************************************
read_group
[('product_id.product_tmpl_id', 'in', self.ids)]['product_id', 'product_min_qty', 'product_max_qty']['product_id']
***************************************************************************************
create
storage_category_capacity_vals
***************************************************************************************
_for_xml_id
'stock.stock_move_line_action'
***************************************************************************************
_for_xml_id
'stock.action_production_lot_form'
***************************************************************************************
_for_xml_id
'stock.action_stock_rules_report'
***************************************************************************************
_for_xml_id
'stock.stock_replenishment_product_product_action'
***************************************************************************************
search
[('type', '=', 'product'), ('id', 'not in', list(processed_product_ids))]
***************************************************************************************
browse
self._context['location']
***************************************************************************************
browse
[move['product_id'][0]]
***************************************************************************************
browse
[move['product_id'][0]]
***************************************************************************************
browse
[data['product_id'][0]]
***************************************************************************************
browse
vals['uom_id']
***************************************************************************************
search
[('product_id', 'in', updated.with_context(active_test=False).mapped('product_variant_ids').ids)]
***************************************************************************************
search
[('product_id', 'in', self.mapped('product_variant_ids').ids), ('state', 'in', ['partially_available', 'assigned'])]
***************************************************************************************
_for_xml_id
'stock.action_change_product_quantity'
***************************************************************************************
browse
self.env.context['default_product_id']
***************************************************************************************
search
[('company_id', '=', company.id)]
***************************************************************************************
search
[('company_id', '=', user_company.id)]
***************************************************************************************
search_count
[('product_selectable', '=', True)]
***************************************************************************************
browse
self.env.context['default_product_tmpl_id']
***************************************************************************************
search
domain
***************************************************************************************
browse
self._context['active_id']
***************************************************************************************
search
[('company_id', '=', self.env.company.id)]
***************************************************************************************
browse
self.env.context.get('active_id')
***************************************************************************************
browse
self.env.context.get('active_id')
***************************************************************************************
search_count
[('id', '=', self.location_out_id.id), ('id', 'child_of', self.location_in_id.id), ('id', '!=', self.location_in_id.id)]
***************************************************************************************
search
[]
***************************************************************************************
search
[('internal_transit_location_id', '=', False)]
***************************************************************************************
search
[]
***************************************************************************************
_get
'product.template''property_stock_inventory'
***************************************************************************************
search
[]
***************************************************************************************
_get
'product.template''property_stock_production'
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': _('Inter-warehouse transit'), 'usage': 'transit', 'location_id': parent_location and parent_location.id or False, 'company_id': company.id, 'active': False}
***************************************************************************************
create
{'name': 'Inventory adjustment', 'usage': 'inventory', 'location_id': parent_location.id, 'company_id': company.id}
***************************************************************************************
_set_default
'property_stock_inventory''product.template'inventory_loss_locationcompany.id
***************************************************************************************
create
{'name': 'Production', 'usage': 'production', 'location_id': parent_location.id, 'company_id': company.id}
***************************************************************************************
_set_default
'property_stock_production''product.template'production_locationcompany.id
***************************************************************************************
create
{'name': 'Scrap', 'usage': 'inventory', 'location_id': parent_location.id, 'company_id': company.id, 'scrap_location': True}
***************************************************************************************
create
scrap_vals
***************************************************************************************
create
{'name': company.name, 'code': company.name[:5], 'company_id': company.id, 'partner_id': company.partner_id.id}
***************************************************************************************
search
[('scrap_location', '=', True)]
***************************************************************************************
search
[('code', '=', 'stock.scrap')]
***************************************************************************************
search
[('view_location_id', 'parent_of', self.ids)]
***************************************************************************************
search_count
[('location_id', 'in', modified_locations.ids), ('product_qty', '>', 0)]
***************************************************************************************
read_group
[('product_id', '=', product.id), ('location_dest_id', 'in', locations.ids), ('state', 'not in', ['draft', 'done', 'cancel'])]['location_dest_id', 'product_id', 'product_qty:array_agg', 'qty_done:array_agg', 'product_uom_id:array_agg']['location_dest_id']
***************************************************************************************
read_group
[('product_id', '=', product.id), ('location_id', 'in', locations.ids)]['location_id', 'product_id', 'quantity:sum']['location_id']
***************************************************************************************
search
domain
***************************************************************************************
search
['&', '|', ('quantity', '!=', 0), ('reserved_quantity', '!=', 0), ('location_id', 'in', internal_children_locations.ids)]
***************************************************************************************
browse
values['product_uom_id']
***************************************************************************************
search
[('active', '=', True), '|', ('lot_stock_id', '=', location.id), ('view_location_id', '=', location.id)]
***************************************************************************************
_for_xml_id
'stock.act_assign_serial_numbers'
***************************************************************************************
browse
moves_to_unreserve
***************************************************************************************
browse
moves_not_to_recompute
***************************************************************************************
generate_lot_names
self.next_serialnext_serial_count or self.next_serial_count
***************************************************************************************
concat
*new_moves
***************************************************************************************
search
[('product_id', '=', self.product_id.id), ('lot_id', 'in', self.lot_ids.ids), ('quantity', '!=', 0), '|', ('location_id.usage', '=', 'customer'), '&', ('company_id', '=', self.company_id.id), ('location_id.usage', 'in', ('internal', 'transit'))]
***************************************************************************************
search
domain
***************************************************************************************
run
procurement_requests
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
_get_available_quantity
self.product_idlocation_id
***************************************************************************************
create
move_line_vals_list
***************************************************************************************
create
backorder_moves_vals
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
search
expression.AND([static_domain, expression.OR(domains)])
***************************************************************************************
_search
[('id', 'child_of', warehouse.view_location_id.id)]
***************************************************************************************
_move_confirmed_domain
Noneproduct_ids.idswh_location_query
***************************************************************************************
search
out_domain
***************************************************************************************
search
out_domain + [('state', 'in', ('partially_available', 'assigned'))]
***************************************************************************************
search
in_domain
***************************************************************************************
read_group
[('id', 'in', list(move_lines_ids))]['move_id', 'product_uom_id', 'qty_done']['move_id', 'product_uom_id']
***************************************************************************************
read_group
domain['move_id', 'lot_ids:array_agg(lot_id)']['move_id']
***************************************************************************************
browse
self.env.context['default_picking_id']
***************************************************************************************
_xmlid_to_res_id
'base.partner_root'
***************************************************************************************
_get_next_serial
self.company_idself.product_id
***************************************************************************************
browse
ml_to_update
***************************************************************************************
browse
ml_to_unlink
***************************************************************************************
concat
*list(moves)
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
_search_rule
Falsemove.product_packaging_idproduct_idmove.warehouse_iddomain
***************************************************************************************
search
[('product_id', '=', move.product_id.id), ('trigger', '=', 'auto'), ('location_id', 'parent_of', move.location_id.id), ('company_id', '=', move.company_id.id)]
***************************************************************************************
_search_rule
move.route_idsmove.product_packaging_idmove.product_idwarehouse_iddomain
***************************************************************************************
concat
*g
***************************************************************************************
search
[('company_id', '=', self.company_id.id), ('product_id', '=', self.product_id.id), ('name', 'in', split_lines)]
***************************************************************************************
Procurement
move.product_idmove.product_uom_qtymove.product_uommove.location_idmove.rule_id and move.rule_id.name or '/'originmove.company_idvalues
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
browse
self.env.context['default_picking_id']
***************************************************************************************
create
dict(move._prepare_move_line_vals(), qty_done=quantity_done)
***************************************************************************************
read_group
[('move_id', 'in', self.ids)]['move_id', 'product_qty']['move_id']
***************************************************************************************
_get_available_quantity
move.product_idmove.location_id
***************************************************************************************
_log_message
move.picking_idmove'stock.track_move_template'vals
***************************************************************************************
_update_reserved_quantity
self.product_idlocation_idtaken_quantity
***************************************************************************************
create
[self._prepare_move_line_vals(quantity=1, reserved_quant=reserved_quant) for i in range(int(quantity))]
***************************************************************************************
create
self._prepare_move_line_vals(quantity=quantity, reserved_quant=reserved_quant)
***************************************************************************************
browse
product_ids
***************************************************************************************
browse
product_ids
***************************************************************************************
concat
*list(g)
***************************************************************************************
browse
line_uom_id
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
browse
ml_ids_to_create_lot
***************************************************************************************
browse
ml_ids_to_delete
***************************************************************************************
create
lot_vals
***************************************************************************************
_get_available_quantity
product_idlocation_id
***************************************************************************************
create
{'name': _('New Move:') + move_line.product_id.display_name, 'product_id': move_line.product_id.id, 'product_uom_qty': 0 if move_line.picking_id and move_line.picking_id.state != 'done' else move_line.qty_done, 'product_uom': move_line.product_uom_id.id, 'description_picking': move_line.description_picking, 'location_id': move_line.picking_id.location_id.id, 'location_dest_id': move_line.picking_id.location_dest_id.id, 'picking_id': move_line.picking_id.id, 'state': move_line.picking_id.state, 'picking_type_id': move_line.picking_id.picking_type_id.id, 'restrict_partner_id': move_line.picking_id.owner_id.id, 'company_id': move_line.picking_id.company_id.id}
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
browse
ml_ids_tracked_without_lot
***************************************************************************************
browse
vals[key]
***************************************************************************************
browse
vals.get('lot_id')
***************************************************************************************
browse
vals.get('location_id')
***************************************************************************************
browse
vals.get('location_dest_id')
***************************************************************************************
browse
vals.get('package_id')
***************************************************************************************
browse
vals.get('result_package_id')
***************************************************************************************
browse
vals.get('owner_id')
***************************************************************************************
_update_reserved_quantity
ml.product_idml.location_id-ml.product_qty
***************************************************************************************
search
outdated_move_lines_domain
***************************************************************************************
browse
to_unlink_candidate_ids
***************************************************************************************
browse
vals['move_id']
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
search
[('product_id', '=', self.product_id.id), ('name', '=', self.lot_name), ('company_id', '=', self.company_id.id)]
***************************************************************************************
_check_serial_number
self.product_idself.lot_idself.company_idself.location_idself.picking_id.location_id
***************************************************************************************
browse
vals['picking_id']
***************************************************************************************
_update_reserved_quantity
ml.product_idml.location_id-ml.product_qty
***************************************************************************************
search
[('company_id', '=', ml.company_id.id), ('product_id', '=', ml.product_id.id), ('name', '=', ml.lot_name)]
***************************************************************************************
_for_xml_id
'stock.action_stock_replenishment_info'
***************************************************************************************
create
{'orderpoint_id': self.id}
***************************************************************************************
read_group
[('route_id.product_selectable', '!=', False), ('location_id', 'in', self.location_id.ids), ('action', 'in', ['pull_push', 'pull'])]['location_id', 'route_id']['location_id', 'route_id']
***************************************************************************************
_for_xml_id
'stock.action_orderpoint_replenish'
***************************************************************************************
read_group
[('date', '=', to_date), ('state', '=', 'forecast')]['product_id', 'product_qty', 'warehouse_id']['product_id', 'warehouse_id']
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
read_group
[('id', 'in', orderpoints.ids)]['product_id', 'warehouse_id', 'qty_to_order:sum']['product_id', 'warehouse_id']
***************************************************************************************
search_read
[('id', 'in', [g[1] for g in to_refill.keys()])]['lot_stock_id']
***************************************************************************************
search
[('company_id', '=', res['company_id'])]
***************************************************************************************
search
[('id', '!=', orderpoint.warehouse_id.id)]
***************************************************************************************
search
loc_domain
***************************************************************************************
search
[('company_id', '=', self.company_id.id)]
***************************************************************************************
browse
p_ids
***************************************************************************************
browse
orderpoints_batch_ids
***************************************************************************************
next_by_code
'stock.orderpoint'
***************************************************************************************
browse
product_ids
***************************************************************************************
_get_orderpoint_values
productlot_stock_id
***************************************************************************************
with_user
SUPERUSER_ID
***************************************************************************************
search
[('res_id', '=', orderpoint.product_id.product_tmpl_id.id), ('res_model_id', '=', self.env.ref('product.model_product_template').id), ('note', '=', error_msg)]
***************************************************************************************
browse
product
***************************************************************************************
browse
warehouse
***************************************************************************************
browse
orderpoint_id
***************************************************************************************
concat
*[o[0] for o in orderpoints_exceptions]
***************************************************************************************
Procurement
orderpoint.product_idorderpoint.qty_to_orderorderpoint.product_uomorderpoint.location_idorderpoint.nameoriginorderpoint.company_idvalues
***************************************************************************************
browse
warehouse
***************************************************************************************
create
{'picking_id': package_level.picking_id.id, 'name': quant.product_id.display_name, 'product_id': quant.product_id.id, 'product_uom_qty': quant.quantity, 'product_uom': quant.product_id.uom_id.id, 'location_id': package_level.location_id.id, 'location_dest_id': package_level.location_dest_id.id, 'package_level_id': package_level.id, 'company_id': package_level.company_id.id}
***************************************************************************************
concat
*list(g)
***************************************************************************************
concat
*list(g)
***************************************************************************************
create
{'location_id': package_level.location_id.id, 'location_dest_id': package_level.location_dest_id.id, 'picking_id': package_level.picking_id.id, 'product_id': quant.product_id.id, 'qty_done': quant.quantity, 'product_uom_id': quant.product_id.uom_id.id, 'lot_id': quant.lot_id.id, 'package_id': package_level.package_id.id, 'result_package_id': package_level.package_id.id, 'package_level_id': package_level.id, 'move_id': corresponding_move.id, 'owner_id': quant.owner_id.id}
***************************************************************************************
search
[('company_id', '=', self.company_id.id)]
***************************************************************************************
_for_xml_id
action_xmlid
***************************************************************************************
read_group
[('id', 'in', self.move_lines.ids), ('delay_alert_date', '!=', False)]['delay_alert_date:max']'picking_id'
***************************************************************************************
search
[('picking_id', 'in', self.ids)]
***************************************************************************************
read_group
domain['picking_id']['picking_id']
***************************************************************************************
search
[('delay_alert_date', operator, value)]
***************************************************************************************
browse
vals.get('picking_type_id', defaults.get('picking_type_id'))
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
concat
*list(orig_obj_changes.keys())
***************************************************************************************
_for_xml_id
'stock.action_stock_scrap'
***************************************************************************************
search
[('picking_id', '=', self.id)]
***************************************************************************************
_for_xml_id
'stock.action_package_view'
***************************************************************************************
_for_xml_id
'stock.stock_move_action'
***************************************************************************************
_for_xml_id
'stock.stock_reception_action'
***************************************************************************************
read_group
domains[field] + [('state', 'not in', ('done', 'cancel')), ('picking_type_id', 'in', self.ids)]['picking_type_id']['picking_type_id']
***************************************************************************************
search
[('company_id', '=', self.company_id.id)]
***************************************************************************************
_search
[('id', 'child_of', picking_type_id.warehouse_id.view_location_id.id), ('usage', '!=', 'supplier')]
***************************************************************************************
search
[('state', 'in', allowed_states), ('product_qty', '>', 0), ('location_id', 'in', wh_location_ids), ('picking_id', 'not in', self.ids), ('product_id', 'in', lines.product_id.ids), '|', ('move_orig_ids', '=', False), ('move_orig_ids', 'in', lines.ids)]
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
concat
*moves
***************************************************************************************
browse
[move.id for move_orig in rendering_context.values() for move in move_orig[0]]
***************************************************************************************
concat
*rendering_context.keys()
***************************************************************************************
create
{'picking_id': self.id, 'location_dest_id': move_line_ids[0].location_dest_id.id}
***************************************************************************************
create
{}
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
browse
vals['warehouse_id']
***************************************************************************************
search_count
[('picking_id', '=', picking.id), ('scrapped', '=', True)]
***************************************************************************************
search
[('picking_id', '=', picking_id)]
***************************************************************************************
_search
[('id', 'child_of', self.picking_type_id.warehouse_id.view_location_id.id), ('usage', '!=', 'supplier')]
***************************************************************************************
search
[('state', 'in', ['confirmed', 'partially_available', 'waiting', 'assigned']), ('product_qty', '>', 0), ('location_id', 'in', wh_location_ids), ('move_orig_ids', '=', False), ('picking_id', 'not in', self.ids), ('product_id', 'in', lines.product_id.ids)]
***************************************************************************************
create
{'package_id': package.id, 'picking_id': pick.id, 'location_id': False, 'location_dest_id': move_line_ids.mapped('location_dest_id').id, 'move_line_ids': [(6, 0, move_lines_to_pack.ids)], 'company_id': pick.company_id.id}
***************************************************************************************
browse
self._context.get('default_picking_type_id')
***************************************************************************************
browse
self._context.get('default_picking_type_id')
***************************************************************************************
concat
*list(g)
***************************************************************************************
concat
*list(g)
***************************************************************************************
create
{'picking_id': picking.id, 'package_id': pack.id, 'location_id': pack.location_id.id, 'location_dest_id': self._get_entire_pack_location_dest(move_lines_to_pack) or picking.location_dest_id.id, 'move_line_ids': [(6, 0, move_lines_to_pack.ids)], 'company_id': picking.company_id.id}
***************************************************************************************
browse
picking_move_lines[picking.id]
***************************************************************************************
search
domain
***************************************************************************************
search
[('company_id', '=', company.id), ('product_id', '=', product.id)]
***************************************************************************************
browse
active_picking_id
***************************************************************************************
search
[('lot_id', 'in', self.ids), ('product_id', '!=', vals['product_id'])]
***************************************************************************************
next_by_code
'stock.lot.serial'
***************************************************************************************
generate_lot_names
last_serial.name2
***************************************************************************************
browse
rec['product_id'][0]
***************************************************************************************
_search
domain_loc
***************************************************************************************
search
[('company_id', '=', company_user.id)]
***************************************************************************************
_for_xml_id
'stock.stock_move_line_action'
***************************************************************************************
browse
[quant['id'] for quant in self.env.cr.dictfetchall()]
***************************************************************************************
_for_xml_id
'stock.action_picking_tree_all'
***************************************************************************************
search
[('package_id', 'in', self.ids)]
***************************************************************************************
browse
vals['product_id']
***************************************************************************************
browse
vals['location_id']
***************************************************************************************
browse
vals.get('lot_id')
***************************************************************************************
browse
vals.get('package_id')
***************************************************************************************
browse
vals.get('owner_id')
***************************************************************************************
_check_serial_number
self.product_idself.lot_idself.company_id
***************************************************************************************
search
[('product_id', '=', self.product_id.id), ('location_id.usage', 'in', ['internal', 'transit'])]
***************************************************************************************
search
[('company_id', '=', company_user.id)]
***************************************************************************************
search
[('product_id', '=', product_id.id), ('lot_id', '=', lot_id.id), ('quantity', '!=', 0), '|', ('location_id.usage', '=', 'customer'), '&', ('company_id', '=', company_id.id), ('location_id.usage', 'in', ('internal', 'transit'))]
***************************************************************************************
search
[('package_id', '=', package.id), ('state', 'in', ('assigned', 'partially_available')), ('product_qty', '!=', 0)]
***************************************************************************************
browse
self.env.context.get('active_id')
***************************************************************************************
search
domain
***************************************************************************************
search
[('company_id', '=', company_id)]
***************************************************************************************
next_by_code
'stock.quant.package'
***************************************************************************************
search
domain
***************************************************************************************
search
domain
***************************************************************************************
browse
product_ids
***************************************************************************************
next_by_code
'procurement.group'
***************************************************************************************
browse
moves_chunk
***************************************************************************************
with_user
SUPERUSER_ID
***************************************************************************************
search
[('company_id', '=', company_id)]
***************************************************************************************
_for_xml_id
'stock.action_picking_tree_all'
***************************************************************************************
_for_xml_id
'stock.stock_move_line_action'
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
search
[('scrap_location', '=', True), ('company_id', 'in', [company_id, False])]
***************************************************************************************
search
[('company_id', '=', self.company_id.id)]
***************************************************************************************
_check_serial_number
self.product_idself.lot_idself.company_idself.location_idself.picking_id.location_dest_id
***************************************************************************************
create
scrap._prepare_move_values()
***************************************************************************************
search
[('scrap_location', '=', True), ('company_id', 'in', [self.company_id.id, False])]
***************************************************************************************
next_by_code
'stock.scrap'
***************************************************************************************
_gather
self.product_idself.location_idself.lot_idself.package_idself.owner_id
***************************************************************************************
search_read
[('sequence', '!=', False)]['sequence']
***************************************************************************************
search
[('supplier_wh_id', '=', self.id)]
***************************************************************************************
search
[('supplied_wh_id', 'in', self.ids)]
***************************************************************************************
search
[('supplied_wh_id', 'in', self.ids)]
***************************************************************************************
create
loc_vals
***************************************************************************************
search
[('name', 'like', route_name)]
***************************************************************************************
search
[('picking_type_id', '=', rule_vals['picking_type_id']), ('location_src_id', '=', rule_vals['location_src_id']), ('location_id', '=', rule_vals['location_id']), ('route_id', '=', rule_vals['route_id']), ('action', '=', rule_vals['action']), ('active', '=', False)]
***************************************************************************************
search
[('picking_type_id', 'in', picking_type_ids.ids), ('state', 'not in', ('done', 'cancel'))]
***************************************************************************************
search
[('default_location_src_id', 'in', location_ids.ids), ('default_location_dest_id', 'in', location_ids.ids), ('id', 'not in', picking_type_ids.ids)]
***************************************************************************************
create
values
***************************************************************************************
create
route_data['route_create_values']
***************************************************************************************
create
rule_vals
***************************************************************************************
search
['&', ('route_id', 'in', routes.ids), '&', ('action', '!=', 'push'), ('location_src_id.usage', '=', 'transit')]
***************************************************************************************
browse
partner_id
***************************************************************************************
create
location_values
***************************************************************************************
browse
partner_id
***************************************************************************************
browse
self.env.registry.populated_models['stock.warehouse']
***************************************************************************************
search
[]
***************************************************************************************
browse
warehouse_ids
***************************************************************************************
browse
self.env.registry.populated_models['product.supplierinfo']
***************************************************************************************
search
[('id', 'in', self.env.registry.populated_models['stock.location']), ('usage', '=', 'internal')]
***************************************************************************************
browse
self.env.registry.populated_models['stock.warehouse']
***************************************************************************************
search
[('company_id', 'in', company_ids), ('usage', '=', 'internal')]
***************************************************************************************
search
[('id', 'child_of', warehouses.lot_stock_id.ids)]
***************************************************************************************
search
[('company_id', '=', False)]
***************************************************************************************
search
[('company_id', 'in', company_ids)]
***************************************************************************************
browse
self.env.registry.populated_models['res.partner']
***************************************************************************************
concat
*partners_by_company.get(False, [])
***************************************************************************************
browse
self.env.registry.populated_models['stock.picking']
***************************************************************************************
browse
values['warehouse_id']
***************************************************************************************
search
[('id', 'in', self.env.registry.populated_models['product.product']), ('type', '=', 'product'), ('tracking', '=', 'none')]
***************************************************************************************
browse
self.env.registry.populated_models['stock.picking.type']
***************************************************************************************
browse
values['picking_type_id']
***************************************************************************************
browse
values['picking_type_id']
***************************************************************************************
browse
random.sample(picking_ids, int(len(picking_ids) * sample_ratio))
***************************************************************************************
browse
random.sample(picking_ids, int(len(picking_ids) * sample_ratio))
***************************************************************************************
create
lot_values
***************************************************************************************
create
package_values
***************************************************************************************
create
sml_values
***************************************************************************************
create
{'group_stock_production_lot': True, 'group_stock_tracking_lot': True, 'group_stock_multi_locations': True, 'group_stock_tracking_owner': True}
***************************************************************************************
create
{'group_stock_storage_categories': True}
***************************************************************************************
browse
self.env.registry.populated_models['stock.location']
***************************************************************************************
search
[('id', 'child_of', values['location_in_id']), ('usage', '=', 'internal')]
***************************************************************************************
browse
values['location_in_id']
***************************************************************************************
search
[('id', 'child_of', warehouse.lot_stock_id.id)]
***************************************************************************************
concat
*locations
***************************************************************************************
concat
*partners
***************************************************************************************
concat
*locs
***************************************************************************************
browse
values['picking_type_id']
***************************************************************************************
browse
self.env.registry.populated_models['product.product']
***************************************************************************************
browse
self.env.registry.populated_models['product.product']
***************************************************************************************
browse
values['product_id']
***************************************************************************************
browse
values['picking_id']
***************************************************************************************
concat
*children
***************************************************************************************
browse
int(p)
***************************************************************************************
browse
int(p)
***************************************************************************************
read_group
in_domain['product_qty:sum']'product_id'
***************************************************************************************
read_group
out_domain['product_qty:sum']'product_id'
***************************************************************************************
search
out_domain
***************************************************************************************
search
out_domain + [('state', 'in', ('partially_available', 'assigned'))]
***************************************************************************************
search
in_domain
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
browse
self.env.context.get('warehouse')
***************************************************************************************
browse
self.get_warehouses()[0]['id']
***************************************************************************************
browse
product_template_ids
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
search_read
[('id', 'child_of', warehouse.view_location_id.id)]['id']
***************************************************************************************
browse
product_variant_ids
***************************************************************************************
search
[('id', 'in', docids), ('picking_type_code', '!=', 'outgoing'), ('state', '!=', 'cancel')]
***************************************************************************************
_search
[('id', 'child_of', warehouse.view_location_id.id), ('usage', '!=', 'supplier')]
***************************************************************************************
search
[('state', 'in', allowed_states), ('product_qty', '>', 0), ('location_id', 'in', wh_location_ids), ('move_orig_ids', '=', False), ('picking_id', 'not in', pickings.ids), ('product_id', 'in', [p.id for p in list(product_to_qty_to_assign.keys()) + list(product_to_qty_draft.keys())])]
***************************************************************************************
browse
move_ids
***************************************************************************************
create
new_move_vals
***************************************************************************************
browse
move_id
***************************************************************************************
browse
in_ids
***************************************************************************************
browse
qty_and_ins[1]
***************************************************************************************
precision_get
'Product Unit of Measure'
***************************************************************************************
browse
ins
***************************************************************************************
browse
move_ids
***************************************************************************************
create
new_move_vals
***************************************************************************************
browse
moves_in_ids
***************************************************************************************
browse
data['product_id']
***************************************************************************************
browse
data['warehouse_ids']
***************************************************************************************
search
[('product_id', '=', product.id)]
***************************************************************************************
browse
data['product_id']
***************************************************************************************
browse
data['warehouse_ids']
***************************************************************************************
concat
*[r['source'] for r in rules_and_loc]
***************************************************************************************
concat
*[r['destination'] for r in rules_and_loc]
***************************************************************************************
concat
*[r['destination'] for r in rules_start]
***************************************************************************************
concat
*[r['destination'] for r in starting_rules]
***************************************************************************************
concat
*[r['source'] for r in starting_rules]
***************************************************************************************
concat
*[r['rule'] for r in rules_and_loc]
***************************************************************************************
concat
*[r['source'] for r in rules_and_loc]
***************************************************************************************
value_to_html
qty{'decimal_precision': 'Product Unit of Measure'}
***************************************************************************************
_render_template
'web.internal_layout'
***************************************************************************************
_render_template
'web.minimal_layout'
***************************************************************************************
_run_wkhtmltopdf
[body]
***************************************************************************************
browse
model_id
***************************************************************************************
browse
line['model_id']
***************************************************************************************
browse
rec_id
***************************************************************************************
browse
int(context.get('active_id'))
***************************************************************************************
with_context
context
***************************************************************************************
search
[('product_id', '=', move_line.product_id.id), ('lot_id', '=', move_line.lot_id.id), ('location_dest_id', '=', move_line.location_id.id), ('id', 'not in', lines_seen.ids), ('date', '<=', move_line.date), ('state', '=', 'done')]
***************************************************************************************
browse
rec_id
***************************************************************************************
with_user
self.user_stock_manager
***************************************************************************************
create
{'name': 'Move Test', 'product_id': self.product_serial.id, 'product_uom': self.uom_unit.id, 'location_id': self.location.id, 'location_dest_id': self.location_dest.id, 'move_line_ids': [(0, 0, line_vals) for line_vals in move_lines_val]}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.location_dest.id}
***************************************************************************************
create
{'product_id': self.product_serial.id, 'location_in_id': self.location_dest.id, 'location_out_id': shelf_location.id}
***************************************************************************************
search
[('use_create_lots', '=', True), ('warehouse_id', '=', self.warehouse.id)]
***************************************************************************************
search
[('use_create_lots', '=', True), ('warehouse_id', '=', self.warehouse.id)]
***************************************************************************************
_update_available_quantity
self.product1self.stock_location100
***************************************************************************************
search
[('location_id', '=', self.stock_location.id), ('product_id', '=', self.product1.id)]
***************************************************************************************
search
[('location_id', '=', self.stock_location.id), ('product_id', '=', self.product2.id)]
***************************************************************************************
create
{'name': 'sn2', 'product_id': self.product2.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'location_id': self.stock_location.id, 'product_id': self.product2.id, 'lot_id': lot1.id, 'inventory_quantity': 1}
***************************************************************************************
search
[('location_id', '=', self.stock_location.id), ('product_id', '=', self.product2.id)]
***************************************************************************************
create
{'name': 'sn2', 'product_id': self.product2.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'location_id': self.stock_location.id, 'product_id': self.product2.id, 'lot_id': lot1.id, 'inventory_quantity': 2}
***************************************************************************************
search
quant_domain
***************************************************************************************
create
{'name': 'sn2', 'product_id': self.product2.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'location_id': self.stock_location.id, 'product_id': self.product2.id, 'lot_id': lot1.id, 'inventory_quantity': 1}
***************************************************************************************
search
quant_domain
***************************************************************************************
create
{'location_id': self.stock_location.id, 'product_id': self.product2.id, 'inventory_quantity': 10}
***************************************************************************************
search
quant_domain
***************************************************************************************
create
{'name': 'test_inventory_5'}
***************************************************************************************
create
{'location_id': self.stock_location.id, 'product_id': self.product1.id, 'inventory_quantity': 5, 'owner_id': owner1.id}
***************************************************************************************
_gather
self.product1self.stock_location
***************************************************************************************
create
{'location_id': self.stock_location.id, 'product_id': self.product1.id, 'inventory_quantity': 10}
***************************************************************************************
create
{'name': 'test_link_2_1', 'location_id': self.stock_location.id, 'location_dest_id': self.pack_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0}
***************************************************************************************
create
{'name': 'test_link_2_2', 'location_id': self.pack_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0}
***************************************************************************************
search
[('location_id', '=', self.pack_location.id), ('product_id', '=', self.product1.id)]
***************************************************************************************
search
[('location_id', '=', self.pack_location.id), ('product_id', '=', self.product1.id)]
***************************************************************************************
create
{'name': 'test_inventory_7'}
***************************************************************************************
create
vals
***************************************************************************************
create
dict(**vals, inventory_quantity=1)
***************************************************************************************
search
[('location_id', '=', self.stock_location.id), ('product_id', '=', self.product1.id)]
***************************************************************************************
_update_available_quantity
self.product1self.stock_location7
***************************************************************************************
search
[('location_id', '=', self.stock_location.id), ('product_id', '=', self.product1.id)]
***************************************************************************************
create
{'name': 'Outgoing move of 3 units', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 3.0}
***************************************************************************************
create
vals
***************************************************************************************
create
{'name': 'Outgoing move of 3 units', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 4.0}
***************************************************************************************
create
vals
***************************************************************************************
create
{'product_id': self.product1.id, 'product_uom_id': self.uom_unit.id, 'location_id': self.stock_location.id, 'quantity': 7, 'inventory_quantity': 5}
***************************************************************************************
create
{'name': 'Product C', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'product_id': product3.id, 'product_uom_id': self.uom_unit.id, 'location_id': self.stock_location.id, 'inventory_quantity': 22, 'reserved_quantity': 0}
***************************************************************************************
create
{'name': 'New Cyclic Inv Location', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'name': 'Pre-existing Cyclic Inv Location', 'usage': 'internal', 'location_id': self.stock_location.id, 'last_inventory_date': now - timedelta(days=5)}
***************************************************************************************
create
{'name': 'No Cyclic Inv Location', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
_update_available_quantity
self.product1new_loc5
***************************************************************************************
_update_available_quantity
self.product1existing_loc25
***************************************************************************************
_update_available_quantity
self.product1no_cyclic_loc5
***************************************************************************************
search
[('location_id', '=', new_loc.id)]
***************************************************************************************
search
[('location_id', '=', existing_loc2.id)]
***************************************************************************************
search
[('location_id', '=', no_cyclic_loc.id)]
***************************************************************************************
_get_available_quantity
self.product1self.stock_location
***************************************************************************************
_get_available_quantity
self.product1self.stock_location
***************************************************************************************
_get_available_quantity
self.product2self.stock_location
***************************************************************************************
_get_available_quantity
self.product2self.stock_location
***************************************************************************************
_get_available_quantity
self.product2self.stock_location
***************************************************************************************
_get_available_quantity
self.product2self.stock_location
***************************************************************************************
_get_available_quantity
self.product1self.stock_location
***************************************************************************************
_get_available_quantity
self.product1self.pack_location
***************************************************************************************
_get_available_quantity
self.product1self.pack_location
***************************************************************************************
_get_available_quantity
self.product1self.pack_location
***************************************************************************************
_get_available_quantity
self.product1self.pack_location
***************************************************************************************
_get_available_quantity
self.product1self.stock_location
***************************************************************************************
with_context
conflict_wizard_values['context']
***************************************************************************************
_gather
self.product1self.stock_location
***************************************************************************************
_gather
self.product2self.stock_location
***************************************************************************************
_gather
self.product2self.stock_location
***************************************************************************************
_gather
self.product2self.stock_location
***************************************************************************************
_gather
self.product2self.stock_location
***************************************************************************************
_gather
self.product1self.pack_location
***************************************************************************************
_gather
self.product1self.pack_location
***************************************************************************************
_gather
self.product1self.stock_location
***************************************************************************************
_gather
self.product1self.stock_location
***************************************************************************************
_gather
product_idlocation_id
***************************************************************************************
create
{'name': 'test_in_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'test_in_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product_lot.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 5.0, 'picking_type_id': self.env.ref('stock.picking_type_in').id}
***************************************************************************************
create
{'name': 'test_in_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product_serial.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 5.0, 'picking_type_id': self.env.ref('stock.picking_type_in').id}
***************************************************************************************
_update_available_quantity
self.productself.stock_location100
***************************************************************************************
create
{'name': 'test_out_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'test_out_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_lot.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.product_lotself.stock_location2
***************************************************************************************
_update_available_quantity
self.product_lotself.stock_location3
***************************************************************************************
create
{'name': 'test_in_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product_lot.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 5.0}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location2
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1
***************************************************************************************
create
{'name': 'test_in_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product_serial.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 4.0}
***************************************************************************************
create
{'name': 'lot3', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot4', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1
***************************************************************************************
create
{'name': 'test_in_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product_serial.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2.0}
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location2
***************************************************************************************
create
{'name': 'lot3', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot4', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'move_id': move1.id, 'product_id': move1.product_id.id, 'qty_done': 1, 'product_uom_id': move1.product_uom.id, 'location_id': move1.location_id.id, 'location_dest_id': move1.location_dest_id.id, 'lot_id': lot3.id}
***************************************************************************************
create
{'move_id': move1.id, 'product_id': move1.product_id.id, 'qty_done': 1, 'product_uom_id': move1.product_uom.id, 'location_id': move1.location_id.id, 'location_dest_id': move1.location_dest_id.id, 'lot_id': lot4.id}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1
***************************************************************************************
create
{'name': 'test_in_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product_serial.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2.0}
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1
***************************************************************************************
create
{'name': 'lot3', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'test_jenaimarre_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product_serial.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1.0
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'move_id': move1.id, 'product_id': move1.product_id.id, 'qty_done': 1, 'product_uom_id': move1.product_uom.id, 'location_id': move1.location_id.id, 'location_dest_id': move1.location_dest_id.id, 'lot_id': lot1.id}
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1.0
***************************************************************************************
create
{'name': 'test_jenaimarre_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product_serial.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1
***************************************************************************************
create
{'name': 'test_in_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product_serial.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2.0}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1
***************************************************************************************
create
{'name': 'test_mixed_tracking_reservation_7', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product_serial.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1
***************************************************************************************
create
{'name': 'lot2', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'category_id': self.env.ref('product.product_category_all').id, 'location_in_id': self.stock_location.id, 'location_out_id': shelf1_location.id}
***************************************************************************************
create
{'name': 'test_putaway_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'product_id': self.product.id, 'location_in_id': self.stock_location.id, 'location_out_id': shelf1_location.id}
***************************************************************************************
create
{'name': 'test_putaway_2', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'name': 'shelf2', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'category_id': self.env.ref('product.product_category_all').id, 'location_in_id': self.supplier_location.id, 'location_out_id': shelf1_location.id}
***************************************************************************************
create
{'product_id': self.product.id, 'location_in_id': self.supplier_location.id, 'location_out_id': shelf2_location.id}
***************************************************************************************
create
{'name': 'test_putaway_3', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'name': 'shelf2', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'category_id': self.env.ref('product.product_category_all').id, 'location_in_id': self.stock_location.id, 'location_out_id': shelf1_location.id}
***************************************************************************************
create
{'product_id': self.product_consu.id, 'location_in_id': self.stock_location.id, 'location_out_id': shelf2_location.id}
***************************************************************************************
create
{'name': 'test_putaway_4', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'shelf', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'category_id': self.env.ref('product.product_category_all').id, 'location_in_id': self.supplier_location.id, 'location_out_id': shelf_location.id}
***************************************************************************************
create
{'name': 'test_putaway_5', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'child_category', 'parent_id': self.ref('product.product_category_all')}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'name': 'shelf2', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'category_id': self.env.ref('product.product_category_all').id, 'location_in_id': self.supplier_location.id, 'location_out_id': shelf1_location.id}
***************************************************************************************
create
{'category_id': child_category.id, 'location_in_id': self.supplier_location.id, 'location_out_id': shelf2_location.id}
***************************************************************************************
create
{'name': 'test_putaway_6', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'storage category'}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'name': 'shelf2', 'usage': 'internal', 'location_id': self.stock_location.id, 'storage_category_id': storage_category.id}
***************************************************************************************
create
{'product_id': self.product.id, 'location_in_id': self.stock_location.id, 'location_out_id': self.stock_location.id, 'storage_category_id': storage_category.id}
***************************************************************************************
create
{'name': 'test_move_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'storage category'}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id, 'storage_category_id': storage_category.id}
***************************************************************************************
create
{'product_id': self.product.id, 'location_in_id': self.stock_location.id, 'location_out_id': self.stock_location.id, 'storage_category_id': storage_category.id}
***************************************************************************************
create
{'name': 'test_move_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'test_move_2', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'storage category', 'allow_new_product': 'empty'}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id, 'storage_category_id': storage_category.id}
***************************************************************************************
create
{'product_id': self.product.id, 'location_in_id': self.stock_location.id, 'location_out_id': self.stock_location.id, 'storage_category_id': storage_category.id}
***************************************************************************************
create
{'name': 'test_move_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'test_move_2', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'storage category', 'allow_new_product': 'same'}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id, 'storage_category_id': storage_category.id}
***************************************************************************************
create
{'product_id': self.product.id, 'location_in_id': self.stock_location.id, 'location_out_id': self.stock_location.id, 'storage_category_id': storage_category.id}
***************************************************************************************
create
{'name': 'Product 2', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'product_id': product2.id, 'product_uom_id': self.uom_unit.id, 'location_id': shelf1_location.id, 'quantity': 1, 'reserved_quantity': 0}
***************************************************************************************
create
{'name': 'test_move_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'storage category'}
***************************************************************************************
create
{'name': 'package type'}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'name': 'shelf2', 'usage': 'internal', 'location_id': self.stock_location.id, 'storage_category_id': storage_category.id}
***************************************************************************************
create
{'product_id': self.product.id, 'location_in_id': self.stock_location.id, 'location_out_id': self.stock_location.id, 'storage_category_id': storage_category.id, 'package_type_ids': [(4, package_type.id, 0)]}
***************************************************************************************
create
{'name': 'package', 'package_type_id': package_type.id}
***************************************************************************************
create
{'name': 'test_move_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'storage category'}
***************************************************************************************
create
{'name': 'package type'}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'name': 'shelf2', 'usage': 'internal', 'location_id': self.stock_location.id, 'storage_category_id': storage_category.id}
***************************************************************************************
create
{'product_id': self.product.id, 'location_in_id': self.stock_location.id, 'location_out_id': self.stock_location.id, 'storage_category_id': storage_category.id, 'package_type_ids': [(4, package_type.id, 0)]}
***************************************************************************************
create
{'name': 'package 1', 'package_type_id': package_type.id}
***************************************************************************************
create
{'name': 'test_move_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'package 2', 'package_type_id': package_type.id}
***************************************************************************************
create
{'name': 'test_move_2', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'storage category', 'allow_new_product': 'empty'}
***************************************************************************************
create
{'name': 'package type'}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'name': 'shelf2', 'usage': 'internal', 'location_id': self.stock_location.id, 'storage_category_id': storage_category.id}
***************************************************************************************
create
{'product_id': self.product.id, 'location_in_id': self.stock_location.id, 'location_out_id': self.stock_location.id, 'storage_category_id': storage_category.id, 'package_type_ids': [(4, package_type.id, 0)]}
***************************************************************************************
create
{'name': 'package 1', 'package_type_id': package_type.id}
***************************************************************************************
create
{'name': 'test_move_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'package 2', 'package_type_id': package_type.id}
***************************************************************************************
create
{'name': 'test_move_2', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'storage category', 'allow_new_product': 'same'}
***************************************************************************************
create
{'name': 'package type'}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'name': 'shelf2', 'usage': 'internal', 'location_id': self.stock_location.id, 'storage_category_id': storage_category.id}
***************************************************************************************
create
{'location_in_id': self.stock_location.id, 'location_out_id': self.stock_location.id, 'storage_category_id': storage_category.id, 'package_type_ids': [(4, package_type.id, 0)]}
***************************************************************************************
create
{'name': 'package 1', 'package_type_id': package_type.id}
***************************************************************************************
create
{'name': 'test_move_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'package 2', 'package_type_id': package_type.id}
***************************************************************************************
create
{'name': 'Product 2', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'name': 'test_move_2', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': product2.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'storage category', 'max_weight': 100}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id, 'storage_category_id': storage_category.id}
***************************************************************************************
create
{'product_id': self.product.id, 'location_in_id': self.stock_location.id, 'location_out_id': self.stock_location.id, 'storage_category_id': storage_category.id}
***************************************************************************************
create
{'name': 'test_move_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'test_move_2', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
_update_available_quantity
self.productself.stock_location150.0
***************************************************************************************
create
{'name': 'test_putaway_1', 'location_id': self.stock_location.id, 'location_dest_id': self.supplier_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
_update_available_quantity
self.productself.stock_location50.0
***************************************************************************************
create
{'name': 'test_putaway_1', 'location_id': self.stock_location.id, 'location_dest_id': self.supplier_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location-1.0
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1.0
***************************************************************************************
create
{'name': 'test_availability_3', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product_serial.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
_update_available_quantity
self.productself.stock_location30.0
***************************************************************************************
create
{'name': 'test_availability_4', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 15.0}
***************************************************************************************
create
{'name': 'test_availability_4', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 15.0}
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location2.0
***************************************************************************************
create
{'name': 'test_edit_moveline_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product_serial.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 4.0}
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location4.0
***************************************************************************************
_update_available_quantity
self.productself.stock_location6.0
***************************************************************************************
create
{'name': 'test_availability_6', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_dozen.id, 'product_uom_qty': 1}
***************************************************************************************
_update_available_quantity
self.productself.stock_location2.0
***************************************************************************************
_update_available_quantity
self.productself.stock_location4.0
***************************************************************************************
create
{'name': 'test_availability_7', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product_serial.id, 'product_uom': self.uom_dozen.id, 'product_uom_qty': 1}
***************************************************************************************
_update_available_quantity
self.productself.stock_location3.0
***************************************************************************************
create
{'name': 'test_partial', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 5.0}
***************************************************************************************
create
{'name': 'test_receipt_edit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_dozen.id, 'product_uom_qty': 1.0}
***************************************************************************************
_update_available_quantity
self.productself.stock_location150.0
***************************************************************************************
create
{'name': 'test_putaway_1', 'location_id': self.stock_location.id, 'location_dest_id': self.supplier_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
create
{'name': 'test_unreserve_2_pack'}
***************************************************************************************
_update_available_quantity
self.productself.stock_location150.0
***************************************************************************************
create
{'name': 'test_putaway_1', 'location_id': self.stock_location.id, 'location_dest_id': self.supplier_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0}
***************************************************************************************
_update_available_quantity
self.productself.stock_location2
***************************************************************************************
create
{'name': 'test_out_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2.0}
***************************************************************************************
_update_available_quantity
self.productself.stock_location2
***************************************************************************************
create
{'name': 'test_out_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 3.0}
***************************************************************************************
_update_available_quantity
self.productself.stock_location3
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 2}
***************************************************************************************
create
{'name': 'test_unreserve_5', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 5.0}
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': -10, 'reserved_quantity': 0}
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 30.0, 'reserved_quantity': 10.0}
***************************************************************************************
create
{'name': 'test_unreserve_6', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0}
***************************************************************************************
create
{'name': 'product', 'tracking': 'serial', 'type': 'product'}
***************************************************************************************
create
[{'name': str(x), 'product_id': product.id, 'company_id': self.env.company.id} for x in range(5)]
***************************************************************************************
create
{'name': 'test_unreserve_7', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': product.id, 'product_uom': product.uom_id.id, 'product_uom_qty': 5.0}
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
create
{'name': 'test_link_assign_1_1', 'location_id': self.stock_location.id, 'location_dest_id': self.pack_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'test_link_assign_1_2', 'location_id': self.pack_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
create
{'name': 'test_link_2_1', 'location_id': self.stock_location.id, 'location_dest_id': self.pack_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'test_link_2_2', 'location_id': self.pack_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
_update_available_quantity
self.productself.stock_location2.0
***************************************************************************************
create
{'name': 'test_link_assign_1_1', 'location_id': self.stock_location.id, 'location_dest_id': self.pack_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'test_link_assign_1_1', 'location_id': self.stock_location.id, 'location_dest_id': self.pack_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'test_link_assign_1_2', 'location_id': self.pack_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2.0}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.productself.stock_location2.0
***************************************************************************************
create
{'name': 'test_link_assign_1_1', 'location_id': self.stock_location.id, 'location_dest_id': self.pack_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'test_link_assign_1_1', 'location_id': self.stock_location.id, 'location_dest_id': self.pack_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'test_link_assign_1_2', 'location_id': self.pack_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2.0}
***************************************************************************************
_update_available_quantity
self.productself.stock_location2.0
***************************************************************************************
create
{'name': 'test_link_assign_1_1', 'location_id': self.stock_location.id, 'location_dest_id': self.pack_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2.0}
***************************************************************************************
create
{'name': 'test_link_assign_1_1', 'location_id': self.pack_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'test_link_assign_1_2', 'location_id': self.pack_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'test_link_assign_6_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 3.0}
***************************************************************************************
create
{'name': 'test_link_assign_6_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2.0}
***************************************************************************************
create
{'name': 'test_link_assign_6_1', 'location_id': self.stock_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 3.0}
***************************************************************************************
create
{'name': 'test_link_assign_6_1', 'location_id': self.stock_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 3.0}
***************************************************************************************
_update_available_quantity
self.productself.stock_location6.0
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': self.pack_location.id, 'picking_type_id': self.env.ref('stock.picking_type_internal').id}
***************************************************************************************
create
{'name': 'test_link_assign_7', 'location_id': self.stock_location.id, 'location_dest_id': self.pack_location.id, 'product_id': self.product.id, 'product_uom': self.uom_dozen.id, 'product_uom_qty': 1.0, 'picking_id': picking_stock_pack.id}
***************************************************************************************
create
{'location_id': self.pack_location.id, 'location_dest_id': self.customer_location.id, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
create
{'name': 'test_link_assign_7', 'location_id': self.pack_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_dozen.id, 'product_uom_qty': 1.0, 'picking_id': picking_pack_cust.id}
***************************************************************************************
search
[('backorder_id', '=', picking_stock_pack.id)]
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': self.pack_location.id, 'picking_type_id': self.env.ref('stock.picking_type_internal').id}
***************************************************************************************
create
{'name': 'test_link_assign_7', 'location_id': self.stock_location.id, 'location_dest_id': self.pack_location.id, 'product_id': self.product_serial.id, 'product_uom': self.uom_dozen.id, 'product_uom_qty': 1.0, 'picking_id': picking_stock_pack.id}
***************************************************************************************
create
{'location_id': self.pack_location.id, 'location_dest_id': self.customer_location.id, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
create
{'name': 'test_link_assign_7', 'location_id': self.pack_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product_serial.id, 'product_uom': self.uom_dozen.id, 'product_uom_qty': 1.0, 'picking_id': picking_pack_cust.id}
***************************************************************************************
create
{'name': '3 units', 'category_id': self.uom_unit.category_id.id, 'factor_inv': 3, 'rounding': 1, 'uom_type': 'bigger'}
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': self.pack_location.id, 'picking_type_id': self.env.ref('stock.picking_type_internal').id}
***************************************************************************************
create
{'name': 'test_link_assign_9', 'location_id': self.stock_location.id, 'location_dest_id': self.pack_location.id, 'product_id': self.product_serial.id, 'product_uom': uom_3units.id, 'product_uom_qty': 1.0, 'picking_id': picking_stock_pack.id}
***************************************************************************************
create
{'location_id': self.pack_location.id, 'location_dest_id': self.customer_location.id, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
create
{'name': 'test_link_assign_0', 'location_id': self.pack_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product_serial.id, 'product_uom': uom_3units.id, 'product_uom_qty': 1.0, 'picking_id': picking_pack_cust.id}
***************************************************************************************
search
[('backorder_id', '=', picking_pack_cust.id)]
***************************************************************************************
search
[('name', '=', 'lot3')]
***************************************************************************************
_update_available_quantity
self.productself.stock_location2.0
***************************************************************************************
create
{'name': 'test_link_assign_out', 'location_id': self.pack_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'test_link_assign_1_1', 'location_id': self.stock_location.id, 'location_dest_id': self.pack_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2.0}
***************************************************************************************
create
{'name': 'test_link_assign_1_2', 'location_id': self.pack_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2.0}
***************************************************************************************
_update_available_quantity
self.productself.stock_location10.0
***************************************************************************************
create
{'name': 'test_use_unreserved_move_line_1_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 5.0}
***************************************************************************************
create
{'name': 'test_use_unreserved_move_line_1_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 5.0}
***************************************************************************************
create
{'name': 'test_use_unreserved_move_line_1_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 0.0, 'quantity_done': 1.0}
***************************************************************************************
_gather
self.productself.stock_location
***************************************************************************************
_update_available_quantity
self.productself.stock_location12.0
***************************************************************************************
create
{'name': 'test_use_reserved_move_line_2_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 12}
***************************************************************************************
_gather
self.productself.stock_location
***************************************************************************************
create
{'name': 'test_use_reserved_move_line_2_2', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_dozen.id, 'product_uom_qty': 1}
***************************************************************************************
_gather
self.productself.stock_location
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
create
{'name': 'test_use_unreserved_move_line_1_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'test_use_unreserved_move_line_1_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
create
{'name': 'test_use_unreserved_move_line_1_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'test_use_unreserved_move_line_1_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
create
{'name': 'test_use_unreserved_move_line_3', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 3.0}
***************************************************************************************
create
{'name': 'Product 01', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'name': 'Product 02', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
_update_available_quantity
product_01self.stock_location1
***************************************************************************************
_update_available_quantity
product_02self.stock_location1
***************************************************************************************
create
{'name': 'SuperPartner'}
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'partner_id': customer.id, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
create
{'name': 'SuperMove01', 'location_id': picking.location_id.id, 'location_dest_id': picking.location_dest_id.id, 'picking_id': picking.id, 'product_id': product_01.id, 'product_uom_qty': 1, 'product_uom': product_01.uom_id.id}
***************************************************************************************
create
{'name': 'SuperMove02', 'location_id': picking.location_id.id, 'location_dest_id': picking.location_dest_id.id, 'picking_id': picking.id, 'product_id': product_02.id, 'product_uom_qty': 1, 'product_uom': product_02.uom_id.id}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
_update_available_quantity
self.productshelf1_location1.0
***************************************************************************************
_update_available_quantity
self.productshelf2_location1.0
***************************************************************************************
create
{'name': 'test_edit_moveline_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': self.product.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
create
{'name': 'test_edit_moveline_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'test_edit_reserved_move_line_3'}
***************************************************************************************
create
{'name': 'test_edit_reserved_move_line_3'}
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
create
{'name': 'test_edit_moveline_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'test_edit_reserved_move_line_4_1'}
***************************************************************************************
create
{'name': 'test_edit_reserved_move_line_4_2'}
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
create
{'name': 'test_edit_moveline_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': self.product.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'test_edit_reserved_move_line_5'}
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
create
{'name': 'test_edit_moveline_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
_update_available_quantity
self.productshelf1_location1.0
***************************************************************************************
create
{'name': 'test_edit_moveline_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_lot.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.product_lotself.stock_location5
***************************************************************************************
create
{'name': 'test_in_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product_lot.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 5.0}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_lot.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': self.product_lot.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.product_lotself.stock_location3
***************************************************************************************
_update_available_quantity
self.product_lotself.stock_location2
***************************************************************************************
create
{'name': 'test_in_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product_lot.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 5.0}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
_update_available_quantity
self.productshelf1_location1.0
***************************************************************************************
_update_available_quantity
self.productshelf2_location1.0
***************************************************************************************
create
{'name': 'test_edit_moveline_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': self.product.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
create
{'name': 'test_edit_moveline_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'test_edit_reserved_move_line_3'}
***************************************************************************************
create
{'name': 'test_edit_reserved_move_line_3'}
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
create
{'name': 'test_edit_moveline_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'test_edit_reserved_move_line_4_1'}
***************************************************************************************
create
{'name': 'test_edit_reserved_move_line_4_2'}
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
create
{'name': 'test_edit_moveline_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': self.product.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'test_edit_reserved_move_line_5'}
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
create
{'name': 'test_edit_moveline_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
_update_available_quantity
self.productshelf1_location1.0
***************************************************************************************
create
{'name': 'test_edit_moveline_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
_update_available_quantity
self.productshelf1_location1.0
***************************************************************************************
_update_available_quantity
self.productshelf2_location1.0
***************************************************************************************
create
{'name': 'test_edit_moveline_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'test_edit_moveline_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
_update_available_quantity
self.productshelf1_location1.0
***************************************************************************************
create
{'name': 'test_edit_moveline_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
_update_available_quantity
self.productshelf1_location1.0
***************************************************************************************
create
{'name': 'test_edit_moveline_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'test_edit_moveline_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0}
***************************************************************************************
create
{'name': 'Jean'}
***************************************************************************************
create
{'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'partner_id': owner.id, 'picking_type_id': self.env.ref('stock.picking_type_in').id}
***************************************************************************************
create
{'name': 'test_edit_moveline_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'picking_id': picking.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0}
***************************************************************************************
create
{'picking_id': move1.move_line_ids.picking_id.id, 'move_id': move1.move_line_ids.move_id.id, 'product_id': move1.move_line_ids.product_id.id, 'qty_done': move1.move_line_ids.qty_done, 'product_uom_id': move1.product_uom.id, 'location_id': move1.move_line_ids.location_id.id, 'location_dest_id': move1.move_line_ids.location_dest_id.id}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_lot.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': self.product_lot.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'test_edit_done_move_line_12'}
***************************************************************************************
create
{'name': 'test_edit_moveline_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product_lot.id, 'product_uom': self.uom_dozen.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_lot.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': self.product_lot.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'test_edit_reserved_move_line_5'}
***************************************************************************************
create
{'name': 'test_edit_moveline_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product_lot.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'test_edit_moveline', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 12.0}
***************************************************************************************
create
{'name': 'Jean'}
***************************************************************************************
create
{'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'partner_id': partner.id, 'picking_type_id': self.env.ref('stock.picking_type_in').id}
***************************************************************************************
create
{'name': 'test_immediate_validate_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'picking_id': picking.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0}
***************************************************************************************
create
{'name': 'Jean'}
***************************************************************************************
_update_available_quantity
self.productself.stock_location5.0
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'partner_id': partner.id, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
create
{'name': 'test_immediate_validate_2', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'picking_id': picking.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0}
***************************************************************************************
search
[('backorder_id', '=', picking.id)]
***************************************************************************************
create
{'name': 'Product 5', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
_update_available_quantity
self.productself.stock_location1
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': self.pack_location.id, 'picking_type_id': self.env.ref('stock.picking_type_internal').id}
***************************************************************************************
create
{'name': 'product1_move', 'location_id': self.stock_location.id, 'location_dest_id': self.pack_location.id, 'picking_id': picking.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100}
***************************************************************************************
create
{'name': 'product3_move', 'location_id': self.stock_location.id, 'location_dest_id': self.pack_location.id, 'picking_id': picking.id, 'product_id': product5.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100}
***************************************************************************************
search
[('backorder_id', '=', picking.id)]
***************************************************************************************
create
{'name': 'Jean'}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_lot.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.product_lotself.stock_location5.0
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'partner_id': partner.id, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
create
{'name': 'test_immediate_validate_4', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'picking_id': picking.id, 'product_id': self.product_lot.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 5.0}
***************************************************************************************
create
{'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'picking_type_id': picking_type_id.id}
***************************************************************************************
create
{'name': 'move1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'picking_id': picking.id, 'picking_type_id': picking_type_id.id, 'product_id': product_id.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 5.0}
***************************************************************************************
create
{'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'picking_type_id': picking_type.id}
***************************************************************************************
create
{'name': 'product1_move', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'picking_id': picking.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1}
***************************************************************************************
create
{'name': 'product3_move', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'picking_id': picking.id, 'product_id': self.product_lot.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1}
***************************************************************************************
create
{'name': 'Jean'}
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'partner_id': partner.id, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
create
{'name': 'test_immediate_validate_2', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'picking_id': picking.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0}
***************************************************************************************
create
{'picking_id': picking.id, 'product_id': self.product.id, 'product_uom_id': self.uom_unit.id, 'scrap_qty': 5.0}
***************************************************************************************
create
{'name': 'Pierre'}
***************************************************************************************
create
{'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'partner_id': partner.id, 'picking_type_id': self.env.ref('stock.picking_type_in').id}
***************************************************************************************
create
{'name': 'test_immediate_validate_8_1', 'location_id': receipt1.location_id.id, 'location_dest_id': receipt1.location_dest_id.id, 'picking_id': receipt1.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0}
***************************************************************************************
create
{'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'partner_id': partner.id, 'picking_type_id': self.env.ref('stock.picking_type_in').id}
***************************************************************************************
create
{'name': 'test_immediate_validate_8_2', 'location_id': receipt2.location_id.id, 'location_dest_id': receipt2.location_dest_id.id, 'picking_id': receipt2.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0}
***************************************************************************************
create
{'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'partner_id': partner.id, 'picking_type_id': self.env.ref('stock.picking_type_in').id}
***************************************************************************************
create
{'name': 'test_immediate_validate_8_3', 'location_id': receipt3.location_id.id, 'location_dest_id': receipt3.location_dest_id.id, 'picking_id': receipt3.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0}
***************************************************************************************
create
{'name': 'test_set_quantity_done_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2.0}
***************************************************************************************
create
{'name': 'test_set_quantity_done_2', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2.0}
***************************************************************************************
create
{'name': 'test_in_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id}
***************************************************************************************
_update_available_quantity
self.productself.stock_location1
***************************************************************************************
create
{'product_id': self.product.id, 'product_uom_id': self.product.uom_id.id, 'scrap_qty': 1}
***************************************************************************************
create
{'product_id': self.product_consu.id, 'product_uom_id': self.product_consu.uom_id.id, 'scrap_qty': 1}
***************************************************************************************
_update_available_quantity
self.productself.stock_location1
***************************************************************************************
create
{'name': 'test_scrap_3', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'product_id': self.product.id, 'product_uom_id': self.product.uom_id.id, 'scrap_qty': 1}
***************************************************************************************
_update_available_quantity
self.productself.stock_location10
***************************************************************************************
create
{'name': 'Kimberley'}
***************************************************************************************
create
{'name': 'A single picking with one move to scrap', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'partner_id': partner.id, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
create
{'name': 'A move to confirm and scrap its product', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0, 'picking_id': picking.id}
***************************************************************************************
create
{'product_id': self.product.id, 'product_uom_id': self.product.uom_id.id, 'scrap_qty': 5, 'picking_id': picking.id}
***************************************************************************************
_update_available_quantity
self.productself.stock_location4
***************************************************************************************
create
{'name': 'Kimberley'}
***************************************************************************************
create
{'name': 'A single picking with one move to scrap', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'partner_id': partner.id, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
create
{'name': 'A move to confirm and scrap its product', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_dozen.id, 'product_uom_qty': 1.0, 'picking_id': picking.id}
***************************************************************************************
create
{'product_id': self.product.id, 'product_uom_id': self.product.uom_id.id, 'scrap_qty': 1, 'picking_id': picking.id}
***************************************************************************************
_update_available_quantity
self.productself.stock_location1
***************************************************************************************
create
{'product_id': self.product.id, 'product_uom_id': self.uom_dozen.id, 'scrap_qty': 1}
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'scrap_id': scrap.id, 'quantity': 1, 'product_uom_name': self.product.uom_id.name}
***************************************************************************************
create
{'name': 'child_location1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'name': 'child_location2', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'name': 'serial1', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.product_serialchild_loc11lot1
***************************************************************************************
create
{'product_id': self.product_serial.id, 'product_uom_id': self.uom_unit.id, 'location_id': child_loc2.id, 'lot_id': lot1.id}
***************************************************************************************
create
{'name': 'test_in_date_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product_lot.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0, 'picking_type_id': self.env.ref('stock.picking_type_in').id}
***************************************************************************************
create
{'name': 'test_in_date_1', 'location_id': self.stock_location.id, 'location_dest_id': self.pack_location.id, 'product_id': self.product_lot.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_lot.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': self.product_lot.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'test_in_date_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product_lot.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0, 'picking_type_id': self.env.ref('stock.picking_type_in').id}
***************************************************************************************
create
{'name': 'test_in_date_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product_lot.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0, 'picking_type_id': self.env.ref('stock.picking_type_in').id}
***************************************************************************************
search
[('location_id', '=', self.stock_location.id), ('product_id', '=', self.product_lot.id), ('lot_id', '=', lot1.id)]
***************************************************************************************
create
{'name': 'test_in_date_1', 'location_id': self.stock_location.id, 'location_dest_id': self.pack_location.id, 'product_id': self.product_lot.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
search
[('product_id', '=', self.product_lot.id), ('location_id', '=', self.pack_location.id)]
***************************************************************************************
search
[('location_id.usage', '=', 'internal'), ('product_id', '=', self.product_lot.id), ('lot_id', '=', lot1.id), ('quantity', '!=', 0)]
***************************************************************************************
search
[('location_id.usage', '=', 'internal'), ('product_id', '=', self.product_lot.id), ('lot_id', '=', lot2.id), ('quantity', '!=', 0)]
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_lot.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': self.product_lot.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'test_in_date_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product_lot.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0, 'picking_type_id': self.env.ref('stock.picking_type_in').id}
***************************************************************************************
create
{'name': 'test_in_date_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product_lot.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0, 'picking_type_id': self.env.ref('stock.picking_type_in').id}
***************************************************************************************
search
[('location_id.usage', '=', 'internal'), ('product_id', '=', self.product_lot.id), ('lot_id', '=', lot1.id), ('quantity', '!=', 0)]
***************************************************************************************
create
{'name': 'test_in_date_1', 'location_id': self.stock_location.id, 'location_dest_id': self.pack_location.id, 'product_id': self.product_lot.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'move_id': move3.id, 'product_id': move3.product_id.id, 'qty_done': 1, 'product_uom_id': move3.product_uom.id, 'location_id': move3.location_id.id, 'location_dest_id': move3.location_dest_id.id, 'lot_id': lot2.id}
***************************************************************************************
search
[('location_id.usage', '=', 'internal'), ('product_id', '=', self.product_lot.id), ('quantity', '!=', 0)]
***************************************************************************************
create
{'name': 'test_transit_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'picking_type_id': self.env.ref('stock.picking_type_in').id}
***************************************************************************************
create
{'name': 'test_transit_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'picking_type_id': self.env.ref('stock.picking_type_in').id}
***************************************************************************************
create
{'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'picking_type_id': self.env.ref('stock.picking_type_in').id, 'immediate_transfer': True}
***************************************************************************************
create
{'name': 'test_transit_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'quantity_done': 10.0, 'picking_id': picking.id}
***************************************************************************************
_update_available_quantity
self.productself.stock_location12
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'picking_type_id': self.env.ref('stock.picking_type_in').id}
***************************************************************************************
create
{'name': 'test_transit_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'picking_id': picking.id}
***************************************************************************************
create
{'name': 'test_customer', 'location_id': self.customer_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 5, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
_update_available_quantity
self.productself.stock_location10
***************************************************************************************
create
{'name': 'test_customer', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': self.product.qty_available, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
create
{'name': 'test_customer', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 5, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
_update_available_quantity
self.productself.stock_location12
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'picking_type_id': self.env.ref('stock.picking_type_in').id}
***************************************************************************************
create
{'name': 'test_transit_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'picking_id': picking.id}
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom_id': self.uom_unit.id, 'qty_done': 2.0, 'picking_id': picking.id}
***************************************************************************************
_update_available_quantity
self.productself.stock_location2
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
create
{'name': 'test_transit_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2.0, 'picking_id': picking.id, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
create
{'name': 'Product B', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
_update_available_quantity
self.productself.stock_location1
***************************************************************************************
_update_available_quantity
product1self.stock_location2
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
create
{'name': 'test_transit_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0, 'picking_id': picking.id}
***************************************************************************************
create
{'name': 'test_transit_2', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2.0, 'picking_id': picking.id}
***************************************************************************************
create
{'name': 'Product B', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
_update_available_quantity
self.productself.stock_location1
***************************************************************************************
_update_available_quantity
product1self.stock_location2
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
create
{'name': 'test_transit_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0, 'picking_id': picking.id, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
create
{'name': 'test_transit_2', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2.0, 'picking_id': picking.id, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
create
{'name': 'Product B', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'name': 'Product C', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
search
[('backorder_id', '=', delivery.id)]
***************************************************************************************
search
[('backorder_id', '=', first_backorder.id)]
***************************************************************************************
create
{'name': 'serial1', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.product_serialself.pack_location1lot1
***************************************************************************************
create
{'name': 'test sn', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product_serial.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'move_id': move.id, 'product_id': move.product_id.id, 'qty_done': 1, 'product_uom_id': move.product_uom.id, 'location_id': move.location_id.id, 'location_dest_id': move.location_dest_id.id, 'lot_name': lot1.name}
***************************************************************************************
create
{'name': 'Product In Units', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
_update_available_quantity
productself.stock_location36.0
***************************************************************************************
create
{'picking_type_id': self.env.ref('stock.picking_type_out').id, 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id}
***************************************************************************************
create
{'name': product.name, 'product_id': product.id, 'product_uom': self.uom_dozen.id, 'product_uom_qty': 2.0, 'picking_id': picking_out.id, 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id}
***************************************************************************************
_get_available_quantity
self.productself.supplier_location
***************************************************************************************
_get_available_quantity
self.productself.supplier_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.product_lotself.supplier_location
***************************************************************************************
_get_available_quantity
self.product_lotself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.supplier_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.customer_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.customer_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.product_lotself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.customer_location
***************************************************************************************
create
{'name': 'lot%s' % str(i), 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1.0
***************************************************************************************
_get_available_quantity
self.product_serialself.customer_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
create
{'product_id': product.id, 'location_id': self.stock_location.id, 'quantity': 1.0, 'lot_id': serial.id, 'reserved_quantity': 0.0}
***************************************************************************************
_get_available_quantity
productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.pack_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productmove_stock_pack.location_dest_id
***************************************************************************************
create
{'name': 'lot%s' % str(i), 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1.0
***************************************************************************************
create
{'name': 'lot%s' % str(i), 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1.0
***************************************************************************************
_get_available_quantity
self.product_serialself.customer_location
***************************************************************************************
_get_available_quantity
self.product_serialself.pack_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.customer_location
***************************************************************************************
_get_available_quantity
self.productshelf1_location
***************************************************************************************
_get_available_quantity
self.productshelf2_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productshelf1_location
***************************************************************************************
_get_available_quantity
self.productshelf2_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productshelf1_location
***************************************************************************************
_get_available_quantity
self.productshelf2_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productshelf1_location
***************************************************************************************
_get_available_quantity
self.productshelf2_location
***************************************************************************************
_get_available_quantity
self.productshelf1_location
***************************************************************************************
_get_available_quantity
self.productshelf2_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productshelf1_location
***************************************************************************************
_get_available_quantity
self.productshelf2_location
***************************************************************************************
_get_available_quantity
self.product_lotself.stock_location
***************************************************************************************
_get_available_quantity
self.product_lotself.stock_location
***************************************************************************************
_get_available_quantity
self.product_lotself.stock_location
***************************************************************************************
_get_available_quantity
self.product_lotself.stock_location
***************************************************************************************
_get_available_quantity
self.product_lotself.stock_location
***************************************************************************************
_get_available_quantity
self.productshelf1_location
***************************************************************************************
_get_available_quantity
self.productshelf2_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productshelf1_location
***************************************************************************************
_get_available_quantity
self.productshelf2_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productshelf1_location
***************************************************************************************
_get_available_quantity
self.productshelf2_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productshelf1_location
***************************************************************************************
_get_available_quantity
self.productshelf2_location
***************************************************************************************
_get_available_quantity
self.productshelf1_location
***************************************************************************************
_get_available_quantity
self.productshelf2_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productshelf1_location
***************************************************************************************
_get_available_quantity
self.productshelf2_location
***************************************************************************************
_get_available_quantity
self.productshelf2_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productshelf1_location
***************************************************************************************
_get_available_quantity
self.productshelf2_location
***************************************************************************************
_get_available_quantity
self.productshelf1_location
***************************************************************************************
_get_available_quantity
self.productshelf2_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productshelf1_location
***************************************************************************************
_get_available_quantity
self.productshelf2_location
***************************************************************************************
_get_available_quantity
self.productshelf1_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productshelf1_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productshelf1_location
***************************************************************************************
_get_available_quantity
self.productshelf1_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productshelf1_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productshelf1_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productshelf1_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.product_lotself.stock_location
***************************************************************************************
_get_available_quantity
self.product_lotself.stock_location
***************************************************************************************
_get_available_quantity
self.product_lotself.stock_location
***************************************************************************************
_get_available_quantity
self.product_lotself.stock_location
***************************************************************************************
_get_available_quantity
self.product_lotself.stock_location
***************************************************************************************
_get_available_quantity
self.product_lotself.stock_location
***************************************************************************************
_get_available_quantity
self.product_lotself.stock_location
***************************************************************************************
_get_available_quantity
self.product_lotself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.product_consuself.stock_location
***************************************************************************************
search
[('location_id', '=', self.stock_location.id), ('product_id', '=', self.product_lot.id), ('lot_id', '=', lot2.id)]
***************************************************************************************
search
[('location_id', '=', self.stock_location.id), ('product_id', '=', self.product_lot.id), ('lot_id', '=', lot2.id), ('quantity', '!=', 0)]
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.customer_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
product1self.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
product1self.stock_location
***************************************************************************************
with_context
backorder_wizard_dict['context']
***************************************************************************************
with_context
backorder_wizard_dict['context']
***************************************************************************************
with_context
backorder_wizard_dict['context']
***************************************************************************************
browse
res_dict_for_back_order.get('res_id')
***************************************************************************************
browse
res_dict_for_back_order.get('res_id')
***************************************************************************************
browse
action.get('res_id')
***************************************************************************************
_gather
self.productself.stock_location
***************************************************************************************
with_context
backorder_wizard_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
action['context']
***************************************************************************************
with_context
immediate_trans_wiz_dict['context']
***************************************************************************************
with_context
immediate_trans_wiz_dict['context']
***************************************************************************************
with_context
immediate_trans_wiz_dict['context']
***************************************************************************************
create
{'location_id': self.pack_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
create
{'location_id': self.stock_location, 'location_dest_id': self.pack_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
create
{'location_id': self.pack_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
create
{'location_id': self.stock_location, 'location_dest_id': self.pack_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
create
{'location_id': self.stock_location, 'location_dest_id': self.pack_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
browse
self.stock_location
***************************************************************************************
_update_available_quantity
self.productAlocation10.0
***************************************************************************************
search
[('backorder_id', '=', picking_client.id)]
***************************************************************************************
browse
self.stock_location
***************************************************************************************
_update_available_quantity
self.productAstock_location10.0
***************************************************************************************
browse
self.pack_location
***************************************************************************************
_update_available_quantity
self.productApack_location5.0
***************************************************************************************
browse
self.stock_location
***************************************************************************************
_update_available_quantity
self.productAstock_location10.0
***************************************************************************************
browse
stock_return_picking_action['res_id']
***************************************************************************************
browse
self.stock_location
***************************************************************************************
_update_available_quantity
self.productAstock_location10.0
***************************************************************************************
browse
self.stock_location
***************************************************************************************
_update_available_quantity
self.productAstock_location10.0
***************************************************************************************
browse
stock_return_picking_action['res_id']
***************************************************************************************
browse
self.stock_location
***************************************************************************************
search
[('company_id', '=', self.env.user.id)]
***************************************************************************************
create
{'name': 'Small Warehouse', 'code': 'SWH'}
***************************************************************************************
search
[('supplier_wh_id', '=', warehouse_2.id), ('supplied_wh_id', '=', warehouse_1.id)]
***************************************************************************************
_update_available_quantity
self.productAstock_location10.0
***************************************************************************************
search
[('res_model', '=', 'product.template'), ('res_id', '=', self.productA.product_tmpl_id.id)]
***************************************************************************************
browse
self.stock_location
***************************************************************************************
_update_available_quantity
self.productAlocation10.0
***************************************************************************************
search
[('backorder_id', '=', picking_pick.id)]
***************************************************************************************
browse
self.stock_location
***************************************************************************************
_update_available_quantity
self.productAlocation10.0
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.productA.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': self.productA.id, 'company_id': self.env.company.id}
***************************************************************************************
browse
self.stock_location
***************************************************************************************
_update_available_quantity
self.productAlocation10.0
***************************************************************************************
create
{'location_id': self.pack_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
create
{'location_id': self.stock_location, 'location_dest_id': self.pack_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
browse
self.stock_location
***************************************************************************************
browse
self.pack_location
***************************************************************************************
_update_available_quantity
self.gBlocation10000.0
***************************************************************************************
browse
self.stock_location
***************************************************************************************
browse
self.pack_location
***************************************************************************************
browse
self.customer_location
***************************************************************************************
create
{'product_id': self.productA.id, 'name': '123456789', 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.productAstock_location10.0
***************************************************************************************
_get_available_quantity
self.productAcustomer_location
***************************************************************************************
browse
stock_return_picking_action['res_id']
***************************************************************************************
browse
stock_return_picking_action['res_id']
***************************************************************************************
_get_available_quantity
self.productAcustomer_location
***************************************************************************************
_get_available_quantity
self.productApack_location
***************************************************************************************
_get_available_quantity
self.productAstock_location
***************************************************************************************
browse
self.stock_location
***************************************************************************************
create
{'product_id': self.productA.id, 'name': '123456789', 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.productAstock_location1.0
***************************************************************************************
browse
stock_return_picking_action['res_id']
***************************************************************************************
browse
stock_return_picking_action['res_id']
***************************************************************************************
browse
stock_return_picking_action['res_id']
***************************************************************************************
browse
self.stock_location
***************************************************************************************
_update_available_quantity
self.productAlocation10.0
***************************************************************************************
search
[('backorder_id', '=', picking_pick.id)]
***************************************************************************************
browse
self.stock_location
***************************************************************************************
_update_available_quantity
self.productAlocation10.0
***************************************************************************************
browse
self.stock_location
***************************************************************************************
create
{'name': 'return warehouse', 'code': 'rw'}
***************************************************************************************
create
{'name': 'return internal', 'usage': 'internal', 'location_id': return_warehouse.view_location_id.id}
***************************************************************************************
_update_available_quantity
self.productApick_location10.0
***************************************************************************************
browse
return_to_pick_picking_action['res_id']
***************************************************************************************
browse
return_to_return_picking_action['res_id']
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.productA.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': self.productA.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot3', 'product_id': self.productA.id, 'company_id': self.env.company.id}
***************************************************************************************
browse
self.stock_location
***************************************************************************************
_update_available_quantity
self.productAstock_location7.0
***************************************************************************************
_update_available_quantity
self.productAstock_location7.0
***************************************************************************************
_update_available_quantity
self.productAstock_location7.0
***************************************************************************************
browse
stock_return_picking.create_returns()['res_id']
***************************************************************************************
create
{'location_id': self.pack_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
browse
self.pack_location
***************************************************************************************
_update_available_quantity
self.productApack_location2
***************************************************************************************
search
[('backorder_id', '=', delivery_order.id)]
***************************************************************************************
create
{'location_id': self.pack_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
browse
self.pack_location
***************************************************************************************
_update_available_quantity
self.productApack_location1
***************************************************************************************
search
[('backorder_id', '=', delivery_order.id)]
***************************************************************************************
create
{'location_id': self.pack_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
browse
self.pack_location
***************************************************************************************
_update_available_quantity
self.productApack_location2
***************************************************************************************
_update_available_quantity
self.productApack_location2
***************************************************************************************
search
[('backorder_id', '=', delivery_order.id)]
***************************************************************************************
create
{'location_id': self.pack_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
browse
self.pack_location
***************************************************************************************
_update_available_quantity
self.productApack_location2
***************************************************************************************
_update_available_quantity
self.productBpack_location2
***************************************************************************************
search
[('backorder_id', '=', delivery_order.id)]
***************************************************************************************
create
{'location_id': self.pack_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
browse
self.pack_location
***************************************************************************************
_update_available_quantity
self.productApack_location1
***************************************************************************************
create
{'location_id': self.pack_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
browse
self.pack_location
***************************************************************************************
_update_available_quantity
self.productApack_location1
***************************************************************************************
create
{'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_type_id': self.picking_type_in}
***************************************************************************************
browse
self.stock_location
***************************************************************************************
create
{'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
browse
self.stock_location
***************************************************************************************
_update_available_quantity
self.productAstock_location5
***************************************************************************************
create
{'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
browse
self.stock_location
***************************************************************************************
_update_available_quantity
productstock_location5.5
***************************************************************************************
search
[('backorder_id', '=', delivery.id)]
***************************************************************************************
_update_available_quantity
self.productAself.env['stock.location'].browse(self.stock_location)1.0
***************************************************************************************
create
{'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
create
{'location_id': self.stock_location, 'product_id': self.productA.id, 'inventory_quantity': 2}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.productA.id, 'company_id': self.env.company.id}
***************************************************************************************
browse
self.stock_location
***************************************************************************************
_update_available_quantity
self.productAstock_location1.0
***************************************************************************************
create
{'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
create
{'location_id': self.stock_location, 'product_id': self.productA.id, 'inventory_quantity': 2, 'lot_id': lot1.id}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.productA.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': self.productA.id, 'company_id': self.env.company.id}
***************************************************************************************
browse
self.stock_location
***************************************************************************************
_update_available_quantity
self.productAstock_location1.0
***************************************************************************************
create
{'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
create
{'location_id': self.stock_location, 'product_id': self.productA.id, 'inventory_quantity': 1, 'lot_id': lot2.id}
***************************************************************************************
create
{'name': 'serial1', 'product_id': self.productA.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'serial2', 'product_id': self.productA.id, 'company_id': self.env.company.id}
***************************************************************************************
browse
self.stock_location
***************************************************************************************
_update_available_quantity
self.productAstock_location1.0
***************************************************************************************
create
{'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
create
{'location_id': self.stock_location, 'product_id': self.productA.id, 'inventory_quantity': 1, 'lot_id': serial2.id}
***************************************************************************************
create
{'location_id': self.pack_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
create
{'location_id': self.pack_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
create
{'location_id': self.pack_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
create
{'location_id': self.pack_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.productA.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_type_id': self.picking_type_in}
***************************************************************************************
create
{'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_type_id': self.picking_type_in}
***************************************************************************************
create
{'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_type_id': self.picking_type_in}
***************************************************************************************
create
{'name': 'TEST WAREHOUSE', 'code': 'TEST1', 'reception_steps': 'three_steps'}
***************************************************************************************
create
{'location_id': self.supplier_location, 'location_dest_id': warehouse.wh_input_stock_loc_id.id, 'picking_type_id': warehouse.in_type_id.id}
***************************************************************************************
create
{'location_id': self.supplier_location, 'location_dest_id': warehouse.wh_input_stock_loc_id.id, 'picking_type_id': warehouse.in_type_id.id}
***************************************************************************************
create
{'name': 'TEST WAREHOUSE', 'code': 'TEST1', 'reception_steps': 'three_steps'}
***************************************************************************************
create
{'location_id': self.supplier_location, 'location_dest_id': warehouse.wh_input_stock_loc_id.id, 'picking_type_id': warehouse.in_type_id.id}
***************************************************************************************
create
{'location_id': warehouse.wh_input_stock_loc_id.id, 'location_dest_id': warehouse.wh_qc_stock_loc_id.id, 'picking_type_id': warehouse.int_type_id.id}
***************************************************************************************
create
{'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
create
{'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
search
[('backorder_id', '=', delivery_order.id)]
***************************************************************************************
browse
self.picking_type_out
***************************************************************************************
create
{'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_type_id': self.picking_type_in}
***************************************************************************************
create
{'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out, 'move_type': 'one'}
***************************************************************************************
browse
self.stock_location
***************************************************************************************
create
{'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out, 'immediate_transfer': True, 'move_ids_without_package': [(0, 0, {'name': self.productA.name, 'product_id': self.productA.id, 'product_uom': self.productA.uom_id.id, 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'quantity_done': 5})]}
***************************************************************************************
create
{'name': 'owner'}
***************************************************************************************
create
{'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'picking_type_id': self.picking_type_in}
***************************************************************************************
create
{'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 1, 'product_uom': self.productA.uom_id.id, 'picking_id': receipt.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location}
***************************************************************************************
browse
self.supplier_location
***************************************************************************************
browse
self.stock_location
***************************************************************************************
_gather
self.productAsupplier_location
***************************************************************************************
_gather
self.productAstock_location
***************************************************************************************
create
{'name': 'Partner'}
***************************************************************************************
browse
self.supplier_location
***************************************************************************************
create
{'name': 'test-stock', 'usage': 'internal'}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': stock_location.id}
***************************************************************************************
create
{'product_id': self.productA.id, 'location_in_id': stock_location.id, 'location_out_id': shelf_location.id}
***************************************************************************************
browse
self.picking_type_in
***************************************************************************************
create
{'location_id': self.pack_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out, 'move_lines': [(0, 0, {'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 10, 'product_uom': self.productA.uom_id.id, 'location_id': self.pack_location, 'location_dest_id': self.customer_location})]}
***************************************************************************************
create
{'location_id': self.pack_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out, 'immediate_transfer': True, 'move_line_ids': [(0, 0, {'product_id': self.productA.id, 'qty_done': 10, 'product_uom_id': self.productA.uom_id.id, 'location_id': self.pack_location, 'location_dest_id': self.customer_location})]}
***************************************************************************************
create
{'name': 'Bigger than tons'}
***************************************************************************************
create
{'name': 'T-LBS', 'category_id': categ_test.id, 'uom_type': 'reference', 'rounding': 0.01}
***************************************************************************************
create
{'name': 'T-GT', 'category_id': categ_test.id, 'uom_type': 'bigger', 'rounding': 1e-07, 'factor_inv': 2240.0}
***************************************************************************************
create
{'name': 'T_TEST', 'type': 'product', 'uom_id': T_LBS.id, 'uom_po_id': T_LBS.id, 'tracking': 'lot'}
***************************************************************************************
create
{'picking_type_id': self.picking_type_in, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location}
***************************************************************************************
create
{'name': 'First move with 60 GT', 'product_id': T_TEST.id, 'product_uom_qty': 60, 'product_uom': T_GT.id, 'picking_id': picking_in.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location}
***************************************************************************************
create
{'name': 'Lot TEST', 'product_id': T_TEST.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'move_id': move.id, 'product_id': T_TEST.id, 'product_uom_id': T_LBS.id, 'location_id': self.supplier_location, 'location_dest_id': self.stock_location, 'qty_done': 42760.0, 'lot_id': lot.id}
***************************************************************************************
search
[('backorder_id', '=', picking_in.id)]
***************************************************************************************
create
{'name': 'Product G', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id, 'uom_id': self.uom_gm.id, 'uom_po_id': self.uom_gm.id}
***************************************************************************************
browse
self.stock_location
***************************************************************************************
_update_available_quantity
product_Gstock_location149.88
***************************************************************************************
create
{'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
create
{'name': 'test_reserve_product_G', 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_id': picking.id, 'product_id': product_G.id, 'product_uom': self.uom_kg.id, 'product_uom_qty': 1}
***************************************************************************************
create
{'name': 'Product Less than DA', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id, 'uom_id': self.uom_gm.id, 'uom_po_id': self.uom_gm.id}
***************************************************************************************
create
{'name': 'Product Greater than DA', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id, 'uom_id': self.uom_gm.id, 'uom_po_id': self.uom_gm.id}
***************************************************************************************
browse
self.stock_location
***************************************************************************************
_update_available_quantity
product_LtDAstock_location149
***************************************************************************************
_update_available_quantity
product_GtDAstock_location149.88
***************************************************************************************
create
{'name': 'test_reserve_product_LtDA', 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'product_id': product_LtDA.id, 'product_uom': self.uom_kg.id, 'product_uom_qty': 1}
***************************************************************************************
create
{'name': 'test_reserve_product_GtDA', 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'product_id': product_GtDA.id, 'product_uom': self.uom_kg.id, 'product_uom_qty': 1}
***************************************************************************************
_update_available_quantity
product_LtDAstock_location149.88
***************************************************************************************
_update_available_quantity
product_GtDAstock_location149.88
***************************************************************************************
search
[('product_id', '=', quant_LtDA.product_id.id), ('location_id', '=', quant_LtDA.location_id.id), ('lot_id', '=', quant_LtDA.lot_id.id), ('package_id', '=', quant_LtDA.package_id.id), ('owner_id', '=', quant_LtDA.owner_id.id), ('product_qty', '!=', 0)]
***************************************************************************************
search
[('product_id', '=', quant_GtDA.product_id.id), ('location_id', '=', quant_GtDA.location_id.id), ('lot_id', '=', quant_GtDA.lot_id.id), ('package_id', '=', quant_GtDA.package_id.id), ('owner_id', '=', quant_GtDA.owner_id.id), ('product_qty', '!=', 0)]
***************************************************************************************
create
{'name': 'product a', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'name': 'Partner'}
***************************************************************************************
search
[('company_id', '=', self.env.user.id)]
***************************************************************************************
create
{}
***************************************************************************************
search
[]
***************************************************************************************
create
{'partner_id': partner0.id}
***************************************************************************************
create
{'partner_id': partner1.id}
***************************************************************************************
create
{'name': 'first out move', 'procure_method': 'make_to_order', 'location_id': ship_location.id, 'location_dest_id': customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0, 'warehouse_id': self.wh.id, 'group_id': procurement_group1.id, 'origin': 'origin1'}
***************************************************************************************
create
{'name': 'second out move', 'procure_method': 'make_to_order', 'location_id': ship_location.id, 'location_dest_id': customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0, 'warehouse_id': self.wh.id, 'group_id': procurement_group2.id, 'origin': 'origin2'}
***************************************************************************************
search
[('company_id', '=', self.env.user.id)]
***************************************************************************************
create
{'name': 'Small Warehouse', 'code': 'SWH'}
***************************************************************************************
search
[('supplier_wh_id', '=', warehouse_2.id), ('supplied_wh_id', '=', warehouse_1.id)]
***************************************************************************************
create
{'product_id': self.product1.id, 'product_tmpl_id': self.product1.product_tmpl_id.id, 'product_uom_id': self.uom_unit.id, 'quantity': self.product_uom_qty, 'warehouse_id': self.wh.id}
***************************************************************************************
create
{'location_id': stock_location.location_id.id, 'name': 'push location'}
***************************************************************************************
create
{'name': 'new route', 'rule_ids': [(0, False, {'name': 'create a move to push location', 'location_src_id': stock_location.id, 'location_id': push_location.id, 'company_id': self.env.company.id, 'action': 'push', 'auto': 'manual', 'picking_type_id': self.env.ref('stock.picking_type_in').id})]}
***************************************************************************************
create
{'name': 'move with a route', 'location_id': stock_location.id, 'location_dest_id': stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0, 'route_ids': [(4, route.id)]}
***************************************************************************************
search
[('company_id', '=', self.env.user.id)]
***************************************************************************************
create
{'name': 'New_location', 'usage': 'internal', 'location_id': self.env.ref('stock.stock_location_locations').id}
***************************************************************************************
create
{'name': 'new_picking_type', 'code': 'internal', 'sequence_code': 'NPT', 'default_location_src_id': self.env.ref('stock.stock_location_stock').id, 'default_location_dest_id': new_loc.id, 'warehouse_id': self.wh.id}
***************************************************************************************
create
{'name': 'new route', 'rule_ids': [(0, False, {'name': 'create a move to push location', 'location_src_id': self.env.ref('stock.stock_location_stock').id, 'location_id': new_loc.id, 'company_id': self.env.company.id, 'action': 'push', 'auto': 'transparent', 'picking_type_id': picking_type.id})]}
***************************************************************************************
create
{'name': 'new_product', 'type': 'product', 'route_ids': [(4, route.id)]}
***************************************************************************************
create
{'name': 'move with a route', 'location_id': self.supplier_location, 'location_dest_id': self.env.ref('stock.stock_location_stock').id, 'product_id': product.id, 'product_uom_qty': 1.0, 'product_uom': self.uom_unit.id, 'move_line_ids': [(0, 0, {'product_id': product.id, 'product_uom_id': self.uom_unit.id, 'location_id': self.supplier_location, 'location_dest_id': self.env.ref('stock.stock_location_stock').id, 'qty_done': 1.0})]}
***************************************************************************************
search
[('company_id', '=', self.env.user.id)]
***************************************************************************************
create
{'name': 'ProductA', 'type': 'product'}
***************************************************************************************
_update_available_quantity
product_awarehouse.wh_output_stock_loc_id4.0
***************************************************************************************
_update_available_quantity
product_awarehouse.lot_stock_id4.0
***************************************************************************************
_get_rule
product_afinal_locationvalues
***************************************************************************************
create
{'name': 'Test-pg-mtso-mto'}
***************************************************************************************
run
[pg.Procurement(product_a, 5.0, product_a.uom_id, final_location, 'test_mtso_mto', 'test_mtso_mto', warehouse.company_id, {'warehouse_id': warehouse, 'group_id': pg})]
***************************************************************************************
_get_available_quantity
product_awarehouse.wh_output_stock_loc_id
***************************************************************************************
search
[('group_id', '=', pg.id)]
***************************************************************************************
search
[('company_id', '=', self.env.user.id)]
***************************************************************************************
create
{'name': 'ProductA', 'type': 'product'}
***************************************************************************************
_update_available_quantity
product_awarehouse.wh_output_stock_loc_id4.0
***************************************************************************************
_get_rule
product_afinal_locationvalues
***************************************************************************************
create
{'name': 'Test-pg-mtso-mts'}
***************************************************************************************
run
[pg.Procurement(product_a, 4.0, product_a.uom_id, final_location, 'test_mtso_mts', 'test_mtso_mts', warehouse.company_id, {'warehouse_id': warehouse, 'group_id': pg})]
***************************************************************************************
search
[('group_id', '=', pg.id)]
***************************************************************************************
search
[('company_id', '=', self.env.user.id)]
***************************************************************************************
create
{'name': 'ProductA', 'type': 'product'}
***************************************************************************************
_update_available_quantity
product_awarehouse.wh_output_stock_loc_id4.0
***************************************************************************************
_get_rule
product_afinal_locationvalues
***************************************************************************************
create
{'name': 'Test-pg-mtso-mts-1'}
***************************************************************************************
create
{'name': 'Test-pg-mtso-mts-2'}
***************************************************************************************
create
{'name': 'Test-pg-mtso-mts-3'}
***************************************************************************************
run
[pg1.Procurement(product_a, 2.0, product_a.uom_id, final_location, 'test_mtso_mts_1', 'test_mtso_mts_1', warehouse.company_id, {'warehouse_id': warehouse, 'group_id': pg1}), pg2.Procurement(product_a, 2.0, product_a.uom_id, final_location, 'test_mtso_mts_2', 'test_mtso_mts_2', warehouse.company_id, {'warehouse_id': warehouse, 'group_id': pg2}), pg3.Procurement(product_a, 2.0, product_a.uom_id, final_location, 'test_mtso_mts_3', 'test_mtso_mts_3', warehouse.company_id, {'warehouse_id': warehouse, 'group_id': pg3})]
***************************************************************************************
search
[('group_id', '=', pg1.id)]
***************************************************************************************
search
[('group_id', '=', pg2.id)]
***************************************************************************************
search
[('group_id', '=', pg3.id)]
***************************************************************************************
search
[('company_id', '=', self.env.user.id)]
***************************************************************************************
create
{'name': 'Product A', 'type': 'product'}
***************************************************************************************
create
{'name': 'Product B', 'type': 'product'}
***************************************************************************************
_get_rule
product_Afinal_location{'warehouse_id': warehouse}
***************************************************************************************
_update_available_quantity
product_Awarehouse.lot_stock_id5.0
***************************************************************************************
_update_available_quantity
product_Bwarehouse.lot_stock_id3.0
***************************************************************************************
create
move_A_vals
***************************************************************************************
create
move_B_vals
***************************************************************************************
search
[('company_id', '=', self.env.user.id)]
***************************************************************************************
create
{'name': 'Product A', 'type': 'product'}
***************************************************************************************
create
{'name': 'Product B', 'type': 'product'}
***************************************************************************************
_get_rule
product_Afinal_location{'warehouse_id': warehouse}
***************************************************************************************
_update_available_quantity
product_Awarehouse.lot_stock_id5.0
***************************************************************************************
_update_available_quantity
product_Bwarehouse.lot_stock_id3.0
***************************************************************************************
create
move_A1_vals
***************************************************************************************
create
move_A2_vals
***************************************************************************************
create
move_B1_vals
***************************************************************************************
create
move_B2_vals
***************************************************************************************
search
[('company_id', '=', self.env.user.id)]
***************************************************************************************
create
{'name': 'Product A', 'type': 'product'}
***************************************************************************************
_get_rule
product_Afinal_location{'warehouse_id': warehouse}
***************************************************************************************
_update_available_quantity
product_Awarehouse.lot_stock_id4.0
***************************************************************************************
create
move_A1_vals
***************************************************************************************
create
move_A2_vals
***************************************************************************************
search
[('company_id', '=', self.env.company.id)]
***************************************************************************************
create
{'name': 'ProductA', 'type': 'product'}
***************************************************************************************
create
{'name': 'Test-delay_alert_3'}
***************************************************************************************
run
[pg.Procurement(product_a, 4.0, product_a.uom_id, final_location, 'delay', 'delay', warehouse.company_id, {'warehouse_id': warehouse, 'group_id': pg})]
***************************************************************************************
search
[('product_id', '=', product_a.id)]
***************************************************************************************
create
{'location_id': stock_location.location_id.id, 'name': 'push location 1'}
***************************************************************************************
create
{'location_id': stock_location.location_id.id, 'name': 'push location 2'}
***************************************************************************************
create
{'name': 'route on product', 'rule_ids': [(0, False, {'name': 'create a move to push location 1', 'location_src_id': stock_location.id, 'location_id': push_location_1.id, 'company_id': self.env.company.id, 'action': 'push', 'auto': 'manual', 'picking_type_id': self.env.ref('stock.picking_type_in').id})]}
***************************************************************************************
create
{'name': 'route on packaging', 'packaging_selectable': True, 'rule_ids': [(0, False, {'name': 'create a move to push location 2', 'location_src_id': stock_location.id, 'location_id': push_location_2.id, 'company_id': self.env.company.id, 'action': 'push', 'auto': 'manual', 'picking_type_id': self.env.ref('stock.picking_type_in').id})]}
***************************************************************************************
create
{'name': 'Product with packaging', 'type': 'product', 'route_ids': [(4, route_on_product.id, 0)]}
***************************************************************************************
create
{'name': 'box', 'product_id': product.id, 'route_ids': [(4, route_on_packaging.id, 0)]}
***************************************************************************************
create
{'name': 'move with a route', 'location_id': stock_location.id, 'location_dest_id': stock_location.id, 'product_id': product.id, 'product_packaging_id': packaging.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'location_id': self.pack_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
create
{'location_id': self.stock_location, 'location_dest_id': self.pack_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
browse
self.pack_location
***************************************************************************************
browse
self.stock_location
***************************************************************************************
create
{'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
create
{'name': 'customer move', 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'product_id': self.productA.id, 'product_uom': self.productA.uom_id.id, 'product_uom_qty': 10.0, 'picking_id': customer_picking.id, 'picking_type_id': self.picking_type_out}
***************************************************************************************
create
{'location_id': self.customer_location, 'location_dest_id': self.stock_location, 'picking_type_id': self.picking_type_in}
***************************************************************************************
create
{'name': 'test_transit_1', 'location_id': self.customer_location, 'location_dest_id': self.stock_location, 'product_id': self.productA.id, 'product_uom': self.productA.uom_id.id, 'product_uom_qty': 10.0, 'picking_id': supplier_picking.id}
***************************************************************************************
browse
self.pack_location
***************************************************************************************
browse
self.stock_location
***************************************************************************************
_update_available_quantity
self.productAstock_location10.0
***************************************************************************************
create
{'location_id': self.stock_location, 'location_dest_id': self.pack_location, 'picking_type_id': self.picking_type_out}
***************************************************************************************
browse
self.stock_location
***************************************************************************************
create
{'name': 'Delivery 1', 'location_id': self.stock_location, 'location_dest_id': self.customer_location, 'picking_type_id': picking_type_out1.id}
***************************************************************************************
create
{'location_id': self.customer_location, 'location_dest_id': self.stock_location, 'picking_type_id': self.picking_type_in}
***************************************************************************************
create
{'name': 'test_transit_1', 'location_id': self.customer_location, 'location_dest_id': self.stock_location, 'product_id': self.productA.id, 'product_uom': self.productA.uom_id.id, 'product_uom_qty': 50.0, 'picking_id': supplier_picking.id}
***************************************************************************************
create
{'name': 'PSerial', 'type': 'product', 'tracking': 'serial', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'name': 'TestReceive', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product_serial.id, 'product_uom': self.uom_unit.id, 'picking_type_id': self.env.ref('stock.picking_type_in').id}
***************************************************************************************
create
{'name': 'serial1', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'serial2', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'serial3', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'TestReceiveDozen', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product_serial.id, 'product_uom': self.uom_dozen.id, 'picking_type_id': self.env.ref('stock.picking_type_in').id}
***************************************************************************************
create
{'name': 'product', 'type': 'product'}
***************************************************************************************
_get_available_quantity
self.productAstock_location
***************************************************************************************
_get_available_quantity
self.productApack_location
***************************************************************************************
_get_available_quantity
self.productAstock_location
***************************************************************************************
_get_available_quantity
self.productApack_location
***************************************************************************************
_get_available_quantity
self.gBpack_location
***************************************************************************************
_get_available_quantity
self.gBlocation
***************************************************************************************
_get_available_quantity
self.gBpack_location
***************************************************************************************
_get_available_quantity
self.productApick_location
***************************************************************************************
_get_available_quantity
self.productAreturn_location
***************************************************************************************
_get_available_quantity
self.productApack_location
***************************************************************************************
_get_available_quantity
self.productApack_location
***************************************************************************************
_get_available_quantity
self.productApack_location
***************************************************************************************
_get_available_quantity
self.productApack_location
***************************************************************************************
_get_available_quantity
self.productApack_location
***************************************************************************************
_get_available_quantity
self.productApack_location
***************************************************************************************
_get_available_quantity
self.productApack_location
***************************************************************************************
_get_available_quantity
self.productApack_location
***************************************************************************************
_get_available_quantity
self.productApack_location
***************************************************************************************
_get_available_quantity
self.productApack_location
***************************************************************************************
_get_available_quantity
self.productApack_location
***************************************************************************************
_get_available_quantity
self.productApack_location
***************************************************************************************
_get_available_quantity
self.productApack_location
***************************************************************************************
_get_available_quantity
self.productApack_location
***************************************************************************************
_get_available_quantity
self.productApack_location
***************************************************************************************
_get_available_quantity
self.productAstock_location
***************************************************************************************
browse
self.stock_location
***************************************************************************************
search
[('origin', '=', 'Manual Replenishment')]
***************************************************************************************
browse
self.picking_type_out
***************************************************************************************
_get_available_quantity
self.productAstock_location
***************************************************************************************
_get_available_quantity
self.productAstock_location
***************************************************************************************
browse
self.picking_type_out
***************************************************************************************
_get_available_quantity
self.productApack_location
***************************************************************************************
_get_available_quantity
self.productAstock_location
***************************************************************************************
_get_available_quantity
self.productAstock_location
***************************************************************************************
_gather
self.productAstock_location
***************************************************************************************
_gather
self.productApack_location
***************************************************************************************
_gather
self.productApack_location
***************************************************************************************
_gather
self.gBpack_location
***************************************************************************************
browse
backorder_wizard_values.get('res_id')
***************************************************************************************
search
[('product_id', '=', self.productA.id), ('quantity', '!=', 0)]
***************************************************************************************
browse
self.picking_type_out
***************************************************************************************
browse
self.picking_type_out
***************************************************************************************
browse
self.picking_type_out
***************************************************************************************
browse
self.picking_type_out
***************************************************************************************
_gather
self.productAstock_location
***************************************************************************************
_gather
self.productBstock_location
***************************************************************************************
browse
self.picking_type_out
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
wiz['context']
***************************************************************************************
_gather
self.productAstock_location
***************************************************************************************
search
[('company_id', '=', self.company_a.id)]
***************************************************************************************
search
[('company_id', '=', self.company_a.id)]
***************************************************************************************
create
{'name': 'Shared Partner', 'company_id': False}
***************************************************************************************
create
{'type': 'product', 'company_id': self.company_a.id, 'name': 'Product limited to company A'}
***************************************************************************************
create
{'name': 'product limited to company b', 'company_id': self.company_b.id, 'type': 'product'}
***************************************************************************************
search
[('company_id', '=', self.company_b.id)]
***************************************************************************************
create
{'type': 'product', 'tracking': 'lot', 'name': 'product lot'}
***************************************************************************************
create
{'name': 'lotA', 'company_id': self.company_a.id, 'product_id': product_lot.id}
***************************************************************************************
create
{'name': 'lotA', 'company_id': self.company_b.id, 'product_id': product_lot.id}
***************************************************************************************
create
{'type': 'product', 'tracking': 'serial', 'name': 'product'}
***************************************************************************************
create
{'name': 'test_lot_2', 'picking_type_id': picking.picking_type_id.id, 'location_id': picking.location_id.id, 'location_dest_id': picking.location_dest_id.id, 'product_id': product.id, 'product_uom': product.uom_id.id, 'product_uom_qty': 1.0, 'picking_id': picking.id, 'company_id': picking.company_id.id}
***************************************************************************************
search
[('name', '=', 'receipt_serial')]
***************************************************************************************
create
{'type': 'product', 'name': 'shared product'}
***************************************************************************************
create
{'type': 'product', 'name': 'shared product'}
***************************************************************************************
create
{'name': 'p1', 'type': 'product'}
***************************************************************************************
search
[('company_id', '=', self.company_b.id)]
***************************************************************************************
create
{'company_id': self.company_a.id, 'picking_type_id': picking_type_b.id, 'location_id': self.stock_location_a.id, 'location_dest_id': self.stock_location_a.id, 'product_id': product.id, 'product_uom': product.uom_id.id, 'name': 'stock_move'}
***************************************************************************************
create
{'name': 'p1', 'type': 'product'}
***************************************************************************************
search
[('company_id', '=', self.company_b.id)]
***************************************************************************************
create
{'company_id': self.company_a.id, 'picking_type_id': picking_type_b.id, 'location_id': self.stock_location_a.id, 'location_dest_id': self.stock_location_b.id, 'product_id': product.id, 'product_uom': product.uom_id.id, 'name': 'stock_move'}
***************************************************************************************
create
{'name': 'p1', 'type': 'product', 'company_id': self.company_b.id}
***************************************************************************************
search
[('company_id', '=', self.company_b.id)]
***************************************************************************************
create
{'company_id': self.company_a.id, 'picking_type_id': picking_type_b.id, 'location_id': self.stock_location_a.id, 'location_dest_id': self.stock_location_a.id, 'product_id': product.id, 'product_uom': product.uom_id.id, 'name': 'stock_move'}
***************************************************************************************
create
{'type': 'product', 'tracking': 'lot', 'name': 'product lot'}
***************************************************************************************
create
{'name': 'To Transit', 'sequence_code': 'TRANSIT', 'code': 'outgoing', 'company_id': self.company_a.id, 'warehouse_id': False, 'default_location_src_id': self.stock_location_a.id, 'default_location_dest_id': intercom_location.id, 'sequence_id': self.env['ir.sequence'].create({'code': 'transit', 'name': 'transit sequence', 'company_id': self.company_a.id}).id}
***************************************************************************************
create
{'name': 'Push', 'company_id': False, 'rule_ids': [(0, False, {'name': 'create a move to company b', 'company_id': self.company_b.id, 'location_src_id': intercom_location.id, 'location_id': self.stock_location_b.id, 'action': 'push', 'auto': 'manual', 'picking_type_id': self.warehouse_b.in_type_id.id})]}
***************************************************************************************
create
{'company_id': self.company_a.id, 'name': 'test_from_supplier', 'location_id': supplier_location.id, 'location_dest_id': self.stock_location_a.id, 'product_id': product_lot.id, 'product_uom': product_lot.uom_id.id, 'product_uom_qty': 1.0, 'picking_type_id': self.warehouse_a.in_type_id.id}
***************************************************************************************
create
{'company_id': self.company_a.id, 'name': 'test_to_transit', 'location_id': self.stock_location_a.id, 'location_dest_id': intercom_location.id, 'product_id': product_lot.id, 'product_uom': product_lot.uom_id.id, 'product_uom_qty': 1.0, 'picking_type_id': picking_type_to_transit.id, 'route_ids': [(4, route.id)]}
***************************************************************************************
search
[('location_id', '=', intercom_location.id), ('product_id', '=', product_lot.id)]
***************************************************************************************
create
{'name': 'Deco Addict'}
***************************************************************************************
search
[('supplier_wh_id', '=', self.warehouse_b.id), ('supplied_wh_id', '=', self.warehouse_a.id)]
***************************************************************************************
create
{'type': 'product', 'tracking': 'lot', 'name': 'product lot', 'route_ids': [(4, resupply_route.id), (4, self.env.ref('stock.route_warehouse0_mto').id)]}
***************************************************************************************
create
{'company_id': self.company_b.id, 'name': 'from_supplier_to_whb', 'location_id': supplier_location.id, 'location_dest_id': self.warehouse_b.lot_stock_id.id, 'product_id': product_lot.id, 'product_uom': product_lot.uom_id.id, 'product_uom_qty': 1.0, 'picking_type_id': self.warehouse_b.in_type_id.id}
***************************************************************************************
create
{'company_id': self.company_a.id, 'partner_id': partner.id, 'picking_type_id': self.warehouse_a.out_type_id.id, 'location_id': self.stock_location_a.id, 'location_dest_id': customer_location.id}
***************************************************************************************
create
{'name': 'WH_A to Customer', 'product_id': product_lot.id, 'product_uom_qty': 1, 'product_uom': product_lot.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.stock_location_a.id, 'location_dest_id': customer_location.id, 'warehouse_id': self.warehouse_a.id, 'procure_method': 'make_to_order', 'company_id': self.company_a.id}
***************************************************************************************
search
[('location_id', '=', self.stock_location_b.id), ('product_id', '=', product_lot.id)]
***************************************************************************************
search
[('location_id', '=', intercom_location.id), ('product_id', '=', product_lot.id)]
***************************************************************************************
search
[('is_inventory', '=', True)]
***************************************************************************************
with_user
self.user_a
***************************************************************************************
with_user
self.user_a
***************************************************************************************
with_user
self.user_a
***************************************************************************************
with_user
self.user_a
***************************************************************************************
with_user
self.user_a
***************************************************************************************
with_user
self.user_a
***************************************************************************************
_get_available_quantity
product_lotintercom_locationlot_1
***************************************************************************************
_get_available_quantity
product_lotself.stock_location_blot_2
***************************************************************************************
_get_available_quantity
product_lotintercom_locationlot_b
***************************************************************************************
_get_available_quantity
product_lotcustomer_locationlot_a
***************************************************************************************
with_user
self.user_a
***************************************************************************************
with_user
self.user_a
***************************************************************************************
with_user
self.user_a
***************************************************************************************
with_user
self.user_a
***************************************************************************************
create
{'code': 'transit', 'name': 'transit sequence', 'company_id': self.company_a.id}
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_user
self.user_a
***************************************************************************************
with_user
self.user_a
***************************************************************************************
_update_available_quantity
self.productAself.stock_location20.0
***************************************************************************************
_update_available_quantity
self.productBself.stock_location20.0
***************************************************************************************
create
{'name': 'The ship move', 'product_id': self.productA.id, 'product_uom_qty': 5.0, 'product_uom': self.productA.uom_id.id, 'location_id': self.ship_location.id, 'location_dest_id': self.customer_location.id, 'warehouse_id': self.warehouse.id, 'picking_type_id': self.warehouse.out_type_id.id, 'procure_method': 'make_to_order', 'state': 'draft'}
***************************************************************************************
create
{'name': 'The ship move', 'product_id': self.productB.id, 'product_uom_qty': 5.0, 'product_uom': self.productB.uom_id.id, 'location_id': self.ship_location.id, 'location_dest_id': self.customer_location.id, 'warehouse_id': self.warehouse.id, 'picking_type_id': self.warehouse.out_type_id.id, 'procure_method': 'make_to_order', 'state': 'draft'}
***************************************************************************************
create
{'name': 'The pack to pick'}
***************************************************************************************
_update_available_quantity
self.productAself.stock_location20.0
***************************************************************************************
create
{'picking_type_id': self.warehouse.int_type_id.id, 'location_id': self.stock_location.id, 'location_dest_id': self.stock_location.id, 'state': 'draft'}
***************************************************************************************
create
{'package_id': pack.id, 'picking_id': picking.id, 'location_dest_id': self.stock_location.id, 'company_id': picking.company_id.id}
***************************************************************************************
create
{'name': 'The pack to pick'}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
_update_available_quantity
self.productAshelf1_location20.0
***************************************************************************************
create
{'picking_type_id': self.warehouse.int_type_id.id, 'location_id': self.stock_location.id, 'location_dest_id': self.stock_location.id, 'state': 'draft'}
***************************************************************************************
create
{'package_id': pack.id, 'picking_id': picking.id, 'location_dest_id': self.stock_location.id, 'company_id': picking.company_id.id}
***************************************************************************************
create
{'package_id': pack.id, 'picking_id': picking.id, 'location_dest_id': self.stock_location.id, 'company_id': picking.company_id.id}
***************************************************************************************
create
{'name': 'shelf1', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'name': 'shelf2', 'usage': 'internal', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'picking_type_id': self.warehouse.in_type_id.id, 'location_id': self.customer_location.id, 'location_dest_id': self.stock_location.id, 'state': 'draft'}
***************************************************************************************
create
{'name': 'move 1', 'product_id': self.productA.id, 'product_uom_qty': 5.0, 'product_uom': self.productA.uom_id.id, 'location_id': self.customer_location.id, 'location_dest_id': shelf1_location.id, 'picking_id': picking.id, 'state': 'draft'}
***************************************************************************************
browse
wizard_values.get('res_id')
***************************************************************************************
create
{**location_dict, **{'product_id': self.productA.id, 'quantity': 355.4}}
***************************************************************************************
create
{**location_dict, **{'quant_ids': [(6, 0, [quant.id])]}}
***************************************************************************************
create
{**location_dict, **{'name': 'XXX', 'product_id': self.productA.id, 'product_uom': self.productA.uom_id.id, 'product_uom_qty': 355.40000000000003}}
***************************************************************************************
create
{**location_dict, **{'picking_type_id': self.warehouse.in_type_id.id, 'move_lines': [(6, 0, [move.id])]}}
***************************************************************************************
create
{'location_id': self.stock_location.id, 'name': 'Shelf 1'}
***************************************************************************************
create
{'location_id': self.stock_location.id, 'name': 'Shelf 2'}
***************************************************************************************
create
{}
***************************************************************************************
create
{'picking_type_id': self.warehouse.in_type_id.id, 'location_id': self.stock_location.id, 'location_dest_id': self.stock_location.id, 'state': 'draft'}
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': shelf1.id, 'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'qty_done': 5.0, 'picking_id': picking.id, 'result_package_id': package.id}
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': shelf2.id, 'product_id': self.productA.id, 'product_uom_id': self.productA.uom_id.id, 'qty_done': 5.0, 'picking_id': picking.id, 'result_package_id': package.id}
***************************************************************************************
create
{'product_id': self.productA.id, 'location_in_id': self.stock_location.id, 'location_out_id': loc_shelf_A.id}
***************************************************************************************
create
{'product_id': self.productB.id, 'location_in_id': self.stock_location.id, 'location_out_id': loc_shelf_A.id}
***************************************************************************************
search
[('picking_type_id', '=', self.warehouse.int_type_id.id)]
***************************************************************************************
create
{'product_id': self.productA.id, 'location_in_id': self.stock_location.id, 'location_out_id': loc_shelf_A.id}
***************************************************************************************
create
{'product_id': self.productB.id, 'location_in_id': self.stock_location.id, 'location_out_id': loc_shelf_B.id}
***************************************************************************************
search
[('picking_type_id', '=', self.warehouse.int_type_id.id)]
***************************************************************************************
create
{'product_id': self.productA.id, 'name': '00001', 'company_id': self.warehouse.company_id.id}
***************************************************************************************
_update_available_quantity
self.productAself.stock_location20.0
***************************************************************************************
create
{'name': 'The ship move', 'product_id': self.productA.id, 'product_uom_qty': 5.0, 'product_uom': self.productA.uom_id.id, 'location_id': self.ship_location.id, 'location_dest_id': self.customer_location.id, 'warehouse_id': self.warehouse.id, 'picking_type_id': self.warehouse.out_type_id.id, 'procure_method': 'make_to_order', 'state': 'draft'}
***************************************************************************************
create
{'name': 'Src Pack'}
***************************************************************************************
create
{'name': 'Dest Pack1'}
***************************************************************************************
_update_available_quantity
self.productAself.stock_location100
***************************************************************************************
create
{'name': 'New Pack'}
***************************************************************************************
_update_available_quantity
self.productAself.stock_location20
***************************************************************************************
create
{'name': 'Src Pack'}
***************************************************************************************
_update_available_quantity
self.productAself.stock_location100
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'picking_type_id': self.warehouse.out_type_id.id}
***************************************************************************************
search
[('backorder_id', '=', picking.id)]
***************************************************************************************
create
{'name': 'Src Pack'}
***************************************************************************************
_update_available_quantity
self.productAself.stock_location100
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'picking_type_id': self.warehouse.out_type_id.id}
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'Deco Addict', 'email': 'deco.addict82@example.com'}
***************************************************************************************
create
{'name': 'Ready Mat', 'email': 'ready.mat28@example.com'}
***************************************************************************************
create
{'name': 'Negative product', 'type': 'product', 'categ_id': self.ref('product.product_category_1'), 'list_price': 100.0, 'standard_price': 70.0, 'seller_ids': [(0, 0, {'delay': 1, 'name': res_partner_2.id, 'min_qty': 2.0})], 'uom_id': self.ref('uom.product_uom_unit'), 'uom_po_id': self.ref('uom.product_uom_unit')}
***************************************************************************************
create
vals
***************************************************************************************
create
{'name': 'Lot neg', 'product_id': product_neg.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'Palneg 1'}
***************************************************************************************
create
{'name': 'Palneg 2'}
***************************************************************************************
create
{'name': 'Palneg 3'}
***************************************************************************************
create
{'product_id': product_neg.id, 'product_uom_id': self.ref('uom.product_uom_unit'), 'picking_id': pick_neg.id, 'lot_id': lot_a.id, 'qty_done': 120, 'result_package_id': package2.id, 'location_id': self.ref('stock.stock_location_suppliers'), 'location_dest_id': self.ref('stock.stock_location_stock')}
***************************************************************************************
create
{'product_id': product_neg.id, 'product_uom_id': self.ref('uom.product_uom_unit'), 'picking_id': pick_neg.id, 'result_package_id': package3.id, 'qty_done': 60, 'location_id': self.ref('stock.stock_location_suppliers'), 'location_dest_id': self.ref('stock.stock_location_stock')}
***************************************************************************************
create
vals
***************************************************************************************
search
[('product_id', '=', product_neg.id), ('quantity', '!=', '0')]
***************************************************************************************
create
vals
***************************************************************************************
search
[('product_id', '=', product_neg.id), ('name', '=', 'Lot neg')]
***************************************************************************************
search
[('name', '=', 'Palneg 2')]
***************************************************************************************
search
[('product_id', '=', product_neg.id), ('quantity', '<', 0), ('location_id.id', '!=', self.ref('stock.stock_location_suppliers'))]
***************************************************************************************
create
{'name': 'Desk Combination', 'type': 'consu'}
***************************************************************************************
create
{'name': 'Partner'}
***************************************************************************************
create
{'name': 'Stock -> output route', 'product_selectable': True, 'rule_ids': [(0, 0, {'name': 'Stock -> output rule', 'action': 'pull', 'picking_type_id': self.ref('stock.picking_type_internal'), 'location_src_id': self.ref('stock.stock_location_stock'), 'location_id': self.ref('stock.stock_location_output')})]}
***************************************************************************************
create
vals
***************************************************************************************
search
[('product_id', '=', self.product.id), ('location_id', '=', self.ref('stock.stock_location_stock')), ('location_dest_id', '=', self.ref('stock.stock_location_output')), ('move_dest_ids', 'in', [pick_output.move_lines[0].id])]
***************************************************************************************
create
{'name': 'move_dest', 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'date_deadline': deadline, 'location_id': self.ref('stock.stock_location_output'), 'location_dest_id': self.ref('stock.stock_location_customers')}
***************************************************************************************
create
{'name': 'move_orig', 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'date_deadline': deadline, 'move_dest_ids': [(4, move_dest.id)], 'location_id': self.ref('stock.stock_location_stock'), 'location_dest_id': self.ref('stock.stock_location_output'), 'quantity_done': 10}
***************************************************************************************
search
[]
***************************************************************************************
search
[('route_id', '=', warehouse.reception_route_id.id), ('location_id', '=', warehouse.lot_stock_id.id), ('location_src_id', '=', self.env.ref('stock.stock_location_suppliers').id), ('action', '=', 'pull'), ('procure_method', '=', 'make_to_stock'), ('picking_type_id', '=', warehouse.in_type_id.id)]
***************************************************************************************
create
{'name': 'Delivery', 'date': datetime.today() + timedelta(days=5), 'product_id': self.product.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 12.0, 'location_id': warehouse.lot_stock_id.id, 'location_dest_id': self.ref('stock.stock_location_customers')}
***************************************************************************************
search
[('product_id', '=', self.product.id), ('location_id', '=', self.env.ref('stock.stock_location_suppliers').id)]
***************************************************************************************
create
{'name': 'Desk Combination', 'type': 'product'}
***************************************************************************************
create
{'name': 'Desk Decoration', 'type': 'product'}
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'ProductB RR', 'location_id': warehouse.lot_stock_id.id, 'product_id': self.productB.id, 'product_min_qty': 0, 'product_max_qty': 5}
***************************************************************************************
create
{'name': 'Rule Supplier', 'route_id': warehouse.reception_route_id.id, 'location_id': warehouse.lot_stock_id.id, 'location_src_id': self.env.ref('stock.stock_location_suppliers').id, 'action': 'pull', 'delay': 9.0, 'procure_method': 'make_to_stock', 'picking_type_id': warehouse.in_type_id.id}
***************************************************************************************
create
{'location_id': warehouse.lot_stock_id.id, 'location_dest_id': self.ref('stock.stock_location_customers'), 'picking_type_id': self.ref('stock.picking_type_out')}
***************************************************************************************
create
{'name': 'Delivery', 'product_id': self.productA.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 12.0, 'location_id': warehouse.lot_stock_id.id, 'location_dest_id': self.ref('stock.stock_location_customers'), 'picking_id': delivery_picking.id}
***************************************************************************************
search
[('product_id', '=', self.productA.id), ('location_id', '=', self.env.ref('stock.stock_location_suppliers').id)]
***************************************************************************************
search
[('product_id', '=', self.productB.id), ('location_id', '=', self.env.ref('stock.stock_location_suppliers').id)]
***************************************************************************************
create
{'name': 'Partner'}
***************************************************************************************
search
[('company_id', '=', self.env.user.id)]
***************************************************************************************
create
{'name': 'ProductA', 'type': 'product'}
***************************************************************************************
_update_available_quantity
product_awarehouse.lot_stock_id10.0
***************************************************************************************
create
{'name': 'Wave PG'}
***************************************************************************************
create
{'name': 'Wave for ProductA', 'product_selectable': True, 'sequence': 1, 'rule_ids': [(0, 0, {'name': 'Stock -> output rule', 'action': 'pull', 'picking_type_id': self.ref('stock.picking_type_internal'), 'location_src_id': self.ref('stock.stock_location_stock'), 'location_id': self.ref('stock.stock_location_output'), 'group_propagation_option': 'fixed', 'group_id': wave_pg.id})]}
***************************************************************************************
create
{'name': 'Wave 1'}
***************************************************************************************
run
[pg.Procurement(product_a, 2.0, product_a.uom_id, final_location, 'wave_part_1', 'wave_part_1', warehouse.company_id, {'warehouse_id': warehouse, 'group_id': pg})]
***************************************************************************************
search
[('group_id', '=', wave_pg.id)]
***************************************************************************************
search
[('group_id', '=', pg.id)]
***************************************************************************************
create
{'name': 'Wave 2'}
***************************************************************************************
run
[pg.Procurement(product_a, 3.0, product_a.uom_id, final_location, 'wave_part_2', 'wave_part_2', warehouse.company_id, {'warehouse_id': warehouse, 'group_id': pg})]
***************************************************************************************
search
[('group_id', '=', pg.id)]
***************************************************************************************
create
{'name': 'Test Warehouse', 'code': 'TWH'}
***************************************************************************************
create
{'location_id': stock_loc.id, 'usage': 'internal', 'name': 'shelf1'}
***************************************************************************************
create
{'location_id': stock_loc.id, 'usage': 'internal', 'name': 'shelf2'}
***************************************************************************************
create
[{'name': i, 'type': 'product'} for i in range(500)]
***************************************************************************************
create
[{'product_id': products[i // 2].id, 'location_id': i % 2 == 0 and shelf1.id or shelf2.id, 'warehouse_id': warehouse.id, 'product_min_qty': 5, 'product_max_qty': 10} for i in range(1000)]
***************************************************************************************
create
{'name': 'Rule Shelf1', 'route_id': warehouse.reception_route_id.id, 'location_id': shelf1.id, 'location_src_id': stock_loc.id, 'action': 'pull', 'procure_method': 'make_to_order', 'picking_type_id': warehouse.int_type_id.id}
***************************************************************************************
create
{'name': 'Rule Shelf2', 'route_id': warehouse.reception_route_id.id, 'location_id': shelf2.id, 'location_src_id': stock_loc.id, 'action': 'pull', 'procure_method': 'make_to_order', 'picking_type_id': warehouse.int_type_id.id}
***************************************************************************************
create
{'name': 'Rule Supplier', 'route_id': warehouse.reception_route_id.id, 'location_id': warehouse.wh_input_stock_loc_id.id, 'location_src_id': supplier_loc.id, 'action': 'pull', 'procure_method': 'make_to_stock', 'picking_type_id': warehouse.in_type_id.id}
***************************************************************************************
create
{'name': 'Wrong Route'}
***************************************************************************************
create
{'name': 'Trap Rule', 'route_id': wrong_route.id, 'location_id': warehouse.wh_input_stock_loc_id.id, 'location_src_id': supplier_loc.id, 'action': 'pull', 'procure_method': 'make_to_order', 'picking_type_id': warehouse.in_type_id.id}
***************************************************************************************
search
[('product_id', 'in', products.ids)]
***************************************************************************************
search
[('res_id', '=', products[index].product_tmpl_id.id), ('res_model_id', '=', self.env.ref('product.model_product_template').id)]
***************************************************************************************
create
{'product_id': self.product_3.id, 'location_id': self.env.ref('stock.stock_location_stock').id, 'quantity': 30.0}
***************************************************************************************
create
{'product_id': self.product_3.id, 'location_id': self.env.ref('stock.stock_location_stock').id, 'quantity': 10.0, 'owner_id': self.user_stock_user.partner_id.id}
***************************************************************************************
create
{'picking_type_id': self.ref('stock.picking_type_out'), 'location_id': self.env.ref('stock.stock_location_stock').id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id}
***************************************************************************************
create
{'name': 'a move', 'product_id': self.product_3.id, 'product_uom_qty': 3.0, 'product_uom': self.product_3.uom_id.id, 'picking_id': self.picking_out.id, 'location_id': self.env.ref('stock.stock_location_stock').id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id}
***************************************************************************************
create
{'picking_type_id': self.ref('stock.picking_type_out'), 'location_id': self.env.ref('stock.stock_location_stock').id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id}
***************************************************************************************
create
{'restrict_partner_id': self.user_stock_user.partner_id.id, 'name': 'another move', 'product_id': self.product_3.id, 'product_uom_qty': 5.0, 'product_uom': self.product_3.uom_id.id, 'picking_id': self.picking_out_2.id, 'location_id': self.env.ref('stock.stock_location_stock').id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id}
***************************************************************************************
create
{'name': 'Brand new product', 'type': 'product'}
***************************************************************************************
search
[('qty_available', '=', 0), ('id', 'in', product.ids)]
***************************************************************************************
browse
self.ref('stock.picking_type_out')
***************************************************************************************
_gather
product_idlocation_id
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 1.0}
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': -3.0}
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 10.0, 'reserved_quantity': 9.0}
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 1.0, 'reserved_quantity': 1.0}
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 10.0, 'reserved_quantity': 20.0}
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 5.0, 'reserved_quantity': 0.0}
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_lot.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'product_id': self.product_lot.id, 'location_id': self.stock_location.id, 'quantity': 10.0, 'reserved_quantity': 20.0, 'lot_id': lot1.id}
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 1.0}
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
search
[('location_id', '=', self.stock_location.id)]
***************************************************************************************
_get_available_quantity
productself.stock_location
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
create
{'name': 'Product B', 'type': 'product'}
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
_update_available_quantity
self.productstock_sub_location1.0
***************************************************************************************
_update_available_quantity
product2stock_sub_location1.0
***************************************************************************************
_update_available_quantity
product2self.stock_location1.0
***************************************************************************************
create
{'name': 'viewloc1', 'usage': 'view', 'location_id': self.stock_location.id}
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
_update_available_quantity
self.productself.stock_location-1.0
***************************************************************************************
_update_available_quantity
self.productself.stock_location-1.0
***************************************************************************************
search
[('location_id', '=', self.stock_location.id)]
***************************************************************************************
_get_available_quantity
productself.stock_location
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 1.0}
***************************************************************************************
_update_available_quantity
self.productself.stock_location-1.0
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 10.0}
***************************************************************************************
_update_reserved_quantity
self.productself.stock_location10.0
***************************************************************************************
_update_reserved_quantity
self.productself.stock_location10.0
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 5.0, 'reserved_quantity': 2.0}
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 10.0, 'reserved_quantity': 12.0}
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 8.0, 'reserved_quantity': 3.0}
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 35.0, 'reserved_quantity': 12.0}
***************************************************************************************
_update_reserved_quantity
self.productself.stock_location10.0
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 5.0, 'reserved_quantity': 7.0}
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 12.0, 'reserved_quantity': 10.0}
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 10.0, 'reserved_quantity': 10.0}
***************************************************************************************
_update_reserved_quantity
self.productself.stock_location-10.0
***************************************************************************************
_update_available_quantity
self.productself.stock_location2.0
***************************************************************************************
_update_reserved_quantity
self.productself.stock_location2.0
***************************************************************************************
_update_reserved_quantity
self.productself.stock_location-2.0
***************************************************************************************
_update_available_quantity
self.productself.stock_location-2.0
***************************************************************************************
_update_available_quantity
self.productpack_location2.0
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1.0
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1.0
***************************************************************************************
_update_reserved_quantity
self.product_serialself.stock_location1.0
***************************************************************************************
_update_reserved_quantity
self.product_serialself.stock_location-1.0
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 1.0}
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 1.0}
***************************************************************************************
_update_available_quantity
self.productself.stock_location1.0
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 1.0}
***************************************************************************************
_update_available_quantity
self.productself.stock_location2.0
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1.0
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1.0
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1.0
***************************************************************************************
_update_reserved_quantity
self.product_serialself.stock_location1
***************************************************************************************
search
[('method', '=', 'lifo')]
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1.0
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_location1.0
***************************************************************************************
_update_reserved_quantity
self.product_serialself.stock_location1
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_lot.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.product_lotself.stock_location1.0
***************************************************************************************
search
[('product_id', '=', self.product_lot.id), ('location_id', '=', self.stock_location.id)]
***************************************************************************************
_update_available_quantity
self.product_lotself.stock_location1.0
***************************************************************************************
search
[('product_id', '=', self.product_lot.id), ('location_id', '=', self.stock_location.id)]
***************************************************************************************
search
[('method', '=', 'closest')]
***************************************************************************************
create
{'name': 'lot1', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': self.product_serial.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_subloc21.0
***************************************************************************************
_update_available_quantity
self.product_serialself.stock_subloc31.0
***************************************************************************************
_update_reserved_quantity
self.product_serialself.stock_location1
***************************************************************************************
search
[('method', '=', 'closest')]
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_subloc2.id, 'quantity': 2.0}
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_subloc3.id, 'quantity': 3.0}
***************************************************************************************
_update_reserved_quantity
self.productself.stock_location3
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 1.0}
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 1.0}
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.product_lotself.stock_location
***************************************************************************************
_get_available_quantity
self.product_lotself.stock_location
***************************************************************************************
_get_available_quantity
self.product_consuself.stock_location
***************************************************************************************
_update_available_quantity
self.product_consuself.stock_location1.0
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 1.0}
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_update_available_quantity
productself.stock_location1.0
***************************************************************************************
_get_available_quantity
productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productstock_sub_location
***************************************************************************************
_get_available_quantity
product2self.stock_location
***************************************************************************************
_get_available_quantity
product2stock_sub_location
***************************************************************************************
_update_available_quantity
self.productlocation11.0
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 1.0}
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_update_available_quantity
productself.stock_location-1.0
***************************************************************************************
_get_available_quantity
productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 5.0}
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_update_reserved_quantity
self.productself.stock_location10.0
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_update_reserved_quantity
self.productself.stock_location1.0
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_update_reserved_quantity
self.productself.stock_location1.0
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_update_reserved_quantity
self.productself.stock_location-1.0
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productself.stock_location
***************************************************************************************
_get_available_quantity
self.productpack_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_update_reserved_quantity
self.product_serialself.stock_location-1.0
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
_get_available_quantity
self.product_serialself.stock_location
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.stock_location.id, 'quantity': 1.0}
***************************************************************************************
search
[('product_id', '=', self.product.id)]
***************************************************************************************
search
[('product_id', '=', self.product.id), ('quantity', '>', 0)]
***************************************************************************************
search
[('product_id', '=', self.product.id)]
***************************************************************************************
search
[('product_id', '=', self.product.id), ('quantity', '>', 0)]
***************************************************************************************
search
[('product_id', '=', self.product.id), ('quantity', '>', 0)]
***************************************************************************************
search
[('product_id', '=', self.product.id)]
***************************************************************************************
create
{'product_id': self.product.id, 'location_id': self.room1.id, 'quantity': 10}
***************************************************************************************
create
{'product_id': self.product2.id, 'location_id': self.room1.id, 'inventory_quantity': 20}
***************************************************************************************
search
[('product_id', '=', self.product.id)]
***************************************************************************************
search
[('product_id', '=', self.product.id)]
***************************************************************************************
create
{'name': 'serial1', 'product_id': self.product_tracked_sn.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'Mellohi', 'default_code': 'C418', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id, 'tracking': 'lot', 'barcode': 'scan_me'}
***************************************************************************************
create
{'name': 'Volume-Beta', 'product_id': product1.id, 'company_id': self.env.company.id}
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'New Stock', 'usage': 'internal', 'location_id': warehouse.view_location_id.id}
***************************************************************************************
read_group
[('product_id', '=', product.id), ('date', '=', date.today())]['product_qty'][]
***************************************************************************************
read_group
[('product_id', '=', product.id), ('date', '=', date.today() + timedelta(days=1))]['product_qty'][]
***************************************************************************************
read_group
[('product_id', '=', product.id), ('date', '=', date.today() - timedelta(days=1))]['product_qty'][]
***************************************************************************************
create
{'name': 'Move Out 20', 'date': datetime.now() + timedelta(days=1), 'location_id': stock.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id, 'product_id': product.id, 'product_uom': product.uom_id.id, 'product_uom_qty': 20.0}
***************************************************************************************
read_group
[('product_id', '=', product.id), ('date', '=', date.today() + timedelta(days=1))]['product_qty'][]
***************************************************************************************
read_group
[('product_id', '=', product.id), ('date', '=', date.today() + timedelta(days=1))]['product_qty', 'state']['state']
***************************************************************************************
read_group
[('product_id', '=', product.id), ('date', '=', date.today())]['product_qty', 'state']['state']
***************************************************************************************
create
{'name': 'Move In 10', 'date': datetime.now() + timedelta(days=1), 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': stock.id, 'product_id': product.id, 'product_uom': product.uom_id.id, 'product_uom_qty': 10.0}
***************************************************************************************
read_group
[('product_id', '=', product.id), ('date', '=', date.today() + timedelta(days=1))]['product_qty', 'state']['state']
***************************************************************************************
read_group
[('product_id', '=', product.id), ('date', '=', date.today())]['product_qty', 'state']['state']
***************************************************************************************
create
{'name': 'Move Out 30 - Day-1', 'date': datetime.now() - timedelta(days=1), 'location_id': stock.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id, 'product_id': product.id, 'product_uom': product.uom_id.id, 'product_uom_qty': 30.0}
***************************************************************************************
read_group
[('product_id', '=', product.id), ('date', '=', date.today())]['product_qty', 'state']['state']
***************************************************************************************
read_group
[('product_id', '=', product.id), ('date', '=', date.today() + timedelta(days=1))]['product_qty', 'state']['state']
***************************************************************************************
read_group
[('product_id', '=', product.id), ('date', '=', date.today() - timedelta(days=1))]['product_qty', 'state']['state']
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'Stock Under Warehouse', 'usage': 'internal', 'location_id': warehouse.view_location_id.id}
***************************************************************************************
create
{'name': 'Stock Outside Warehouse', 'usage': 'internal', 'location_id': self.env.ref('stock.stock_location_locations').id}
***************************************************************************************
create
{'name': 'Move outside warehouse', 'location_id': stock.id, 'location_dest_id': stock_without_wh.id, 'product_id': product.id, 'product_uom': product.uom_id.id, 'product_uom_qty': 10.0}
***************************************************************************************
read_group
[('product_id', '=', product.id), ('date', '=', date.today()), ('warehouse_id', '!=', False)]['product_qty', 'state']['state']
***************************************************************************************
read_group
[('product_id', '=', product.id), ('date', '=', date.today())]['product_qty', 'state']['state']
***************************************************************************************
create
{'name': 'Move outside warehouse', 'location_id': stock_without_wh.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id, 'product_id': product.id, 'product_uom': product.uom_id.id, 'product_uom_qty': 10.0}
***************************************************************************************
read_group
[('product_id', '=', product.id), ('date', '=', date.today())]['product_qty', 'state']['state']
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'Rack', 'usage': 'view', 'location_id': warehouse.view_location_id.id}
***************************************************************************************
create
{'name': 'Drawer', 'usage': 'internal', 'location_id': stock.id}
***************************************************************************************
read_group
[('product_id', '=', product.id), ('date', '=', date.today())]['product_qty'][]
***************************************************************************************
create
{'name': 'Move In 20', 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': stock.id, 'product_id': product.id, 'product_uom': product.uom_id.id, 'product_uom_qty': 20.0}
***************************************************************************************
read_group
[('product_id', '=', product.id), ('date', '=', date.today())]['product_qty'][]
***************************************************************************************
create
{'name': 'Move Out 10', 'location_id': stock.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id, 'product_id': product.id, 'product_uom': product.uom_id.id, 'product_uom_qty': 10.0}
***************************************************************************************
read_group
[('product_id', '=', product.id), ('date', '=', date.today())]['product_qty'][]
***************************************************************************************
create
{}
***************************************************************************************
create
{'name': 'Product RR', 'location_id': warehouse.lot_stock_id.id, 'product_id': self.product.id, 'product_min_qty': 5, 'product_max_qty': 10, 'group_id': pg1.id}
***************************************************************************************
search
[('product_id', '=', self.product.id)]
***************************************************************************************
create
{'name': 'Evil Twin Warehouse', 'code': 'ETWH'}
***************************************************************************************
search
[('code', '=', 'outgoing'), ('warehouse_id', '=', wh_2.id)]
***************************************************************************************
create
{'name': 'Aperture Science'}
***************************************************************************************
search
[('company_id', '=', company_2.id)]
***************************************************************************************
create
{'name': 'Color'}
***************************************************************************************
create
{'name': 'Old Fashioned Gray', 'attribute_id': product_attr_color.id}
***************************************************************************************
create
{'name': 'Electric Blue', 'attribute_id': product_attr_color.id}
***************************************************************************************
create
{'name': 'size'}
***************************************************************************************
create
{'name': 'Pocket', 'attribute_id': product_attr_size.id}
***************************************************************************************
create
{'name': 'XL', 'attribute_id': product_attr_size.id}
***************************************************************************************
create
{'name': 'Game Joy', 'type': 'product', 'attribute_line_ids': [(0, 0, {'attribute_id': product_attr_color.id, 'value_ids': [(6, 0, [color_gray.id, color_blue.id])]}), (0, 0, {'attribute_id': product_attr_size.id, 'value_ids': [(6, 0, [size_pocket.id, size_xl.id])]})]}
***************************************************************************************
create
{'name': 'Extra Product', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'name': 'Unpopular Product', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'name': 'Other Warehouse', 'code': 'OTHER'}
***************************************************************************************
search
[('code', '=', 'outgoing'), ('warehouse_id', '=', wh_2.id)]
***************************************************************************************
search
[('lot_stock_id', '=', self.stock_location.id)]
***************************************************************************************
create
{'name': 'The ship move', 'product_id': self.product.id, 'product_uom_qty': 5.0, 'product_uom': self.product.uom_id.id, 'location_id': warehouse.wh_output_stock_loc_id.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id, 'warehouse_id': warehouse.id, 'picking_type_id': warehouse.out_type_id.id, 'procure_method': 'make_to_order', 'state': 'draft'}
***************************************************************************************
create
{'name': 'Mellohi', 'default_code': 'C418', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id, 'tracking': 'lot', 'barcode': 'scan_me'}
***************************************************************************************
create
{'name': 'Base Warehouse', 'code': 'TESTWH'}
***************************************************************************************
search
[('category_id', '=', self.categ_unit.id), ('uom_type', '=', 'reference')]
***************************************************************************************
create
{'name': 'test_in_1', 'location_id': self.supplier_location.id, 'location_dest_id': self.wh.lot_stock_id.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100.0, 'state': 'done', 'date': fields.Datetime.now()}
***************************************************************************************
create
{'product_id': self.product1.id, 'location_id': self.wh.lot_stock_id.id, 'quantity': 100.0}
***************************************************************************************
create
{'name': 'test_out_1', 'location_id': self.wh.lot_stock_id.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 120.0, 'state': 'partially_available', 'date': fields.Datetime.add(fields.Datetime.now(), days=3), 'date_deadline': fields.Datetime.add(fields.Datetime.now(), days=3)}
***************************************************************************************
read_group
[('date', '>=', from_date), ('date', '<=', to_date), ('product_id', '=', self.product1.id)]['product_qty', 'date', 'product_id', 'state']['date:day', 'product_id', 'state']
***************************************************************************************
create
{'name': 'WH2', 'code': 'WH2'}
***************************************************************************************
create
{'name': 'test_transit_out_1', 'location_id': self.wh.lot_stock_id.id, 'location_dest_id': transit_loc.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 25.0, 'state': 'assigned', 'date': fields.Datetime.now(), 'date_deadline': fields.Datetime.now()}
***************************************************************************************
create
{'name': 'test_transit_in_1', 'location_id': transit_loc.id, 'location_dest_id': wh2.lot_stock_id.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 25.0, 'state': 'waiting', 'date': fields.Datetime.now(), 'date_deadline': fields.Datetime.now()}
***************************************************************************************
read_group
[('date', '>=', fields.Date.today()), ('date', '<=', fields.Date.today()), ('product_id', '=', self.product1.id)]['product_qty', 'date', 'product_id', 'state']['date:day', 'product_id', 'state']
***************************************************************************************
read_group
[('product_qty', '<', 0), ('date', '>=', from_date), ('date', '<=', to_date), ('product_id', '=', self.product1.id)]['product_qty', 'date', 'product_id', 'state']['date:day', 'product_id', 'state']
***************************************************************************************
create
{'name': 'Security razor', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'name': 'Rule Supplier', 'route_id': self.wh.reception_route_id.id, 'location_id': self.wh.lot_stock_id.id, 'location_src_id': self.env.ref('stock.stock_location_suppliers').id, 'action': 'pull', 'delay': 1.0, 'procure_method': 'make_to_stock', 'picking_type_id': self.wh.in_type_id.id}
***************************************************************************************
create
{'location_id': self.wh.lot_stock_id.id, 'location_dest_id': self.ref('stock.stock_location_customers'), 'picking_type_id': self.ref('stock.picking_type_out')}
***************************************************************************************
create
{'name': 'Delivery', 'product_id': self.product_replenished.id, 'product_uom_qty': 500.0, 'product_uom': self.uom_unit.id, 'location_id': self.wh.lot_stock_id.id, 'location_dest_id': self.ref('stock.stock_location_customers'), 'picking_id': delivery_picking.id}
***************************************************************************************
search
[('product_id', '=', self.product_replenished.id)]
***************************************************************************************
search
[('product_id', '=', self.product_replenished.id), ('location_dest_id', '=', self.wh.lot_stock_id.id)]
***************************************************************************************
search
[('product_id', '=', self.product_replenished.id)]
***************************************************************************************
_update_available_quantity
self.product1self.stock_location12
***************************************************************************************
create
{'name': 'test_uom_rounding', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_dozen.id, 'product_uom_qty': 1}
***************************************************************************************
_gather
self.product1self.stock_location
***************************************************************************************
create
{'name': 'Test Location', 'location_id': self.stock_location.id}
***************************************************************************************
_update_available_quantity
self.product1test_stock_location1
***************************************************************************************
create
{'name': 'test_location_archive', 'location_id': test_stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1}
***************************************************************************************
_gather
self.product1test_stock_location
***************************************************************************************
create
{'name': 'Shell Helix HX7 10W30'}
***************************************************************************************
_update_available_quantity
self.product1self.stock_location10
***************************************************************************************
create
{'name': 'test_uom_rounding', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10}
***************************************************************************************
create
{'name': 'Product 1', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id, 'tracking': 'lot'}
***************************************************************************************
create
{'name': 'Product 2', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id, 'tracking': 'lot'}
***************************************************************************************
create
{'name': 'lot1', 'product_id': product1.id, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': 'lot2', 'product_id': product2.id, 'company_id': self.env.company.id}
***************************************************************************************
_update_available_quantity
product1self.stock_location1
***************************************************************************************
_update_available_quantity
product2self.stock_location1
***************************************************************************************
create
{'name': 'test_lot_id_product_id_mix_move_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'test_lot_id_product_id_mix_move_2', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': product2.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
_gather
self.product1self.stock_location
***************************************************************************************
_gather
self.product1self.stock_location
***************************************************************************************
_gather
self.product1self.stock_location
***************************************************************************************
browse
self.picking_type_in
***************************************************************************************
browse
res_dict.get('res_id')
***************************************************************************************
_gather
self.productEself.env['stock.location'].browse(self.stock_location)
***************************************************************************************
search
[('product_id', '=', self.productE.id), ('quantity', '<', 0.0)]
***************************************************************************************
_gather
self.productEself.env['stock.location'].browse(self.stock_location)
***************************************************************************************
_gather
self.productEself.env['stock.location'].browse(self.stock_location)
***************************************************************************************
search
[('product_id', '=', self.productE.id), ('quantity', '<', 0.0)]
***************************************************************************************
_gather
self.productEself.env['stock.location'].browse(self.stock_location)
***************************************************************************************
create
{'location_id': self.stock_location, 'product_id': self.productA.id, 'inventory_quantity': 1}
***************************************************************************************
create
{'location_id': self.stock_location, 'product_id': self.productA.id, 'inventory_quantity': 1}
***************************************************************************************
search
[('company_id', '=', self.env.company.id)]
***************************************************************************************
search
[('company_id', '=', company_2.id)]
***************************************************************************************
create
{'name': 'The product from the other company that I absolutely want', 'type': 'product', 'route_ids': [(4, route_a.id), (4, route_b.id)]}
***************************************************************************************
create
{'product_id': product.id, 'product_tmpl_id': product.product_tmpl_id.id, 'product_uom_id': self.uom_unit.id, 'quantity': '5', 'warehouse_id': warehouse_company_1.id}
***************************************************************************************
search
[('product_id', '=', product.id), ('picking_type_id', '=', warehouse_company_1.in_type_id.id)]
***************************************************************************************
search
[('product_id', '=', product.id), ('picking_type_id', '=', warehouse_company_2.out_type_id.id)]
***************************************************************************************
search
[('company_id', '=', self.env.company.id)]
***************************************************************************************
search
[('company_id', '=', company_2.id)]
***************************************************************************************
create
{'name': 'Alaska Company'}
***************************************************************************************
search
[('company_id', '=', company_3.id)]
***************************************************************************************
create
{'name': 'The product from the other company that I absolutely want', 'type': 'product', 'route_ids': [(4, route_a.id), (4, route_b.id)]}
***************************************************************************************
create
{'name': 'Ice', 'type': 'product', 'route_ids': [(4, route_a.id), (4, route_c.id)]}
***************************************************************************************
search
[('product_id', '=', product_from_company_2.id), ('picking_type_id', '=', warehouse_company_1.in_type_id.id)]
***************************************************************************************
search
[('product_id', '=', product_from_company_2.id), ('picking_type_id', '=', warehouse_company_2.out_type_id.id)]
***************************************************************************************
search
[('product_id', '=', product_from_company_3.id), ('picking_type_id', '=', warehouse_company_1.in_type_id.id)]
***************************************************************************************
search
[('product_id', '=', product_from_company_3.id), ('picking_type_id', '=', warehouse_company_3.out_type_id.id)]
***************************************************************************************
create
{'name': 'Hubert Bonisseur de la Bath'}
***************************************************************************************
create
{'name': 'Un petit coup de polish', 'type': 'product'}
***************************************************************************************
search
[('company_id', '=', self.env.company.id)]
***************************************************************************************
create
{'name': 'Tracked by lot', 'type': 'product', 'tracking': 'lot'}
***************************************************************************************
create
{'name': 'Tracked by SN', 'type': 'product', 'tracking': 'serial'}
***************************************************************************************
browse
self.picking_type_in
***************************************************************************************
search
[('product_id', '=', product_lot.id)]
***************************************************************************************
browse
self.picking_type_in
***************************************************************************************
browse
self.picking_type_in
***************************************************************************************
browse
self.stock_location
***************************************************************************************
browse
self.stock_location
***************************************************************************************
browse
self.stock_location
***************************************************************************************
browse
self.stock_location
***************************************************************************************
browse
res_dict_for_back_order.get('res_id')
***************************************************************************************
browse
res_dict_for_back_order.get('res_id')
***************************************************************************************
browse
res_dict_for_back_order.get('res_id')
***************************************************************************************
browse
res_dict_for_back_order.get('res_id')
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
create
{'name': 'Shelf 2', 'barcode': 1201985, 'location_id': self.stock_location.id}
***************************************************************************************
create
{'name': 'Deco Addict'}
***************************************************************************************
search
[('is_inventory', '=', True), ('product_id', '=', self.product_1.id)]
***************************************************************************************
search
[('is_inventory', '=', True), ('product_id', '=', self.product_1.id)]
***************************************************************************************
_gather
self.product_1self.product_1.property_stock_inventory
***************************************************************************************
with_user
self.user_stock_manager
***************************************************************************************
search
[('id', 'not in', self.existing_quants.ids)]
***************************************************************************************
with_user
self.user_stock_user
***************************************************************************************
create
{'partner_id': self.partner.id, 'picking_type_id': self.env.ref('stock.picking_type_out').id, 'location_id': self.warehouse_1.lot_stock_id.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id}
***************************************************************************************
create
{'name': product.name, 'product_id': product.id, 'product_uom_qty': 5, 'product_uom': product.uom_id.id, 'picking_id': picking_out.id, 'location_id': self.warehouse_1.lot_stock_id.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id}
***************************************************************************************
create
{'name': 'Product A', 'type': 'product'}
***************************************************************************************
create
{'partner_id': self.partner.id, 'picking_type_id': self.env.ref('stock.picking_type_out').id, 'location_id': stock_location.id, 'location_dest_id': customer_location.id}
***************************************************************************************
create
{'name': productA.name, 'product_id': productA.id, 'product_uom_qty': 1, 'product_uom': productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': stock_location.id, 'location_dest_id': customer_location.id}
***************************************************************************************
search
[('product_id', '=', productA.id), ('location_id', '=', stock_location.id)]
***************************************************************************************
browse
stock_return_picking_action['res_id']
***************************************************************************************
search
[('product_id', '=', productA.id), ('location_id', '=', stock_location.id)]
***************************************************************************************
create
{'name': 'Product A', 'type': 'product'}
***************************************************************************************
create
{'partner_id': self.partner.id, 'picking_type_id': self.env.ref('stock.picking_type_out').id, 'location_id': stock_location.id, 'location_dest_id': customer_location.id}
***************************************************************************************
create
{'name': productA.name, 'product_id': productA.id, 'product_uom_qty': 1, 'product_uom': productA.uom_id.id, 'picking_id': picking_out.id, 'location_id': stock_location.id, 'location_dest_id': customer_location.id}
***************************************************************************************
search
[('product_id', '=', productA.id), ('location_id', '=', stock_location.id)]
***************************************************************************************
search
[('product_id', '=', productA.id), ('is_inventory', '=', True)]
***************************************************************************************
search
[('product_id', '=', productA.id), ('location_id', '=', stock_location.id)]
***************************************************************************************
search
[('product_id', '=', productA.id), ('location_id', '=', location_loss.id)]
***************************************************************************************
create
{'name': 'Stock.', 'code': 'STK'}
***************************************************************************************
create
{'name': 'Dist.', 'code': 'DIST', 'resupply_wh_ids': [(6, 0, [warehouse_stock.id])]}
***************************************************************************************
create
{'name': 'Shop', 'code': 'SHOP', 'resupply_wh_ids': [(6, 0, [warehouse_distribution.id])]}
***************************************************************************************
create
{'name': 'Fakir', 'type': 'product', 'route_ids': [(4, route_id) for route_id in [route_stock_to_dist.id, route_dist_to_shop.id, self.env.ref('stock.route_warehouse0_mto').id]]}
***************************************************************************************
create
{'partner_id': self.partner.id, 'picking_type_id': self.env.ref('stock.picking_type_out').id, 'location_id': warehouse_shop.lot_stock_id.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id}
***************************************************************************************
create
{'name': product.name, 'product_id': product.id, 'product_uom_qty': 1, 'product_uom': product.uom_id.id, 'picking_id': picking_out.id, 'location_id': warehouse_shop.lot_stock_id.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id, 'warehouse_id': warehouse_shop.id, 'procure_method': 'make_to_order'}
***************************************************************************************
search
[('product_id', '=', product.id)]
***************************************************************************************
create
{'name': 'Stock Wavre.', 'code': 'WV'}
***************************************************************************************
create
{'name': 'Shop Wavre', 'code': 'SHWV', 'resupply_wh_ids': [(6, 0, [warehouse_distribution_wavre.id])]}
***************************************************************************************
create
{'name': 'Stock Namur.', 'code': 'NM'}
***************************************************************************************
create
{'name': 'Shop Namur', 'code': 'SHNM', 'resupply_wh_ids': [(6, 0, [warehouse_distribution_namur.id])]}
***************************************************************************************
create
{'name': 'Fakir', 'type': 'product', 'route_ids': [(4, route_id) for route_id in [route_shop_namur.id, route_shop_wavre.id, self.env.ref('stock.route_warehouse0_mto').id]]}
***************************************************************************************
_update_available_quantity
productwarehouse_distribution_wavre.lot_stock_id1.0
***************************************************************************************
_update_available_quantity
productwarehouse_distribution_namur.lot_stock_id1.0
***************************************************************************************
create
{'partner_id': self.partner.id, 'picking_type_id': self.env.ref('stock.picking_type_out').id, 'location_id': warehouse_shop_namur.lot_stock_id.id, 'location_dest_id': customer_location.id}
***************************************************************************************
create
{'name': product.name, 'product_id': product.id, 'product_uom_qty': 1, 'product_uom': product.uom_id.id, 'picking_id': picking_out_namur.id, 'location_id': warehouse_shop_namur.lot_stock_id.id, 'location_dest_id': customer_location.id, 'warehouse_id': warehouse_shop_namur.id, 'procure_method': 'make_to_order'}
***************************************************************************************
search
[('location_id', '=', warehouse_distribution_namur.lot_stock_id.id)]
***************************************************************************************
search
[('location_dest_id', '=', warehouse_shop_namur.lot_stock_id.id)]
***************************************************************************************
create
{'partner_id': self.partner.id, 'picking_type_id': self.env.ref('stock.picking_type_out').id, 'location_id': warehouse_shop_wavre.lot_stock_id.id, 'location_dest_id': customer_location.id}
***************************************************************************************
create
{'name': product.name, 'product_id': product.id, 'product_uom_qty': 1, 'product_uom': product.uom_id.id, 'picking_id': picking_out_wavre.id, 'location_id': warehouse_shop_wavre.lot_stock_id.id, 'location_dest_id': customer_location.id, 'warehouse_id': warehouse_shop_wavre.id, 'procure_method': 'make_to_order'}
***************************************************************************************
search
[('location_id', '=', warehouse_distribution_wavre.lot_stock_id.id)]
***************************************************************************************
search
[('location_dest_id', '=', warehouse_shop_wavre.lot_stock_id.id)]
***************************************************************************************
create
{'name': 'Chicago partner'}
***************************************************************************************
create
{'name': 'My Company (Chicago)1', 'currency_id': self.ref('base.USD')}
***************************************************************************************
create
{'name': 'Chicago Warehouse2', 'company_id': company.id, 'code': 'Chic2', 'partner_id': partner.id}
***************************************************************************************
search
[]
***************************************************************************************
search
[('location_id', '=', warehouse_stock.lot_stock_id.id)]
***************************************************************************************
search
[('location_dest_id', '=', warehouse_distribution.lot_stock_id.id)]
***************************************************************************************
search
[('location_id', '=', warehouse_distribution.lot_stock_id.id)]
***************************************************************************************
search
[('location_dest_id', '=', warehouse_shop.lot_stock_id.id)]
***************************************************************************************
search
[('location_id', '=', warehouse_shop.lot_stock_id.id)]
***************************************************************************************
_gather
self.product_1self.warehouse_1.lot_stock_id
***************************************************************************************
_gather
self.product_1self.warehouse_1.lot_stock_id.location_id
***************************************************************************************
_gather
self.product_1self.warehouse_1.view_location_id
***************************************************************************************
_gather
self.product_1self.warehouse_1.wh_input_stock_loc_id
***************************************************************************************
_gather
self.product_1self.env.ref('stock.stock_location_stock')
***************************************************************************************
_gather
productcustomer_location
***************************************************************************************
_gather
productcustomer_location
***************************************************************************************
_gather
productwarehouse_distribution_namur.lot_stock_id
***************************************************************************************
_gather
productwarehouse_distribution_wavre.lot_stock_id
***************************************************************************************
create
{'name': 'Wise Unit', 'type': 'product', 'categ_id': self.ref('product.product_category_1'), 'uom_id': self.ref('uom.product_uom_unit'), 'uom_po_id': self.ref('uom.product_uom_unit')}
***************************************************************************************
create
{'name': 'Deco Addict'}
***************************************************************************************
search
[('company_id', '=', self.env.company.id)]
***************************************************************************************
create
{'name': 'Shelf 2', 'barcode': 1231985, 'location_id': warehouse.lot_stock_id.id}
***************************************************************************************
create
{'name': 'Shelf 1', 'barcode': 1231892, 'location_id': warehouse.lot_stock_id.id}
***************************************************************************************
create
{'name': 'Ready Mat'}
***************************************************************************************
create
vals
***************************************************************************************
create
{'name': 'Pack 1'}
***************************************************************************************
create
{'product_id': product_wise.id, 'product_uom_id': self.ref('uom.product_uom_unit'), 'picking_id': pick1_wise.id, 'qty_done': 6.0, 'location_id': self.ref('stock.stock_location_suppliers'), 'location_dest_id': self.shelf2.id}
***************************************************************************************
search
[('product_id', '=', product_wise.id)]
***************************************************************************************
create
vals
***************************************************************************************
create
vals
***************************************************************************************
search
[('product_id', '=', product_wise.id), ('quantity', '<', 0.0), ('location_id.id', '=', self.ref('stock.stock_location_stock'))]
***************************************************************************************
search
[('product_id', '=', product_wise.id), ('location_id', '!=', self.ref('stock.stock_location_suppliers'))]
***************************************************************************************
create
{}
***************************************************************************************
search
[('company_id', '=', company.id)]
***************************************************************************************
browse
self.env.context['default_product_id']
***************************************************************************************
browse
self.env.context['default_product_tmpl_id']
***************************************************************************************
with_context
clean_context(self.env.context)
***************************************************************************************
Procurement
self.product_idself.quantityuom_referenceself.warehouse_id.lot_stock_id_('Manual Replenishment')_('Manual Replenishment')self.warehouse_id.company_idself._prepare_run_values()
***************************************************************************************
browse
self.env.context.get('default_move_id')
***************************************************************************************
browse
pickings_to_validate
***************************************************************************************
browse
pickings_to_validate
***************************************************************************************
search
[('company_id', '=', self.env.company.id)]
***************************************************************************************
browse
pickings_to_validate
***************************************************************************************
browse
self.env.context['default_quant_ids']
***************************************************************************************
default_get
line_fields
***************************************************************************************
browse
self.env.context.get('active_id')
***************************************************************************************
read_group
AND([domain, [('location_dest_id.usage', '=', 'customer')]])['date', 'product_qty']['date:month']
***************************************************************************************
read_group
AND([domain, [('location_id.usage', '=', 'customer')]])['date', 'product_qty']['date:month']
***************************************************************************************
value_to_html
orderpoint.qty_forecast{'decimal_precision': 'Product Unit of Measure'}
***************************************************************************************
value_to_html
orderpoint.qty_to_order{'decimal_precision': 'Product Unit of Measure'}
***************************************************************************************
value_to_html
orderpoint.product_min_qty{'decimal_precision': 'Product Unit of Measure'}
***************************************************************************************
value_to_html
orderpoint.product_max_qty{'decimal_precision': 'Product Unit of Measure'}
***************************************************************************************
browse
self.env.context['default_product_id']
***************************************************************************************
search
[('company_id', '=', company.id)]
***************************************************************************************
browse
self.env.context['default_product_tmpl_id']
***************************************************************************************
search
[('product_id', '=', quantity.product_id.id), ('location_id.usage', '=', 'internal'), ('company_id', '=', quantity._get_reference_document_company_id().id)]
***************************************************************************************
search
[('company_id', '=', company.id), ('code', '=', 'STJ'), ('type', '=', 'general')]
***************************************************************************************
create
self._stock_account_prepare_anglo_saxon_out_lines_vals()
***************************************************************************************
read_group
domain['value:sum', 'quantity:sum']['product_id']
***************************************************************************************
search_read
domain['quantity_svl']
***************************************************************************************
browse
impacted_product_ids
***************************************************************************************
browse
vals.get('categ_id')
***************************************************************************************
check_access_rights
'read'
***************************************************************************************
check_access_rights
'read'
***************************************************************************************
browse
(x[0].id for x in as_svls)
***************************************************************************************
check_access_rights
'read'
***************************************************************************************
_for_xml_id
'account.action_move_journal_line'
***************************************************************************************
precision_get
'Product Price'
***************************************************************************************
browse
res
***************************************************************************************
browse
move_id
***************************************************************************************
_find_accounting_partner
self.picking_id.partner_id
***************************************************************************************
browse
analytic_move_to_recompute
***************************************************************************************
browse
analytic_move_to_recompute
***************************************************************************************
search
[('picking_id', '=', self.id)]
***************************************************************************************
_for_xml_id
'stock_account.stock_valuation_layer_action'
***************************************************************************************
search
domain + [('company_id', '=', company.id)]
***************************************************************************************
browse
wh_location_ids[0]
***************************************************************************************
search
[('product_id', '=', self.product1.id)]
***************************************************************************************
search
[('product_id', '=', self.product1.id)]
***************************************************************************************
search
[('product_id', '=', self.product1.id)]
***************************************************************************************
search
[('product_id', '=', self.product1.id)]
***************************************************************************************
search
[('product_id', '=', self.product1.id)]
***************************************************************************************
search
[('product_id', '=', self.product1.id)]
***************************************************************************************
with_context
context
***************************************************************************************
with_context
context
***************************************************************************************
with_context
context
***************************************************************************************
with_context
context
***************************************************************************************
with_context
context
***************************************************************************************
with_context
context
***************************************************************************************
search
[('account_id', '=', self.stock_input_account.id)]
***************************************************************************************
search
[('account_id', '=', self.stock_output_account.id)]
***************************************************************************************
search
[('account_id', '=', self.stock_valuation_account.id)]
***************************************************************************************
create
{'name': 'in %s units @ %s per unit' % (str(quantity), str(unit_cost)), 'product_id': product.id, 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': self.env.ref('stock.stock_location_stock').id, 'product_uom': self.env.ref('uom.product_uom_unit').id, 'product_uom_qty': quantity, 'price_unit': unit_cost, 'picking_type_id': self.env.ref('stock.picking_type_in').id}
***************************************************************************************
create
{'name': 'out %s units' % str(quantity), 'product_id': product.id, 'location_id': self.env.ref('stock.stock_location_stock').id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id, 'product_uom': self.env.ref('uom.product_uom_unit').id, 'product_uom_qty': quantity, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
create
{'name': 'IN 10 units @ 10.00 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0}
***************************************************************************************
create
{'name': 'IN 10 units @ 10.00 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0}
***************************************************************************************
create
{'name': 'IN 10 units @ 10.00 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 10.0}
***************************************************************************************
create
{'name': 'IN 10 units @ 8.00 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 8.0}
***************************************************************************************
create
{'name': 'Sale 3 units', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 3.0}
***************************************************************************************
create
{'name': 'Sale 9 units', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 9.0}
***************************************************************************************
create
{'name': 'Sale 20 units', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 20.0}
***************************************************************************************
create
{'name': 'IN 10 units @ 12.00 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 12.0}
***************************************************************************************
create
{'name': 'IN 4 units @ 15.00 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 4.0, 'price_unit': 15.0}
***************************************************************************************
create
{'name': '68 units @ 15.00 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 68.0, 'price_unit': 15}
***************************************************************************************
create
{'name': '140 units @ 15.50 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 140.0, 'price_unit': 15.5}
***************************************************************************************
create
{'name': 'Sale 94 units @ 19.00 per unit', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 94.0}
***************************************************************************************
create
{'name': '140 units @ 15.50 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 40.0, 'price_unit': 16}
***************************************************************************************
create
{'name': 'Purchase 78 units @ 16.50 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 78.0, 'price_unit': 16.5}
***************************************************************************************
create
{'name': 'Sale 116 units @ 19.50 per unit', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 116.0}
***************************************************************************************
create
{'name': 'Sale 62 units @ 21 per unit', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 62.0}
***************************************************************************************
search
[('company_id', '=', self.env.company.id), ('usage', '=', 'transit'), ('active', '=', False)]
***************************************************************************************
create
{'name': 'Send 10 units in transit', 'location_id': self.stock_location.id, 'location_dest_id': transit_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0}
***************************************************************************************
create
{'name': 'Sale 10 units @ 16.5 per unit', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0}
***************************************************************************************
create
{'name': 'in 10 @ 100', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 100}
***************************************************************************************
create
{'name': 'in 10 @ 80', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 80}
***************************************************************************************
create
{'name': 'out 15', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 15.0}
***************************************************************************************
create
{'name': 'in 5 @ 60', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 5.0, 'price_unit': 60}
***************************************************************************************
create
{'name': 'out 7', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 7.0}
***************************************************************************************
create
{'name': 'in 8 @ 10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 8.0, 'price_unit': 10}
***************************************************************************************
create
{'name': 'in 4 @ 16', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 4.0, 'price_unit': 16}
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'partner_id': self.env['res.partner'].search([], limit=1).id, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
create
{'name': 'out 10', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'picking_id': out_pick.id}
***************************************************************************************
create
{'name': 'in 2 @ 6', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2.0, 'price_unit': 6}
***************************************************************************************
browse
stock_return_picking_action['res_id']
***************************************************************************************
create
{'name': '50 out', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 50.0, 'price_unit': 0, 'move_line_ids': [(0, 0, {'product_id': self.product1.id, 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_uom_id': self.uom_unit.id, 'qty_done': 50.0})]}
***************************************************************************************
create
{'name': '40 in @15', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 40.0, 'price_unit': 15.0, 'move_line_ids': [(0, 0, {'product_id': self.product1.id, 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_uom_id': self.uom_unit.id, 'qty_done': 40.0})]}
***************************************************************************************
create
{'name': '20 in @25', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 20.0, 'price_unit': 25.0, 'move_line_ids': [(0, 0, {'product_id': self.product1.id, 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_uom_id': self.uom_unit.id, 'qty_done': 20.0})]}
***************************************************************************************
create
{'name': '10 in', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 10, 'move_line_ids': [(0, 0, {'product_id': self.product1.id, 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_uom_id': self.uom_unit.id, 'qty_done': 10.0})]}
***************************************************************************************
create
{'name': '12 out (2 negative)', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 12.0, 'price_unit': 0, 'move_line_ids': [(0, 0, {'product_id': self.product1.id, 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_uom_id': self.uom_unit.id, 'qty_done': 12.0})]}
***************************************************************************************
create
{'name': '10 in', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2.0, 'price_unit': 10, 'move_line_ids': [(0, 0, {'product_id': self.product1.id, 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_uom_id': self.uom_unit.id, 'qty_done': 2.0})]}
***************************************************************************************
create
{'name': '10 in', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 10, 'move_line_ids': [(0, 0, {'product_id': self.product1.id, 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_uom_id': self.uom_unit.id, 'qty_done': 10.0})]}
***************************************************************************************
create
{'name': '10 out', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'move_line_ids': [(0, 0, {'product_id': self.product1.id, 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_uom_id': self.uom_unit.id, 'qty_done': 10.0})]}
***************************************************************************************
create
{'name': '10 in', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 21.0, 'price_unit': 0, 'move_line_ids': [(0, 0, {'product_id': self.product1.id, 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_uom_id': self.uom_unit.id, 'qty_done': 21.0})]}
***************************************************************************************
create
{'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'partner_id': self.partner.id, 'picking_type_id': self.env.ref('stock.picking_type_in').id}
***************************************************************************************
create
{'picking_id': receipt.id, 'name': '10 in', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 10, 'move_line_ids': [(0, 0, {'product_id': self.product1.id, 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_uom_id': self.uom_unit.id, 'qty_done': 10.0})]}
***************************************************************************************
create
{'picking_id': receipt.id, 'name': '10 in', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product2.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'move_line_ids': [(0, 0, {'product_id': self.product2.id, 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_uom_id': self.uom_unit.id, 'qty_done': 10.0})]}
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'partner_id': self.partner.id, 'picking_type_id': self.env.ref('stock.picking_type_out').id}
***************************************************************************************
create
{'picking_id': delivery.id, 'name': '11 out', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product2.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 11.0, 'move_line_ids': [(0, 0, {'product_id': self.product2.id, 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_uom_id': self.uom_unit.id, 'qty_done': 11.0})]}
***************************************************************************************
create
{'name': '10 in', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 10, 'move_line_ids': [(0, 0, {'product_id': self.product1.id, 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_uom_id': self.uom_unit.id, 'qty_done': 10.0})]}
***************************************************************************************
create
{'move_id': move1.id, 'product_id': move1.product_id.id, 'qty_done': 10, 'product_uom_id': move1.product_uom.id, 'location_id': move1.location_id.id, 'location_dest_id': move1.location_dest_id.id}
***************************************************************************************
create
{'name': 'receive 10@10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 10, 'move_line_ids': [(0, 0, {'product_id': self.product1.id, 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_uom_id': self.uom_unit.id, 'qty_done': 10.0})]}
***************************************************************************************
create
{'name': 'receive 10@12', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 12, 'move_line_ids': [(0, 0, {'product_id': self.product1.id, 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_uom_id': self.uom_unit.id, 'qty_done': 10.0})]}
***************************************************************************************
create
{'name': '12 out (2 negative)', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 8.0, 'price_unit': 0, 'move_line_ids': [(0, 0, {'product_id': self.product1.id, 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_uom_id': self.uom_unit.id, 'qty_done': 8.0})]}
***************************************************************************************
create
{'name': 'receive 10@10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 10, 'move_line_ids': [(0, 0, {'product_id': self.product1.id, 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_uom_id': self.uom_unit.id, 'qty_done': 10.0})]}
***************************************************************************************
create
{'name': '12 out (2 negative)', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 0, 'move_line_ids': [(0, 0, {'product_id': self.product1.id, 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_uom_id': self.uom_unit.id, 'qty_done': 10.0})]}
***************************************************************************************
create
{'name': 'product1', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'name': 'product1', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'name': 'product1', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'name': '60 units @ 15.00 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 60.0, 'price_unit': 15}
***************************************************************************************
create
{'name': '140 units @ 15.50 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 140.0, 'price_unit': 15.5}
***************************************************************************************
create
{'name': 'Sale 190 units @ 19.00 per unit', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 190.0}
***************************************************************************************
create
{'name': '70 units @ $16.00 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 70.0, 'price_unit': 16.0}
***************************************************************************************
create
{'name': '30 units @ $19.50 per unit', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 30.0}
***************************************************************************************
create
{'name': '10 units to an owner', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 99}
***************************************************************************************
create
{'name': '50 units @ $19.50 per unit', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 50.0}
***************************************************************************************
create
{'name': 'Receive 10 units at 10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 10}
***************************************************************************************
create
{'name': 'Receive 10 units at 15', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 15}
***************************************************************************************
create
{'name': 'Deliver 15 units', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 15.0}
***************************************************************************************
create
{'name': 'Deliver 10 units', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0}
***************************************************************************************
create
{'name': 'Receive  10 units at 10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 10}
***************************************************************************************
create
{'name': 'Receive 10 units at 15', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 15}
***************************************************************************************
create
{'name': 'Deliver 15 units', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 15.0}
***************************************************************************************
create
{'name': 'Deliver 10 units', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0}
***************************************************************************************
create
{'name': 'Receive 1 unit at 10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0, 'price_unit': 10}
***************************************************************************************
create
{'name': 'Receive 3 units at 5', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 3.0, 'price_unit': 5}
***************************************************************************************
create
{'name': 'Receive 1 unit at 10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0, 'price_unit': 10}
***************************************************************************************
create
{'name': 'Receive 1 unit at 10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0, 'price_unit': 10}
***************************************************************************************
create
{'name': 'Receive 1 units at 5', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0, 'price_unit': 5}
***************************************************************************************
create
{'name': 'IN 5@10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 5, 'price_unit': 10}
***************************************************************************************
create
{'name': 'IN 10@20', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10, 'price_unit': 20}
***************************************************************************************
create
{'name': 'IN 1@10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1, 'price_unit': 10}
***************************************************************************************
create
{'name': 'IN 1@20', 'location_id': self.supplier_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1, 'price_unit': 20}
***************************************************************************************
create
{'name': 'IN 1@20', 'location_id': self.customer_location.id, 'location_dest_id': self.supplier_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1, 'price_unit': 20}
***************************************************************************************
create
{'name': 'IN 5@10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10, 'price_unit': 10}
***************************************************************************************
create
{'name': 'Deliver 10 units', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 15.0}
***************************************************************************************
create
{'name': 'IN 5@10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10, 'price_unit': 10}
***************************************************************************************
create
{'name': 'Deliver 10 units', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 15.0}
***************************************************************************************
create
{'name': 'Receive 10 units at 10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 10}
***************************************************************************************
create
{'name': 'send 20 units', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 20.0}
***************************************************************************************
create
{'name': 'test_average_negative_1', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0}
***************************************************************************************
create
{'name': '68 units @ 15.00 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 10}
***************************************************************************************
create
{'name': 'Sale 94 units @ 19.00 per unit', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0}
***************************************************************************************
create
{'name': 'Sale 94 units @ 19.00 per unit', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0}
***************************************************************************************
create
{'name': '68 units @ 15.00 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 10}
***************************************************************************************
create
{'name': '10 units @ 10.00 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 10}
***************************************************************************************
create
{'name': '10 units @ 20.00 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 20}
***************************************************************************************
create
{'name': 'Sale 5 units', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 5.0}
***************************************************************************************
create
{'name': 'Sale 5 units', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 30.0}
***************************************************************************************
create
{'name': '20 units @ 20.00 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 20.0, 'price_unit': 20}
***************************************************************************************
create
{'name': 'Sale 5 units', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 5.0}
***************************************************************************************
create
{'name': '10 units @ 10.00 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 10}
***************************************************************************************
create
{'name': 'Receive 1 unit at 10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0, 'price_unit': 10}
***************************************************************************************
create
{'name': 'Receive 1 unit at 10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0, 'price_unit': 10}
***************************************************************************************
create
{'name': 'Receive 1 unit at 10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0, 'price_unit': 10}
***************************************************************************************
create
{'name': '10 units @ 10.00 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 10}
***************************************************************************************
create
{'name': '10 units @ 10.00 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 15}
***************************************************************************************
create
{'name': 'Sale 5 units', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': '10 units @ 10.00 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 10}
***************************************************************************************
create
{'name': '10 units @ 10.00 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0, 'price_unit': 15}
***************************************************************************************
create
{'name': 'Sale 5 units', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 1.0}
***************************************************************************************
create
{'name': 'view', 'usage': 'view'}
***************************************************************************************
create
{'name': 'internal', 'usage': 'internal', 'location_id': view_location.id}
***************************************************************************************
create
{'name': 'scrap', 'usage': 'inventory', 'location_id': view_location.id, 'scrap_location': True}
***************************************************************************************
create
{'name': '2 units @ 10.00 per unit', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2.0, 'price_unit': 10}
***************************************************************************************
create
{'name': '2 units out', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2.0}
***************************************************************************************
create
{'name': 'scrap', 'usage': 'inventory', 'location_id': self.stock_location.id, 'scrap_location': True}
***************************************************************************************
create
{'name': 'internal but out move', 'location_id': self.stock_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2.0}
***************************************************************************************
create
{'name': 'customer', 'usage': 'customer', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'name': 'supplier', 'usage': 'supplier', 'location_id': self.stock_location.id}
***************************************************************************************
create
{'name': 'internal but in and out move', 'location_id': self.stock_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2.0}
***************************************************************************************
create
{'name': 'in 10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10}
***************************************************************************************
create
{'name': 'in 10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 20}
***************************************************************************************
create
{'name': 'out 10', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 15}
***************************************************************************************
create
{'name': 'out 10', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 20}
***************************************************************************************
create
{'name': 'in 10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100}
***************************************************************************************
create
{'name': 'in 10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10, 'price_unit': 10}
***************************************************************************************
create
{'name': 'in 10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10, 'price_unit': 12}
***************************************************************************************
create
{'name': 'out 10', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 15}
***************************************************************************************
create
{'name': 'out 10', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 20}
***************************************************************************************
create
{'name': 'in 10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 100, 'price_unit': 15}
***************************************************************************************
create
{'name': 'in 10@10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10, 'price_unit': 10}
***************************************************************************************
create
{'name': 'in 10@15', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10, 'price_unit': 15}
***************************************************************************************
create
{'name': 'out 30', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 30}
***************************************************************************************
create
{'name': 'in 10@20', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10, 'price_unit': 20}
***************************************************************************************
create
{'name': 'in 10@10', 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10, 'price_unit': 10}
***************************************************************************************
create
{'name': 'Adjustment of 12 units', 'location_id': inventory_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 12.0}
***************************************************************************************
create
{'name': 'Sell 12 units', 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 12.0}
***************************************************************************************
create
{'name': 'Adjustment of 10 units', 'location_id': inventory_location.id, 'location_dest_id': self.stock_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 10.0}
***************************************************************************************
create
{'name': 'Sell 5 units', 'location_id': self.stock_location.id, 'location_dest_id': inventory_location.id, 'product_id': self.product1.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 5.0}
***************************************************************************************
create
{'name': 'UNF', 'symbol': 'U', 'rounding': 0.01, 'currency_unit_label': 'Unifranc', 'rate': 1, 'position': 'before'}
***************************************************************************************
create
{'name': 'DBL', 'symbol': 'DD', 'rounding': 0.01, 'currency_unit_label': 'Doublard', 'rate': 2}
***************************************************************************************
search
[('company_id', '=', company_1.id)]
***************************************************************************************
search
[('company_id', '=', company_2.id)]
***************************************************************************************
_get_available_quantity
self.product1self.stock_location
***************************************************************************************
with_user
self.inventory_user
***************************************************************************************
with_user
self.inventory_user
***************************************************************************************
with_company
company_1
***************************************************************************************
with_company
company_2
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'in %s units @ %s per unit' % (str(quantity), str(unit_cost)), 'product_id': product.id, 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': quantity, 'price_unit': unit_cost, 'picking_type_id': self.picking_type_in.id}
***************************************************************************************
create
{'name': 'out %s units' % str(quantity), 'product_id': product.id, 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': quantity, 'picking_type_id': self.picking_type_out.id}
***************************************************************************************
create
{'name': 'dropship %s units' % str(quantity), 'product_id': product.id, 'location_id': self.supplier_location.id, 'location_dest_id': self.customer_location.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': quantity, 'picking_type_id': self.picking_type_out.id}
***************************************************************************************
browse
stock_return_picking_action['res_id']
***************************************************************************************
create
{'move_id': move1.id, 'product_id': move1.product_id.id, 'qty_done': 5, 'product_uom_id': move1.product_uom.id, 'location_id': move1.location_id.id, 'location_dest_id': move1.location_dest_id.id}
***************************************************************************************
create
{'move_id': move1.id, 'product_id': move1.product_id.id, 'qty_done': 10, 'product_uom_id': move1.product_uom.id, 'location_id': move1.location_id.id, 'location_dest_id': move1.location_dest_id.id}
***************************************************************************************
create
{'name': 'p1', 'type': 'product'}
***************************************************************************************
create
{'name': 'p2', 'type': 'product'}
***************************************************************************************
create
{'picking_type_id': self.picking_type_in.id, 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id}
***************************************************************************************
create
{'move_id': move1.id, 'product_id': move1.product_id.id, 'qty_done': 5, 'product_uom_id': move1.product_uom.id, 'location_id': move1.location_id.id, 'location_dest_id': move1.location_dest_id.id}
***************************************************************************************
create
{'product_id': move1.product_id.id, 'qty_done': 5, 'product_uom_id': move1.product_uom.id, 'location_id': move1.location_id.id, 'location_dest_id': move1.location_dest_id.id, 'state': 'done', 'picking_id': move1.picking_id.id}
***************************************************************************************
create
{'move_id': move2.id, 'product_id': move2.product_id.id, 'qty_done': 5, 'product_uom_id': move2.product_uom.id, 'location_id': move2.location_id.id, 'location_dest_id': move2.location_dest_id.id}
***************************************************************************************
create
{'name': 'fifo'}
***************************************************************************************
create
{'name': 'standard auto'}
***************************************************************************************
create
{'name': 'fifo'}
***************************************************************************************
create
{'picking_type_id': in_move.picking_type_id.id, 'location_id': in_move.location_id.id, 'location_dest_id': in_move.location_dest_id.id}
***************************************************************************************
create
{'picking_type_id': out_move.picking_type_id.id, 'location_id': out_move.location_id.id, 'location_dest_id': out_move.location_dest_id.id}
***************************************************************************************
create
{'move_id': out_move.id, 'product_id': out_move.product_id.id, 'product_uom_id': out_move.product_uom.id, 'location_id': out_move.location_id.id, 'location_dest_id': out_move.location_dest_id.id}
***************************************************************************************
create
{'name': 'in %s units @ %s per unit' % (2, str(10)), 'product_id': product.id, 'location_id': self.supplier_location.id, 'location_dest_id': self.stock_location.id, 'product_uom': self.uom_unit.id, 'product_uom_qty': 2, 'price_unit': 10, 'picking_type_id': self.picking_type_in.id, 'picking_id': picking.id}
***************************************************************************************
with_context
res_dict.get('context')
***************************************************************************************
browse
[new_picking_id]
***************************************************************************************
_for_xml_id
'stock_account.stock_valuation_layer_action'
***************************************************************************************
search
[('product_id', '=', product_id.id), ('remaining_qty', '>', 0), ('company_id', '=', self.company_id.id)]
***************************************************************************************
create
revaluation_svl_vals
***************************************************************************************
create
move_vals
***************************************************************************************
browse
res['product_id']
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
create
dropship_vals
***************************************************************************************
search
[('code', '=', 'stock.dropshipping'), ('company_id', '=', company.id)]
***************************************************************************************
create
dropship_vals
***************************************************************************************
search
[('company_id', '=', company.id), ('default_location_src_id.usage', '=', 'supplier'), ('default_location_dest_id.usage', '=', 'customer')]
***************************************************************************************
create
dropship_vals
***************************************************************************************
search
[('code', '=', 'stock.dropshipping')]
***************************************************************************************
search
[('default_location_src_id.usage', '=', 'supplier'), ('default_location_dest_id.usage', '=', 'customer')]
***************************************************************************************
search
[('route_id', '=', dropship_route.id)]
***************************************************************************************
create
{'name': 'Crossdocking supplier'}
***************************************************************************************
create
{'name': 'WareHouse PickPackShip', 'code': 'whpps', 'reception_steps': 'two_steps', 'delivery_steps': 'pick_pack_ship'}
***************************************************************************************
create
{'name': 'My Test Partner'}
***************************************************************************************
search
[('partner_id', '=', supplier_crossdock.id), ('state', '=', 'draft')]
***************************************************************************************
create
{'name': 'Large Desk'}
***************************************************************************************
create
{'name': 'vendor1'}
***************************************************************************************
create
{'name': vendor1.id, 'price': 8}
***************************************************************************************
create
{'name': 'customer1'}
***************************************************************************************
create
{'partner_id': cust.id, 'partner_invoice_id': cust.id, 'partner_shipping_id': cust.id, 'order_line': [(0, 0, {'name': prod.name, 'product_id': prod.id, 'product_uom_qty': 1.0, 'product_uom': prod.uom_id.id, 'price_unit': 12})], 'pricelist_id': self.env.ref('product.list0').id, 'picking_policy': 'direct'}
***************************************************************************************
search
[('group_id', '=', so.procurement_group_id.id)]
***************************************************************************************
create
{'order_id': so.id, 'name': prod.name, 'product_id': prod.id, 'product_uom_qty': 3.0, 'product_uom': prod.uom_id.id, 'price_unit': 12}
***************************************************************************************
create
{'name': 'Vendor of Dropshipping test'}
***************************************************************************************
create
{'name': 'Pen drive', 'type': 'product', 'categ_id': self.env.ref('product.product_category_1').id, 'lst_price': 100.0, 'standard_price': 0.0, 'uom_id': self.env.ref('uom.product_uom_unit').id, 'uom_po_id': self.env.ref('uom.product_uom_unit').id, 'seller_ids': [(0, 0, {'delay': 1, 'name': supplier_dropship.id, 'min_qty': 2.0})]}
***************************************************************************************
create
{'name': 'My Test Partner'}
***************************************************************************************
search
[('partner_id', '=', supplier_dropship.id)]
***************************************************************************************
search
[('location_dest_id', '=', self.env.ref('stock.stock_location_customers').id), ('product_id', '=', drop_shop_product.id)]
***************************************************************************************
create
{'name': 'Lifo Category', 'removal_strategy_id': self.env.ref('stock.removal_lifo').id, 'property_valuation': 'real_time', 'property_cost_method': 'fifo'}
***************************************************************************************
create
{'name': 'My Test Partner'}
***************************************************************************************
create
{'name': 'My Test Partner'}
***************************************************************************************
create
{'name': 'My Test Partner Address', 'parent_id': res_partner_2.id}
***************************************************************************************
search
[('sale_line_id', '=', sale_order_route_dropship01.order_line.ids[0])]
***************************************************************************************
create
{'name': 'vendor1'}
***************************************************************************************
create
{'name': vendor1.id, 'price': 8}
***************************************************************************************
create
{'name': 'customer1'}
***************************************************************************************
create
{'partner_id': customer1.id, 'partner_invoice_id': customer1.id, 'partner_shipping_id': customer1.id, 'order_line': [(0, 0, {'name': self.product1.name, 'product_id': self.product1.id, 'product_uom_qty': 1, 'product_uom': self.product1.uom_id.id, 'price_unit': 12, 'tax_id': [(6, 0, [])]})], 'pricelist_id': self.env.ref('product.list0').id, 'picking_policy': 'direct'}
***************************************************************************************
search
[('group_id', '=', self.sale_order1.procurement_group_id.id)]
***************************************************************************************
browse
stock_return_picking_action['res_id']
***************************************************************************************
with_context
wizard['context']
***************************************************************************************
create
{'vendor_bill_id': self.id, 'cost_lines': [(0, 0, {'product_id': l.product_id.id, 'name': l.product_id.name, 'account_id': l.product_id.product_tmpl_id.get_product_accounts()['stock_input'].id, 'price_unit': l.currency_id._convert(l.price_subtotal, l.company_currency_id, l.company_id, l.move_id.date), 'split_method': l.product_id.split_method_landed_cost or 'equal'}) for l in landed_costs_lines]}
***************************************************************************************
_for_xml_id
'stock_landed_costs.action_stock_landed_cost'
***************************************************************************************
_for_xml_id
'stock_landed_costs.action_stock_landed_cost'
***************************************************************************************
search_count
[('product_id', 'in', product.product_variant_ids.ids), ('is_landed_costs_line', '=', True)]
***************************************************************************************
_for_xml_id
'stock_account.stock_valuation_layer_action'
***************************************************************************************
_get
'property_stock_journal''product.category'
***************************************************************************************
next_by_code
'stock.landed.cost'
***************************************************************************************
browse
(p.id for p in cost_to_add_byproduct.keys())
***************************************************************************************
create
{'value': cost_to_add, 'unit_cost': 0, 'quantity': 0, 'remaining_qty': 0, 'stock_valuation_layer_id': linked_layer.id, 'description': cost.name, 'stock_move_id': line.move_id.id, 'product_id': line.move_id.product_id.id, 'stock_landed_cost_id': cost.id, 'company_id': cost.company_id.id}
***************************************************************************************
create
val_line_values
***************************************************************************************
create
{'name': 'LC product 1', 'weight': 10, 'volume': 1, 'categ_id': self.stock_account_product_categ.id, 'type': 'product'}
***************************************************************************************
create
{'name': 'LC product 2', 'weight': 20, 'volume': 1.5, 'categ_id': self.stock_account_product_categ.id, 'type': 'product'}
***************************************************************************************
default_get
list(self.env['stock.picking'].fields_get())
***************************************************************************************
new
vals
***************************************************************************************
create
vals
***************************************************************************************
new
vals
***************************************************************************************
create
vals
***************************************************************************************
default_get
list(self.env['stock.landed.cost'].fields_get())
***************************************************************************************
create
{'name': 'Virtual Home Staging', 'categ_id': self.stock_account_product_categ.id}
***************************************************************************************
new
default_vals
***************************************************************************************
create
vals
***************************************************************************************
create
{'name': 'price diff account', 'code': 'price diff account', 'user_type_id': self.env.ref('account.data_account_type_current_assets').id}
***************************************************************************************
create
{'name': 'vendor'}
***************************************************************************************
search
[('stock_move_id', '=', receipt.move_lines.id)]
***************************************************************************************
search
[('account_id', '=', self.company_data['default_account_stock_valuation'].id)]
***************************************************************************************
create
dict(picking_ids=[(6, 0, [receipt.id])], account_journal_id=self.stock_journal.id, cost_lines=[(0, 0, {'name': 'equal split', 'split_method': 'equal', 'price_unit': 99, 'product_id': self.productlc1.id})])
***************************************************************************************
search
[('stock_move_id', '=', receipt.move_lines.id)]
***************************************************************************************
search
[('account_id', '=', self.company_data['default_account_stock_valuation'].id)]
***************************************************************************************
search
[('account_id', '=', self.price_diff_account.id), ('move_id', '=', move.id)]
***************************************************************************************
read_group
[('move_id', '=', stock_landed_cost.account_move_id.id)]['debit', 'credit', 'move_id']['move_id']
***************************************************************************************
read_group
[('move_id', '=', stock_negative_landed_cost.account_move_id.id)]['debit', 'credit', 'move_id']['move_id']
***************************************************************************************
with_context
res_dict.get('context')
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
create
{'name': 'LC product 3', 'uom_id': product_uom_unit_round_1.id}
***************************************************************************************
create
{'name': 'LC product 4', 'uom_id': product_uom_unit_round_1.id}
***************************************************************************************
default_get
list(self.env['stock.picking'].fields_get())
***************************************************************************************
new
vals
***************************************************************************************
create
vals
***************************************************************************************
new
vals
***************************************************************************************
create
vals
***************************************************************************************
create
{'name': 'Virtual Interior Design'}
***************************************************************************************
default_get
list(self.env['stock.landed.cost'].fields_get())
***************************************************************************************
new
default_vals
***************************************************************************************
create
vals
***************************************************************************************
default_get
list(self.env['stock.landed.cost'].fields_get())
***************************************************************************************
new
default_vals
***************************************************************************************
create
vals
***************************************************************************************
create
{'name': 'Fifo Category', 'parent_id': self.env.ref('product.product_category_all').id, 'property_valuation': 'real_time', 'property_cost_method': 'fifo'}
***************************************************************************************
create
{'partner_id': self.partner_a.id, 'order_line': [(0, 0, {'product_id': product.id, 'product_qty': qty, 'price_unit': product.standard_price}) for (product, qty) in zip(products, [6, 6, 3, 6])]}
***************************************************************************************
with_context
res_dict.get('context')
***************************************************************************************
search
[('account_id', '=', self.company_data['default_account_stock_in'].id)]
***************************************************************************************
search
[('account_id', '=', self.company_data['default_account_stock_out'].id)]
***************************************************************************************
search
[('account_id', '=', self.company_data['default_account_stock_valuation'].id)]
***************************************************************************************
search
[('account_id', '=', self.company_data['default_account_payable'].id)]
***************************************************************************************
search
[('account_id', '=', self.company_data['default_account_expense'].id)]
***************************************************************************************
create
{'name': 'in %s units @ %s per unit' % (str(quantity), str(unit_cost)), 'product_id': product.id, 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': self.company_data['default_warehouse'].lot_stock_id.id, 'product_uom': self.env.ref('uom.product_uom_unit').id, 'product_uom_qty': quantity, 'price_unit': unit_cost, 'picking_type_id': self.company_data['default_warehouse'].in_type_id.id}
***************************************************************************************
create
{'name': 'out %s units' % str(quantity), 'product_id': product.id, 'location_id': self.company_data['default_warehouse'].lot_stock_id.id, 'location_dest_id': self.env.ref('stock.stock_location_customers').id, 'product_uom': self.env.ref('uom.product_uom_unit').id, 'product_uom_qty': quantity, 'picking_type_id': self.company_data['default_warehouse'].out_type_id.id}
***************************************************************************************
browse
action['res_id']
***************************************************************************************
browse
action['res_id']
***************************************************************************************
create
{'picking_type_id': in_move.picking_type_id.id, 'location_id': in_move.location_id.id, 'location_dest_id': in_move.location_dest_id.id}
***************************************************************************************
create
{'picking_type_id': out_move.picking_type_id.id, 'location_id': out_move.location_id.id, 'location_dest_id': out_move.location_dest_id.id}
***************************************************************************************
create
{'move_id': out_move.id, 'product_id': out_move.product_id.id, 'product_uom_id': out_move.product_uom.id, 'location_id': out_move.location_id.id, 'location_dest_id': out_move.location_dest_id.id}
***************************************************************************************
browse
action['res_id']
***************************************************************************************
browse
action['res_id']
***************************************************************************************
browse
action['res_id']
***************************************************************************************
with_context
wiz['context']
***************************************************************************************
with_context
wiz['context']
***************************************************************************************
with_context
wiz['context']
***************************************************************************************
browse
self.env.context.get('active_wave_id')
***************************************************************************************
create
{'is_wave': True, 'user_id': self.env.context.get('active_owner_id')}
***************************************************************************************
create
picking_to_wave_vals_list
***************************************************************************************
read_group
domains[field] + [('state', 'not in', ('done', 'cancel')), ('picking_type_id', 'in', self.ids)]['picking_type_id']['picking_type_id']
***************************************************************************************
search
domain
***************************************************************************************
next_by_code
'picking.wave'
***************************************************************************************
next_by_code
'picking.batch'
***************************************************************************************
_xmlid_to_res_id
'stock.picking_type_out'
***************************************************************************************
create
{'name': 'Product A', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'name': 'Product B', 'type': 'product', 'categ_id': self.env.ref('product.product_category_all').id}
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'picking_type_id': self.picking_type_out, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': self.productA.name, 'product_id': self.productA.id, 'product_uom_qty': 10, 'product_uom': self.productA.uom_id.id, 'picking_id': self.picking_client_1.id, 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id}
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'picking_type_id': self.picking_type_out, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': self.productB.name, 'product_id': self.productB.id, 'product_uom_qty': 10, 'product_uom': self.productA.uom_id.id, 'picking_id': self.picking_client_2.id, 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id}
***************************************************************************************
create
{'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id, 'picking_type_id': self.picking_type_out, 'company_id': self.env.company.id}
***************************************************************************************
create
{'name': self.productB.name, 'product_id': self.productB.id, 'product_uom_qty': 10, 'product_uom': self.productA.uom_id.id, 'picking_id': self.picking_client_3.id, 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id}
***************************************************************************************
create
{'name': 'Batch 1', 'company_id': self.env.company.id, 'picking_ids': [(4, self.picking_client_1.id), (4, self.picking_client_2.id)]}
***************************************************************************************
_update_available_quantity
self.productAself.stock_location10.0
***************************************************************************************
_update_available_quantity
self.productBself.stock_location10.0
***************************************************************************************
_gather
self.productAself.stock_location
***************************************************************************************
_gather
self.productBself.stock_location
***************************************************************************************
_update_available_quantity
self.productAself.stock_location10.0
***************************************************************************************
_update_available_quantity
self.productBself.stock_location10.0
***************************************************************************************
_gather
self.productAself.stock_location
***************************************************************************************
_gather
self.productBself.stock_location
***************************************************************************************
_update_available_quantity
self.productAself.stock_location5.0
***************************************************************************************
_update_available_quantity
self.productBself.stock_location10.0
***************************************************************************************
_gather
self.productAself.stock_location
***************************************************************************************
_gather
self.productBself.stock_location
***************************************************************************************
_update_available_quantity
self.productAself.stock_location5.0
***************************************************************************************
_update_available_quantity
self.productBself.stock_location10.0
***************************************************************************************
_gather
self.productAself.stock_location
***************************************************************************************
_gather
self.productBself.stock_location
***************************************************************************************
_update_available_quantity
self.productAself.stock_location5.0
***************************************************************************************
_update_available_quantity
self.productBself.stock_location10.0
***************************************************************************************
_update_available_quantity
self.productAself.stock_location10.0
***************************************************************************************
_update_available_quantity
self.productBself.stock_location10.0
***************************************************************************************
browse
wizard_values.get('res_id')
***************************************************************************************
browse
self.picking_type_out
***************************************************************************************
search
[('backorder_id', '=', self.picking_client_1.id)]
***************************************************************************************
search
[('backorder_id', '=', self.picking_client_1.id)]
***************************************************************************************
with_context
immediate_transfer_wizard_dict['context']
***************************************************************************************
with_context
back_order_wizard_dict['context']
***************************************************************************************
with_context
immediate_transfer_wizard_dict['context']
***************************************************************************************
with_context
back_order_wizard_dict['context']
***************************************************************************************
with_context
back_order_wizard_dict['context']
***************************************************************************************
with_context
back_order_wizard_dict['context']
***************************************************************************************
search
[('is_wave', '=', True)]
***************************************************************************************
_for_xml_id
'stock_picking_batch.stock_add_to_wave_action_stock_picking'
***************************************************************************************
search
[('is_wave', '=', True)]
***************************************************************************************
search
[('is_wave', '=', True)]
***************************************************************************************
search
[('is_wave', '=', True)]
***************************************************************************************
_for_xml_id
'stock_picking_batch.stock_add_to_wave_action_stock_picking'
***************************************************************************************
search
[]
***************************************************************************************
search
[('is_wave', '=', True)]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[('is_wave', '=', True)]
***************************************************************************************
search
[]
***************************************************************************************
create
[{'name': 'sn-' + str(i), 'product_id': self.productB.id, 'company_id': self.env.company.id} for i in range(12)]
***************************************************************************************
create
{'name': self.productB.name, 'product_id': self.productB.id, 'product_uom_qty': 1, 'product_uom': self.uom_dozen.id, 'picking_id': self.picking_client_1.id, 'location_id': self.stock_location.id, 'location_dest_id': self.customer_location.id}
***************************************************************************************
search
[('is_wave', '=', True)]
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
action['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
action['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
_update_available_quantity
self.productBself.stock_location1.0
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
search
[]
***************************************************************************************
with_context
res_dict['context']
***************************************************************************************
browse
self.env.context.get('active_ids')
***************************************************************************************
browse
self.env.context.get('active_ids')
***************************************************************************************
browse
self.env.context['pickings_to_detach']
***************************************************************************************
browse
self.env.context['pickings_to_detach']
***************************************************************************************
browse
self.env.context.get('active_ids')
***************************************************************************************
create
{'user_id': self.user_id.id, 'company_id': company.id, 'picking_type_id': pickings[0].picking_type_id.id}
***************************************************************************************
create
{'pick_ids': [(4, p.id) for p in self]}
***************************************************************************************
browse
self.env.context.get('button_validate_picking_ids')
***************************************************************************************
browse
self.env.context.get('button_validate_picking_ids')
***************************************************************************************
_for_xml_id
'survey.res_partner_action_certifications'
***************************************************************************************
concat
*lines
***************************************************************************************
new
{'survey_id': self.id, 'predefined_question_ids': [(6, 0, self._prepare_user_input_predefined_questions().ids)]}
***************************************************************************************
search_read
[('survey_id', '=', self.id), ('create_date', '>=', self.session_start_time)]['id', 'nickname', 'scoring_total']
***************************************************************************************
_for_xml_id
'survey.action_survey_user_input'
***************************************************************************************
_for_xml_id
'survey.action_survey_user_input'
***************************************************************************************
_for_xml_id
'survey.action_survey_user_input'
***************************************************************************************
_sendone
self.access_token'end_session'{}
***************************************************************************************
create
{'name': self.title, 'description': _('%s certification passed', self.title), 'domain': "['&', ('survey_id', '=', %s), ('scoring_success', '=', True)]" % self.id, 'computation_mode': 'count', 'display_mode': 'boolean', 'model_id': self.env.ref('survey.model_survey_user_input').id, 'condition': 'higher', 'batch_mode': True, 'batch_distinctive_field': self.env.ref('survey.field_survey_user_input__partner_id').id, 'batch_user_expression': 'user.partner_id.id'}
***************************************************************************************
create
{'name': _('%s challenge certification', self.title), 'reward_id': self.certification_badge_id.id, 'state': 'inprogress', 'period': 'once', 'challenge_category': self._prepare_challenge_category(), 'reward_realtime': True, 'report_message_frequency': 'never', 'user_domain': [('karma', '>', 0)], 'visibility_mode': 'personal'}
***************************************************************************************
create
{'definition_id': goal.id, 'challenge_id': challenge.id, 'target_goal': 1}
***************************************************************************************
read_group
[('survey_id', '=', survey.id), ('is_session_answer', '=', True), ('state', '!=', 'done'), ('create_date', '>=', survey.session_start_time)]['create_uid:count']['survey_id']
***************************************************************************************
read_group
[('question_id', '=', survey.session_question_id.id), ('survey_id', '=', survey.id), ('create_date', '>=', survey.session_start_time)]['user_input_id:count_distinct']['question_id']
***************************************************************************************
search_count
domain
***************************************************************************************
new
{'question_id': question.id, 'suggested_answer_id': answer.id, 'survey_id': self.id, 'user_input_id': fake_user_input.id}
***************************************************************************************
search_read
[('user_input_id', 'in', [score['id'] for score in leaderboard]), ('question_id', '=', self.session_question_id.id)]['user_input_id', 'answer_score']
***************************************************************************************
search
[('reward_id', 'in', badges.ids)]
***************************************************************************************
search
[('user_input_id', '=', self.id), ('question_id', '=', question.id)]
***************************************************************************************
create
vals_list
***************************************************************************************
create
vals_list
***************************************************************************************
browse
int(question_id)
***************************************************************************************
create
vals
***************************************************************************************
browse
user_input_id
***************************************************************************************
browse
suvey_id
***************************************************************************************
browse
int(suggested_answer_id)
***************************************************************************************
create
base_qvalues
***************************************************************************************
create
base_avals
***************************************************************************************
create
base_alvals
***************************************************************************************
create
{'name': 'Caroline Customer', 'email': 'customer@example.com'}
***************************************************************************************
with_user
self.survey_manager
***************************************************************************************
with_user
self.survey_manager
***************************************************************************************
with_user
self.survey_manager
***************************************************************************************
with_user
self.survey_manager
***************************************************************************************
search
[('reward_id', '=', self.certification_badge.id)]
***************************************************************************************
search
[('reward_id', '=', self.certification_badge.id)]
***************************************************************************************
search
[('challenge_id', '=', challenge.id)]
***************************************************************************************
search
[('id', '=', challenge.id)]
***************************************************************************************
search
[('id', '=', challenge_line.id)]
***************************************************************************************
search
[('id', '=', goal.id)]
***************************************************************************************
search
[('reward_id', '=', self.certification_badge.id)]
***************************************************************************************
search
[('challenge_id', '=', challenge.id)]
***************************************************************************************
create
vals.copy()
***************************************************************************************
create
vals.copy()
***************************************************************************************
create
vals
***************************************************************************************
browse
[survey_1.id, survey_2.id, survey_3.id]
***************************************************************************************
search
[('reward_id', 'in', certification_surveys.mapped('certification_badge_id').ids)]
***************************************************************************************
search
[('challenge_id', 'in', challenges.ids)]
***************************************************************************************
search
[('id', 'in', challenges.ids)]
***************************************************************************************
search
[('id', 'in', challenge_lines.ids)]
***************************************************************************************
search
[('id', 'in', goals.ids)]
***************************************************************************************
search
[('reward_id', 'in', certification_surveys.mapped('certification_badge_id').ids)]
***************************************************************************************
search
[('challenge_id', 'in', challenges.ids)]
***************************************************************************************
with_user
self.survey_manager
***************************************************************************************
with_user
self.survey_manager
***************************************************************************************
with_user
self.survey_manager
***************************************************************************************
with_user
self.survey_manager
***************************************************************************************
with_user
self.survey_manager
***************************************************************************************
search
[('survey_id', '=', certification.id)]
***************************************************************************************
search
[('survey_id', '=', certification.id)]
***************************************************************************************
create
{'title': 'User Certification for SO lines', 'access_mode': 'public', 'users_login_required': True, 'questions_layout': 'page_per_question', 'users_can_go_back': True, 'scoring_type': 'scoring_with_answers', 'scoring_success_min': 85.0, 'certification': True, 'certification_mail_template_id': self.env.ref('survey.mail_template_certification').id, 'is_time_limited': True, 'time_limit': 10}
***************************************************************************************
create
{'title': 'User randomized Certification', 'questions_layout': 'page_per_section', 'questions_selection': 'random', 'scoring_type': 'scoring_without_answers'}
***************************************************************************************
create
{'title': 'How much do you know about words?', 'scoring_type': 'scoring_with_answers', 'scoring_success_min': 90.0}
***************************************************************************************
create
[{'value': 'A thing full of letters.', 'answer_score': 1.0}, {'value': 'A unit of language, [...], carrying a meaning.', 'answer_score': 4.0, 'is_correct': True}, {'value': '42', 'answer_score': -4.0}]
***************************************************************************************
create
{'survey_id': partial_scores_survey.id, 'title': 'What is a word?', 'sequence': 1, 'question_type': 'simple_choice', 'suggested_answer_ids': [(6, 0, (a_01 | a_02 | a_03).ids)]}
***************************************************************************************
create
{'survey_id': partial_scores_survey.id}
***************************************************************************************
create
{'user_input_id': user_input.id, 'question_id': q_01.id, 'answer_type': 'suggestion', 'suggested_answer_id': a_02.id}
***************************************************************************************
create
{'title': 'Test compute survey'}
***************************************************************************************
create
{'is_page': True, 'sequence': 1, 'title': 'P1', 'survey_id': survey.id}
***************************************************************************************
create
{'is_page': True, 'sequence': 7, 'title': 'P2', 'survey_id': survey.id}
***************************************************************************************
search
[('survey_id', '=', survey.id)]
***************************************************************************************
search
[('survey_id', '=', survey.id)]
***************************************************************************************
search
[('survey_id', '=', survey.id)]
***************************************************************************************
create
{'title': 'Public Survey for Tarte Al Djotte', 'access_mode': 'public', 'users_login_required': False, 'questions_layout': 'page_per_section'}
***************************************************************************************
create
{'is_page': True, 'sequence': 1, 'title': 'Page1: Your Data', 'survey_id': survey.id}
***************************************************************************************
create
{'is_page': True, 'sequence': 4, 'title': 'Page2: Tarte Al Djotte', 'survey_id': survey.id}
***************************************************************************************
search
[('survey_id', '=', survey.id)]
***************************************************************************************
create
{'title': 'Survey', 'access_mode': 'public', 'questions_layout': 'page_per_section', 'scoring_type': 'scoring_with_answers', 'scoring_success_min': 85.0}
***************************************************************************************
with_user
self.survey_manager
***************************************************************************************
set_param
'auth_signup.invitation_scope''b2b'
***************************************************************************************
create
{'name': 'Test 1', 'email': 'test@example.com'}
***************************************************************************************
create
{'name': 'Test 2', 'email': '"Raoul Poilvache" <TEST@example.COM>'}
***************************************************************************************
search
[('survey_id', '=', self.survey.id)]
***************************************************************************************
create
{'title': 'Test survey'}
***************************************************************************************
create
{'title': 'Test survey', 'question_and_page_ids': [(0, 0, {'is_page': True, 'title': 'P0', 'sequence': 1})]}
***************************************************************************************
with_context
action['context']
***************************************************************************************
with_context
action['context']
***************************************************************************************
with_context
action['context']
***************************************************************************************
with_context
action['context']
***************************************************************************************
with_context
action['context']
***************************************************************************************
with_context
action['context']
***************************************************************************************
with_context
action['context']
***************************************************************************************
with_user
self.survey_manager
***************************************************************************************
create
{'title': 'Test Survey 2'}
***************************************************************************************
create
{'title': 'My Page', 'sequence': 0, 'is_page': True, 'survey_id': survey.id}
***************************************************************************************
create
{'title': 'My Question', 'sequence': 1, 'survey_id': survey.id}
***************************************************************************************
search
[('title', 'ilike', 'Test')]
***************************************************************************************
create
{'title': 'Test Survey 2'}
***************************************************************************************
create
{'title': 'My Page', 'sequence': 0, 'is_page': True, 'survey_id': survey.id}
***************************************************************************************
create
{'title': 'My Question', 'sequence': 1, 'survey_id': survey.id}
***************************************************************************************
search
[('title', 'ilike', 'Test')]
***************************************************************************************
create
{'title': 'Other'}
***************************************************************************************
create
{'title': 'Other', 'sequence': 0, 'is_page': True, 'survey_id': survey_own.id}
***************************************************************************************
create
{'title': 'Other Question', 'sequence': 1, 'survey_id': survey_own.id}
***************************************************************************************
create
{'survey_id': survey_own.id}
***************************************************************************************
create
{'question_id': question_own.id, 'answer_type': 'numerical_box', 'value_numerical_box': 3, 'user_input_id': answer_own.id}
***************************************************************************************
search
[('survey_id', 'in', [survey_own.id, self.survey.id])]
***************************************************************************************
search
[('survey_id', 'in', [survey_own.id, self.survey.id])]
***************************************************************************************
create
{'survey_id': self.survey.id}
***************************************************************************************
create
{'survey_id': survey_other.id}
***************************************************************************************
create
{'question_id': self.question_num.id, 'answer_type': 'numerical_box', 'value_numerical_box': 3, 'user_input_id': answer_own.id}
***************************************************************************************
create
{'question_id': question_other.id, 'answer_type': 'numerical_box', 'value_numerical_box': 3, 'user_input_id': answer_other.id}
***************************************************************************************
search
[('survey_id', 'in', [survey_other.id, self.survey.id])]
***************************************************************************************
search
[('survey_id', 'in', [survey_other.id, self.survey.id])]
***************************************************************************************
search
[('session_state', 'in', ['ready', 'in_progress'])]
***************************************************************************************
create
{'title': 'Test Survey 2'}
***************************************************************************************
create
{'title': 'My Page', 'sequence': 0, 'is_page': True, 'survey_id': self.survey.id}
***************************************************************************************
create
{'title': 'My Question', 'sequence': 1, 'page_id': self.page_0.id}
***************************************************************************************
search
[('title', 'ilike', 'Test')]
***************************************************************************************
create
{'title': 'Test Survey 2'}
***************************************************************************************
create
{'title': 'My Page', 'sequence': 0, 'is_page': True, 'survey_id': self.survey.id}
***************************************************************************************
create
{'title': 'My Question', 'sequence': 1, 'page_id': self.page_0.id}
***************************************************************************************
search
[('title', 'ilike', 'Test')]
***************************************************************************************
create
{'title': 'Test Survey 2'}
***************************************************************************************
create
{'title': 'My Page', 'sequence': 0, 'is_page': True, 'survey_id': self.survey.id}
***************************************************************************************
create
{'title': 'My Question', 'sequence': 1, 'page_id': self.page_0.id}
***************************************************************************************
search
[('title', 'ilike', 'Test')]
***************************************************************************************
create
{'survey_id': self.survey.id}
***************************************************************************************
create
{'question_id': self.question_num.id, 'answer_type': 'numerical_box', 'value_numerical_box': 3, 'user_input_id': self.answer_0.id}
***************************************************************************************
search
[('survey_id', 'in', [self.survey.id])]
***************************************************************************************
search
[('survey_id', 'in', [self.survey.id])]
***************************************************************************************
create
{'survey_id': self.survey.id}
***************************************************************************************
create
{'question_id': self.question_num.id, 'answer_type': 'numerical_box', 'value_numerical_box': 3, 'user_input_id': self.answer_0.id}
***************************************************************************************
search
[('survey_id', 'in', [self.survey.id])]
***************************************************************************************
search
[('survey_id', 'in', [self.survey.id])]
***************************************************************************************
create
{'survey_id': self.survey.id}
***************************************************************************************
create
{'question_id': self.question_num.id, 'answer_type': 'numerical_box', 'value_numerical_box': 3, 'user_input_id': self.answer_0.id}
***************************************************************************************
search
[('survey_id', 'in', [self.survey.id])]
***************************************************************************************
search
[('survey_id', 'in', [self.survey.id])]
***************************************************************************************
create
{'survey_id': self.survey.id}
***************************************************************************************
create
{'question_id': self.question_num.id, 'answer_type': 'numerical_box', 'value_numerical_box': 3, 'user_input_id': self.answer_0.id}
***************************************************************************************
create
{'title': 'Other'}
***************************************************************************************
create
{'title': 'Other', 'sequence': 0, 'is_page': True, 'survey_id': survey_other.id}
***************************************************************************************
create
{'title': 'Other Question', 'sequence': 1, 'survey_id': survey_other.id}
***************************************************************************************
browse
answer_own.ids
***************************************************************************************
browse
self.answer_0.ids
***************************************************************************************
browse
answer_line_own.ids
***************************************************************************************
browse
self.answer_0_0.ids
***************************************************************************************
browse
answer_own.ids
***************************************************************************************
browse
self.answer_0.ids
***************************************************************************************
browse
answer_line_own.ids
***************************************************************************************
browse
self.answer_0_0.ids
***************************************************************************************
browse
self.answer_0.ids
***************************************************************************************
browse
self.answer_0_0.ids
***************************************************************************************
browse
self.answer_0.ids
***************************************************************************************
browse
self.answer_0_0.ids
***************************************************************************************
browse
self.answer_0.ids
***************************************************************************************
browse
self.answer_0_0.ids
***************************************************************************************
create
{'title': 'MyCompany Vendor Certification', 'access_token': '4ead4bc8-b8f2-4760-a682-1fde8daaaaac', 'access_mode': 'public', 'users_can_go_back': True, 'users_login_required': True, 'scoring_type': 'scoring_with_answers', 'certification': True, 'certification_mail_template_id': self.env.ref('survey.mail_template_certification').id, 'is_time_limited': 'limited', 'time_limit': 10.0, 'is_attempts_limited': True, 'attempts_limit': 2, 'description': '&lt;p&gt;Test your vendor skills!.&lt;/p&gt;', 'question_and_page_ids': [(0, 0, {'title': 'Products', 'sequence': 1, 'is_page': True, 'question_type': False, 'description': '&lt;p&gt;Test your knowledge of your products!&lt;/p&gt;'}), (0, 0, {'title': 'Do we sell Acoustic Bloc Screens?', 'sequence': 2, 'question_type': 'simple_choice', 'constr_mandatory': True, 'suggested_answer_ids': [(0, 0, {'value': 'No', 'sequence': 1}), (0, 0, {'value': 'Yes', 'sequence': 2, 'is_correct': True, 'answer_score': 2})]}), (0, 0, {'title': 'Select all the existing products', 'sequence': 3, 'question_type': 'multiple_choice', 'column_nb': '4', 'suggested_answer_ids': [(0, 0, {'value': 'Chair floor protection', 'sequence': 1, 'is_correct': True, 'answer_score': 1}), (0, 0, {'value': 'Fanta', 'sequence': 2, 'answer_score': -1}), (0, 0, {'value': 'Conference chair', 'sequence': 3, 'is_correct': True, 'answer_score': 1}), (0, 0, {'value': 'Drawer', 'sequence': 4, 'is_correct': True, 'answer_score': 1}), (0, 0, {'value': 'Customizable Lamp', 'sequence': 5, 'answer_score': -1})]}), (0, 0, {'title': 'Select all the available customizations for our Customizable Desk', 'sequence': 4, 'question_type': 'multiple_choice', 'column_nb': '4', 'suggested_answer_ids': [(0, 0, {'value': 'Color', 'sequence': 1, 'is_correct': True, 'answer_score': 1}), (0, 0, {'value': 'Height', 'sequence': 2, 'answer_score': -1}), (0, 0, {'value': 'Width', 'sequence': 3, 'is_correct': True, 'answer_score': 1}), (0, 0, {'value': 'Legs', 'sequence': 4, 'is_correct': True, 'answer_score': 1}), (0, 0, {'value': 'Number of drawers', 'sequence': 5, 'answer_score': -1})]}), (0, 0, {'title': 'How many versions of the Corner Desk do we have?', 'sequence': 5, 'question_type': 'simple_choice', 'constr_mandatory': True, 'suggested_answer_ids': [(0, 0, {'value': 1, 'sequence': 1}), (0, 0, {'value': 2, 'sequence': 2, 'is_correct': True, 'answer_score': 2}), (0, 0, {'value': 3, 'sequence': 3}), (0, 0, {'value': 4, 'sequence': 4})]}), (0, 0, {'title': 'Do you think we have missing products in our catalog? (not rated)', 'sequence': 6, 'question_type': 'text_box'}), (0, 0, {'title': 'Prices', 'sequence': 7, 'is_page': True, 'question_type': False, 'description': '&lt;p&gt;Test your knowledge of our prices.&lt;/p&gt;'}), (0, 0, {'title': 'How much do we sell our Cable Management Box?', 'sequence': 8, 'question_type': 'simple_choice', 'constr_mandatory': True, 'suggested_answer_ids': [(0, 0, {'value': '$20', 'sequence': 1}), (0, 0, {'value': '$50', 'sequence': 2}), (0, 0, {'value': '$80', 'sequence': 3}), (0, 0, {'value': '$100', 'sequence': 4, 'is_correct': True, 'answer_score': 2}), (0, 0, {'value': '$200', 'sequence': 5}), (0, 0, {'value': '$300', 'sequence': 6})]}), (0, 0, {'title': 'Select all the products that sell for $100 or more', 'sequence': 9, 'question_type': 'multiple_choice', 'column_nb': '2', 'suggested_answer_ids': [(0, 0, {'value': 'Corner Desk Right Sit', 'sequence': 1, 'answer_score': 1, 'is_correct': True}), (0, 0, {'value': 'Desk Combination', 'sequence': 2, 'answer_score': 1, 'is_correct': True}), (0, 0, {'value': 'Cabinet with Doors', 'sequence': 3, 'answer_score': -1}), (0, 0, {'value': 'Large Desk', 'sequence': 4, 'answer_score': 1, 'is_correct': True}), (0, 0, {'value': 'Letter Tray', 'sequence': 5, 'answer_score': -1}), (0, 0, {'value': 'Office Chair Black', 'sequence': 6, 'answer_score': -1})]}), (0, 0, {'title': 'What do you think about our prices (not rated)?', 'sequence': 10, 'question_type': 'simple_choice', 'constr_mandatory': True, 'suggested_answer_ids': [(0, 0, {'value': 'Very underpriced', 'sequence': 1}), (0, 0, {'value': 'Underpriced', 'sequence': 2}), (0, 0, {'value': 'Correctly priced', 'sequence': 3}), (0, 0, {'value': 'A little bit overpriced', 'sequence': 4}), (0, 0, {'value': 'A lot overpriced', 'sequence': 5})]}), (0, 0, {'title': 'Policies', 'sequence': 11, 'is_page': True, 'question_type': False, 'description': '&lt;p&gt;Test your knowledge of our policies.&lt;/p&gt;'}), (0, 0, {'title': 'How many days is our money-back guarantee?', 'sequence': 12, 'question_type': 'numerical_box', 'constr_mandatory': True, 'is_scored_question': True, 'answer_numerical_box': 30, 'answer_score': 1}), (0, 0, {'title': 'If a customer purchases a product on 6 January 2020, what is the latest day we expect to ship it?', 'sequence': 13, 'question_type': 'date', 'is_scored_question': True, 'answer_date': '2020-01-08', 'answer_score': 1}), (0, 0, {'title': 'If a customer purchases a 1 year warranty on 6 January 2020, when do we expect the warranty to expire?', 'sequence': 14, 'question_type': 'datetime', 'is_scored_question': True, 'answer_datetime': '2021-01-07 00:00:01', 'answer_score': 1}), (0, 0, {'title': 'What day to you think is best for us to start having an annual sale (not rated)?', 'sequence': 15, 'question_type': 'date'}), (0, 0, {'title': 'What day and time do you think most customers are most likely to call customer service (not rated)?', 'sequence': 16, 'question_type': 'datetime'}), (0, 0, {'title': 'How many chairs do you think we should aim to sell in a year (not rated)?', 'sequence': 17, 'question_type': 'numerical_box'})]}
***************************************************************************************
create
{'title': 'User Feedback Form', 'access_token': 'b137640d-14d4-4748-9ef6-344caaaaaae', 'access_mode': 'public', 'users_can_go_back': True, 'questions_layout': 'page_per_section', 'description': '<p>This survey allows you to give a feedback about your experience with our eCommerce solution.\n    Filling it helps us improving your experience.</p></field>', 'question_and_page_ids': [(0, 0, {'title': 'General information', 'sequence': 1, 'question_type': False, 'is_page': True, 'description': '<p>This section is about general information about you. Answering them helps qualifying your answers.</p>'}), (0, 0, {'title': 'Where do you live ?', 'sequence': 2, 'question_type': 'char_box', 'constr_mandatory': False}), (0, 0, {'title': 'When is your date of birth ?', 'sequence': 3, 'question_type': 'date', 'description': False}), (0, 0, {'title': 'How frequently do you buy products online ?', 'sequence': 4, 'question_type': 'simple_choice', 'comments_allowed': True, 'comment_count_as_answer': True, 'constr_mandatory': True, 'suggested_answer_ids': [(0, 0, {'value': 'Once a day', 'sequence': 1}), (0, 0, {'value': 'Once a week', 'sequence': 2}), (0, 0, {'value': 'Once a month', 'sequence': 3}), (0, 0, {'value': 'Once a year', 'sequence': 4}), (0, 0, {'value': 'Other (answer in comment)', 'sequence': 5})]}), (0, 0, {'title': 'How many times did you order products on our website ?', 'sequence': 5, 'question_type': 'numerical_box', 'constr_mandatory': True}), (0, 0, {'title': 'About our ecommerce', 'sequence': 6, 'is_page': True, 'question_type': False, 'description': '<p>This section is about our eCommerce experience itself.</p>'}), (0, 0, {'title': 'Which of the following words would you use to describe our products ?', 'sequence': 7, 'question_type': 'multiple_choice', 'constr_mandatory': True, 'comments_allowed': True, 'comment_count_as_answer': False, 'suggested_answer_ids': [(0, 0, {'value': 'High quality', 'sequence': 1}), (0, 0, {'value': 'Useful', 'sequence': 2}), (0, 0, {'value': 'Unique', 'sequence': 3}), (0, 0, {'value': 'Good value for money', 'sequence': 4}), (0, 0, {'value': 'Overpriced', 'sequence': 5}), (0, 0, {'value': 'Impractical', 'sequence': 6}), (0, 0, {'value': 'Ineffective', 'sequence': 7}), (0, 0, {'value': 'Poor quality', 'sequence': 8}), (0, 0, {'value': 'Other', 'sequence': 9})]}), (0, 0, {'title': 'What do your think about our new eCommerce ?', 'sequence': 8, 'question_type': 'matrix', 'matrix_subtype': 'multiple', 'constr_mandatory': True, 'suggested_answer_ids': [(0, 0, {'value': 'Totally disagree', 'sequence': 1}), (0, 0, {'value': 'Disagree', 'sequence': 2}), (0, 0, {'value': 'Agree', 'sequence': 3}), (0, 0, {'value': 'Totally agree', 'sequence': 4})], 'matrix_row_ids': [(0, 0, {'value': 'The new layout and design is fresh and up-to-date', 'sequence': 1}), (0, 0, {'value': 'It is easy to find the product that I want', 'sequence': 2}), (0, 0, {'value': 'The tool to compare the products is useful to make a choice', 'sequence': 3}), (0, 0, {'value': 'The checkout process is clear and secure', 'sequence': 4}), (0, 0, {'value': 'I have added products to my wishlist', 'sequence': 5})]}), (0, 0, {'title': 'Do you have any other comments, questions, or concerns ?', 'sequence': 9, 'question_type': 'text_box', 'constr_mandatory': False})]}
***************************************************************************************
create
{'title': 'User Session Survey', 'access_token': 'b137640d-14d4-4748-9ef6-344caaaaafe', 'access_mode': 'public', 'users_can_go_back': False, 'questions_layout': 'page_per_question', 'scoring_type': 'scoring_without_answers'}
***************************************************************************************
create
{'survey_id': survey_session.id, 'title': 'Nickname', 'save_as_nickname': True, 'sequence': 1, 'question_type': 'char_box'}
***************************************************************************************
create
{'survey_id': survey_session.id, 'title': 'Text Question', 'sequence': 2, 'question_type': 'char_box'}
***************************************************************************************
create
{'survey_id': survey_session.id, 'title': 'Date Question', 'sequence': 3, 'question_type': 'date'}
***************************************************************************************
create
{'survey_id': survey_session.id, 'title': 'Datetime Question', 'sequence': 4, 'question_type': 'datetime'}
***************************************************************************************
create
{'value': 'First'}
***************************************************************************************
create
{'value': 'Second'}
***************************************************************************************
create
{'value': 'Third'}
***************************************************************************************
create
{'survey_id': survey_session.id, 'title': 'Regular Simple Choice', 'sequence': 5, 'question_type': 'simple_choice', 'suggested_answer_ids': [(4, simple_choice_answer_1.id), (4, simple_choice_answer_2.id), (4, simple_choice_answer_3.id)]}
***************************************************************************************
create
{'value': 'Correct', 'is_correct': True, 'answer_score': 30}
***************************************************************************************
create
{'value': 'Incorrect 1'}
***************************************************************************************
create
{'value': 'Incorrect 2'}
***************************************************************************************
create
{'value': 'Incorrect 3'}
***************************************************************************************
create
{'survey_id': survey_session.id, 'title': 'Scored Simple Choice', 'sequence': 6, 'question_type': 'simple_choice', 'suggested_answer_ids': [(4, scored_choice_answer_1.id), (4, scored_choice_answer_2.id), (4, scored_choice_answer_3.id), (4, scored_choice_answer_4.id)]}
***************************************************************************************
create
{'value': 'Correct', 'is_correct': True, 'answer_score': 30}
***************************************************************************************
create
{'value': 'Also correct but less points', 'is_correct': True, 'answer_score': 10}
***************************************************************************************
create
{'value': 'Incorrect', 'answer_score': -40}
***************************************************************************************
create
{'survey_id': survey_session.id, 'title': 'Timed Scored Multiple Choice', 'sequence': 6, 'question_type': 'multiple_choice', 'is_time_limited': True, 'time_limit': 1, 'suggested_answer_ids': [(4, timed_scored_choice_answer_1.id), (4, timed_scored_choice_answer_2.id), (4, timed_scored_choice_answer_3.id)]}
***************************************************************************************
search
['&', ('survey_id', '=', self.survey_id.id), '|', ('partner_id', 'in', partners.ids), ('email', 'in', emails)]
***************************************************************************************
search
[('user_ids', '=', False), ('id', 'in', self.partner_ids.ids)]
***************************************************************************************
browse
values['template_id']
***************************************************************************************
_replace_local_links
body
***************************************************************************************
_get
'survey.survey'
***************************************************************************************
create
{'name': 'Template Automation', 'model_id': self.env.ref('test_base_automation.model_base_automation_lead_test').id, 'body_html': '&lt;div&gt;Email automation&lt;/div&gt;'}
***************************************************************************************
create
{'name': 'My Partner'}
***************************************************************************************
create
[{'name': 'Base Automation: test rule on create', 'model_id': self.env.ref('test_base_automation.model_base_automation_lead_test').id, 'state': 'code', 'code': "records.write({'user_id': %s})" % self.user_demo.id, 'trigger': 'on_create', 'active': True, 'filter_domain': "[('state', '=', 'draft')]"}, {'name': 'Base Automation: test rule on write', 'model_id': self.env.ref('test_base_automation.model_base_automation_lead_test').id, 'state': 'code', 'code': "records.write({'user_id': %s})" % self.user_demo.id, 'trigger': 'on_write', 'active': True, 'filter_domain': "[('state', '=', 'done')]", 'filter_pre_domain': "[('state', '=', 'open')]"}, {'name': 'Base Automation: test rule on recompute', 'model_id': self.env.ref('test_base_automation.model_base_automation_lead_test').id, 'state': 'code', 'code': "records.write({'user_id': %s})" % self.user_demo.id, 'trigger': 'on_write', 'active': True, 'filter_domain': "[('employee', '=', True)]"}, {'name': 'Base Automation: test recursive rule', 'model_id': self.env.ref('test_base_automation.model_base_automation_lead_test').id, 'state': 'code', 'code': "\nrecord = model.browse(env.context['active_id'])\nif 'partner_id' in env.context['old_values'][record.id]:\n    record.write({'state': 'draft'})", 'trigger': 'on_write', 'active': True}, {'name': 'Base Automation: test rule on secondary model', 'model_id': self.env.ref('test_base_automation.model_base_automation_line_test').id, 'state': 'code', 'code': "records.write({'user_id': %s})" % self.user_demo.id, 'trigger': 'on_create', 'active': True}, {'name': 'Base Automation: test rule on write check context', 'model_id': self.env.ref('test_base_automation.model_base_automation_lead_test').id, 'state': 'code', 'code': "\nrecord = model.browse(env.context['active_id'])\nif 'user_id' in env.context['old_values'][record.id]:\n    record.write({'is_assigned_to_admin': (record.user_id.id == 1)})", 'trigger': 'on_write', 'active': True}, {'name': 'Base Automation: test rule with trigger', 'model_id': self.env.ref('test_base_automation.model_base_automation_lead_test').id, 'trigger_field_ids': [(4, self.env.ref('test_base_automation.field_base_automation_lead_test__state').id)], 'state': 'code', 'code': "\nrecord = model.browse(env.context['active_id'])\nrecord['name'] = record.name + 'X'", 'trigger': 'on_write', 'active': True}, {'name': 'Base Automation: test send an email', 'model_id': self.env.ref('test_base_automation.model_base_automation_lead_test').id, 'template_id': self.test_mail_template_automation.id, 'trigger_field_ids': [(4, self.env.ref('test_base_automation.field_base_automation_lead_test__deadline').id)], 'state': 'email', 'code': "\nrecord = model.browse(env.context['active_id'])\nrecord['name'] = record.name + 'X'", 'trigger': 'on_write', 'active': True, 'filter_domain': "[('deadline', '!=', False)]", 'filter_pre_domain': "[('deadline', '=', False)]"}]
***************************************************************************************
create
vals
***************************************************************************************
search
[('name', '=', 'Base Automation: test send an email')]
***************************************************************************************
create
{'name': 'Line'}
***************************************************************************************
search
[('name', '=', 'Base Automation: test rule with trigger')]
***************************************************************************************
create
{'name': 'A new partner'}
***************************************************************************************
create
{'name': 'Access to base.automation.linked.test', 'users': [(6, 0, [self.user_admin.id])]}
***************************************************************************************
create
{'name': 'test no access', 'model_id': self.env['ir.model']._get_id('base.automation.link.test'), 'trigger': 'on_create_or_write', 'filter_pre_domain': "[('linked_id.another_field', '=', 'something')]", 'state': 'code', 'active': True, 'code': 'action = [rec.name for rec in records]'}
***************************************************************************************
create
{'name': 'test no name access', 'model_id': self.env['ir.model']._get_id('base.automation.link.test'), 'trigger': 'on_create_or_write', 'filter_pre_domain': "[('linked_id', '=', 'whatever')]", 'state': 'code', 'active': True, 'code': 'action = [rec.name for rec in records]'}
***************************************************************************************
create
{'name': 'Gorofy', 'is_company': True}
***************************************************************************************
create
{'name': 'Awiclo', 'is_company': True}
***************************************************************************************
create
{'name': 'Bob', 'is_company': False, 'parent_id': company1.id}
***************************************************************************************
create
{'name': 'test rule', 'filter_pre_domain': False, 'trigger': 'on_create_or_write', 'state': 'code', 'model_id': self.env.ref('base.model_res_partner').id}
***************************************************************************************
create
{'name': 'test rule', 'filter_pre_domain': '[]', 'trigger': 'on_create_or_write', 'state': 'code', 'model_id': self.env.ref('base.model_res_partner').id}
***************************************************************************************
_get_id
'base.automation.link.test'
***************************************************************************************
_get_id
'base.automation.link.test'
***************************************************************************************
create
[{'email': 'e.e@example.com', 'groups_id': [Command.link(self.env.ref('base.group_user').id)], 'login': 'emp', 'name': 'Ernest Employee', 'notification_type': 'inbox', 'signature': '--\nErnest'}, {'name': 'test1', 'login': 'test1', 'email': 'test1@example.com'}, {'name': 'test2', 'login': 'test2', 'email': 'test2@example.com'}, {'name': 'test3', 'login': 'test3'}, {'name': 'test4', 'login': 'test4'}, {'name': 'test5', 'login': 'test5'}, {'name': 'test6', 'login': 'test6'}, {'name': 'test7', 'login': 'test7'}, {'name': 'test8', 'login': 'test8'}, {'name': 'test9', 'login': 'test9'}, {'name': 'test10', 'login': 'test10'}, {'name': 'test11', 'login': 'test11'}, {'name': 'test12', 'login': 'test12'}, {'name': 'test13', 'login': 'test13'}, {'name': 'test14', 'login': 'test14'}, {'name': 'test15', 'login': 'test15'}]
***************************************************************************************
create
[{'user_id': user.id} for user in self.users]
***************************************************************************************
create
{'requires_allocation': 'no', 'name': 'Legal Leaves', 'time_type': 'leave'}
***************************************************************************************
create
[{'date_from': date.today() + relativedelta(days=-2), 'date_to': date.today() + relativedelta(days=2), 'employee_id': employee.id, 'holiday_status_id': self.leave_type.id} for employee in self.employees]
***************************************************************************************
browse
self.env['mail.channel'].channel_create(name='public 1', privacy='public')['id']
***************************************************************************************
browse
self.env['mail.channel'].channel_create(name='public 2', privacy='public')['id']
***************************************************************************************
browse
self.env['mail.channel'].channel_create(name='group 1', privacy='groups')['id']
***************************************************************************************
browse
self.env['mail.channel'].channel_create(name='group 2', privacy='groups')['id']
***************************************************************************************
browse
self.env['mail.channel'].channel_create(name='private 1', privacy='private')['id']
***************************************************************************************
browse
self.env['mail.channel'].channel_create(name='private 2', privacy='private')['id']
***************************************************************************************
browse
self.env['mail.channel'].channel_get((self.users[0] + self.users[14]).partner_id.ids)['id']
***************************************************************************************
browse
self.env['mail.channel'].channel_get((self.users[0] + self.users[15]).partner_id.ids)['id']
***************************************************************************************
browse
self.env['mail.channel'].channel_get((self.users[0] + self.users[2]).partner_id.ids)['id']
***************************************************************************************
browse
self.env['mail.channel'].channel_get((self.users[0] + self.users[3]).partner_id.ids)['id']
***************************************************************************************
browse
self.env['mail.channel'].create_group((self.users[0] + self.users[12]).partner_id.ids)['id']
***************************************************************************************
browse
im_livechat_channel._open_livechat_mail_channel(anonymous_name='anon 1', previous_operator_id=self.users[0].partner_id.id, user_id=self.users[1].id, country_id=self.env.ref('base.in').id)['id']
***************************************************************************************
browse
im_livechat_channel.with_user(self.env.ref('base.public_user'))._open_livechat_mail_channel(anonymous_name='anon 2', previous_operator_id=self.users[0].partner_id.id, country_id=self.env.ref('base.be').id)['id']
***************************************************************************************
search
[('id', '!=', channel_general.id)]
***************************************************************************************
channel_get
(self.users[0] + self.users[14]).partner_id.ids
***************************************************************************************
channel_get
(self.users[0] + self.users[15]).partner_id.ids
***************************************************************************************
channel_get
(self.users[0] + self.users[2]).partner_id.ids
***************************************************************************************
channel_get
(self.users[0] + self.users[3]).partner_id.ids
***************************************************************************************
create_group
(self.users[0] + self.users[12]).partner_id.ids
***************************************************************************************
_xmlid_to_res_id
'mail.menu_root_discuss'
***************************************************************************************
_find_or_create_for_user
self.users[0]
***************************************************************************************
create
{'name': 'Test Event Registration', 'default_code': 'EVENT_REG', 'description_sale': 'Mighty Description', 'list_price': 10, 'standard_price': 30.0, 'detailed_type': 'event'}
***************************************************************************************
create
{'name': 'Type', 'sequence': 2}
***************************************************************************************
create
{'name': 'Online', 'sequence': 10, 'category_id': self.event_tag_category_1.id, 'color': 8}
***************************************************************************************
create
{'name': 'Online Reveal TestEvent', 'auto_confirm': True, 'stage_id': self.env.ref('event.event_stage_booked').id, 'address_id': False, 'user_id': self.user_demo.id, 'tag_ids': [(4, self.event_tag_category_1_tag_1.id)], 'date_tz': 'Europe/Brussels', 'date_begin': datetime.combine(self.reference_now, time(5, 0)) - timedelta(days=1), 'date_end': datetime.combine(self.reference_now, time(15, 0)) + timedelta(days=1), 'event_ticket_ids': [(0, 0, {'name': 'Standard', 'product_id': self.event_product.id, 'price': 0}), (0, 0, {'name': 'VIP', 'product_id': self.event_product.id, 'seats_max': 10})], 'is_published': True, 'website_menu': True, 'website_track': True, 'website_track_proposal': True, 'exhibitor_menu': True, 'community_menu': True}
***************************************************************************************
create
{'name': 'Constantin Customer', 'email': 'constantin@test.example.com', 'country_id': self.env.ref('base.be').id, 'phone': '0485112233', 'mobile': False}
***************************************************************************************
create
{'name': 'Brandon Freeman', 'email': 'brandon.freeman55@example.com', 'phone': '(355)-687-3262'}
***************************************************************************************
create
{'title': 'Which field are you working in', 'question_type': 'simple_choice', 'event_id': self.event.id, 'once_per_order': False, 'answer_ids': [(0, 0, {'name': 'Consumers'}), (0, 0, {'name': 'Sales'}), (0, 0, {'name': 'Research'})]}
***************************************************************************************
create
{'title': 'How did you hear about us ?', 'question_type': 'text_box', 'event_id': self.event.id, 'once_per_order': True}
***************************************************************************************
create
{'name': 'What This Event Is All About', 'event_id': self.event.id, 'stage_id': self.env.ref('website_event_track.event_track_stage3').id, 'date': self.reference_now + timedelta(hours=1), 'duration': 2, 'is_published': True, 'wishlisted_by_default': True, 'user_id': self.user_admin.id, 'partner_id': self.event_speaker.id}
***************************************************************************************
create
{'name': 'Live Testimonial', 'event_id': self.event.id, 'stage_id': self.env.ref('website_event_track.event_track_stage3').id, 'date': self.reference_now - timedelta(minutes=30), 'duration': 0.75, 'is_published': True, 'user_id': self.user_admin.id, 'partner_id': self.event_speaker.id}
***************************************************************************************
create
{'name': 'Our Last Day Together !', 'event_id': self.event.id, 'stage_id': self.env.ref('website_event_track.event_track_stage3').id, 'date': self.reference_now + timedelta(days=1), 'duration': 0.75, 'is_published': True, 'user_id': self.user_admin.id, 'partner_id': self.event_speaker.id}
***************************************************************************************
create
{'name': 'Best wood for furniture', 'summary': "Let's talk about wood types for furniture", 'target_audience': 'wood expert(s)', 'is_pinned': True, 'website_published': True, 'event_id': self.event.id, 'room_lang_id': self.env.ref('base.lang_en').id, 'room_max_capacity': '12', 'room_participant_count': 9}
***************************************************************************************
search
[('name', 'like', '%Online Reveal%')]
***************************************************************************************
browse
self.customer_so.id
***************************************************************************************
create
t1_reg_vals
***************************************************************************************
create
{'partner_id': public_partner.id, 'order_line': [(0, 0, {'event_id': self.event_0.id, 'event_ticket_id': self.event_0.event_ticket_ids[0].id, 'product_id': self.event_0.event_ticket_ids[0].product_id.id, 'product_uom_qty': 2})]}
***************************************************************************************
browse
self.customer_so.id
***************************************************************************************
create
mixed_reg_vals
***************************************************************************************
browse
self.customer_so.id
***************************************************************************************
create
t1_reg_vals
***************************************************************************************
create
{'event_id': self.event_0.id}
***************************************************************************************
create
{'name': 'Event', 'date_begin': datetime.now() + relativedelta(days=-1), 'date_end': datetime.now() + relativedelta(days=1)}
***************************************************************************************
create
{'name': 'ManagerEventType', 'event_type_mail_ids': [(5, 0), (0, 0, {'interval_nbr': 1, 'interval_unit': 'days', 'interval_type': 'before_event', 'template_ref': 'mail.template,%i' % self.env['ir.model.data']._xmlid_to_res_id('event.event_reminder')})]}
***************************************************************************************
create
{'name': 'ManagerEvent', 'date_begin': datetime.now() + relativedelta(days=-1), 'date_end': datetime.now() + relativedelta(days=1)}
***************************************************************************************
create
{'name': 'test'}
***************************************************************************************
create
{'event_id': event.id, 'name': 'Myself'}
***************************************************************************************
create
{'name': 'Company 2'}
***************************************************************************************
create
[{'name': 'Event Company 1', 'date_begin': datetime.now() + relativedelta(days=-1), 'date_end': datetime.now() + relativedelta(days=1), 'company_id': company_1.id}, {'name': 'Event Company 2', 'date_begin': datetime.now() + relativedelta(days=-1), 'date_end': datetime.now() + relativedelta(days=1), 'company_id': company_2.id}]
***************************************************************************************
create
[{'name': 'Registration Company 1', 'event_id': event_company_1.id, 'company_id': company_1.id}, {'name': 'Registration Company 2', 'event_id': event_company_2.id, 'company_id': company_2.id}]
***************************************************************************************
create
{'name': 'TestEvent', 'date_begin': datetime.now() + relativedelta(days=-1), 'date_end': datetime.now() + relativedelta(days=1), 'seats_limited': True, 'seats_max': 10}
***************************************************************************************
create
{'name': 'TestStage'}
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'ManagerEventType', 'event_type_mail_ids': [(5, 0), (0, 0, {'interval_nbr': 1, 'interval_unit': 'days', 'interval_type': 'before_event', 'template_ref': 'mail.template,%i' % self.env['ir.model.data']._xmlid_to_res_id('event.event_reminder')})]}
***************************************************************************************
with_user
user_company_1
***************************************************************************************
with_user
user_company_1
***************************************************************************************
with_user
self.user_eventmanager
***************************************************************************************
_xmlid_to_res_id
'event.event_reminder'
***************************************************************************************
_xmlid_to_res_id
'event.event_reminder'
***************************************************************************************
_get
'mail.test.container'
***************************************************************************************
with_context
self._test_context
***************************************************************************************
with_context
self._test_context
***************************************************************************************
with_context
{'default_res_model': 'mail.test.simple', 'default_res_id': test_record.id}
***************************************************************************************
create
{'name': 'Thierry Wololo'}
***************************************************************************************
search_count
[]
***************************************************************************************
search_count
[]
***************************************************************************************
search_count
[('summary', '=', 'TestNew')]
***************************************************************************************
browse
self.test_record.ids
***************************************************************************************
create
{'activity_type_id': 1, 'res_id': test_record.id, 'res_model_id': self.env['ir.model']._get_id('mail.test.activity'), 'summary': 'Test'}
***************************************************************************************
create
[{'name': 'test', 'res_name': 'test', 'res_model': 'mail.activity', 'res_id': activity.id, 'datas': 'test'}, {'name': 'test2', 'res_name': 'test', 'res_model': 'mail.activity', 'res_id': activity.id, 'datas': 'testtest'}]
***************************************************************************************
browse
self.test_record.ids
***************************************************************************************
create
{'activity_type_id': self.env.ref('test_mail.mail_act_test_chained_1').id, 'date_deadline': frozen_now + relativedelta(days=-2), 'res_id': test_record.id, 'res_model_id': self.env['ir.model']._get_id('mail.test.activity'), 'summary': 'Test'}
***************************************************************************************
browse
self.test_record.ids
***************************************************************************************
create
{'activity_type_id': self.env.ref('test_mail.mail_act_test_chained_1').id, 'date_deadline': frozen_now + relativedelta(days=-2), 'res_id': test_record.id, 'res_model_id': self.env['ir.model']._get_id('mail.test.activity'), 'summary': 'Test'}
***************************************************************************************
create
{'name': 'Record'}
***************************************************************************************
create
[{'name': 'Record %i' % record_i} for record_i in range(5)]
***************************************************************************************
search
[]
***************************************************************************************
create
[{'name': 'Record %i' % record_i} for record_i in range(5)]
***************************************************************************************
search
[]
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
create
{'summary': 'Test Activity', 'date_deadline': date.today() + relativedelta(days=1), 'activity_type_id': self.env.ref('mail.mail_activity_data_email').id, 'res_model_id': self.env['ir.model']._get(test_record._name).id, 'res_id': test_record.id}
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
create
{'summary': 'Test', 'activity_type_id': 1, 'res_model_id': self.env.ref('test_mail.model_mail_test_activity').id, 'res_id': record.id, 'date_deadline': today_utc, 'user_id': self.user_utc.id}
***************************************************************************************
create
{'summary': 'Test', 'activity_type_id': 1, 'res_model_id': self.env.ref('test_mail.model_mail_test_activity').id, 'res_id': origin_1.id, 'date_deadline': today_utc, 'user_id': self.user_utc.id}
***************************************************************************************
create
{'summary': 'Test', 'activity_type_id': 1, 'res_model_id': self.env.ref('test_mail.model_mail_test_activity').id, 'res_id': origin_2.id, 'date_deadline': today_utc + relativedelta(hours=8), 'user_id': self.user_utc.id}
***************************************************************************************
search
[]
***************************************************************************************
search
[('activity_state', '=', 'today')]
***************************************************************************************
search
[('activity_state', 'in', ('today', 'overdue'))]
***************************************************************************************
search
[('activity_state', 'not in', ('today',))]
***************************************************************************************
search
[('activity_state', '=', False)]
***************************************************************************************
search
[('activity_state', 'not in', ('planned', 'overdue', 'today'))]
***************************************************************************************
search
[('activity_state', 'not in', ('today', False))]
***************************************************************************************
search
[('activity_state', 'in', ('today', False))]
***************************************************************************************
create
{'summary': 'Test', 'activity_type_id': 1, 'res_model_id': self.env.ref('test_mail.model_mail_test_activity').id, 'res_id': origin_1.id, 'date_deadline': today_utc + relativedelta(hours=2), 'user_id': self.user_utc.id}
***************************************************************************************
search
[('activity_state', '=', 'today')]
***************************************************************************************
search
[('my_activity_date_deadline', '=', date_today)]
***************************************************************************************
with_user
self.user_admin
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
create
{'activity_type_id': self.env.ref('test_mail.mail_act_test_todo').id, 'res_model_id': self.env.ref('test_mail.model_mail_test_activity').id, 'res_id': self.test_record.id, 'user_id': self.user_employee.id}
***************************************************************************************
_get_id
'mail.test.activity'
***************************************************************************************
_get_id
'mail.test.activity'
***************************************************************************************
_get_id
'mail.test.activity'
***************************************************************************************
with_context
self._test_context
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
_get
test_record._name
***************************************************************************************
search
[('name', 'in', [a['name'] for a in attachment_data])]
***************************************************************************************
search
[('model', '=', self.test_record._name), ('subject', '=', 'Template Subject')]
***************************************************************************************
search
[('name', 'in', [a['name'] for a in attachment_data])]
***************************************************************************************
search
[('email', 'in', [email_to_1, email_to_2, email_to_3, email_cc_1])]
***************************************************************************************
search
[('name', 'in', [a['name'] for a in attachment_data])]
***************************************************************************************
search
[('email', 'in', [email_to_1, email_to_2, email_to_3, email_cc_1])]
***************************************************************************************
with_context
self._get_web_context(self.test_record, add_web=True)
***************************************************************************************
with_context
self._get_web_context(self.test_record, add_web=True, default_attachment_ids=[])
***************************************************************************************
with_context
self._get_web_context(self.test_records, add_web=True)
***************************************************************************************
with_context
ctx
***************************************************************************************
with_context
self._get_web_context(self.test_record, add_web=True, default_template_id=self.template.id)
***************************************************************************************
with_context
self._get_web_context(self.test_records, add_web=True, default_template_id=self.template.id)
***************************************************************************************
with_context
self._get_web_context(self.test_records, add_web=True, default_template_id=self.template.id)
***************************************************************************************
with_context
self._get_web_context(self.test_records, add_web=True, default_template_id=self.template.id)
***************************************************************************************
with_context
self._get_web_context(self.test_records, add_web=True, default_template_id=self.template.id, default_auto_delete_message=True)
***************************************************************************************
with_context
self._get_web_context(self.test_records, add_web=True, default_template_id=self.template.id, active_ids=[], default_use_active_domain=True, default_active_domain=[('id', 'in', self.test_records.ids)])
***************************************************************************************
with_context
self._get_web_context(self.test_records, add_web=True, default_template_id=self.template.id, default_use_active_domain=False, default_active_domain=[('id', 'in', -1)])
***************************************************************************************
with_context
self._get_web_context(self.test_records, add_web=True, default_template_id=self.template.id, active_ids=[])
***************************************************************************************
with_context
{'default_composition_mode': 'comment', 'default_model': self.test_record._name, 'default_res_id': self.test_record.id, 'default_template_id': self.template.id}
***************************************************************************************
with_context
self._get_web_context(self.test_record, add_web=False, default_parent_id=parent.id)
***************************************************************************************
with_context
self._get_web_context(self.test_record)
***************************************************************************************
with_context
self._get_web_context(self.test_record)
***************************************************************************************
with_context
self._get_web_context(self.test_record)
***************************************************************************************
with_context
ctx
***************************************************************************************
with_context
ctx
***************************************************************************************
with_context
ctx
***************************************************************************************
with_context
ctx
***************************************************************************************
with_context
ctx
***************************************************************************************
with_context
self._get_web_context(self.test_record, add_web=False)
***************************************************************************************
_get
self.test_record._name
***************************************************************************************
with_user
portal_user
***************************************************************************************
with_user
portal_user
***************************************************************************************
create
{'name': 'Invite', 'template_id': self.mail_template.id}
***************************************************************************************
create
{'name': 'Invite', 'subject': 'Subject for {{ object.name }}', 'body': '<p>Content from <t t-out="user.name"/></p>', 'description': '<p>Description for <t t-esc="object.name"/></p>'}
***************************************************************************************
search
[('res_model', '=', 'mail.test.simple'), ('res_id', '=', test_record.id)]
***************************************************************************************
search
[('res_model', '=', 'mail.test.simple'), ('res_id', '=', test_record.id), ('partner_id', '=', self.user_employee.partner_id.id)]
***************************************************************************************
search
[('res_model', '=', 'mail.test.simple'), ('res_id', '=', test_record.id), ('partner_id', '=', self.partner_portal.id)]
***************************************************************************************
search
[('res_model', '=', 'mail.test.simple'), ('res_id', '=', test_record.id), ('partner_id', '=', self.user_employee.partner_id.id)]
***************************************************************************************
search
[('res_model', '=', 'mail.test.simple'), ('res_id', '=', test_record.id), ('partner_id', '=', self.user_employee.partner_id.id)]
***************************************************************************************
create
{'name': 'Valid Lelitre', 'email': 'valid.lelitre@agrolait.com', 'country_id': self.env.ref('base.be').id, 'mobile': '0456001122', 'active': False}
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
create
{'name': 'demo1', 'email': 'demo1@test.com'}
***************************************************************************************
create
{'login': 'demo1', 'partner_id': partner.id, 'notification_type': 'email'}
***************************************************************************************
search
[('model', '=', 'mail.test.track'), ('res_id', '=', sub.id), ('partner_ids', 'in', partner.id)]
***************************************************************************************
create
{'name': 'demo1', 'email': 'demo1@test.com'}
***************************************************************************************
create
{'login': 'demo1', 'partner_id': common_partner.id, 'notification_type': 'email'}
***************************************************************************************
create
{'login': 'demo2', 'partner_id': common_partner.id, 'notification_type': 'inbox'}
***************************************************************************************
create
{'name': 'Test Track', 'user_id': user_2.id}
***************************************************************************************
search
[('res_id', '=', test.id), ('model', '=', 'mail.test.track'), ('message_type', '=', 'user_notification')]
***************************************************************************************
search
[('mail_message_id', '=', mail_message.id), ('res_partner_id', '=', common_partner.id)]
***************************************************************************************
_get_recipient_data
test'comment'subtype.id
***************************************************************************************
create
{'name': 'demo1', 'email': 'demo1@test.com'}
***************************************************************************************
create
{'login': 'demo1', 'partner_id': common_partner.id, 'notification_type': 'inbox'}
***************************************************************************************
create
{'name': 'Test Track', 'user_id': user_1.id}
***************************************************************************************
search
[('res_id', '=', test_id), ('model', '=', 'mail.test.track'), ('message_type', '=', 'user_notification')]
***************************************************************************************
search
[('res_id', '=', test_id), ('model', '=', 'mail.test.track'), ('message_type', '=', 'user_notification')]
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_context
self._test_context
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
message_parse
self.from_string(plaintext)
***************************************************************************************
message_parse
self.from_string(multipart)
***************************************************************************************
message_parse
self.from_string(test_mail_data.MAIL_MULTIPART_MIXED)
***************************************************************************************
message_parse
self.from_string(test_mail_data.MAIL_MULTIPART_MIXED_TWO)
***************************************************************************************
message_parse
self.from_string(test_mail_data.MAIL_SINGLE_BINARY)
***************************************************************************************
message_parse
self.from_string(test_mail_data.MAIL_MULTIPART_WEIRD_FILENAME)
***************************************************************************************
message_parse
self.from_string(test_mail_data.MAIL_NO_FINAL_RECIPIENT)
***************************************************************************************
message_parse
self.from_string(test_mail_data.MAIL_NO_BODY)
***************************************************************************************
message_parse
self.from_string(mail)
***************************************************************************************
message_parse
self.from_string(mail)
***************************************************************************************
message_parse
self.from_string(mail)
***************************************************************************************
message_parse
self.from_string(test_mail_data.MAIL_XHTML)
***************************************************************************************
create
{'name': 'Test Record', 'alias_name': 'alias.test', 'alias_contact': 'followers'}
***************************************************************************************
create
{'alias_model_id': self.env['ir.model']._get('mail.test.container').id, 'alias_name': 'bidule...inc.'}
***************************************************************************************
create
{'alias_model_id': self.env['ir.model']._get('mail.test.container').id, 'alias_name': 'b4r+_#_R3wl$$'}
***************************************************************************************
create
{'alias_model_id': alias_model_id, 'alias_name': 'unused.test.alias'}
***************************************************************************************
create
{'name': 'Test Record', 'alias_name': 'test.record', 'alias_contact': 'followers', 'alias_bounced_content': False}
***************************************************************************************
create
{'name': 'Brice Denisse', 'email': 'from.test@example.com'}
***************************************************************************************
create
{'name': 'FOllower Denisse', 'email': 'from.test@example.com'}
***************************************************************************************
create
{'name': 'Brice Denisse', 'email': 'from.test@test.com'}
***************************************************************************************
create
{'alias_name': 'from.test', 'alias_model_id': self.env['ir.model']._get('mail.test.gateway').id}
***************************************************************************************
set_param
'mail.catchall.domain'''
***************************************************************************************
create
{'alias_name': 'test', 'alias_user_id': False, 'alias_model_id': self.env['ir.model']._get('mail.test.container').id, 'alias_contact': 'everyone'}
***************************************************************************************
search
[('name', '=', 'Test Subject')]
***************************************************************************************
create
{'alias_name': 'test', 'alias_user_id': False, 'alias_model_id': self.env['ir.model']._get('mail.test.container').id, 'alias_contact': 'everyone'}
***************************************************************************************
search
[('name', '=', 'Test Subject')]
***************************************************************************************
create
{'alias_name': 'test', 'alias_user_id': False, 'alias_model_id': self.env['ir.model']._get('mail.test.container').id, 'alias_contact': 'everyone'}
***************************************************************************************
search
[('name', '=', 'Test Subject')]
***************************************************************************************
create
{'alias_name': 'test', 'alias_user_id': False, 'alias_model_id': self.env['ir.model']._get('mail.test.container').id, 'alias_contact': 'everyone'}
***************************************************************************************
search
[('name', '=', 'Test Subject')]
***************************************************************************************
create
{'email_from': 'Another name <%s>' % self.partner_1.email}
***************************************************************************************
create
{'email_from': 'Yet Another name <%s>' % self.partner_1.email.upper()}
***************************************************************************************
create
{'name': 'Test', 'channel_partner_ids': [(4, self.partner_1.id)]}
***************************************************************************************
create
{'alias_name': 'test.alias', 'alias_user_id': False, 'alias_model_id': self.env['ir.model']._get('mail.test.container').id, 'alias_contact': 'everyone'}
***************************************************************************************
create
{'alias_name': 'test.alias', 'alias_user_id': False, 'alias_model_id': self.env['ir.model']._get('mail.test.gateway').id, 'alias_contact': 'everyone'}
***************************************************************************************
create
{'alias_name': 'test.alias', 'alias_user_id': False, 'alias_model_id': self.env['ir.model']._get('mail.test.container').id, 'alias_contact': 'everyone'}
***************************************************************************************
search
[('message_id', '=', msgID)]
***************************************************************************************
search
[('message_id', '=', msgID)]
***************************************************************************************
create
{'alias_name': 'base64-lover', 'alias_model_id': self.env['ir.model']._get(target_model).id, 'alias_defaults': '{}', 'alias_contact': 'everyone'}
***************************************************************************************
create
{'alias_name': 'base64-lover', 'alias_model_id': self.env['ir.model']._get(target_model).id, 'alias_defaults': "{'type': 'second'}", 'alias_contact': 'everyone'}
***************************************************************************************
search_count
[('message_id', 'ilike', '<123?456.diff1@agrolait.com>')]
***************************************************************************************
create
{'email_cc': 'cc1 <cc1@example.com>, cc2@example.com'}
***************************************************************************************
create
{}
***************************************************************************************
_get
'mail.test.container'
***************************************************************************************
_get
'mail.test.container'
***************************************************************************************
_get
'mail.test.gateway'
***************************************************************************************
create
{'alias_model_id': alias_model_id, 'alias_name': catchall_alias}
***************************************************************************************
create
{'alias_model_id': alias_model_id, 'alias_name': bounce_alias}
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
_get
'mail.test.container'
***************************************************************************************
_get
'mail.test.container'
***************************************************************************************
_get
'mail.test.gateway'
***************************************************************************************
_get
'mail.test.gateway'
***************************************************************************************
_get
'mail.test.gateway'
***************************************************************************************
_get
'mail.test.container'
***************************************************************************************
_get
'mail.test.container'
***************************************************************************************
_get
'mail.test.container'
***************************************************************************************
_get
'mail.test.container'
***************************************************************************************
_get
'mail.test.container'
***************************************************************************************
_get
'mail.test.gateway'
***************************************************************************************
_get
'mail.test.container'
***************************************************************************************
_get
target_model
***************************************************************************************
_get
target_model
***************************************************************************************
_get
'mail.test.gateway'
***************************************************************************************
create
base_values
***************************************************************************************
create
dict(base_values, **{'model': self.test_record._name, 'res_id': self.test_record.id})
***************************************************************************************
create
[{**mail_values, 'email_from': 'user_1@test_2.com', 'mail_server_id': self.server_domain.id} for _ in range(5)]
***************************************************************************************
create
{'name': 'Ernest Partner'}
***************************************************************************************
create
{'subject': 'S', 'body': 'B', 'subtype_id': self.ref('mail.mt_comment'), 'notification_ids': [(0, 0, {'res_partner_id': self.partner.id, 'mail_mail_id': mail.id, 'notification_type': 'email', 'is_read': True, 'notification_status': 'ready'})]}
***************************************************************************************
search
[('res_partner_id', '=', self.partner.id)]
***************************************************************************************
_patch_method
'send_email'send_email
***************************************************************************************
_revert_method
'send_email'
***************************************************************************************
create
[{**mail_values, 'email_from': 'test@unknown_domain.com'} for _ in range(5)]
***************************************************************************************
create
[{**mail_values, 'email_from': 'test_2@unknown_domain.com'} for _ in range(5)]
***************************************************************************************
create
[{**mail_values, 'email_from': 'user_1@test_2.com'} for _ in range(5)]
***************************************************************************************
create
[{**mail_values, 'email_from': 'user_2@test_2.com'} for _ in range(5)]
***************************************************************************************
create
{'name': 'Test1'}
***************************************************************************************
create
[{'model': 'mail.test.simple', 'res_id': record1.id}]
***************************************************************************************
create
{'name': 'Second Test Company'}
***************************************************************************************
create
{'name': 'Test1', 'company_id': company_2.id}
***************************************************************************************
set_param
'mail.catchall.domain'self.alias_domain
***************************************************************************************
set_param
'mail.catchall.domain'self.alias_domain
***************************************************************************************
create
{'name': 'Test', 'email_from': 'ignasse@example.com'}
***************************************************************************************
create
{'name': 'Test', 'email_from': 'ignasse@example.com'}
***************************************************************************************
create
{'alias_name': 'MegaLias', 'alias_user_id': False, 'alias_model_id': self.env['ir.model']._get('mail.test.simple').id, 'alias_parent_model_id': self.env['ir.model']._get('mail.test.simple').id, 'alias_parent_thread_id': test_record.id}
***************************************************************************************
create
{'subject': '_ZTest', 'body': 'A', 'subtype_id': self.ref('mail.mt_comment')}
***************************************************************************************
create
{'subject': '_ZTest', 'body': 'A+B', 'subtype_id': self.ref('mail.mt_comment'), 'partner_ids': [(6, 0, [self.user_public.partner_id.id])]}
***************************************************************************************
create
{'subject': '_ZTest', 'body': 'A Pigs', 'subtype_id': False, 'model': 'mail.channel', 'res_id': self.group_pigs.id}
***************************************************************************************
create
{'subject': '_ZTest', 'body': 'A+P Pigs', 'subtype_id': self.ref('mail.mt_comment'), 'model': 'mail.channel', 'res_id': self.group_pigs.id, 'partner_ids': [(6, 0, [self.user_public.partner_id.id])]}
***************************************************************************************
create
{'subject': '_ZTest', 'body': 'A+E Pigs', 'subtype_id': self.ref('mail.mt_comment'), 'model': 'mail.channel', 'res_id': self.group_pigs.id, 'partner_ids': [(6, 0, [self.user_employee.partner_id.id])]}
***************************************************************************************
create
{'subject': '_ZTest', 'body': 'A Birds', 'subtype_id': self.ref('mail.mt_comment'), 'model': 'mail.channel', 'res_id': self.group_private.id}
***************************************************************************************
search
[('subject', 'like', '_ZTest')]
***************************************************************************************
create
{'datas': base64.b64encode(b'My attachment'), 'name': 'doc.txt'}
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
set_param
'mail.catchall.domain'False
***************************************************************************************
create
{'name': 'Jitendra Prajapati (jpr-odoo)', 'email': 'jpr@odoo.com'}
***************************************************************************************
search
[('key', '=', 'mail.catchall.domain')]
***************************************************************************************
search
[('key', '=', 'mail.catchall.alias')]
***************************************************************************************
search
[('key', '=', 'mail.catchall.domain')]
***************************************************************************************
search
[('key', '=', 'mail.catchall.alias')]
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_public
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_portal
***************************************************************************************
with_user
self.user_portal
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_context
self._test_context
***************************************************************************************
_get
'mail.test.simple'
***************************************************************************************
_get
'mail.test.simple'
***************************************************************************************
with_user
self.user_public
***************************************************************************************
with_user
self.user_public
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
browse
self.test_record.ids
***************************************************************************************
browse
self.test_record.ids
***************************************************************************************
create
[{'name': 'Test', 'company_id': self.user_employee.company_id.id}, {'name': 'Test', 'company_id': self.user_employee_c2.company_id.id}]
***************************************************************************************
browse
self.test_record.ids
***************************************************************************************
browse
self.test_template.ids
***************************************************************************************
browse
self.test_record.ids
***************************************************************************************
create
{'email': 'robert.carlos@test.example.com', 'lang': 'es_ES', 'name': 'Roberto Carlos'}
***************************************************************************************
browse
self.test_template.ids
***************************************************************************************
browse
self.test_record.ids
***************************************************************************************
browse
self.test_template.ids
***************************************************************************************
create
{'mail_template_id': test_template.id, 'resource_ref': test_record, 'lang': 'es_ES'}
***************************************************************************************
new
{'name': 'Brave New Partner'}
***************************************************************************************
create
{'name': 'Actual Partner'}
***************************************************************************************
create
{'email_cc': 'cc1@example.com, cc2@example.com, cc3 <cc3@example.com>'}
***************************************************************************************
create
{'login': 'user1', 'name': 'User 1'}
***************************************************************************************
create
{'login': 'user2', 'name': 'User 2'}
***************************************************************************************
create
{'name': 'Company A', 'user_ids': [(4, self.ref('base.user_admin'))]}
***************************************************************************************
create
{'name': 'Company B'}
***************************************************************************************
create
{'name': 'Multi Company Record', 'company_id': self.company_A.id}
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
user1
***************************************************************************************
with_user
user2
***************************************************************************************
with_user
user1
***************************************************************************************
with_user
user2
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_context
{'mail_message_to_resend': message.id}
***************************************************************************************
with_context
{'mail_message_to_resend': message.id}
***************************************************************************************
with_context
{'mail_message_to_resend': message.id}
***************************************************************************************
with_context
{'mail_message_to_resend': message.id}
***************************************************************************************
with_context
{'mail_message_to_resend': message.id}
***************************************************************************************
browse
self.test_record.ids
***************************************************************************************
browse
self.test_message.ids
***************************************************************************************
browse
test_record.id
***************************************************************************************
browse
test_record.id
***************************************************************************************
_notify_classify_recipients
pdata'My Custom Model Name'
***************************************************************************************
search
[('email', 'in', [email_1, email_2])]
***************************************************************************************
search
[('email', '=', 'test@example.com')]
***************************************************************************************
browse
self.test_record.ids
***************************************************************************************
with_user
self.user_admin
***************************************************************************************
with_user
self.user_admin
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_context
self._test_context
***************************************************************************************
with_context
self._test_context
***************************************************************************************
create
{'name': 'Customer', 'email': 'cust@example.com'}
***************************************************************************************
create
{'name': 'company1'}
***************************************************************************************
create
{'model_id': self.env['ir.model']._get('mail.test.track').id, 'name': 'AutoTemplate', 'subject': 'autoresponse', 'email_from': self.env.user.email_formatted, 'email_to': '{{ object.email_from }}', 'body_html': '<div>A nice body</div>'}
***************************************************************************************
create
{'name': 'MAGIC CODE WOOP WOOP', 'description': 'SPECIAL CONTENT UNLOCKED'}
***************************************************************************************
create
{'name': 'mt_name_changed', 'model': 'mail.message.subtype', 'module': 'mail', 'res_id': mt_name_changed.id}
***************************************************************************************
create
{'name': 'SPECIAL CONTENT UNLOCKED', 'subject': 'SPECIAL CONTENT UNLOCKED', 'model_id': self.env.ref('test_mail.model_mail_test_container').id, 'auto_delete': True, 'body_html': '<div>WOOP WOOP</div>'}
***************************************************************************************
create
{'name': 'Zizizatestmailname', 'description': 'Zizizatestmaildescription'}
***************************************************************************************
create
{}
***************************************************************************************
create
{'name': 'Foo', 'email': 'foo@example.com', 'phone': '1234567890'}
***************************************************************************************
search
[('mail_message_id', '=', self.record.message_ids.id)]
***************************************************************************************
search
[('model', '=', 'mail.test.ticket'), ('name', '=', 'email_from')]
***************************************************************************************
create
{'email_from': email_new_partner, 'company_id': company1.id, 'user_id': self.env.user.id}
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
_get
'mail.test.track'
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
set_param
'mail.bounce.alias'self.alias_bounce
***************************************************************************************
set_param
'mail.catchall.domain'self.alias_domain
***************************************************************************************
set_param
'mail.catchall.alias'self.alias_catchall
***************************************************************************************
set_param
'mail.default.from'self.default_from
***************************************************************************************
create
{'name': 'Gemini Furniture', 'email': 'gemini.furniture39@example.com'}
***************************************************************************************
create
{'name': 'Ready Mat', 'email': 'ready.mat28@example.com'}
***************************************************************************************
create
{'name': 'The Jackson Group', 'email': 'jackson.group82@example.com'}
***************************************************************************************
create
{'name': 'Azure Interior', 'email': 'azure.Interior24@example.com'}
***************************************************************************************
create
[{'name': 'Object 0', 'value': 0, 'partner_id': self.res_partner_3.id}, {'name': 'Object 1', 'value': 10, 'partner_id': self.res_partner_3.id}, {'name': 'Object 2', 'value': 20, 'partner_id': self.res_partner_4.id}, {'name': 'Object 3', 'value': 30, 'partner_id': self.res_partner_10.id}, {'name': 'Object 4', 'value': 40, 'partner_id': self.res_partner_12.id}]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'Test', 'track': 'Y', 'value': 40, 'partner_id': self.res_partner_12.id}
***************************************************************************************
create
{'name': 'Test'}
***************************************************************************************
create
{'name': 'TestTemplate', 'model_id': self.env['ir.model']._get('mail.test.ticket').id, 'subject': 'About {{ object.name }}', 'body_html': '<p>Hello <t t-out="object.name"/></p>', 'email_from': '{{ object.user_id.email_formatted }}', 'partner_to': '{{ object.customer_id.id }}', 'email_to': '{{ ("%s Customer <%s>" % (object.name, object.email_from)) }}'}
***************************************************************************************
create
{'name': 'Test'}
***************************************************************************************
with_context
{'default_res_model': 'mail.test.activity'}
***************************************************************************************
create
{'name': 'Test'}
***************************************************************************************
browse
self.test_record_full.id
***************************************************************************************
browse
self.test_record_full.id
***************************************************************************************
browse
self.test_record_full.id
***************************************************************************************
browse
self.test_template_full.id
***************************************************************************************
create
{'name': 'Test'}
***************************************************************************************
create
{'name': 'Test'}
***************************************************************************************
create
{'name': 'Test'}
***************************************************************************************
create
{'name': 'Test'}
***************************************************************************************
create
{'name': 'Test'}
***************************************************************************************
create
{'name': 'Test'}
***************************************************************************************
create
{'name': 'Test'}
***************************************************************************************
create
{'name': 'Test'}
***************************************************************************************
create
{'name': 'Test'}
***************************************************************************************
create
{'name': 'Zizizatestname'}
***************************************************************************************
with_context
self._quick_create_ctx
***************************************************************************************
create
{'name': 'Test', 'container_id': False, 'customer_id': False, 'user_id': self.user_portal.id}
***************************************************************************************
create
{'name': 'Test', 'container_id': self.container.id, 'customer_id': self.customer.id, 'user_id': self.env.uid}
***************************************************************************************
create
{'name': 'Test', 'container_id': False, 'customer_id': False, 'user_id': self.user_portal.id}
***************************************************************************************
create
{'name': 'Test', 'container_id': container2.id, 'customer_id': False, 'user_id': self.user_portal.id}
***************************************************************************************
create
{'name': 'Test', 'container_id': self.container.id, 'customer_id': False, 'user_id': self.user_portal.id, 'mail_template': self.env.ref('test_mail.mail_test_ticket_tracking_tpl').id}
***************************************************************************************
_get
self.container._name'name'
***************************************************************************************
_get
self.container._name'customer_id'
***************************************************************************************
create
[{'model': record._name, 'res_id': record.id} for record in records]
***************************************************************************************
create
{'name': 'X'}
***************************************************************************************
create
{'name': 'Test'}
***************************************************************************************
browse
test_records_sudo.ids
***************************************************************************************
create
{'name': 'Test', 'container_id': container_id, 'customer_id': customer_id, 'user_id': user_id}
***************************************************************************************
create
{'name': 'Test'}
***************************************************************************************
with_context
self._quick_create_ctx
***************************************************************************************
with_context
self._quick_create_ctx
***************************************************************************************
with_context
self._quick_create_ctx
***************************************************************************************
with_context
self._quick_create_ctx
***************************************************************************************
with_context
self._quick_create_ctx
***************************************************************************************
with_context
self._quick_create_ctx
***************************************************************************************
create
{'name': 'Test'}
***************************************************************************************
with_context
self._quick_create_ctx
***************************************************************************************
with_context
self._quick_create_ctx
***************************************************************************************
with_context
self._quick_create_ctx
***************************************************************************************
with_context
self._quick_create_ctx
***************************************************************************************
with_context
self._quick_create_ctx
***************************************************************************************
with_context
self._quick_create_ctx
***************************************************************************************
with_context
self._quick_create_ctx
***************************************************************************************
with_user
self.env.user
***************************************************************************************
_get
'mail.test.ticket'
***************************************************************************************
with_context
{'default_composition_mode': 'comment', 'default_model': test_record._name, 'default_res_id': test_record.id}
***************************************************************************************
with_context
{'default_composition_mode': 'comment', 'default_model': test_record._name, 'default_res_id': test_record.id, 'mail_auto_delete': False}
***************************************************************************************
with_context
{'default_composition_mode': 'comment', 'default_model': test_record._name, 'default_res_id': test_record.id, 'default_template_id': test_template.id}
***************************************************************************************
_xmlid_to_res_id
'mail.mt_comment'
***************************************************************************************
_xmlid_to_res_id
'mail.mt_note'
***************************************************************************************
create
{'email': '', 'groups_id': [Command.set([self.ref('base.group_user')])], 'name': 'Test User', 'login': 'testuser', 'password': 'testuser'}
***************************************************************************************
browse
self.mailing_bl.ids
***************************************************************************************
create
{'email': recipients[3].email_normalized}
***************************************************************************************
create
{'email': recipients[4].email_normalized}
***************************************************************************************
create
{'name': 'TestRecord_void_1'}
***************************************************************************************
create
{'name': 'TestRecord_falsy_1', 'email_from': 'falsymail'}
***************************************************************************************
_get
'mailing.test.optout'
***************************************************************************************
create
{'name': 'Xmas Spam', 'subject': 'Xmas Spam', 'mailing_model_id': self.env['ir.model']._get('mail.test.sms').id, 'mailing_type': 'sms'}
***************************************************************************************
create
{'name': 'Xmas Spam', 'subject': 'Xmas Spam', 'mailing_model_id': self.env['ir.model']._get('mail.test.sms.bl').id, 'mailing_type': 'sms'}
***************************************************************************************
create
{'name': 'MassSMSTest_nr1', 'customer_id': self.partners[0].id, 'phone_nbr': '0456999999'}
***************************************************************************************
create
{'name': 'MassSMSTest_void', 'customer_id': False, 'phone_nbr': ''}
***************************************************************************************
create
{'name': 'MassSMSTest_falsy_1', 'customer_id': False, 'phone_nbr': 'abcd'}
***************************************************************************************
create
{'name': 'MassSMSTest_falsy_2', 'customer_id': False, 'phone_nbr': '04561122'}
***************************************************************************************
create
{'name': 'MassSMSTest_bl_1', 'customer_id': False, 'phone_nbr': '0456110011'}
***************************************************************************************
create
{'number': '0456110011'}
***************************************************************************************
create
{'name': 'Partner_nr2', 'country_id': country_be_id, 'mobile': '0456449999'}
***************************************************************************************
create
{'name': 'MassSMSTest_nr2', 'customer_id': nr2_partner.id, 'phone_nbr': self.records[0].phone_nbr}
***************************************************************************************
search
[('mass_mailing_id', 'in', self.mailing.ids)]
***************************************************************************************
create
{'name': 'TestButton', 'subject': 'Subject {{ object.name }}', 'preview': 'Preview {{ object.name }}', 'state': 'draft', 'mailing_type': 'sms', 'body_plaintext': 'Hello {{ object.name }}', 'mailing_model_id': self.env['ir.model']._get('res.partner').id}
***************************************************************************************
browse
self.mailing.ids
***************************************************************************************
browse
self.mailing_sms.ids
***************************************************************************************
create
[{'name': 'SMSTest on %s' % partner.name, 'customer_id': partner.id} for partner in self.partners]
***************************************************************************************
create
[{'name': 'Duplicate SMS on %s' % self.partners[0].name, 'customer_id': self.partners[0].id}]
***************************************************************************************
browse
self.mailing_sms.ids
***************************************************************************************
create
[{'name': 'SMSTest on %s' % partner.name, 'customer_ids': [(4, partner.id)]} for partner in self.partners]
***************************************************************************************
browse
self.mailing_sms.ids
***************************************************************************************
create
{'name': 'Xmas Spam', 'subject': 'Xmas Spam', 'mailing_model_id': self.env['ir.model']._get('mail.test.sms').id, 'mailing_type': 'sms', 'mailing_domain': '%s' % repr([('name', 'ilike', 'MassSMSTest')]), 'sms_template_id': self.sms_template.id, 'sms_allow_unsubscribe': False}
***************************************************************************************
with_user
self.user_marketing
***************************************************************************************
_get
'mail.test.sms.bl.optout'
***************************************************************************************
_get
'mail.test.sms'
***************************************************************************************
_get
'mail.test.sms.bl'
***************************************************************************************
_get
'res.partner'
***************************************************************************************
_get
'mail.test.sms.partner'
***************************************************************************************
_get
'mail.test.sms.partner.2many'
***************************************************************************************
_get
'mail.test.sms'
***************************************************************************************
channel_fetch_listeners
channel.uuid
***************************************************************************************
search
[('id', '=', message.id + 1)]
***************************************************************************************
_xmlid_to_res_id
'base.partner_root'
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
search
[('phone_sanitized_blacklisted', '=', True)]
***************************************************************************************
search
[('phone_sanitized_blacklisted', '=', True)]
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
create
[{'number': p.phone_sanitized, 'active': True} for p in self.partners[:5]]
***************************************************************************************
create
[{'number': p.phone_sanitized, 'active': True} for p in self.partners[:5]]
***************************************************************************************
create
[{'number': p.phone_sanitized, 'active': True} for p in self.partners[:5]]
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
create
{'type': 'model', 'name': 'sms.template,body', 'lang': 'fr_FR', 'res_id': self.sms_template.id, 'src': self.sms_template.body, 'value': 'Cher·e· {{ object.display_name }} ceci est un SMS.'}
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
create
{'type': 'model', 'name': 'sms.template,body', 'lang': 'fr_FR', 'res_id': self.sms_template.id, 'src': self.sms_template.body, 'value': 'Hello {{ object.display_name }} ceci est en français.'}
***************************************************************************************
create
{'name': 'Test', 'customer_id': self.partners[2].id}
***************************************************************************************
create
{'name': 'Test', 'customer_id': self.partners[1].id}
***************************************************************************************
create
{'name': 'TestBase'}
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
with_context
self._quick_create_ctx
***************************************************************************************
create
{'name': 'Test Template', 'model_id': self.env['ir.model']._get('mail.test.sms').id, 'body': 'Dear {{ object.display_name }} this is an SMS.'}
***************************************************************************************
with_context
self._quick_create_ctx
***************************************************************************************
with_context
self._quick_create_ctx
***************************************************************************************
_get
'mail.test.sms'
***************************************************************************************
create
{'name': 'Test Template', 'model_id': self.env['ir.model']._get('mail.test.sms').id, 'body': 'Dear {{ object.display_name }} this is an SMS.'}
***************************************************************************************
create
{'name': 'Test Template', 'model_id': self.env['ir.model']._get('mail.test.sms').id, 'body': 'Dear {{ object.display_name }} this is an SMS.'}
***************************************************************************************
create
{'name': 'this_should_exists', 'module': 'test_mail_full', 'model': sms_template._name, 'res_id': sms_template.id}
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
create
{'customer_id': self.partner_1.id}
***************************************************************************************
create
{'customer_id': False}
***************************************************************************************
create
{'customer_ids': [(4, self.partner_1.id)]}
***************************************************************************************
create
{'customer_ids': [(4, self.partner_1.id), (4, self.partner_2.id)]}
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
browse
self.test_record.id
***************************************************************************************
_get
'mail.test.sms'
***************************************************************************************
_get
'mail.test.sms'
***************************************************************************************
browse
self.records.ids
***************************************************************************************
browse
self.records.ids
***************************************************************************************
browse
self.records.ids
***************************************************************************************
browse
self.records.ids
***************************************************************************************
_shorten_links_text
'Welcome to %s !' % linkself.tracker_values
***************************************************************************************
search
[('url', '=', link)]
***************************************************************************************
_shorten_links_text
'Welcome to %s !' % linkself.tracker_values
***************************************************************************************
search
[('url', '=', link)]
***************************************************************************************
_shorten_links_text
Falseself.tracker_values
***************************************************************************************
_shorten_links_text
'Welcome to %s !' % linkself.tracker_values
***************************************************************************************
_shorten_links_text
'Welcome to %s !' % linkself.tracker_values
***************************************************************************************
create
{'subject': 'Minimal mailing', 'mailing_model_id': self.env['ir.model']._get('mail.test.sms').id, 'mailing_type': 'sms'}
***************************************************************************************
create
{'body': 'Welcome to https://test.odoo.com', 'number': '10', 'mailing_id': mailing.id}
***************************************************************************************
create
{'body': 'Welcome to https://test.odoo.com/r/RAOUL', 'number': '11'}
***************************************************************************************
create
{'body': 'Welcome to https://test.odoo.com/r/RAOUL', 'number': '12', 'mailing_id': mailing.id}
***************************************************************************************
create
{'body': 'Welcome to https://test.odoo.com/leodagan/r/RAOUL', 'number': '13', 'mailing_id': mailing.id}
***************************************************************************************
set_param
'sms.session.batch.size''3'
***************************************************************************************
search
[('url', '=', link)]
***************************************************************************************
search
[('url', '=', link)]
***************************************************************************************
search
[('url', '=', link)]
***************************************************************************************
search
[('url', '=', link)]
***************************************************************************************
search
[('url', '=', link)]
***************************************************************************************
search
[('url', '=', link)]
***************************************************************************************
_get
'mail.test.sms'
***************************************************************************************
browse
self.sms_all.ids
***************************************************************************************
browse
self.sms_all.ids
***************************************************************************************
browse
self.sms_all.ids
***************************************************************************************
browse
self.sms_all.ids
***************************************************************************************
browse
self.sms_all.ids
***************************************************************************************
browse
self.sms_all.ids
***************************************************************************************
browse
self.sms_all.ids
***************************************************************************************
browse
self.sms_all.ids
***************************************************************************************
with_user
self.user_employee
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
create
{'type': 'model', 'name': 'sms.template,body', 'lang': 'fr_FR', 'res_id': self.sms_template.id, 'src': self.sms_template.body, 'value': self.body_fr}
***************************************************************************************
create
{'name': 'Test', 'customer_id': self.partner_2.id}
***************************************************************************************
create
[{'email': 'Arya.Stark@example.com'}]
***************************************************************************************
create
[{'email': 'Not A Stark <john.snow@example.com>'}]
***************************************************************************************
search
[]
***************************************************************************************
_add
'Arya.Stark@EXAMPLE.com'
***************************************************************************************
_remove
'Arya.Stark@EXAMPLE.com'
***************************************************************************************
create
[{'email': self._base_list[0]}, {'email': self._base_list[1]}, {'email': 'Another Ned Stark <%s>' % self._base_list[1]}]
***************************************************************************************
create
[{'email': self._base_list[0]}, {'email': self._base_list[1]}, {'email': 'Not Ned Stark <jaimie.lannister@example.com>'}]
***************************************************************************************
search
[('email', '=', 'john.snow@example.com')]
***************************************************************************************
search
[('email', '=', 'Not A Stark <john.snow@example.com>')]
***************************************************************************************
search
[('email', '=', '"John J. Snow" <john.snow@example.com>')]
***************************************************************************************
search
[('email', '=', 'Aegon? <john.snow@example.com>')]
***************************************************************************************
search
[('email', '=', '"John; "You know Nothing" Snow" <john.snow@example.com>')]
***************************************************************************************
search
[('email', '=', 'john.SNOW@example.COM>')]
***************************************************************************************
search
[('email', 'ilike', 'John')]
***************************************************************************************
search
[('email', 'ilike', 'n.SNOW@example.cO>')]
***************************************************************************************
create
[{'email': 'Arya.Stark@example.com'}]
***************************************************************************************
create
[{'email': 'Arya.Stark@example.com'}]
***************************************************************************************
browse
self.mailing_bl.ids
***************************************************************************************
browse
self.target_rec.ids
***************************************************************************************
search
[('is_blacklisted', '=', False)]
***************************************************************************************
create
{'email_from': 'arya.stark@example.com'}
***************************************************************************************
create
{'email_from': 'not.arya.stark@example.com'}
***************************************************************************************
create
{'email_from': 'arya.stark@example.com'}
***************************************************************************************
create
{'email_from': 'not.arya.stark@example.com'}
***************************************************************************************
search
[('is_blacklisted', '=', False)]
***************************************************************************************
search
[('is_blacklisted', '!=', True)]
***************************************************************************************
search
[('is_blacklisted', '=', True)]
***************************************************************************************
search
[('is_blacklisted', '!=', False)]
***************************************************************************************
create
{'email_from': 'Arya Stark <arya.stark@example.com>'}
***************************************************************************************
search
[('is_blacklisted', '=', True)]
***************************************************************************************
search
[('is_blacklisted', '=', False)]
***************************************************************************************
search
[('is_blacklisted', '=', False)]
***************************************************************************************
search_or_create
{'url': 'https://www.example.com'}
***************************************************************************************
create
{'link_id': self.link.id, 'ip': '100.00.00.00', 'country_id': self.env.ref('base.fr').id}
***************************************************************************************
create
{}
***************************************************************************************
create
{'mass_mailing_id': self.mailing_bl.id, 'model': record._name, 'res_id': record.id}
***************************************************************************************
create
{'name': 'TestName', 'subject': 'TestSubject', 'body_html': 'Hello <t t-out="object.name" />', 'reply_to_mode': 'new', 'reply_to': '%s@%s' % (self.test_alias.alias_name, self.test_alias.alias_domain), 'keep_archives': True, 'mailing_model_id': self.env['ir.model']._get('res.partner').id, 'mailing_domain': '%s' % [('id', 'in', customers.ids)]}
***************************************************************************************
search
[('model', '=', customers._name), ('res_id', 'in', customers.ids)]
***************************************************************************************
browse
self.mailing_bl.ids
***************************************************************************************
browse
self.mailing_bl.ids
***************************************************************************************
browse
self.mailing_bl.ids
***************************************************************************************
create
{'name': 'Source test'}
***************************************************************************************
create
{'name': 'Medium test'}
***************************************************************************************
create
{'name': 'Campaign test'}
***************************************************************************************
create
{'name': 'UTMTest', 'subject': subject, 'body_html': '<p>Hello <t t-out="object.name"/></p>', 'reply_to_mode': 'new', 'reply_to': '%s@%s' % (self.test_alias.alias_name, self.test_alias.alias_domain), 'keep_archives': True, 'mailing_model_id': self.env['ir.model']._get('mailing.list').id, 'contact_list_ids': [(4, self.mailing_list_1.id)], 'source_id': source.id, 'medium_id': medium.id, 'campaign_id': campaign.id}
***************************************************************************************
search
[('model', '=', self.mailing_list_1.contact_ids._name), ('res_id', 'in', self.mailing_list_1.contact_ids.ids)]
***************************************************************************************
search
[('name', '=', 'Re: %s' % subject)]
***************************************************************************************
browse
self.mailing_bl.ids
***************************************************************************************
create
{'email': recipients[2].email_normalized}
***************************************************************************************
create
{'email': recipients[3].email_normalized}
***************************************************************************************
create
{'email': recipients[4].email_normalized}
***************************************************************************************
action_remove_with_reason
recipients[2].email_normalized'human error'
***************************************************************************************
flush
['active']
***************************************************************************************
browse
self.mailing_bl.ids
***************************************************************************************
create
{'email': recipients[4].email_normalized}
***************************************************************************************
create
{'name': 'test 1A', 'email': 'test@test.example.com'}
***************************************************************************************
create
{'name': 'test 1B', 'email': 'test@test.example.com'}
***************************************************************************************
create
{'name': 'test 3', 'email': 'test3@test.example.com'}
***************************************************************************************
create
{'name': 'test 4', 'email': 'test4@test.example.com'}
***************************************************************************************
create
{'name': 'test 5', 'email': 'test5@test.example.com'}
***************************************************************************************
create
{'name': 'A', 'contact_ids': [(4, mailing_contact_1.id), (4, mailing_contact_2.id), (4, mailing_contact_3.id), (4, mailing_contact_5.id)]}
***************************************************************************************
create
{'name': 'B', 'contact_ids': [(4, mailing_contact_3.id), (4, mailing_contact_4.id)]}
***************************************************************************************
search
['|', '|', '&', ('contact_id', '=', mailing_contact_1.id), ('list_id', '=', mailing_list_1.id), '&', ('contact_id', '=', mailing_contact_3.id), ('list_id', '=', mailing_list_1.id), '&', ('contact_id', '=', mailing_contact_5.id), ('list_id', '=', mailing_list_1.id)]
***************************************************************************************
create
{'name': 'SourceName', 'subject': 'MailingSubject', 'body_html': '<p>Hello <t t-out="object.name"/></p>', 'mailing_model_id': self.env['ir.model']._get('mailing.list').id, 'contact_list_ids': [(4, ml.id) for ml in mailing_list_1 | mailing_list_2]}
***************************************************************************************
create
{'name': 'Customer_%02d' % x, 'email': '"Customer_%02d" <customer_%02d@test.example.com' % (x, x)}
***************************************************************************************
_get
'mailing.test.optout'
***************************************************************************************
_get
'mailing.test.optout'
***************************************************************************************
_get
'res.partner'
***************************************************************************************
_get
'mailing.test.utm'
***************************************************************************************
_get
'mailing.list'
***************************************************************************************
_get
'mailing.list'
***************************************************************************************
create
[{'subject': 'Mailing', 'body_html': 'Body for <t t-out="object.name" />', 'email_from': 'specific_user@test.com', 'mailing_model_id': self.env['ir.model']._get('mailing.test.optout').id}, {'subject': 'Mailing', 'body_html': 'Body for <t t-out="object.name" />', 'email_from': 'unknown_name@test.com', 'mailing_model_id': self.env['ir.model']._get('mailing.test.optout').id}]
***************************************************************************************
create
[{'subject': 'Mailing', 'body_html': 'Body for <t t-out="object.name" />', 'email_from': '"Testing" <unknow_email@unknow_domain.com>', 'mailing_model_id': self.env['ir.model']._get('mailing.test.optout').id}]
***************************************************************************************
create
[{'subject': 'Mailing', 'body_html': 'Body for <t t-out="object.name" />', 'email_from': self.server_user.from_filter, 'mailing_model_id': self.env['ir.model']._get('mailing.test.optout').id}, {'subject': 'Mailing', 'body_html': 'Body for <t t-out="object.name" />', 'email_from': 'unknow_email@unknow_domain.com', 'mailing_model_id': self.env['ir.model']._get('mailing.test.optout').id, 'mail_server_id': self.server_notification.id}]
***************************************************************************************
_get
'mailing.test.optout'
***************************************************************************************
_get
'mailing.test.optout'
***************************************************************************************
_get
'mailing.test.optout'
***************************************************************************************
_get
'mailing.test.optout'
***************************************************************************************
_get
'mailing.test.optout'
***************************************************************************************
create
{'name': 'TestButton', 'subject': 'Subject {{ object.name }}', 'preview': 'Preview {{ object.name }}', 'state': 'draft', 'mailing_type': 'mail', 'body_html': '<p>Hello <t t-out="object.name"/></p>', 'mailing_model_id': self.env['ir.model']._get('res.partner').id}
***************************************************************************************
create
{'email_to': 'test@test.com', 'mass_mailing_id': mailing.id}
***************************************************************************************
search
[]
***************************************************************************************
_get
'res.partner'
***************************************************************************************
set_param
'mail.bounce.alias'self.alias_bounce
***************************************************************************************
set_param
'mail.catchall.domain'self.alias_domain
***************************************************************************************
set_param
'mail.catchall.alias'self.alias_catchall
***************************************************************************************
set_param
'mail.default.from'self.default_from
***************************************************************************************
create
values
***************************************************************************************
create
{'name': 'Test', 'subject': 'Test', 'body_html': '<p>Hello <a role="button" href="https://www.example.com/foo/bar?baz=qux">quux</a><a role="button" href="/unsubscribe_from_list">Unsubscribe</a></p>', 'reply_to_mode': 'new', 'mailing_model_id': self.ref('test_mass_mailing.model_mailing_performance'), 'mailing_domain': [('id', 'in', self.mm_recs.ids)]}
***************************************************************************************
create
values
***************************************************************************************
create
{'name': 'Test', 'subject': 'Test', 'body_html': '<p>Hello <a role="button" href="https://www.example.com/foo/bar?baz=qux">quux</a><a role="button" href="/unsubscribe_from_list">Unsubscribe</a></p>', 'reply_to_mode': 'new', 'mailing_model_id': self.ref('test_mass_mailing.model_mailing_performance_blacklist'), 'mailing_domain': [('id', 'in', self.mm_recs.ids)]}
***************************************************************************************
create
{'email': 'rec.%s@example.com' % (x * 5)}
***************************************************************************************
search
[]
***************************************************************************************
browse
1
***************************************************************************************
create
{'name': 'My Super Country'}
***************************************************************************************
create
params
***************************************************************************************
create
params
***************************************************************************************
create
{'name': 'Adaa'}
***************************************************************************************
create
{'name': 'Test Website Redirect', 'redirect_type': '308', 'url_from': '/test_website/country/<model("res.country"):country>', 'url_to': '/redirected/country/<model("res.country"):country>'}
***************************************************************************************
create
{'name': 'Test Website Redirect', 'redirect_type': '308', 'url_from': '/test_website/200/<model("test.model"):rec>', 'url_to': '/test_website/308/<model("test.model"):rec>'}
***************************************************************************************
create
{'name': 'name', 'website_published': True}
***************************************************************************************
create
{'name': 'name', 'website_published': False}
***************************************************************************************
with_context
{'no_reset_password': True}
***************************************************************************************
create
{'name': 'Cash - Test', 'type': 'cash', 'code': 'CASH - Test'}
***************************************************************************************
create
{'code': 'X1012', 'name': 'Debtors - (test)', 'reconcile': True, 'user_type_id': self.env.ref('account.data_account_type_receivable').id}
***************************************************************************************
create
{'code': 'X1111', 'name': 'Creditors - (test)', 'user_type_id': self.env.ref('account.data_account_type_payable').id, 'reconcile': True}
***************************************************************************************
create
{'name': 'DIY Furniture Course', 'list_price': 100.0, 'type': 'service', 'is_published': True}
***************************************************************************************
create
{'title': 'Furniture Creation Certification', 'access_token': '5632a4d7-48cf-aaaa-8c52-2174d58cf50b', 'access_mode': 'public', 'users_can_go_back': True, 'users_login_required': True, 'scoring_type': 'scoring_with_answers', 'certification': True, 'certification_mail_template_id': self.env.ref('survey.mail_template_certification').id, 'is_attempts_limited': True, 'attempts_limit': 3, 'description': '<p>Test your furniture knowledge!</p>', 'question_and_page_ids': [(0, 0, {'title': 'Furniture', 'sequence': 1, 'is_page': True, 'description': '&lt;p&gt;Test your furniture knowledge!&lt;/p&gt'}), (0, 0, {'title': 'What type of wood is the best for furniture?', 'sequence': 2, 'question_type': 'simple_choice', 'constr_mandatory': True, 'suggested_answer_ids': [(0, 0, {'value': 'Fir', 'sequence': 1}), (0, 0, {'value': 'Oak', 'sequence': 2, 'is_correct': True, 'answer_score': 2.0}), (0, 0, {'value': 'Ash', 'sequence': 3}), (0, 0, {'value': 'Beech', 'sequence': 4})]}), (0, 0, {'title': 'Select all the furniture shown in the video', 'sequence': 3, 'question_type': 'multiple_choice', 'column_nb': '4', 'suggested_answer_ids': [(0, 0, {'value': 'Chair', 'sequence': 1, 'is_correct': True, 'answer_score': 1.0}), (0, 0, {'value': 'Table', 'sequence': 2, 'answer_score': -1.0}), (0, 0, {'value': 'Desk', 'sequence': 3, 'is_correct': True, 'answer_score': 1.0}), (0, 0, {'value': 'Shelve', 'sequence': 4, 'is_correct': True, 'answer_score': 1.0}), (0, 0, {'value': 'Bed', 'sequence': 5, 'answer_score': -1.0})]}), (0, 0, {'title': 'What do you think about the content of the course? (not rated)', 'sequence': 4, 'question_type': 'text_box'})]}
***************************************************************************************
create
{'name': 'DIY Furniture - TEST', 'user_id': self.env.ref('base.user_admin').id, 'enroll': 'payment', 'product_id': product_course_channel_6.id, 'channel_type': 'training', 'allow_comment': True, 'promote_strategy': 'most_voted', 'is_published': True, 'description': 'So much amazing certification.', 'create_date': Datetime.now() - relativedelta(days=2), 'slide_ids': [(0, 0, {'name': 'DIY Furniture Certification', 'sequence': 1, 'slide_type': 'certification', 'category_id': False, 'is_published': True, 'is_preview': False, 'description': "It's time to test your knowledge!", 'survey_id': furniture_survey.id})]}
***************************************************************************************
search
[('provider', '=', 'test')]
***************************************************************************************
create
{'name': 'bottlecap', 'symbol': 'b', 'rounding': 0.001, 'decimal_places': 3}
***************************************************************************************
create
{}
***************************************************************************************
create
{}
***************************************************************************************
create
{}
***************************************************************************************
search
[('model', '=', self._name), ('res_id', 'in', self.ids), ('module', '=', 'uom'), ('name', 'not in', self._unprotected_uom_xml_ids())]
***************************************************************************************
with_context
{}
***************************************************************************************
create
{'name': 'Score', 'factor_inv': 20, 'uom_type': 'bigger', 'rounding': 1.0, 'category_id': self.categ_unit_id}
***************************************************************************************
create
{'name': 'Custom UoM category'}
***************************************************************************************
create
{'name': 'Reference UoM of my category', 'factor_inv': 1, 'uom_type': 'reference', 'rounding': 1.0, 'category_id': category.id}
***************************************************************************************
create
{'name': 'Bigger UoM of my category', 'factor_inv': 42, 'uom_type': 'bigger', 'rounding': 0.5, 'category_id': category.id}
***************************************************************************************
create
{'name': 'Second Time Reference', 'factor_inv': 1, 'uom_type': 'reference', 'rounding': 1.0, 'category_id': time_category.id}
***************************************************************************************
create
{'name': 'Bigger UoM of my category', 'factor_inv': 42, 'uom_type': 'bigger', 'rounding': 0.5, 'category_id': category.id}
***************************************************************************************
create
{'name': 'Second Time Reference', 'factor_inv': 1, 'uom_type': 'reference', 'rounding': 1.0, 'category_id': category.id}
***************************************************************************************
search
[]
***************************************************************************************
_for_xml_id
action_ref
***************************************************************************************
check_access_rights
'write'
***************************************************************************************
_get_placeholder_filename
field
***************************************************************************************
_post_processing_att
'img'attsoptions.get('template_options')
***************************************************************************************
_render
view_id{**self.env['ir.ui.view']._prepare_qcontext(), **self._qweb_prepare_qcontext(view_id, domain)}
***************************************************************************************
search
[('state', '=', 'installed')]
***************************************************************************************
_generate_asset_nodes
bundle
***************************************************************************************
create
{'name': 'layout_template1', 'key': 'web.layout_template1', 'type': 'qweb', 'arch': '<div></div>'}
***************************************************************************************
create
{'name': self.layout_template1.name, 'model': 'ir.ui.view', 'module': 'web', 'res_id': self.layout_template1.id}
***************************************************************************************
create
{'view_id': self.layout_template1.id, 'name': 'report_%s' % self.layout_template1.name}
***************************************************************************************
create
{'name': 'layout_template2', 'key': 'web.layout_template2', 'type': 'qweb', 'arch': '<div></div>'}
***************************************************************************************
create
{'name': self.layout_template2.name, 'model': 'ir.ui.view', 'module': 'web', 'res_id': self.layout_template2.id}
***************************************************************************************
create
{'view_id': self.layout_template2.id, 'name': 'report_%s' % self.layout_template2.name}
***************************************************************************************
extract_image_primary_secondary_colors
base64_img
***************************************************************************************
load_menus
False
***************************************************************************************
with_user
user_demo.id
***************************************************************************************
create
{'datas': b'R0lGODdhAQABAIAAAP///////ywAAAAAAQABAAACAkQBADs=', 'name': 'testEtag.gif', 'public': True, 'mimetype': 'image/gif'}
***************************************************************************************
_get_asset_content
suite
***************************************************************************************
create
{'name': 'test_menu', 'parent_id': False}
***************************************************************************************
search
[]
***************************************************************************************
set_param
'base.profiling_enabled_until'''
***************************************************************************************
set_param
'base.profiling_enabled_until'expiration
***************************************************************************************
search
[]
***************************************************************************************
set_param
'base.profiling_enabled_until'expiration
***************************************************************************************
search
[]
***************************************************************************************
set_param
'base.profiling_enabled_until'''
***************************************************************************************
set_param
'base.profiling_enabled_until'expiration
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
read_progress_bar
[]'category_id'progressbar
***************************************************************************************
create
{'model': 'x_progressbar', 'name': 'progress_bar', 'field_id': [(0, 0, {'field_description': 'Country', 'name': 'x_country_id', 'ttype': 'many2one', 'relation': 'res.country'}), (0, 0, {'field_description': 'Date', 'name': 'x_date', 'ttype': 'date'}), (0, 0, {'field_description': 'State', 'name': 'x_state', 'ttype': 'selection', 'selection': "[('foo', 'Foo'), ('bar', 'Bar'), ('baz', 'Baz')]"})]}
***************************************************************************************
search
[]
***************************************************************************************
create
[{'x_country_id': c1.id, 'x_date': '2021-05-20', 'x_state': 'foo'}, {'x_country_id': c1.id, 'x_date': '2021-05-21', 'x_state': 'foo'}, {'x_country_id': c1.id, 'x_date': '2021-05-22', 'x_state': 'foo'}, {'x_country_id': c1.id, 'x_date': '2021-05-23', 'x_state': 'bar'}, {'x_country_id': c1.id, 'x_date': '2021-05-24', 'x_state': 'baz'}, {'x_country_id': c2.id, 'x_date': '2021-05-25', 'x_state': 'foo'}, {'x_country_id': c2.id, 'x_date': '2021-05-26', 'x_state': 'bar'}, {'x_country_id': c2.id, 'x_date': '2021-05-27', 'x_state': 'bar'}, {'x_country_id': c2.id, 'x_date': '2021-05-28', 'x_state': 'baz'}, {'x_country_id': c2.id, 'x_date': '2021-05-29', 'x_state': 'baz'}, {'x_country_id': c3.id, 'x_date': '2021-05-30', 'x_state': 'foo'}, {'x_country_id': c3.id, 'x_date': '2021-05-31', 'x_state': 'foo'}, {'x_country_id': c3.id, 'x_date': '2021-06-01', 'x_state': 'baz'}, {'x_country_id': c3.id, 'x_date': '2021-06-02', 'x_state': 'baz'}, {'x_country_id': c3.id, 'x_date': '2021-06-03', 'x_state': 'baz'}]
***************************************************************************************
read_progress_bar
[]'x_country_id'progress_bar
***************************************************************************************
read_progress_bar
[]'x_date:week'progress_bar
***************************************************************************************
read_progress_bar
[]'x_country_id'progress_bar
***************************************************************************************
read_progress_bar
[]'x_date:week'progress_bar
***************************************************************************************
search
[('url', op, custom_url)]
***************************************************************************************
search
[('path', 'like', url)]
***************************************************************************************
create
new_attach
***************************************************************************************
search
[('name', '=', el.attrib.get('t-install'))]
***************************************************************************************
search
[('id', '=', ids[0])]
***************************************************************************************
_lang_get
self.env.user.lang
***************************************************************************************
_lang_get
self.env.user.lang
***************************************************************************************
browse
int(oid)
***************************************************************************************
attributes
recordfield_nameoptionsvalues
***************************************************************************************
_lang_get
self.env.user.lang
***************************************************************************************
_lang_get
self.env.user.lang
***************************************************************************************
create
vals
***************************************************************************************
browse
self._context.get('website_id')
***************************************************************************************
create
{field: value}
***************************************************************************************
_render
t{'record': record}
***************************************************************************************
create
{'name': 'Foo'}
***************************************************************************************
create
{'name': 'Bar'}
***************************************************************************************
create
{field: subrec1.id}
***************************************************************************************
_render
t{'record': record}
***************************************************************************************
search
['&', '|', '&', ('res_model', '=', res_model), ('res_id', '=', res_id), ('public', '=', True), ('url', '=', url_object.path)]
***************************************************************************************
browse
int(id)
***************************************************************************************
search
[('state', '=', 'open')]
***************************************************************************************
_xmlid_to_res_id
model_id
***************************************************************************************
search
[('model', '=', find._name), ('res_id', '=', find.id)]
***************************************************************************************
create
rec_data
***************************************************************************************
browse
options['website_id']
***************************************************************************************
browse
self._context.get('website_id')
***************************************************************************************
search
[('view_id', '=', view.id)]
***************************************************************************************
viewref
view_id
***************************************************************************************
browse
self._context.get('website_id')
***************************************************************************************
search
[('key', '=', self.key), ('website_id', '=', current_website.id)]
***************************************************************************************
search
[('id', '!=', current_website_id)]
***************************************************************************************
browse
website_id
***************************************************************************************
_xmlid_to_res_id
'website.menu_website_configuration'
***************************************************************************************
website_domain
current_website_id
***************************************************************************************
_for_xml_id
'website.theme_install_kanban_action'
***************************************************************************************
search
[('company_id', '=', company.id)]
***************************************************************************************
search
[('company_id', '=', self.env.company.id)]
***************************************************************************************
_for_xml_id
'base.action_res_users'
***************************************************************************************
_for_xml_id
'website.theme_install_kanban_action'
***************************************************************************************
search
[('language_ids', 'in', self._ids)]
***************************************************************************************
make_scss_customization
'/website/static/src/scss/options/user_values.scss'{'font': 'null', 'headings-font': 'null', 'navbar-font': 'null', 'buttons-font': 'null', 'color-palettes-number': 'null', 'color-palettes-name': 'null', 'btn-ripple': 'null', 'header-template': 'null', 'footer-template': 'null', 'footer-scrolltop': 'null'}
***************************************************************************************
get
'res.partner''lang'
***************************************************************************************
_lang_get_id
lang_code
***************************************************************************************
search
[('website_id', 'in', self.ids), '|', '|', ('key', '!=', False), ('url', 'ilike', '.custom.'), ('url', 'ilike', '.assets\\_')]
***************************************************************************************
search
[('url', 'in', list(module_data.keys())), ('website_id', '=', self.id)]
***************************************************************************************
search
[]
***************************************************************************************
search
[('name', '=', theme_name)]
***************************************************************************************
browse
website.id
***************************************************************************************
search
[('website_id', '=', self.id), ('url', '=', '/')]
***************************************************************************************
browse
int(page_id)
***************************************************************************************
browse
self._context.get('website_id')
***************************************************************************************
search
website_page_search_dom
***************************************************************************************
search
page_search_dom
***************************************************************************************
search
menu_search_dom
***************************************************************************************
browse
int(page_id)
***************************************************************************************
browse
self._context.get('website_id')
***************************************************************************************
search
website_page_search_dom
***************************************************************************************
search
page_search_dom
***************************************************************************************
check
'ir.ui.view''write'False
***************************************************************************************
check
'ir.ui.menu''read'False
***************************************************************************************
_for_xml_id
'website.action_website'
***************************************************************************************
search
[]
***************************************************************************************
browse
website._get_menu_ids()
***************************************************************************************
search
[('website_id', '=', self.id)]
***************************************************************************************
browse
vals.get('company_id')
***************************************************************************************
concat
*(self.env.ref(it) for it in all_user_groups.split(','))
***************************************************************************************
search
[('website_id', '=', self.id), ('url', '=', '/cookie-policy')]
***************************************************************************************
make_scss_customization
urlvalues
***************************************************************************************
browse
selected_features
***************************************************************************************
browse
logo_attachment_id
***************************************************************************************
create
{'name': parent_view.key + ' CTA', 'key': parent_view.key + '_cta', 'inherit_id': parent_view.id, 'website_id': website.id, 'type': 'qweb', 'priority': 32, 'arch_db': '\n                    <data>\n                        <xpath expr="//t[@t-set=\'cta_btn_href\']" position="replace">\n                            <t t-set="cta_btn_href">%s</t>\n                        </xpath>\n                        <xpath expr="//t[@t-set=\'cta_btn_text\']" position="replace">\n                            <t t-set="cta_btn_text">%s</t>\n                        </xpath>\n                    </data>\n                ' % (cta_data['cta_btn_href'], cta_data['cta_btn_text'])}
***************************************************************************************
create
default_page_values
***************************************************************************************
create
default_menu_values
***************************************************************************************
_for_xml_id
'website.backend_dashboard'
***************************************************************************************
browse
values['company_id']
***************************************************************************************
make_scss_customization
urlvalues
***************************************************************************************
create
{'name': _('Company'), 'parent_id': website.menu_id.id, 'website_id': website.id, 'sequence': 40}
***************************************************************************************
browse
pages_views[page_code]
***************************************************************************************
viewref
'website.header_call_to_action'
***************************************************************************************
viewref
footer_id
***************************************************************************************
search
[('code', '=', country)]
***************************************************************************************
_search_get_detail
selforderoptions
***************************************************************************************
browse
website.id
***************************************************************************************
create
{'name': name, 'website_id': website.id, 'key': name, 'type': 'binary', 'raw': response.content, 'public': True}
***************************************************************************************
create
{'name': 'configurator_%s_%s' % (website.id, name.split('.')[1]), 'module': 'website', 'model': 'ir.attachment', 'res_id': attachment.id, 'noupdate': True}
***************************************************************************************
website_domain
self._context.get('website_id')
***************************************************************************************
create
{'is_published': True, 'website_indexed': False, 'url': '/cookie-policy', 'website_id': self.id, 'view_id': specific_cook_view.id}
***************************************************************************************
has_group
'website.group_website_designer'
***************************************************************************************
search
[('url', '=', menu.url), ('website_id', '!=', False), ('id', '!=', menu.id)]
***************************************************************************************
search
[]
***************************************************************************************
browse
website_id
***************************************************************************************
search
domain
***************************************************************************************
_render_template
'website.s_mega_menu_multi_menus'
***************************************************************************************
website_domain
website_id
***************************************************************************************
_match
menu['url']
***************************************************************************************
browse
website_id
***************************************************************************************
browse
website_id
***************************************************************************************
search
[('page_id', '=', int(data['id']))]
***************************************************************************************
get_unique_path
url
***************************************************************************************
get_unique_key
slugify(data['name'])
***************************************************************************************
create
{'name': data['name'], 'redirect_type': data['redirect_type'], 'url_from': original_url, 'url_to': url, 'website_id': website.id}
***************************************************************************************
get_unique_path
page_url
***************************************************************************************
search
[('page_id', '=', page_id)]
***************************************************************************************
create
{'name': data['name'], 'url': url, 'page_id': data['id'], 'parent_id': website.menu_id.id, 'website_id': website.id}
***************************************************************************************
browse
self.view_id.id
***************************************************************************************
get_unique_path
self.url
***************************************************************************************
browse
res['groups_id']
***************************************************************************************
search
domain
***************************************************************************************
search_read
[('id', 'in', self.partner_id.ids)]['id', 'email_normalized', 'mobile', 'phone']
***************************************************************************************
read_group
[('visitor_id', 'in', self.ids), ('url', '!=', False)]['visitor_id', 'page_id', 'url']['visitor_id', 'page_id', 'url']
***************************************************************************************
read_group
[('visitor_id', 'in', self.ids)]['visitor_id', 'page_id', 'visit_datetime:max']['visitor_id', 'page_id']
***************************************************************************************
create
website_track_values
***************************************************************************************
create
{}
***************************************************************************************
browse
1
***************************************************************************************
create
{'name': 'test base url', 'domain': self.domain}
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
create
{'name': 'test base url'}
***************************************************************************************
create
{'name': 'test base url'}
***************************************************************************************
create
{'name': 'Company 1'}
***************************************************************************************
create
{'name': 'Company 2'}
***************************************************************************************
create
{'name': 'Website Test 1', 'domain': website_1_domain, 'company_id': company_1.id}
***************************************************************************************
create
{'name': 'test base url', 'website_id': website_1.id}
***************************************************************************************
create
{'name': 'Website Test 2', 'domain': website_2_domain, 'company_id': company_1.id, 'sequence': website_1.sequence - 1}
***************************************************************************************
create
{'name': 'A test grade', 'website_published': True}
***************************************************************************************
create
{'name': 'A Company for /partners', 'is_company': True, 'grade_id': grade.id, 'website_published': True}
***************************************************************************************
create
{'name': 'My Country 1'}
***************************************************************************************
create
{'name': 'My Country 2'}
***************************************************************************************
create
{'name': 'My Country 3'}
***************************************************************************************
create
{'name': 'My Country 4'}
***************************************************************************************
create
{'name': 'My Country 5'}
***************************************************************************************
create
{'name': 'My Country Group 1-2', 'country_ids': [(6, 0, (country1 + country2 + country5).ids)]}
***************************************************************************************
create
{'name': 'My Country Group 3', 'country_ids': [(6, 0, (country3 + country5).ids)]}
***************************************************************************************
create
{'website_id': website.id, 'login': 'sad@mail.com', 'name': 'Hope Fully'}
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
create
{'name': 'Test View', 'type': 'qweb', 'arch': '<t t-call="website.layout">Test View Page</t>', 'key': 'test.test_view', 'url': '/page_1', 'is_published': True}
***************************************************************************************
search_count
[]
***************************************************************************************
create
{'name': 'My Second Website', 'domain': ''}
***************************************************************************************
browse
1
***************************************************************************************
create
{'url': url, 'name': name, 'type': 'qweb', 'arch': '<t name="%s" t-name="website.page_test_%s">                        <t t-call="website.layout">                          <div id="wrap"><div class="oe_structure"/></div>                        </t>                      </t>' % (name, name), 'key': 'website.page_test_%s' % name, 'is_published': True, 'website_id': website.id, 'track': False}
***************************************************************************************
create
{'name': name, 'url': url, 'page_id': page.id, 'website_id': website.id, 'parent_id': website.menu_id.id}
***************************************************************************************
search
[('url', '=like', '/web/assets/%/web.assets_common%.js')]
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="attr-escaping">\n                <img src="http://test.external.img/img.png"/>\n                <img t-att-src="url"/>\n            </t>'}
***************************************************************************************
_render
t.id{'url': 'http://test.external.img/img2.png'}
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
search
[('login', '=', 'demo')]
***************************************************************************************
_post_processing_att
tag{attribute: url}{}
***************************************************************************************
create
[{'name': 'Test Website'}, {'name': 'Test Website 2'}]
***************************************************************************************
render_public_asset
'website.snippets'
***************************************************************************************
browse
1
***************************************************************************************
search
[('name', '=', 'theme_default')]
***************************************************************************************
_theme_remove
website
***************************************************************************************
create
{'name': 'Restricted Editor', 'login': 'restricted', 'password': 'restricted', 'groups_id': [(6, 0, [self.ref('base.group_user'), self.ref('website.group_website_publisher')])]}
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'Test Tour Menu', 'url': '/test-tour-menu', 'parent_id': website.menu_id.id, 'sequence': 0, 'website_id': website.id}
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'New Website'}
***************************************************************************************
create
{'name': 'EditorExtension.js', 'mimetype': 'text/javascript', 'datas': base64.b64encode(code)}
***************************************************************************************
create
{'name': 'EditorExtension', 'bundle': 'website.assets_wysiwyg', 'path': custom_url, 'website_id': new_website.id}
***************************************************************************************
search
[]
***************************************************************************************
create
[{'name': 'Test snip', 'type': 'qweb', 'key': 'website.s_test_snip', 'arch': '\n                <section class="s_test_snip">\n                    <t t-snippet-call="website.s_share"/>\n                </section>\n            '}, {'type': 'qweb', 'inherit_id': website_snippets.id, 'arch': '\n                <xpath expr="//t[@t-snippet=\'website.s_parallax\']" position="after">\n                    <t t-snippet="website.s_test_snip" t-thumbnail="/website/static/src/img/snippets_thumbs/s_website_form.svg"/>\n                </xpath>\n            '}]
***************************************************************************************
create
{'public': True, 'type': 'url', 'url': '/web/image/123/test.png', 'name': 'test.png', 'mimetype': 'image/png'}
***************************************************************************************
_activate_lang
'nl_NL'
***************************************************************************************
browse
1
***************************************************************************************
create
{'module': xml_id[0], 'name': xml_id[1], 'model': view._name, 'res_id': view.id}
***************************************************************************************
create
{'name': 'Test View', 'type': 'qweb', 'key': 'website.test_view', 'arch': ET.tostring(self.arch, encoding='unicode')}
***************************************************************************************
extract_embedded_fields
self.arch
***************************************************************************************
save_embedded_field
embedded
***************************************************************************************
browse
1
***************************************************************************************
create
{'arch': u'<t t-name="dummy"><p><h1>hello world</h1></p></t>', 'type': 'qweb'}
***************************************************************************************
create
{'module': '_theme_kea_sale', 'name': 'products', 'model': 'theme.ir.ui.view', 'res_id': theme_view.id}
***************************************************************************************
create
{'module': '_theme_kea_sale', 'name': 't_called_view', 'model': 'theme.ir.ui.view', 'res_id': called_theme_view.id}
***************************************************************************************
create
{'name': 'test_theme'}
***************************************************************************************
create
{'module': 'base', 'name': 'module_test_theme_module', 'model': 'ir.module.module', 'res_id': test_theme_module.id}
***************************************************************************************
create
{'module': 'test_theme', 'name': 'products', 'model': 'theme.ir.ui.view', 'res_id': theme_view.id}
***************************************************************************************
create
{'arch': u'<t t-name="dummy"><div class="oe_structure" t-att-test="1" data-test="1" id="oe_structure_test"/></t>', 'type': 'qweb'}
***************************************************************************************
create
{'website_id': False, 'login': 'bobo@mail.com', 'name': 'AAA', 'password': 'bobo@mail.com'}
***************************************************************************************
create
{'website_id': website.id, 'login': 'bobo@mail.com', 'name': 'ZZZ', 'password': 'bobo@mail.com'}
***************************************************************************************
create
{'login': 'test', 'name': 'The King', 'email': 'noop@example.com'}
***************************************************************************************
browse
1
***************************************************************************************
browse
2
***************************************************************************************
search
[('company_id', '=', self.env.user.company_id.id)]
***************************************************************************************
create
{'name': 'UntackedView', 'type': 'qweb', 'arch': '<t name="Homepage" t-name="website.base_view">\n                        <t t-call="website.layout">\n                            I am a generic page²\n                        </t>\n                    </t>', 'key': 'test.base_view', 'track': False}
***************************************************************************************
create
{'name': 'TrackedView', 'type': 'qweb', 'arch': '<t name="Homepage" t-name="website.base_view">\n                        <t t-call="website.layout">\n                            I am a generic page\n                        </t>\n                    </t>', 'key': 'test.base_view', 'track': True}
***************************************************************************************
create
{'name': 'TrackedView2', 'type': 'qweb', 'arch': '<t name="OtherPage" t-name="website.base_view">\n                        <t t-call="website.layout">\n                            I am a generic second page\n                        </t>\n                    </t>', 'key': 'test.base_view', 'track': True}
***************************************************************************************
create
[{'view_id': untracked_view.id, 'url': '/untracked_view', 'website_published': True}, {'view_id': tracked_view.id, 'url': '/tracked_view', 'website_published': True}, {'view_id': tracked_view_2.id, 'url': '/tracked_view_2', 'website_published': True}]
***************************************************************************************
search
[('login', '=', 'portal')]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[('id', 'not in', existing_visitors.ids)]
***************************************************************************************
search
[('id', 'not in', existing_tracks.ids)]
***************************************************************************************
search
[('id', 'not in', existing_visitors.ids)]
***************************************************************************************
search
[('id', 'not in', existing_visitors.ids)]
***************************************************************************************
search
[('id', 'not in', existing_visitors.ids)]
***************************************************************************************
search
[('partner_id', '=', self.partner_admin.id)]
***************************************************************************************
search
[('id', 'not in', existing_visitors.ids)]
***************************************************************************************
search
[('id', 'not in', existing_visitors.ids)]
***************************************************************************************
create
{'lang_id': self.env.ref('base.lang_en').id, 'country_id': self.env.ref('base.be').id, 'website_id': 1, 'partner_id': partner_demo.id}
***************************************************************************************
search
[('id', '=', new_visitor.id)]
***************************************************************************************
create
{'name': 'Joel Willis', 'email': 'joel.willis63@example.com'}
***************************************************************************************
create
{'login': 'portal', 'password': 'portal', 'partner_id': self.partner_portal.id, 'groups_id': [(6, 0, [self.env.ref('base.group_portal').id])]}
***************************************************************************************
search
[('id', 'not in', (existing_visitors | visitor_admin).ids)]
***************************************************************************************
_lang_get
self.lang
***************************************************************************************
browse
int(page_id)
***************************************************************************************
search
dom
***************************************************************************************
browse
int(page_id)
***************************************************************************************
search
dom
***************************************************************************************
create
{'name': blog['name'], 'website_id': self.id}
***************************************************************************************
search
[('url', '=', '/blog'), ('website_id', '=', self.id)]
***************************************************************************************
create
blog_menu_values
***************************************************************************************
_search_get_detail
selforderoptions
***************************************************************************************
_search_get_detail
selforderoptions
***************************************************************************************
_xmlid_to_res_id
'website_blog.mt_blog_blog_published'
***************************************************************************************
with_user
self.user_blogmanager
***************************************************************************************
with_user
self.user_blogmanager
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'Travel'}
***************************************************************************************
create
{'public': True, 'type': 'url', 'url': '/web/image/123/transparent.png', 'name': 'transparent.png', 'mimetype': 'image/png'}
***************************************************************************************
with_context
{'no_reset_password': True}
***************************************************************************************
_for_xml_id
'website.website_visitor_page_action'
***************************************************************************************
search
[]
***************************************************************************************
browse
self.leads.ids
***************************************************************************************
search
[('description', '=', '### TOUR DATA ###')]
***************************************************************************************
search
[('description', '=', '### TOUR DATA PREFILL ###')]
***************************************************************************************
search
[('description', '=', '### TOUR DATA ###')]
***************************************************************************************
search
[('login', '=', user_login)]
***************************************************************************************
create
{'name': 'Test Customer', 'email': '"Test Customer" <test@test.example.com>', 'country_id': self.env.ref('base.be').id, 'mobile': '+32456001122'}
***************************************************************************************
create
{'name': 'Test Lead 1', 'email_from': 'Rambeau Fort <beaufort@test.example.com', 'visitor_ids': [(4, visitor.id)]}
***************************************************************************************
create
{'name': 'Test Lead 1', 'email_from': 'Martino Brie <brie@test.example.com', 'country_id': self.env.ref('base.be').id, 'mobile': '+32456001122', 'visitor_ids': [(4, visitor.id)]}
***************************************************************************************
read_group
[('reveal_rule_id', 'in', self.ids)]
***************************************************************************************
_for_xml_id
'crm.crm_lead_all_leads'
***************************************************************************************
_for_xml_id
'crm.crm_lead_opportunities'
***************************************************************************************
get
'reveal'
***************************************************************************************
search
[('reveal_id', '=', result['clearbit_id'])]
***************************************************************************************
create
lead_vals
***************************************************************************************
lead_vals_from_response
self.lead_typeself.team_id.idself.tag_ids.idsself.user_id.idcompany_datapeople_data
***************************************************************************************
_sendone
self.env.user.partner_id'mail.simple_notification'{'title': _('Missing Library'), 'message': message, 'sticky': True, 'warning': True}
***************************************************************************************
notify_no_more_credit
'reveal'self._name'reveal.already_notified'
***************************************************************************************
search
[('reveal_ip', 'in', [ip for ip in all_ips if ip not in done_ips])]
***************************************************************************************
search
[('reveal_ip', 'in', [lead.reveal_ip for lead in leads])]
***************************************************************************************
search
[('reveal_ip', '=', res['ip'])]
***************************************************************************************
search
[('reveal_ip', '=', res['ip'])]
***************************************************************************************
_match_url
website_idurlcountry_codestate_coderules_excluded
***************************************************************************************
search
[('reveal_ip', 'in', ['90.80.70.60', '90.80.70.61', '90.80.70.70'])]
***************************************************************************************
search
[('reveal_ip', 'in', ['90.80.70.60', '90.80.70.61', '90.80.70.70'])]
***************************************************************************************
search
[('reveal_ip', 'in', ['90.80.70.60', '90.80.70.61', '90.80.70.70'])]
***************************************************************************************
search
[('reveal_ip', 'in', ['90.80.70.60', '90.80.70.61', '90.80.70.70'])]
***************************************************************************************
search
[('reveal_ip', 'in', ['90.80.70.60', '90.80.70.61', '90.80.70.70'])]
***************************************************************************************
search
[('reveal_ip', 'in', ['90.80.70.60', '90.80.70.61', '90.80.70.70'])]
***************************************************************************************
search
[('reveal_ip', 'in', ['90.80.70.60', '90.80.70.61', '90.80.70.70'])]
***************************************************************************************
search
[('reveal_ip', 'in', ['90.80.70.60', '90.80.70.61', '90.80.70.70'])]
***************************************************************************************
_for_xml_id
'website_livechat.website_visitor_livechat_session_action'
***************************************************************************************
search
[('id', 'child_of', self.env.user.partner_id.commercial_partner_id.id)]
***************************************************************************************
browse
partner_id
***************************************************************************************
_geo_localize
lead.streetlead.ziplead.citylead.state_id.namelead.country_id.name
***************************************************************************************
create
{'name': 'Nigel', 'country_id': self.env.ref('base.uk').id, 'city': 'Birmingham', 'zip': 'B46 3AG', 'street': 'Cannon Hill Park'}
***************************************************************************************
create
{'type': 'opportunity', 'name': 'Office Design and Architecture', 'partner_id': self.customer_uk.id}
***************************************************************************************
create
{'name': 'Agrolait', 'is_company': True, 'city': 'Wavre', 'zip': '1300', 'country_id': self.env.ref('base.be').id, 'street': '69 rue de Namur', 'partner_weight': 10}
***************************************************************************************
create
{'name': 'Think Big Systems', 'is_company': True, 'city': 'London', 'country_id': self.env.ref('base.uk').id, 'street': '89 Lingfield Tower', 'partner_weight': 10}
***************************************************************************************
create
{'name': 'Grade Test', 'partner_weight': 42, 'sequence': 3}
***************************************************************************************
browse
data['id']
***************************************************************************************
with_context
context
***************************************************************************************
with_context
{'no_reset_password': True, 'mail_notrack': True}
***************************************************************************************
with_user
self.user_portal
***************************************************************************************
browse
active_ids
***************************************************************************************
message_subscribe
[partner_id]
***************************************************************************************
browse
partner_id
***************************************************************************************
create
{'menu_id': website_menu.id, 'event_id': self.id, 'menu_type': menu_type, 'view_id': view_id}
***************************************************************************************
search
[('id', 'in', tag_ids)]
***************************************************************************************
record_to_html
event'date_begin'{}
***************************************************************************************
record_to_html
event'date_end'{}
***************************************************************************************
_search_get_detail
selforderoptions
***************************************************************************************
search
[('menu_id', 'in', self.ids)]
***************************************************************************************
read_group
[('visitor_id', 'in', self.ids)]['visitor_id']['visitor_id']
***************************************************************************************
search
[('parent_id', '=', event.menu_id.id)]
***************************************************************************************
search
[('name', '=', page_specific + ' ' + event.name)]
***************************************************************************************
create
{'name': 'TestEvent', 'date_begin': fields.Datetime.to_string(datetime.today() + timedelta(days=1)), 'date_end': fields.Datetime.to_string(datetime.today() + timedelta(days=15)), 'website_menu': True, 'community_menu': False}
***************************************************************************************
create
{'name': 'TestEvent', 'date_begin': fields.Datetime.to_string(datetime.today() + timedelta(days=1)), 'date_end': fields.Datetime.to_string(datetime.today() + timedelta(days=15)), 'website_menu': False}
***************************************************************************************
create
{'name': 'TestEvent', 'date_begin': fields.Datetime.to_string(datetime.today() + timedelta(days=1)), 'date_end': fields.Datetime.to_string(datetime.today() + timedelta(days=15)), 'website_menu': True, 'community_menu': False}
***************************************************************************************
create
{'name': 'OtherEvent', 'auto_confirm': True, 'date_begin': fields.Datetime.to_string(datetime.today() + timedelta(days=1)), 'date_end': fields.Datetime.to_string(datetime.today() + timedelta(days=15))}
***************************************************************************************
create
[{'name': 'Main Visitor', 'event_registration_ids': [(0, 0, {'event_id': self.event_0.id})]}, {'name': 'Child Visitor', 'event_registration_ids': [(0, 0, {'event_id': event_1.id})]}]
***************************************************************************************
search
[('event_registered_ids', 'in', self.event_0.ids)]
***************************************************************************************
search
[('event_registered_ids', 'in', event_1.ids)]
***************************************************************************************
create
[{'name': 'Event 0 - Sitemap test', 'website_published': True, 'date_begin': datetime.today() - timedelta(days=1), 'date_end': datetime.today() + timedelta(days=1)}, {'name': 'Event 1 - Sitemap test', 'website_published': True, 'date_begin': datetime.today() - timedelta(days=1), 'date_end': datetime.today() + timedelta(days=1)}, {'name': 'Event 2 - Sitemap test', 'date_begin': datetime.today() - timedelta(days=1), 'date_end': datetime.today() + timedelta(days=1)}]
***************************************************************************************
_for_xml_id
'website_event_exhibitor.event_sponsor_action'
***************************************************************************************
search
[]
***************************************************************************************
browse
product_id
***************************************************************************************
browse
event_booth_pending_ids
***************************************************************************************
read_group
[]['event_id']['event_id']
***************************************************************************************
search
[]
***************************************************************************************
image_url
sponsor'image_256'
***************************************************************************************
image_url
sponsor.partner_id'image_256'
***************************************************************************************
browse
values['partner_id']
***************************************************************************************
browse
self.event_0.id
***************************************************************************************
browse
self.sponsor_0.id
***************************************************************************************
create
{'name': 'Test 2', 'event_id': self.event_0.id, 'target_audience': 'dev'}
***************************************************************************************
create
{'name': 'Test meeting room', 'event_id': self.event_0.id, 'target_audience': 'dev', 'room_max_capacity': '20'}
***************************************************************************************
create
{'name': 'Test meeting room', 'event_id': self.event_0.id, 'target_audience': 'dev', 'room_max_capacity': '20'}
***************************************************************************************
browse
chat_room_id
***************************************************************************************
search
[('question_id', 'in', self._origin.question_ids.ids)]
***************************************************************************************
_for_xml_id
'website_event_questions.action_event_registration_report'
***************************************************************************************
search_count
[('question_id', 'in', questions_new_type.ids)]
***************************************************************************************
create
{'name': 'Event Update Type', 'event_type_id': event_type.id, 'date_begin': FieldsDatetime.to_string(datetime.today() + timedelta(days=1)), 'date_end': FieldsDatetime.to_string(datetime.today() + timedelta(days=15))}
***************************************************************************************
create
{'name': 'Event Update Type', 'event_type_id': self.event_type_complex.with_user(self.env.user).id, 'date_begin': FieldsDatetime.to_string(datetime.today() + timedelta(days=1)), 'date_end': FieldsDatetime.to_string(datetime.today() + timedelta(days=15))}
***************************************************************************************
create
{'name': 'Design Fair New York', 'date_begin': fields.Datetime.now() - relativedelta(days=15), 'date_end': fields.Datetime.now() + relativedelta(days=15), 'event_ticket_ids': [(0, 0, {'name': 'Free', 'start_sale_datetime': fields.Datetime.now() - relativedelta(days=15)}), (0, 0, {'name': 'Other', 'start_sale_datetime': fields.Datetime.now() - relativedelta(days=15)})], 'website_published': True, 'question_ids': [(0, 0, {'title': 'Meal Type', 'question_type': 'simple_choice', 'answer_ids': [(0, 0, {'name': 'Mixed'}), (0, 0, {'name': 'Vegetarian'}), (0, 0, {'name': 'Pastafarian'})]}), (0, 0, {'title': 'Allergies', 'question_type': 'text_box'}), (0, 0, {'title': 'How did you learn about this event?', 'question_type': 'simple_choice', 'once_per_order': True, 'answer_ids': [(0, 0, {'name': 'Our website'}), (0, 0, {'name': 'Commercials'}), (0, 0, {'name': 'A friend'})]})]}
***************************************************************************************
search
[('email', 'in', ['attendee-a@gmail.com', 'attendee-b@gmail.com'])]
***************************************************************************************
browse
product_id
***************************************************************************************
browse
event_ticket_id
***************************************************************************************
search
[('product_id', '=', product_id)]
***************************************************************************************
search
[('state', '!=', 'cancel'), ('sale_order_id', 'in', self.ids), ('event_ticket_id', '=', ticket.id)]
***************************************************************************************
create
{'name': 'Conference for Architects TEST', 'user_id': self.env.ref('base.user_admin').id, 'date_begin': (Datetime.today() + timedelta(days=5)).strftime('%Y-%m-%d 07:00:00'), 'date_end': (Datetime.today() + timedelta(days=5)).strftime('%Y-%m-%d 16:30:00'), 'website_published': True}
***************************************************************************************
create
[{'name': 'Standard', 'event_id': self.event_2.id, 'product_id': self.env.ref('event_sale.product_product_event').id, 'start_sale_datetime': (Datetime.today() - timedelta(days=5)).strftime('%Y-%m-%d 07:00:00'), 'end_sale_datetime': (Datetime.today() + timedelta(90)).strftime('%Y-%m-%d'), 'price': 1000.0}, {'name': 'VIP', 'event_id': self.event_2.id, 'product_id': self.env.ref('event_sale.product_product_event').id, 'end_sale_datetime': (Datetime.today() + timedelta(90)).strftime('%Y-%m-%d'), 'price': 1500.0}]
***************************************************************************************
create
{'name': 'Cash - Test', 'type': 'cash', 'code': 'CASH - Test'}
***************************************************************************************
read_group
[('stage_id.is_cancel', '!=', True)]['event_id']['event_id']
***************************************************************************************
read_group
[('track_id', 'in', self.ids), ('is_wishlisted', '=', True)]['track_id', 'visitor_id:array_agg']['track_id']
***************************************************************************************
search
[]
***************************************************************************************
_clean_website
vals['website_cta_url']
***************************************************************************************
browse
vals['stage_id']
***************************************************************************************
image_url
track'website_image'
***************************************************************************************
_clean_website
values['website_cta_url']
***************************************************************************************
_xmlid_to_res_id
'mail.mt_note'
***************************************************************************************
search
[('menu_id', 'in', self.ids)]
***************************************************************************************
read_group
[('visitor_id', 'in', all_visitors.ids), ('is_wishlisted', '=', True)]['visitor_id', 'track_id:array_agg']['visitor_id']
***************************************************************************************
create
vals
***************************************************************************************
create
vals
***************************************************************************************
browse
self.event_0.ids
***************************************************************************************
browse
self.event_customer.id
***************************************************************************************
create
{'event_id': event.id, 'name': 'Mega Track', 'partner_id': customer.id}
***************************************************************************************
create
{'event_id': event.id, 'name': 'Mega Track', 'partner_id': customer.id, 'partner_name': 'Nibbler In Space', 'partner_email': test_email}
***************************************************************************************
create
{'event_id': event.id, 'name': 'Mega Track', 'partner_name': 'Nibbler In Space', 'partner_phone': test_phone, 'partner_biography': test_bio}
***************************************************************************************
create
{'event_id': event.id, 'name': 'Mega Track', 'contact_phone': test_phone}
***************************************************************************************
create
[{'name': 'Location 1'}, {'name': 'Location 2'}]
***************************************************************************************
create
[{'name': 'Tag 1'}, {'name': 'Tag 2'}, {'name': 'Tag 3'}, {'name': 'Tag 4'}]
***************************************************************************************
create
[{'name': 'Track 1', 'location_id': location_1.id, 'event_id': self.event_0.id, 'tag_ids': [(4, tag_1.id), (4, tag_2.id)], 'date': date + timedelta(hours=-1)}, {'name': 'Track 2', 'location_id': location_2.id, 'event_id': self.event_0.id, 'date': date}, {'name': 'Track 3', 'location_id': location_2.id, 'event_id': self.event_0.id, 'tag_ids': [(4, tag_1.id), (4, tag_3.id), (4, tag_4.id)], 'date': date}, {'name': 'Track 4', 'event_id': self.event_0.id, 'tag_ids': [(4, tag_1.id), (4, tag_2.id)], 'date': date}, {'name': 'Track 5', 'event_id': self.event_0.id, 'tag_ids': [(4, tag_1.id), (4, tag_3.id)], 'wishlisted_by_default': True, 'date': date}, {'name': 'Track 6', 'location_id': location_1.id, 'event_id': self.event_0.id, 'tag_ids': [(4, tag_1.id), (4, tag_3.id)], 'date': date}]
***************************************************************************************
create
{'name': 'Visitor', 'partner_id': self.user_employee.partner_id.id}
***************************************************************************************
create
{'visitor_id': emp_visitor.id, 'track_id': track_3.id, 'is_wishlisted': True}
***************************************************************************************
browse
track_1.id
***************************************************************************************
create
{'name': 'Foo'}
***************************************************************************************
create
{'name': 'Foo', 'events_app_name': 'Bar Events'}
***************************************************************************************
create
{'name': 'Foo'}
***************************************************************************************
read_group
[('forum_id', 'in', self.ids), ('state', 'in', ('active', 'close')), ('parent_id', '=', False)]['forum_id', 'views', 'child_count', 'favourite_count']
***************************************************************************************
search
[('forum_id', '=', self.id), ('posts_count', '>', 0)]
***************************************************************************************
search_read
[('post_id', 'in', self._ids), ('user_id', '=', self._uid)]['vote', 'post_id']
***************************************************************************************
read_group
[('post_id', 'in', self._ids)]['post_id', 'vote']['post_id', 'vote']
***************************************************************************************
browse
forum_id
***************************************************************************************
image_url
self.create_uid'image_1024'
***************************************************************************************
browse
vals.get('forum_id')
***************************************************************************************
search_count
domain
***************************************************************************************
search_count
domain
***************************************************************************************
_render_template
'website_forum.faq_accordion'{'forum': forum}
***************************************************************************************
browse
vals.get('post_id')
***************************************************************************************
record_to_html
post'write_date'{}
***************************************************************************************
_xmlid_to_res_id
'website_forum.mt_answer_new'
***************************************************************************************
_xmlid_to_res_id
'website_forum.mt_question_new'
***************************************************************************************
_xmlid_to_res_id
'mail.mt_note'
***************************************************************************************
search_count
self.website_domain()
***************************************************************************************
search
[('url', '=', '/forum'), ('website_id', '=', self.id)]
***************************************************************************************
_search_get_detail
selforderoptions
***************************************************************************************
_search_get_detail
selforderoptions
***************************************************************************************
create
{'name': 'A Test Job', 'is_published': True}
***************************************************************************************
search
[('description', '=', '### HR RECRUITMENT TEST DATA ###')]
***************************************************************************************
search
[('code', '=', self.env.user.lang)]
***************************************************************************************
search
[('name', '=like', '%s%%' % sanitized)]
***************************************************************************************
create
room_values
***************************************************************************************
create
room_values
***************************************************************************************
search_or_create
{'campaign_id': 2, 'medium_id': 2, 'source_id': 2, 'url': self.env['ir.config_parameter'].sudo().get_param('web.base.url') + '/contactus'}
***************************************************************************************
search
[('page_id', '!=', False), ('visitor_id', '=', visitor.id)]
***************************************************************************************
search_read
[('livechat_visitor_id', 'in', self.ids), ('livechat_active', '=', True)]['livechat_visitor_id', 'livechat_operator_id']
***************************************************************************************
search
[('livechat_visitor_id', 'in', self.ids)]
***************************************************************************************
search_count
[('livechat_visitor_id', 'in', self.ids), ('livechat_active', '=', True)]
***************************************************************************************
create
mail_channel_vals_list
***************************************************************************************
_sendmany
notifications
***************************************************************************************
create
{'name': 'Operator Michel', 'login': 'operator', 'email': 'operator@example.com', 'password': 'ideboulonate', 'livechat_username': 'El Deboulonnator'}
***************************************************************************************
create
{'name': 'The basic channel', 'user_ids': [(6, 0, [self.operator.id])]}
***************************************************************************************
create
[{'lang_id': self.env.ref('base.lang_en').id, 'country_id': self.env.ref('base.de').id, 'website_id': self.env.ref('website.default_website').id, 'partner_id': self.env.ref('base.user_demo').partner_id.id}] + [visitor_vals] * self.max_sessions_per_operator
***************************************************************************************
search
[('res_id', '=', channel.id), ('res_model_id', '=', res_model_id)]
***************************************************************************************
create
[{'page_id': self.env.ref('website.homepage_page').id, 'visitor_id': self.visitor.id, 'visit_datetime': self.base_datetime}, {'page_id': self.env.ref('website.contactus_page').id, 'visitor_id': self.visitor.id, 'visit_datetime': self.base_datetime - datetime.timedelta(minutes=10)}, {'page_id': self.env.ref('website.homepage_page').id, 'visitor_id': self.visitor.id, 'visit_datetime': self.base_datetime - datetime.timedelta(minutes=20)}]
***************************************************************************************
_get_visitor_history
self.visitor
***************************************************************************************
search
[('livechat_visitor_id', '=', self.visitor.id), ('livechat_active', '=', True)]
***************************************************************************************
search
[('livechat_visitor_id', '=', self.visitor.id), ('livechat_active', '=', True)]
***************************************************************************************
search
[('livechat_visitor_id', '=', self.visitor.id), ('livechat_active', '=', True)]
***************************************************************************************
create
{'name': 'Operator Marc', 'login': 'operator_b', 'email': 'operatormarc@example.com', 'password': 'operatormarc', 'livechat_username': "Marco'r El"}
***************************************************************************************
search
[('livechat_visitor_id', '=', self.visitor.id), ('livechat_active', '=', True)]
***************************************************************************************
search
[('livechat_visitor_id', '=', self.visitor.id), ('livechat_active', '=', True)]
***************************************************************************************
search
[('livechat_visitor_id', '=', self.visitor.id), ('livechat_active', '=', True)]
***************************************************************************************
search
[('livechat_visitor_id', '=', self.visitor.id), ('livechat_active', '=', True)]
***************************************************************************************
create
{'name': 'Visitor Tour', 'website_id': self.env.ref('website.default_website').id}
***************************************************************************************
search
[('livechat_visitor_id', '=', self.visitor_tour.id)]
***************************************************************************************
search
[('livechat_visitor_id', '=', self.visitor_tour.id)]
***************************************************************************************
search
[('livechat_visitor_id', '=', self.visitor_tour.id), ('livechat_active', '=', True)]
***************************************************************************************
search
[('livechat_visitor_id', '=', self.visitor_tour.id), ('livechat_active', '=', True)]
***************************************************************************************
search
[('livechat_visitor_id', '=', self.visitor_tour.id), ('livechat_active', '=', True)]
***************************************************************************************
search
[('livechat_visitor_id', '=', self.visitor_tour.id), ('livechat_active', '=', True)]
***************************************************************************************
search
[('livechat_visitor_id', '=', self.visitor_tour.id)]
***************************************************************************************
search
[]
***************************************************************************************
read_group
[('is_abandoned_cart', '=', True), ('cart_recovery_email_sent', '=', False), ('team_id', 'in', website_teams.ids)]['amount_total', 'team_id']['team_id']
***************************************************************************************
search
[('date_order', '>=', start), ('date_order', '<', end), ('state', 'not in', ['draft', 'cancel', 'sent']), ('website_id', '!=', False), ('company_id', '=', company.id)]
***************************************************************************************
search
[('id', 'in', context.get('active_ids')), ('cart_recovery_email_sent', '=', False), ('is_abandoned_cart', '=', True)]
***************************************************************************************
search
domain
***************************************************************************************
search
[]
***************************************************************************************
browse
website_id
***************************************************************************************
browse
[int(p) for p in category.parent_path.split('/')[:-1]]
***************************************************************************************
browse
website_id
***************************************************************************************
browse
self._get_first_possible_variant_id()
***************************************************************************************
image_url
self'image_1024'
***************************************************************************************
browse
combination['product_id']
***************************************************************************************
_fix_tax_included_price_company
combination_info['price']product_taxestaxescompany_id
***************************************************************************************
_fix_tax_included_price_company
combination_info['list_price']product_taxestaxescompany_id
***************************************************************************************
value_to_html
combination_info['price']monetary_options
***************************************************************************************
value_to_html
combination_info['list_price']monetary_options
***************************************************************************************
browse
combination_info['product_id']
***************************************************************************************
_for_xml_id
'website_sale.action_open_website_sale_onboarding_payment_acquirer_wizard'
***************************************************************************************
search
[('name', '=', 'delivery')]
***************************************************************************************
search
[('name', '=', 'website_sale_delivery')]
***************************************************************************************
browse
product_id
***************************************************************************************
with_context
product_context
***************************************************************************************
_fix_tax_included_price_company
priceproduct.taxes_idorder_line[0].tax_idself.company_id
***************************************************************************************
_fix_tax_included_price_company
puproduct.taxes_idorder_line[0].tax_idself.company_id
***************************************************************************************
_fix_tax_included_price_company
puproduct.taxes_idorder_line[0].tax_idself.company_id
***************************************************************************************
with_context
product_context
***************************************************************************************
with_context
product_context
***************************************************************************************
browse
pricelists
***************************************************************************************
search
[('country_ids.code', '=', country_code)]
***************************************************************************************
browse
request.session['website_sale_current_pl']
***************************************************************************************
_for_xml_id
'website.backend_dashboard'
***************************************************************************************
browse
force_pricelist
***************************************************************************************
_search_get_detail
selforderoptions
***************************************************************************************
_search_get_detail
selforderoptions
***************************************************************************************
browse
pricelist_id
***************************************************************************************
with_company
request.website.company_id.id
***************************************************************************************
with_company
request.website.company_id.id
***************************************************************************************
browse
current_id
***************************************************************************************
browse
current_id
***************************************************************************************
read_group
[('visitor_id', 'in', self.ids), ('product_id', '!=', False), '|', ('product_id.company_id', 'in', self.env.companies.ids), ('product_id.company_id', '=', False)]['visitor_id', 'product_id']['visitor_id', 'product_id']
***************************************************************************************
browse
product_id
***************************************************************************************
create
{'name': 'Test Product', 'is_published': True, 'list_price': 750}
***************************************************************************************
create
{'name': 'Test tax', 'amount': 10}
***************************************************************************************
create
{'name': 'Legs', 'visibility': 'visible', 'sequence': 10}
***************************************************************************************
create
{'name': 'Steel - Test', 'attribute_id': product_attribute.id, 'sequence': 1}
***************************************************************************************
create
{'name': 'Aluminium', 'attribute_id': product_attribute.id, 'sequence': 2}
***************************************************************************************
create
[{'attribute_id': product_attribute.id, 'product_tmpl_id': product_template.id, 'value_ids': [(6, 0, [product_attribute_value_1.id, product_attribute_value_2.id])]}]
***************************************************************************************
search
[('product_tmpl_id', '=', product_template.id)]
***************************************************************************************
create
{'name': 'Legs', 'sequence': 10}
***************************************************************************************
create
{'name': 'Steel', 'attribute_id': self.product_attribute_1.id, 'sequence': 1}
***************************************************************************************
create
{'name': 'Aluminium', 'attribute_id': self.product_attribute_1.id, 'sequence': 2}
***************************************************************************************
create
{'name': 'Color', 'sequence': 20}
***************************************************************************************
create
{'name': 'White', 'attribute_id': product_attribute_2.id, 'sequence': 1}
***************************************************************************************
create
{'name': 'Black', 'attribute_id': product_attribute_2.id, 'sequence': 2}
***************************************************************************************
create
{'name': 'Customizable Desk (TEST)', 'standard_price': 500.0, 'list_price': 750.0}
***************************************************************************************
create
[{'product_tmpl_id': self.product_product_4_product_template.id, 'attribute_id': self.product_attribute_1.id, 'value_ids': [(4, product_attribute_value_1.id), (4, product_attribute_value_2.id)]}, {'product_tmpl_id': self.product_product_4_product_template.id, 'attribute_id': product_attribute_2.id, 'value_ids': [(4, product_attribute_value_3.id), (4, product_attribute_value_4.id)]}]
***************************************************************************************
create
{'name': 'Custom TEST', 'attribute_id': self.product_attribute_1.id, 'sequence': 3, 'is_custom': True}
***************************************************************************************
create
{'name': 'Conference Chair (TEST)', 'website_sequence': 9999, 'image_1920': img_content, 'list_price': 16.5}
***************************************************************************************
create
{'product_tmpl_id': self.product_product_11_product_template.id, 'attribute_id': self.product_attribute_1.id, 'value_ids': [(4, product_attribute_value_1.id), (4, product_attribute_value_2.id)]}
***************************************************************************************
create
{'name': 'Chair floor protection', 'list_price': 12.0}
***************************************************************************************
create
{'name': 'Dynamic Attribute', 'create_variant': 'dynamic'}
***************************************************************************************
create
[{'name': 'Dynamic Value 1', 'attribute_id': product_attribute.id, 'sequence': 1}, {'name': 'Dynamic Value 2', 'attribute_id': product_attribute.id, 'sequence': 2}]
***************************************************************************************
create
{'name': 'Dynamic Product', 'website_published': True, 'list_price': 0}
***************************************************************************************
create
[{'attribute_id': product_attribute.id, 'product_tmpl_id': product_template.id, 'value_ids': [(6, 0, product_attribute_values.ids)]}]
***************************************************************************************
search
[('product_tmpl_id', '=', product_template.id)]
***************************************************************************************
create
{'name': 'My Attribute', 'create_variant': 'always'}
***************************************************************************************
create
[{'name': 'My Value 1', 'attribute_id': product_attribute.id, 'sequence': 1}, {'name': 'My Value 2', 'attribute_id': product_attribute.id, 'sequence': 2}, {'name': 'My Value 3', 'attribute_id': product_attribute.id, 'sequence': 3}]
***************************************************************************************
create
{'name': 'Test Product 2', 'is_published': True}
***************************************************************************************
create
[{'attribute_id': product_attribute.id, 'product_tmpl_id': product_template.id, 'value_ids': [(6, 0, product_attribute_values.ids)]}]
***************************************************************************************
search
[('product_tmpl_id', '=', product_template.id)]
***************************************************************************************
create
{'name': 'No Variant Attribute', 'create_variant': 'no_variant'}
***************************************************************************************
create
{'name': 'No Variant Value', 'attribute_id': product_attribute_no_variant.id}
***************************************************************************************
create
{'name': 'Test Product 3', 'website_published': True}
***************************************************************************************
create
[{'attribute_id': product_attribute_no_variant.id, 'product_tmpl_id': product_template.id, 'value_ids': [(6, 0, product_attribute_value_no_variant.ids)]}]
***************************************************************************************
create
{}
***************************************************************************************
create
{'base': 'list_price', 'applied_on': '1_product', 'pricelist_id': pricelist.id, 'product_tmpl_id': product_template.id, 'price_discount': 20, 'min_quantity': 2, 'compute_price': 'formula'}
***************************************************************************************
create
{'name': 'Storage Box', 'standard_price': 70.0, 'list_price': 79.0, 'website_published': True}
***************************************************************************************
create
{'name': 'Legs', 'sequence': 10}
***************************************************************************************
create
{'name': 'Steel', 'attribute_id': self.product_attribute_1.id, 'sequence': 1}
***************************************************************************************
create
{'name': 'Aluminium', 'attribute_id': self.product_attribute_1.id, 'sequence': 2}
***************************************************************************************
create
{'name': 'Conference Chair', 'list_price': 16.5, 'accessory_product_ids': [(4, product_product_7.id)]}
***************************************************************************************
create
{'product_tmpl_id': self.product_product_11_product_template.id, 'attribute_id': self.product_attribute_1.id, 'value_ids': [(4, product_attribute_value_1.id), (4, product_attribute_value_2.id)]}
***************************************************************************************
create
{'name': 'Chair floor protection', 'list_price': 12.0}
***************************************************************************************
create
{'name': 'Cash - Test', 'type': 'cash', 'code': 'CASH - Test'}
***************************************************************************************
create
{'name': 'Tax 15%'}
***************************************************************************************
create
{'name': 'Tax 15%', 'amount': 15, 'type_tax_use': 'sale', 'tax_group_id': tax_group.id}
***************************************************************************************
create
{'name': 'Storage Box Test', 'standard_price': 70.0, 'list_price': 79.0, 'categ_id': self.env.ref('product.product_category_all').id, 'website_published': True, 'invoice_policy': 'delivery'}
***************************************************************************************
create
{'partner_id': partner_id, 'website_id': self.website.id, 'order_line': [(0, 0, {'product_id': self.env['product.product'].create({'name': 'Product A', 'list_price': 100}).id, 'name': 'Product A'})]}
***************************************************************************************
create
{'name': 'Company A'}
***************************************************************************************
create
{'name': 'Company B'}
***************************************************************************************
create
{'name': 'Company C'}
***************************************************************************************
create
{'name': 'EUR_test', 'website_id': self.website.id, 'code': 'EUR_test'}
***************************************************************************************
create
{'auth_signup_uninvited': 'b2c', 'show_line_subtotals_tax_selection': 'tax_excluded', 'group_show_line_subtotals_tax_excluded': True, 'group_show_line_subtotals_tax_included': False}
***************************************************************************************
browse
1
***************************************************************************************
create
{'name': 'Product A', 'list_price': 100}
***************************************************************************************
create
[{'name': 'Level 0'}, {'name': 'Level 1'}, {'name': 'Level 2'}]
***************************************************************************************
create
{'name': 'a', 'email': 'a@example.com'}
***************************************************************************************
create
{'name': 'public', 'email': 'public@example.com'}
***************************************************************************************
create
{'name': 'Foo', 'login': 'foo', 'partner_id': self.public_partner.id}
***************************************************************************************
create
{'name': 'web0', 'cart_abandoned_delay': 1.0}
***************************************************************************************
create
{'name': 'web1', 'cart_abandoned_delay': 0.5}
***************************************************************************************
create
{'name': 'web2', 'cart_abandoned_delay': 24.0, 'user_id': self.public_user.id}
***************************************************************************************
create
{'name': 'The Product'}
***************************************************************************************
create
{'partner_id': self.customer.id, 'website_id': self.website0.id, 'state': 'draft', 'date_order': now - relativedelta(hours=1) - relativedelta(minutes=1), 'order_line': add_order_line}
***************************************************************************************
create
{'partner_id': self.customer.id, 'website_id': self.website0.id, 'state': 'draft', 'date_order': now - relativedelta(hours=1) + relativedelta(minutes=1), 'order_line': add_order_line}
***************************************************************************************
create
{'partner_id': self.customer.id, 'website_id': self.website1.id, 'state': 'draft', 'date_order': now - relativedelta(minutes=30) - relativedelta(minutes=1), 'order_line': add_order_line}
***************************************************************************************
create
{'partner_id': self.customer.id, 'website_id': self.website1.id, 'state': 'draft', 'date_order': now - relativedelta(minutes=30) + relativedelta(minutes=1), 'order_line': add_order_line}
***************************************************************************************
create
{'partner_id': self.customer.id, 'website_id': self.website2.id, 'state': 'draft', 'date_order': now - relativedelta(hours=24) - relativedelta(minutes=1), 'order_line': add_order_line}
***************************************************************************************
create
{'partner_id': self.customer.id, 'website_id': self.website2.id, 'state': 'draft', 'date_order': now - relativedelta(hours=24) + relativedelta(minutes=1), 'order_line': add_order_line}
***************************************************************************************
create
{'partner_id': self.public_partner.id, 'website_id': self.website2.id, 'state': 'draft', 'date_order': now - relativedelta(hours=24) - relativedelta(minutes=1), 'order_line': add_order_line}
***************************************************************************************
create
{'partner_id': self.public_partner.id, 'website_id': self.website1.id, 'state': 'draft', 'date_order': now - relativedelta(minutes=30) - relativedelta(minutes=1), 'order_line': add_order_line}
***************************************************************************************
create
{'name': 'Acoustic Bloc Screens', 'list_price': 2950.0, 'website_published': True}
***************************************************************************************
create
{'name': 'a', 'email': 'a@example.com'}
***************************************************************************************
create
{'name': 'web0', 'cart_recovery_mail_template_id': self.recovery_template_default.id}
***************************************************************************************
create
{'name': 'web1', 'cart_recovery_mail_template_id': self.recovery_template_custom1.id}
***************************************************************************************
create
{'name': 'web2', 'cart_recovery_mail_template_id': self.recovery_template_custom2.id}
***************************************************************************************
create
{'partner_id': self.customer.id, 'website_id': self.website0.id, 'is_abandoned_cart': True, 'cart_recovery_email_sent': False}
***************************************************************************************
create
{'partner_id': self.customer.id, 'website_id': self.website1.id, 'is_abandoned_cart': True, 'cart_recovery_email_sent': False}
***************************************************************************************
create
{'partner_id': self.customer.id, 'website_id': self.website2.id, 'is_abandoned_cart': True, 'cart_recovery_email_sent': False}
***************************************************************************************
search
[('record_name', '=', order['name'])]
***************************************************************************************
create
{'name': 'Beautiful Color', 'display_type': 'color'}
***************************************************************************************
create
[{'name': name_red, 'attribute_id': product_attribute.id, 'html_color': color_red, 'sequence': 1}, {'name': name_green, 'attribute_id': product_attribute.id, 'html_color': color_green, 'sequence': 2}, {'name': name_blue, 'attribute_id': product_attribute.id, 'html_color': color_blue, 'sequence': 3}]
***************************************************************************************
create
[{'attribute_id': product_attribute.id, 'product_tmpl_id': template.id, 'value_ids': [(6, 0, attr_values.ids)]}]
***************************************************************************************
search
[('product_tmpl_id', '=', template.id)]
***************************************************************************************
create
{'product_tmpl_id': template.id}
***************************************************************************************
create
{'name': 'Beautiful Color', 'display_type': 'color'}
***************************************************************************************
create
[{'name': 'Red', 'attribute_id': product_attribute.id, 'sequence': 1}, {'name': 'Green', 'attribute_id': product_attribute.id, 'sequence': 2}, {'name': 'Blue', 'attribute_id': product_attribute.id, 'sequence': 3}]
***************************************************************************************
create
[{'attribute_id': product_attribute.id, 'product_tmpl_id': template.id, 'value_ids': [(6, 0, attr_values.ids)]}]
***************************************************************************************
create
{'product_tmpl_id': template.id, 'image_1920': green_image}
***************************************************************************************
create
{'name': 'Acoustic Bloc Screens', 'list_price': 2950.0, 'website_published': True}
***************************************************************************************
create
{'name': 'Azure Interior', 'email': 'azure.Interior24@example.com'}
***************************************************************************************
create
{'name': 'BeNeLux', 'country_ids': [(6, 0, (self.env.ref('base.be') + self.env.ref('base.lu') + self.env.ref('base.nl')).ids)]}
***************************************************************************************
create
{'name': 'Benelux', 'selectable': True, 'website_id': self.website.id, 'country_group_ids': [(4, self.benelux.id)], 'sequence': 2}
***************************************************************************************
create
{'pricelist_id': self.list_benelux.id, 'compute_price': 'percentage', 'base': 'list_price', 'percent_price': 10, 'currency_id': self.env.ref('base.EUR').id}
***************************************************************************************
create
{'name': 'Christmas', 'selectable': False, 'website_id': self.website.id, 'country_group_ids': [(4, self.env.ref('base.europe').id)], 'sequence': 20}
***************************************************************************************
create
{'pricelist_id': self.list_christmas.id, 'compute_price': 'formula', 'base': 'list_price', 'price_discount': 20}
***************************************************************************************
create
{'name': 'EUR', 'selectable': True, 'website_id': self.website.id, 'country_group_ids': [(4, self.env.ref('base.europe').id)], 'sequence': 3, 'currency_id': self.env.ref('base.EUR').id}
***************************************************************************************
create
{'pricelist_id': list_europe.id, 'compute_price': 'formula', 'base': 'list_price'}
***************************************************************************************
create
{'name': 'Canada', 'country_ids': [(6, 0, [self.ref('base.ca')])]}
***************************************************************************************
create
{'name': 'Canada', 'selectable': True, 'website_id': self.website.id, 'country_group_ids': [(6, 0, [ca_group.id])], 'sequence': 10}
***************************************************************************************
browse
pl_ids
***************************************************************************************
create
{'name': 'Super Product', 'list_price': 100, 'taxes_id': False}
***************************************************************************************
create
{'name': 'Super Pricelist', 'discount_policy': 'without_discount', 'item_ids': [(0, 0, {'applied_on': '1_product', 'product_tmpl_id': product.product_tmpl_id.id, 'base': 'pricelist', 'base_pricelist_id': website_pricelist.id, 'compute_price': 'formula', 'price_discount': 25})]}
***************************************************************************************
create
{'partner_id': self.env.user.partner_id.id, 'order_line': [(0, 0, {'name': product.name, 'product_id': product.id, 'product_uom_qty': 1, 'product_uom': product.uom_id.id, 'price_unit': product.list_price, 'tax_id': False})]}
***************************************************************************************
create
{'name': 'Super Product', 'list_price': 0, 'taxes_id': False}
***************************************************************************************
create
{'partner_id': self.env.user.partner_id.id, 'order_line': [(0, 0, {'name': product.name, 'product_id': product.id, 'product_uom_qty': 5, 'product_uom': product.uom_id.id, 'price_unit': product.list_price, 'tax_id': False})]}
***************************************************************************************
browse
website_id
***************************************************************************************
_get_pricelist_available
requestshow_visible
***************************************************************************************
create
{'name': 'BeNeLux', 'country_ids': [(6, 0, (self.env.ref('base.be') + self.env.ref('base.lu') + self.env.ref('base.nl')).ids)]}
***************************************************************************************
create
{'name': 'Belgium', 'country_ids': [(6, 0, [self.BE.id])]}
***************************************************************************************
create
{'name': 'Netherlands', 'country_ids': [(6, 0, [NL.id])]}
***************************************************************************************
create
{'name': 'Test Company'}
***************************************************************************************
create
{'name': 'Backend Pricelist For "Test Company"', 'website_id': False, 'company_id': test_company.id, 'sequence': 1}
***************************************************************************************
create
{'name': 'Test Company'}
***************************************************************************************
create
{'name': 'Company 1 Pricelist', 'company_id': self.company1.id}
***************************************************************************************
create
{'name': 'Company 2 Pricelist', 'company_id': self.company2.id, 'website_id': False}
***************************************************************************************
browse
website_id
***************************************************************************************
search
[('res_id', '=', 'res.partner,%s' % self.env.user.partner_id.id)]
***************************************************************************************
with_company
self.company1
***************************************************************************************
with_company
self.company2
***************************************************************************************
search
[]
***************************************************************************************
create
{'price_discount': 10, 'compute_price': 'formula', 'pricelist_id': pricelist.id}
***************************************************************************************
create
{'name': 'Test tax', 'amount': 15}
***************************************************************************************
create
{'applied_on': '1_product', 'base': 'list_price', 'compute_price': 'fixed', 'fixed_price': 500, 'product_tmpl_id': test_product.id}
***************************************************************************************
create
{'name': 'Test tax 15', 'amount': 15}
***************************************************************************************
create
{'name': 'Test tax 0', 'amount': 0}
***************************************************************************************
create
{'name': 'test', 'auto_apply': True, 'country_id': self.env.ref('base.be').id}
***************************************************************************************
create
{'position_id': fpos.id, 'tax_src_id': tax15.id, 'tax_dest_id': tax0.id}
***************************************************************************************
create
{'name': 'Test tax 10', 'amount': 10, 'price_include': True, 'amount_type': 'percent'}
***************************************************************************************
create
{'name': 'Test tax 0', 'amount': 0, 'price_include': True, 'amount_type': 'percent'}
***************************************************************************************
create
{'applied_on': '1_product', 'base': 'list_price', 'compute_price': 'percentage', 'percent_price': 50, 'product_tmpl_id': test_product.id}
***************************************************************************************
create
{'name': 'test'}
***************************************************************************************
create
{'position_id': fpos.id, 'tax_src_id': tax10.id, 'tax_dest_id': tax0.id}
***************************************************************************************
create
{'partner_id': self.env.user.partner_id.id}
***************************************************************************************
create
{'name': test_product.name, 'product_id': test_product.product_variant_id.id, 'product_uom_qty': 1, 'product_uom': test_product.uom_id.id, 'price_unit': test_product.list_price, 'order_id': so.id, 'tax_id': [(6, 0, [tax10.id])]}
***************************************************************************************
create
{'name': 'Test Product', 'price': 2000}
***************************************************************************************
create
{'name': 'Test Product', 'price': 110, 'taxes_id': [(6, 0, [tax10.id])]}
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'Storage Box', 'website_published': True}
***************************************************************************************
search
[('id', 'not in', existing_visitors.ids)]
***************************************************************************************
search
[('id', 'not in', existing_tracks.ids)]
***************************************************************************************
search
[('id', 'not in', existing_visitors.ids)]
***************************************************************************************
search
[('id', 'not in', existing_tracks.ids)]
***************************************************************************************
create
{'name': 'Large Cabinet', 'website_published': True, 'list_price': 320.0}
***************************************************************************************
search
[('id', 'not in', existing_visitors.ids)]
***************************************************************************************
search
[('id', 'not in', existing_tracks.ids)]
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'Last Newly Created Product'}
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[('name', '=', 'website_sale_comparison')]
***************************************************************************************
create
{'name': 'Château Margaux', 'website_published': True, 'list_price': 0}
***************************************************************************************
create
{'name': 'Grape Varieties', 'sequence': 2}
***************************************************************************************
create
{'name': 'Vintage', 'sequence': 1}
***************************************************************************************
create
({'name': n, 'attribute_id': self.attribute_varieties.id, 'sequence': i} for (i, n) in enumerate(['Cabernet Sauvignon', 'Merlot', 'Cabernet Franc', 'Petit Verdot']))
***************************************************************************************
create
({'name': n, 'attribute_id': self.attribute_vintage.id, 'sequence': i} for (i, n) in enumerate(['2018', '2017', '2016', '2015']))
***************************************************************************************
create
[{'product_tmpl_id': self.template_margaux.id, 'attribute_id': self.attribute_varieties.id, 'value_ids': [(6, 0, v.ids)]} for v in self.values_varieties]
***************************************************************************************
create
{'product_tmpl_id': self.template_margaux.id, 'attribute_id': self.attribute_vintage.id, 'value_ids': [(6, 0, self.values_vintage.ids)]}
***************************************************************************************
create
{'name': 'Vintage', 'sequence': 2}
***************************************************************************************
create
{'name': 'Varieties', 'sequence': 1}
***************************************************************************************
viewref
'website_sale_comparison.product_attributes_body'
***************************************************************************************
viewref
'website_sale_comparison.product_attributes_body'
***************************************************************************************
search
[('state', '=', 'used'), ('sales_order_id.state', '=', 'draft'), ('sales_order_id.write_date', '<', validity), ('sales_order_id.website_id', '!=', False)]
***************************************************************************************
new
{'product_id': program_lines[0].product_id.id, 'price_unit': price_unit, 'name': program_lines[0].name, 'product_uom_qty': 1, 'product_uom': program_lines[0].product_uom.id, 'order_id': order.id, 'is_reward_line': True}
***************************************************************************************
browse
1
***************************************************************************************
create
{'name': 'One Free Product', 'program_type': 'coupon_program', 'rule_min_quantity': 2.0, 'reward_type': 'product', 'reward_product_id': self.largeCabinet.id, 'active': True}
***************************************************************************************
create
{'program_id': self.coupon_program.id}
***************************************************************************************
browse
1
***************************************************************************************
create
{'name': 'website 2'}
***************************************************************************************
create
{'product_id': self.largeCabinet.id, 'name': 'Large Cabinet', 'product_uom_qty': 2.0, 'order_id': order.id}
***************************************************************************************
create
{'name': 'Public Category'}
***************************************************************************************
create
{'name': 'Small Cabinet', 'list_price': 320.0, 'type': 'consu', 'is_published': True, 'sale_ok': True, 'public_categ_ids': [(4, public_category.id)], 'taxes_id': False}
***************************************************************************************
create
{'name': 'Free Product - Small Cabinet', 'type': 'service', 'taxes_id': False, 'supplier_taxes_id': False, 'sale_ok': False, 'purchase_ok': False, 'invoice_policy': 'order', 'default_code': 'FREELARGECABINET', 'categ_id': self.env.ref('product.product_category_all').id, 'taxes_id': False}
***************************************************************************************
create
{'name': '10.0% discount on total amount', 'type': 'service', 'taxes_id': False, 'supplier_taxes_id': False, 'sale_ok': False, 'purchase_ok': False, 'invoice_policy': 'order', 'default_code': '10PERCENTDISC', 'categ_id': self.env.ref('product.product_category_all').id, 'taxes_id': False}
***************************************************************************************
create
{'name': 'Buy 3 Small Cabinets, get one for free', 'promo_code_usage': 'no_code_needed', 'discount_apply_on': 'on_order', 'reward_type': 'product', 'program_type': 'promotion_program', 'reward_product_id': large_cabinet.id, 'rule_min_quantity': 3, 'rule_products_domain': "[['name', 'ilike', 'Small Cabinet']]", 'discount_line_product_id': free_large_cabinet.id}
***************************************************************************************
create
{'name': 'Code for 10% on orders', 'promo_code_usage': 'code_needed', 'promo_code': 'testcode', 'discount_apply_on': 'on_order', 'discount_type': 'percentage', 'discount_percentage': 10.0, 'program_type': 'promotion_program', 'discount_line_product_id': ten_percent.id}
***************************************************************************************
create
{'name': '10% TEST Discount', 'promo_code_usage': 'code_needed', 'discount_apply_on': 'on_order', 'discount_type': 'percentage', 'discount_percentage': 10.0, 'program_type': 'coupon_program'}
***************************************************************************************
create
{'name': 'Steve Bucknor', 'email': 'steve.bucknor@example.com'}
***************************************************************************************
create
{'partner_id': self.steve.id}
***************************************************************************************
browse
1
***************************************************************************************
create
{'product_id': self.env['product.product'].create({'name': 'Product A', 'list_price': 100, 'sale_ok': True}).id, 'name': 'Product A', 'product_uom_qty': 2.0, 'order_id': order.id}
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'Product A', 'list_price': 100, 'sale_ok': True}
***************************************************************************************
browse
self.env.context.get('default_program_id')
***************************************************************************************
search
[('url', '=', target_url)]
***************************************************************************************
create
{'url': target_url}
***************************************************************************************
create
{'name': 'Office Chair Black TEST', 'list_price': 12.5}
***************************************************************************************
create
{'name': 'The Poste', 'type': 'service', 'categ_id': self.env.ref('delivery.product_category_deliveries').id, 'sale_ok': False, 'purchase_ok': False, 'list_price': 20.0}
***************************************************************************************
create
{'name': 'The Poste', 'sequence': 9999, 'fixed_price': 20.0, 'delivery_type': 'base_on_rule', 'product_id': self.product_delivery_poste.id, 'website_published': True}
***************************************************************************************
create
[{'carrier_id': self.carrier.id, 'max_value': 5, 'list_base_price': 20}, {'carrier_id': self.carrier.id, 'operator': '>=', 'max_value': 5, 'list_base_price': 50}, {'carrier_id': self.carrier.id, 'operator': '>=', 'max_value': 300, 'variable': 'price', 'list_base_price': 0}]
***************************************************************************************
create
{'name': 'Cash - Test', 'type': 'cash', 'code': 'CASH - Test'}
***************************************************************************************
browse
values['partner_shipping_id']
***************************************************************************************
read_group
[('res_model', '=', self._name), ('res_id', 'in', self.ids), ('product_downloadable', '=', True)]['res_id']['res_id']
***************************************************************************************
search_count
['|', '&', '&', ('res_model', '=', 'product.template'), ('res_id', '=', product.product_tmpl_id.id), ('product_downloadable', '=', True), '&', '&', ('res_model', '=', 'product.product'), ('res_id', '=', product.id), ('product_downloadable', '=', True)]
***************************************************************************************
search
[('order_id', 'in', self.ids)]
***************************************************************************************
search
[('product_id', 'in', products.ids)]
***************************************************************************************
_for_xml_id
'website_sale_slides.sale_report_action_slides'
***************************************************************************************
read_group
domain['product_id', 'price_total']['product_id']
***************************************************************************************
create
{'name': 'Course Product', 'standard_price': 100, 'list_price': 150, 'type': 'service', 'invoice_policy': 'order', 'is_published': True}
***************************************************************************************
create
{'partner_id': self.customer.id, 'order_line': [(0, 0, {'name': course_product.name, 'product_id': course_product.id, 'product_uom_qty': 1, 'price_unit': course_product.list_price})]}
***************************************************************************************
with_user
self.user_officer
***************************************************************************************
with_user
self.user_salesman
***************************************************************************************
browse
product_id
***************************************************************************************
get
'sale.order''warehouse_id'
***************************************************************************************
get
'sale.order''warehouse_id'
***************************************************************************************
create
{'name': 'Company C'}
***************************************************************************************
create
{'name': 'Website Company C'}
***************************************************************************************
search
[('company_id', '=', self.company.id)]
***************************************************************************************
create
{'name': 'Warehouse 2', 'code': 'WH2'}
***************************************************************************************
create
{'name': 'Product A', 'allow_out_of_stock_order': False, 'type': 'product', 'default_code': 'E-COM1'}
***************************************************************************************
create
{'name': 'Product B', 'allow_out_of_stock_order': False, 'type': 'product', 'default_code': 'E-COM2'}
***************************************************************************************
create
{'partner_id': self.env.user.partner_id.id, 'order_line': [(0, 0, {'name': self.product_A.name, 'product_id': self.product_A.id, 'product_uom_qty': 5, 'product_uom': self.product_A.uom_id.id, 'price_unit': self.product_A.list_price})]}
***************************************************************************************
search
[('stock_notification', '=', True)]
***************************************************************************************
_render_encapsulate
'mail.mail_notification_light'body_html
***************************************************************************************
search
[('email_to', '=', self.partner.email)]
***************************************************************************************
search
[('email_to', '=', self.partner.email_formatted)]
***************************************************************************************
create
{'partner_id': partner_id, 'product_id': product_id, 'currency_id': currency_id, 'pricelist_id': pricelist_id, 'price': price, 'website_id': website_id}
***************************************************************************************
create
{'name': 'Legs', 'sequence': 10}
***************************************************************************************
create
{'name': 'Steel', 'attribute_id': self.product_attribute_1.id, 'sequence': 1}
***************************************************************************************
create
{'name': 'Aluminium', 'attribute_id': self.product_attribute_1.id, 'sequence': 2}
***************************************************************************************
create
{'name': 'Color', 'sequence': 20}
***************************************************************************************
create
{'name': 'White', 'attribute_id': product_attribute_2.id, 'sequence': 1}
***************************************************************************************
create
{'name': 'Black', 'attribute_id': product_attribute_2.id, 'sequence': 2}
***************************************************************************************
create
{'name': 'Customizable Desk (TEST)', 'standard_price': 500.0, 'list_price': 750.0, 'website_published': True}
***************************************************************************************
create
[{'product_tmpl_id': self.product_product_4_product_template.id, 'attribute_id': self.product_attribute_1.id, 'value_ids': [(4, product_attribute_value_1.id), (4, product_attribute_value_2.id)]}, {'product_tmpl_id': self.product_product_4_product_template.id, 'attribute_id': product_attribute_2.id, 'value_ids': [(4, product_attribute_value_3.id), (4, product_attribute_value_4.id)]}]
***************************************************************************************
search
[]
***************************************************************************************
browse
int(id)
***************************************************************************************
_for_xml_id
'website_slides.slide_channel_partner_action'
***************************************************************************************
search
[('partner_id', '=', partner.id), ('completed', '=', True)]
***************************************************************************************
read_group
[('active', '=', True), ('is_published', '=', True), ('channel_id', 'in', self.ids), ('is_category', '=', False)]['channel_id', 'slide_type', 'likes', 'dislikes', 'total_views', 'completion_time']
***************************************************************************************
_for_xml_id
'website_slides.slide_channel_partner_action'
***************************************************************************************
_for_xml_id
'website_slides.slide_slide_action'
***************************************************************************************
_for_xml_id
'website_slides.rating_rating_action_slide_channel'
***************************************************************************************
_xmlid_to_res_id
'website_slides.slide_template_published'
***************************************************************************************
_xmlid_to_res_id
'website_slides.slide_template_shared'
***************************************************************************************
_xmlid_to_res_id
'website_slides.mail_template_channel_completed'
***************************************************************************************
browse
partner_id
***************************************************************************************
browse
partner_id
***************************************************************************************
browse
[slide_id]
***************************************************************************************
browse
ids_to_resequence
***************************************************************************************
search
removed_slide_partner_domain
***************************************************************************************
browse
ids_to_resequence[-1]
***************************************************************************************
read_group
[('is_published', '=', True), ('category_id', 'in', self.ids), ('is_category', '=', False)]['category_id', 'slide_type']['category_id', 'slide_type']
***************************************************************************************
browse
values['channel_id']
***************************************************************************************
image_url
self'image_1024'
***************************************************************************************
search
[('channel_id', 'in', self.channel_id.ids), ('partner_id', 'in', self.partner_id.ids)]
***************************************************************************************
_search_get_detail
selforderoptions
***************************************************************************************
_search_get_detail
selforderoptions
***************************************************************************************
with_user
self.user_officer
***************************************************************************************
with_user
self.user_officer
***************************************************************************************
with_user
self.user_officer
***************************************************************************************
create
{'channel_id': self.channel.id, 'partner_id': self.user_emp.partner_id.id}
***************************************************************************************
create
{'channel_id': self.channel.id, 'partner_id': self.user_emp.partner_id.id}
***************************************************************************************
create
{'channel_id': self.channel.id, 'partner_id': self.customer.id}
***************************************************************************************
create
{'slide_id': self.slide.id, 'channel_id': self.channel.id, 'partner_id': self.customer.id}
***************************************************************************************
search
[('groups_id', 'in', self.ref('base.group_user'))]
***************************************************************************************
create
{'name': 'NewUser', 'login': 'NewUser', 'groups_id': [(6, 0, [self.ref('base.group_user')])]}
***************************************************************************************
create
{'name': 'NewUser2', 'login': 'NewUser2', 'groups_id': [(5, 0)]}
***************************************************************************************
create
{'name': 'NewUser3', 'login': 'NewUser3', 'groups_id': [(5, 0)]}
***************************************************************************************
search
[('id', '=', '%d' % id_channel_partner)]
***************************************************************************************
search
[('id', '=', '%d' % id_slide_partner)]
***************************************************************************************
with_user
self.user_officer
***************************************************************************************
create
{'name': 'Cooking Tips for Cooking Humans', 'channel_id': self.channel.id, 'is_category': True, 'sequence': 5}
***************************************************************************************
create
{'slide_id': self.slide.id, 'channel_id': self.channel.id, 'partner_id': self.user_manager.partner_id.id, 'completed': True}
***************************************************************************************
create
{'name': 'Test Course 2', 'slide_ids': [(0, 0, {'name': 'Test Slide 1'})]}
***************************************************************************************
create
slide_slide_vals
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'Test2'}
***************************************************************************************
create
{'name': 'NewCategorySlide', 'channel_id': channel_2.id, 'is_category': True, 'sequence': 1}
***************************************************************************************
create
{'name': 'NewCategorySlide2', 'channel_id': channel_2.id, 'is_category': True, 'sequence': 2}
***************************************************************************************
create
{'name': 'NewTestSlide', 'channel_id': channel_2.id, 'sequence': 2}
***************************************************************************************
create
{'name': 'Sub-cooking Tips Category', 'channel_id': self.channel.id, 'is_category': True, 'is_published': True, 'sequence': 2}
***************************************************************************************
_find_document_data_from_url
url
***************************************************************************************
with_user
self.user_officer
***************************************************************************************
create
{'name': 'Basics of Gardening - Test', 'user_id': self.env.ref('base.user_admin').id, 'enroll': 'public', 'channel_type': 'training', 'allow_comment': True, 'promote_strategy': 'most_voted', 'is_published': True, 'description': 'Learn the basics of gardening !', 'create_date': Datetime.now() - relativedelta(days=8), 'slide_ids': [(0, 0, {'name': 'Gardening: The Know-How', 'sequence': 1, 'datas': pdf_content, 'slide_type': 'presentation', 'is_published': True, 'is_preview': True}), (0, 0, {'name': 'Home Gardening', 'sequence': 2, 'image_1920': img_content, 'slide_type': 'infographic', 'is_published': True}), (0, 0, {'name': 'Mighty Carrots', 'sequence': 3, 'image_1920': img_content, 'slide_type': 'infographic', 'is_published': True}), (0, 0, {'name': 'How to Grow and Harvest The Best Strawberries | Basics', 'sequence': 4, 'datas': pdf_content, 'slide_type': 'document', 'is_published': True}), (0, 0, {'name': 'Test your knowledge', 'sequence': 5, 'slide_type': 'quiz', 'is_published': True, 'question_ids': [(0, 0, {'question': 'What is a strawberry ?', 'answer_ids': [(0, 0, {'text_value': 'A fruit', 'is_correct': True, 'sequence': 1}), (0, 0, {'text_value': 'A vegetable', 'sequence': 2}), (0, 0, {'text_value': 'A table', 'sequence': 3})]}), (0, 0, {'question': 'What is the best tool to dig a hole for your plants ?', 'answer_ids': [(0, 0, {'text_value': 'A shovel', 'is_correct': True, 'sequence': 1}), (0, 0, {'text_value': 'A spoon', 'sequence': 2})]})]})]}
***************************************************************************************
browse
values['template_id']
***************************************************************************************
search
[('user_ids', '=', False), ('id', 'in', self.partner_ids.ids)]
***************************************************************************************
_replace_local_links
body
***************************************************************************************
_get
'slide.channel'
***************************************************************************************
_for_xml_id
'website_forum.action_forum_post'
***************************************************************************************
_for_xml_id
'website_slides.slide_channel_action_overview'
***************************************************************************************
search
[('survey_id', '=', self.id)]
***************************************************************************************
create
{'title': 'Small course certification', 'access_mode': 'public', 'users_login_required': True, 'scoring_type': 'scoring_with_answers', 'certification': True, 'is_attempts_limited': True, 'scoring_success_min': 100.0, 'attempts_limit': 2}
***************************************************************************************
search
[('twitter_api_key', '!=', False), ('twitter_api_secret', '!=', False), ('twitter_screen_name', '!=', False)]
***************************************************************************************
_lang_get
self.env.context.get('lang') or self.env.user.lang
***************************************************************************************
_sendone
'broadcast''bundle_changed'{'name': self.name, 'version': self.version}
***************************************************************************************
search
[('action_id', 'in', self.ids)]
***************************************************************************************
create
res
***************************************************************************************
browse
self.action_id.id
***************************************************************************************
fields_view_get
act.search_view_id.id'search'
***************************************************************************************
browse
self._context.get('active_id')
***************************************************************************************
browse
self._context.get('active_id')
***************************************************************************************
check_access_rights
'write'
***************************************************************************************
_search
[]
***************************************************************************************
_search
[]
***************************************************************************************
browse
value
***************************************************************************************
search
[('name', '=', attachment_name), ('res_model', '=', self.model), ('res_id', '=', record.id)]
***************************************************************************************
browse
self.env['ir.ui.view'].get_view_id('web.minimal_layout')
***************************************************************************************
browse
self.env.uid
***************************************************************************************
name_search
value
***************************************************************************************
browse
ir_model_ids
***************************************************************************************
_get
report.model
***************************************************************************************
create
attachment_vals
***************************************************************************************
get_view_id
'web.minimal_layout'
***************************************************************************************
_for_xml_id
'web.action_base_document_layout_configurator'
***************************************************************************************
_get
action.model
***************************************************************************************
browse
[res_id for res_id in res_ids if res_id]
***************************************************************************************
sudo
False
***************************************************************************************
_for_xml_id
'base.action_attachment'
***************************************************************************************
flush
['res_model', 'res_id', 'create_uid', 'public', 'res_field']
***************************************************************************************
browse
attachment.res_id
***************************************************************************************
check_access_rights
'read'False
***************************************************************************************
browse
res_ids
***************************************************************************************
search_count
domain
***************************************************************************************
browse
server_action_id
***************************************************************************************
_get
model_namefield_name
***************************************************************************************
_get
model_namefield_name
***************************************************************************************
_get
model_namefield_name
***************************************************************************************
_update_xmlids
[{'xml_id': xid if '.' in xid else '%s.%s' % (import_module, xid), 'record': rec, 'noupdate': noupdate} for (rec, xid) in zip(recs, xids) if xid and isinstance(xid, str)]
***************************************************************************************
browse
int(id)
***************************************************************************************
search
[('state', '=', 'installed')]
***************************************************************************************
_update_xmlids
data_list
***************************************************************************************
search
[('state', '=', 'installed')]
***************************************************************************************
search
domain
***************************************************************************************
_update_xmlids
data_list
***************************************************************************************
_update_xmlids
data_list
***************************************************************************************
browse
field_ids
***************************************************************************************
_update_xmlids
data_list
***************************************************************************************
search
[('id', '=', res_id)]
***************************************************************************************
browse
field_ids
***************************************************************************************
search
[('name', 'in', modules_to_remove)]
***************************************************************************************
search
[('module', 'in', modules.ids)]
***************************************************************************************
search
[('module', 'in', modules.ids)]
***************************************************************************************
_create_all_specific_views
modules
***************************************************************************************
browse
res_id
***************************************************************************************
search
[('model', '=', model.model)]
***************************************************************************************
_update_selection
rec.modelrec.nameselection
***************************************************************************************
_pop_field
record.name
***************************************************************************************
browse
vals['model_id']
***************************************************************************************
_get_id
model_name
***************************************************************************************
_get_ids
model_name
***************************************************************************************
browse
unique(constraint_ids)
***************************************************************************************
browse
unique(field_ids)
***************************************************************************************
browse
unique(model_ids)
***************************************************************************************
browse
data.res_id
***************************************************************************************
browse
self._context.get('model_id')
***************************************************************************************
create
vals
***************************************************************************************
create
{'name': menu.name, 'parent_id': menu.menu_id.id, 'action': 'ir.actions.act_window,%d' % (action_id,)}
***************************************************************************************
search
[('relation', 'in', self.mapped('model'))]
***************************************************************************************
_get_selection_data
field_data['id']
***************************************************************************************
browse
(item[1] for item in items)
***************************************************************************************
_get_selection
rec.id
***************************************************************************************
search
[('model', '=', vals['relation'])]
***************************************************************************************
_get
model
***************************************************************************************
browse
unique(selection_ids)
***************************************************************************************
browse
id_name
***************************************************************************************
search
[('exclusive', '=', True)]
***************************************************************************************
_module_data_uninstall
modules_to_remove
***************************************************************************************
create
module_metadata
***************************************************************************************
_load_module_terms
mod_namesfilter_langoverwrite
***************************************************************************************
search
[('name', 'in', names)]
***************************************************************************************
browse
set(value)
***************************************************************************************
search
[('name', 'in', names)]
***************************************************************************************
browse
set(value)
***************************************************************************************
search
[('parent_id', '=', False)]
***************************************************************************************
search_read
domain['display_name']
***************************************************************************************
search_count
model_domain
***************************************************************************************
browse
imd_models[model]
***************************************************************************************
set_param
'base.profiling_enabled_until'self.expiration
***************************************************************************************
_get
modelname
***************************************************************************************
browse
v[1]
***************************************************************************************
_get
modelprop_name
***************************************************************************************
_get
modelname
***************************************************************************************
_get
modelname
***************************************************************************************
browse
field_id
***************************************************************************************
browse
int(resource_id)
***************************************************************************************
get_view_id
name
***************************************************************************************
get_view_id
view_name
***************************************************************************************
barcode
barcode_symbologyvalue
***************************************************************************************
_render
'base.contact'val
***************************************************************************************
precision_get
options['decimal_precision']
***************************************************************************************
browse
company_id
***************************************************************************************
_get
model
***************************************************************************************
search
[('sequence_id', '=', self.id), ('date_from', '<=', sequence_date), ('date_to', '>=', sequence_date)]
***************************************************************************************
search
[('sequence_id', '=', self.id), ('date_from', '>=', date), ('date_from', '<=', date_to)]
***************************************************************************************
search
[('sequence_id', '=', self.id), ('date_to', '>=', date_from), ('date_to', '<=', date)]
***************************************************************************************
search
[('sequence_id', '=', self.id), ('date_from', '<=', dt), ('date_to', '>=', dt)]
***************************************************************************************
_get
model_namefield_name
***************************************************************************************
search
[('model', '=', model_name)]
***************************************************************************************
_lang_get
lang
***************************************************************************************
browse
ids
***************************************************************************************
search_count
[('code', '!=', main_lang)]
***************************************************************************************
search
[('ref_id', 'in', self.ids)]
***************************************************************************************
_render
self.idqcontext
***************************************************************************************
translate_fields
'ir.ui.view'self.id'arch_db'
***************************************************************************************
_xmlid_to_res_id
template
***************************************************************************************
browse
self.env.user.id
***************************************************************************************
sudo
False
***************************************************************************************
_xmlid_to_res_id
xmlid
***************************************************************************************
_xmlid_to_res_id
group.strip()
***************************************************************************************
_xmlid_to_res_model_res_id
name
***************************************************************************************
browse
action_id
***************************************************************************************
create
{'name': vals['name'], 'is_company': True, 'image_1920': vals.get('logo'), 'email': vals.get('email'), 'phone': vals.get('phone'), 'website': vals.get('website'), 'vat': vals.get('vat'), 'country_id': vals.get('country_id')}
***************************************************************************************
_for_xml_id
'base.action_open_base_onboarding_company'
***************************************************************************************
browse
vals['currency_id']
***************************************************************************************
browse
values['currency_id']
***************************************************************************************
browse
active_ids
***************************************************************************************
search
[('report_name', '=', report_name)]
***************************************************************************************
search
[('name', 'in', selectable), ('state', 'in', ['to install', 'installed', 'to upgrade'])]
***************************************************************************************
check_access_rights
'write'
***************************************************************************************
search
[('res_model', '=', self._name)]
***************************************************************************************
search
[('res_model', '=', self._name)]
***************************************************************************************
fields_get
[field_name]
***************************************************************************************
browse
int(value)
***************************************************************************************
flush
['rate', 'currency_id', 'company_id', 'name']
***************************************************************************************
_get_last_rates_for_companies
company
***************************************************************************************
_get_last_rates_for_companies
self.company_id | self.env.company
***************************************************************************************
_get_last_rates_for_companies
self.company_id | self.env.company
***************************************************************************************
browse
self._context.get('company_id')
***************************************************************************************
browse
self._context.get('company_id')
***************************************************************************************
browse
self._context.get('company_id')
***************************************************************************************
_search
[('code', '=', self._context['lang'])]
***************************************************************************************
browse
self._context.get('company_id')
***************************************************************************************
browse
self._context.get('active_id')
***************************************************************************************
browse
self._context.get('company_id')
***************************************************************************************
search
[('state', '=', 'installed')]
***************************************************************************************
search_count
[('lang', 'in', lang_codes)]
***************************************************************************************
search_count
[('lang', 'in', lang_codes)]
***************************************************************************************
discard_values
'res.partner''lang'lang_codes
***************************************************************************************
search
[('lang', '=', language.code)]
***************************************************************************************
browse
self._context.get('category_id')
***************************************************************************************
browse
SUPERUSER_ID
***************************************************************************************
search_count
[('barcode', '=', self.barcode)]
***************************************************************************************
check_access_rights
'write'
***************************************************************************************
sudo
False
***************************************************************************************
browse
company_id
***************************************************************************************
postprocess_and_fields
sub_view_node
***************************************************************************************
sudo
False
***************************************************************************************
browse
self.env.context['category_id']
***************************************************************************************
_xmlid_to_res_id
'base.default_user'
***************************************************************************************
_xmlid_to_res_id
'base.group_user'
***************************************************************************************
create
{}
***************************************************************************************
_xmlid_to_res_id
'base.group_multi_company'
***************************************************************************************
_generate
Noneself.sudo().name
***************************************************************************************
search
[('category_id', '=', user_types_category.id)]
***************************************************************************************
browse
user_ids
***************************************************************************************
browse
default_user_id
***************************************************************************************
search
[('active', '=', True)]
***************************************************************************************
browse
values['currency_id']
***************************************************************************************
search
[('id', 'in', self.env.registry.populated_models['res.company'])]
***************************************************************************************
search
[('active', '=', True)]
***************************************************************************************
browse
values['currency_id']
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
browse
res_ids
***************************************************************************************
_get_report_from_name
'base.report_irmodulereference'
***************************************************************************************
browse
docids
***************************************************************************************
browse
res_ids
***************************************************************************************
fields_get
fnames
***************************************************************************************
search
[('login', '=', 'demo')]
***************************************************************************************
search
[('login', '=', 'demo')]
***************************************************************************************
search
[('login', '=', 'portal')]
***************************************************************************************
create
{'name': 'Marc Demo', 'email': 'mark.brown23@example.com'}
***************************************************************************************
create
{'login': 'demo', 'password': 'demo', 'partner_id': self.partner_demo.id, 'groups_id': [Command.set([self.env.ref('base.group_user').id, self.env.ref('base.group_partner_manager').id])]}
***************************************************************************************
create
{'name': 'Marc Demo', 'email': 'mark.brown23@example.com'}
***************************************************************************************
create
{'login': 'demo', 'password': 'demo', 'partner_id': self.partner_demo.id, 'groups_id': [Command.set([self.env.ref('base.group_user').id, self.env.ref('base.group_partner_manager').id])]}
***************************************************************************************
create
{'name': 'Joel Willis', 'email': 'joel.willis63@example.com'}
***************************************************************************************
with_user
self.user_demo
***************************************************************************************
create
{'name': 'Add separate label for decimal_places', 'model': 'res.currency', 'inherit_id': self.env.ref('base.view_currency_form').id, 'arch': '\n                <data>\n                    <field name="decimal_places" position="attributes">\n                        <attribute name="nolabel">1</attribute>\n                    </field>\n                    <field name="decimal_places" position="before">\n                        <label for="decimal_places"/>\n                    </field>\n                </data>\n            '}
***************************************************************************************
with_user
self.user_demo
***************************************************************************************
with_user
self.user_demo
***************************************************************************************
with_user
self.user_demo
***************************************************************************************
with_user
self.user_demo
***************************************************************************************
with_user
self.user_demo
***************************************************************************************
create
{'name': 'test_rule1', 'model_id': model_res_partner.id, 'domain_force': False, 'groups': [Command.set(group_user.ids)]}
***************************************************************************************
with_user
self.user_demo
***************************************************************************************
create
{'name': 'test_rule2', 'model_id': model_res_partner.id, 'domain_force': False, 'groups': [Command.set(group_user.ids)]}
***************************************************************************************
create
{'name': 'test_rule3', 'model_id': model_res_partner.id, 'domain_force': False, 'groups': [Command.set(group_user.ids)]}
***************************************************************************************
create
{'name': 'Test Group', 'users': [Command.set(self.user_demo.ids)]}
***************************************************************************************
browse
1
***************************************************************************************
search
[('groups', '=', False)]
***************************************************************************************
search
domain
***************************************************************************************
search
[('id', 'in', self.partners.ids)]
***************************************************************************************
search
[('id', 'in', self.partners.ids)]
***************************************************************************************
search
[('id', 'in', self.partners.ids)]
***************************************************************************************
search
[]
***************************************************************************************
search
domain
***************************************************************************************
search
domain
***************************************************************************************
search
[('name', 'ilike', 'g'), ('id', 'in', self.partners.ids)]
***************************************************************************************
search
[('name', 'ilike', 'g'), ('id', 'in', self.partners.ids)]
***************************************************************************************
search
[('name', 'ilike', 'j'), ('id', 'in', self.partners.ids)]
***************************************************************************************
create
{'name': 'test_environment_demo', 'login': 'test_environment_demo', 'password': 'test_environment_demo'}
***************************************************************************************
search
[('id', 'in', self.partners.ids)]
***************************************************************************************
search
[('id', 'in', self.partners.ids)]
***************************************************************************************
search
[('name', 'ilike', 'a'), ('id', 'in', self.partners.ids)]
***************************************************************************************
search
[('name', 'ilike', 'a'), ('id', 'in', self.partners.ids)]
***************************************************************************************
search
[('name', 'ilike', 'a'), ('id', 'in', self.partners.ids)]
***************************************************************************************
search
[('name', 'ilike', 'b'), ('id', 'in', self.partners.ids)]
***************************************************************************************
search
[]
***************************************************************************************
search
[('id', 'in', self.partners.ids)]
***************************************************************************************
search
[('id', 'in', self.partners.ids)]
***************************************************************************************
search
[('id', 'in', self.partners.ids)]
***************************************************************************************
search
[('id', 'in', self.partners.ids)]
***************************************************************************************
search
[('parent_id', '=', False), ('id', 'in', self.partners.ids)]
***************************************************************************************
search
[('name', '=', 'Landon Roberts')]
***************************************************************************************
search
[('name', 'ilike', 'a'), ('id', 'in', self.partners.ids)]
***************************************************************************************
find_or_create
test_string
***************************************************************************************
browse
self.env['res.partner'].with_context(default_email='John.Wick@example.com').name_create('"Raoulette Vachette" <Raoul@Grosbedon.fr>')[0]
***************************************************************************************
browse
self.env['res.partner'].with_context(default_email='John.Wick@example.com').name_create('Raoulette Vachette')[0]
***************************************************************************************
create
{'name': 'Sir...'}
***************************************************************************************
create
{'name': 'Lady...'}
***************************************************************************************
create
{'name': 'test partner'}
***************************************************************************************
create
{'login': 'test@odoo.com', 'partner_id': test_partner.id}
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'A'}
***************************************************************************************
create
{'name': 'B'}
***************************************************************************************
create
{'name': 'G', 'implied_ids': [Command.set((a + b).ids)]}
***************************************************************************************
create
{'name': 'D', 'implied_ids': [Command.set(c.ids)]}
***************************************************************************************
browse
SUPERUSER_ID
***************************************************************************************
create
{'name': 'test_per_class_teardown_partner'}
***************************************************************************************
search
[('name', '=', 'test_per_class_teardown_partner')]
***************************************************************************************
search
[('name', '=', 'test_per_class_teardown_partner')]
***************************************************************************************
name_create
'Mr Blue'
***************************************************************************************
create
{'name': 'test_partner_blue', 'module': 'base', 'model': 'res.partner', 'res_id': pid}
***************************************************************************************
search
[('name', '=', 'test_per_class_teardown_partner')]
***************************************************************************************
create
{'name': 'test_per_class_teardown_partner'}
***************************************************************************************
search
[('name', '=', 'test_per_class_teardown_partner')]
***************************************************************************************
search
[('name', '=', 'test_per_class_teardown_partner')]
***************************************************************************************
name_create
'Mr Yellow'
***************************************************************************************
create
{'name': 'test_partner_yellow', 'module': 'base', 'model': 'res.partner', 'res_id': pid}
***************************************************************************************
create
{'name': 'Foo'}
***************************************************************************************
with_user
self.user_demo
***************************************************************************************
create
{'name': 'partners rule', 'model_id': self.env['ir.model']._get('res.partner').id, 'domain_force': str([('id', 'in', accessible.ids)])}
***************************************************************************************
with_user
self.user_demo
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'Acme 2'}
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
search
domain
***************************************************************************************
search
[('name', '=', 'test')]
***************************************************************************************
create
{'name': 'c0'}
***************************************************************************************
create
{'name': 'c1', 'city': 'Ljósálfaheimr'}
***************************************************************************************
create
{'name': 'c2', 'city': 'York'}
***************************************************************************************
create
{'name': 'c3', 'city': 'Springfield'}
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
with_user
self.env.ref('base.user_admin')
***************************************************************************************
create
[{'name': 'users rule', 'model_id': self.env['ir.model']._get('res.users').id, 'domain_force': str([('id', '=', 1)])}, {'name': 'partners rule', 'model_id': self.env['ir.model']._get('res.partner').id, 'domain_force': str([('id', '=', 1)])}]
***************************************************************************************
browse
1
***************************************************************************************
browse
1
***************************************************************************************
search
[('name', '=', 'Pepper Street')]
***************************************************************************************
search
[('id', 'in', (obj1 | obj2 | obj3 | obj4).ids), ('city', '!=', 'York')]
***************************************************************************************
search
[('id', 'in', (obj1 | obj2 | obj3 | obj4).ids), ('city', 'not ilike', 'field')]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
_get
'res.partner'
***************************************************************************************
_get
'res.users'
***************************************************************************************
_get
'res.partner'
***************************************************************************************
create
{'name': 'Test Account', 'user_type_id': self.env.ref('account.data_account_type_payable').id, 'code': 'TestAccountPayable', 'reconcile': True}
***************************************************************************************
create
{'name': 'Test Account', 'user_type_id': self.env.ref('account.data_account_type_receivable').id, 'code': 'TestAccountReceivable', 'reconcile': True}
***************************************************************************************
create
{'name': 'TestingCountry', 'code': 'TY', 'address_format': 'SuperFormat'}
***************************************************************************************
create
{'name': 'TestingPartner', 'city': 'OrigCity', 'country_id': self.test_country.id}
***************************************************************************************
create
{'name': 'TestAction', 'model_id': self.res_partner_model.id, 'model_name': 'res.partner', 'state': 'code', 'code': 'record.write({"comment": "%s"})' % self.comment_html}
***************************************************************************************
search
[('name', 'ilike', 'TestingPartner')]
***************************************************************************************
create
{'name': 'country group'}
***************************************************************************************
create
{'action_id': self.action.id, 'state': 'done'}
***************************************************************************************
search
[('model', '=', self.MODEL)]
***************************************************************************************
create
{'model_id': model.id, 'name': name, 'field_description': name, 'ttype': field_type}
***************************************************************************************
create
{'name': 'yet another view', 'model': self.MODEL, 'arch': '<tree string="X"><field name="%s"/></tree>' % name}
***************************************************************************************
_get
self.MODEL
***************************************************************************************
_get
self.COMODEL
***************************************************************************************
create
{'model_id': comodel.id, 'name': 'x_my_m2o', 'field_description': 'my_m2o', 'ttype': 'many2one', 'relation': self.MODEL}
***************************************************************************************
create
{'model_id': model.id, 'name': 'x_my_o2m', 'field_description': 'my_o2m', 'ttype': 'one2many', 'relation': self.COMODEL, 'relation_field': m2o_field.name}
***************************************************************************************
search
[('model', '=', self.COMODEL)]
***************************************************************************************
create
{'model_id': comodel.id, 'name': 'x_oh_boy', 'field_description': 'x_oh_boy', 'ttype': 'char', 'related': 'partner_id.x_my_char'}
***************************************************************************************
search
[('code', '!=', False)]
***************************************************************************************
create
[{'name': country.code, 'country_id': country.id} for country in countries]
***************************************************************************************
create
{'model_id': self.env['ir.model']._get_id('res.partner'), 'name': 'x_oh_box', 'field_description': 'x_oh_box', 'ttype': 'char'}
***************************************************************************************
search
[('model', '=', self.MODEL)]
***************************************************************************************
create
{'model_id': model.id, 'name': 'x_sel', 'field_description': 'Custom Selection', 'ttype': 'selection', 'selection_ids': [Command.create({'value': 'foo', 'name': 'Foo', 'sequence': 0}), Command.create({'value': 'bar', 'name': 'Bar', 'sequence': 1})]}
***************************************************************************************
create
{'model_id': self.env['ir.model']._get_id('res.partner'), 'name': 'x_oh_boy', 'field_description': 'x_oh_boy', 'ttype': 'char', 'related': 'country_id.code', 'store': True}
***************************************************************************************
_get_id
'res.partner'
***************************************************************************************
_get_id
'res.partner'
***************************************************************************************
set_param
'ir_attachment.location''db'
***************************************************************************************
create
{'name': 'test_rule', 'domain_force': "[('id', '!=', %s)]" % a1.id, 'model_id': self.env.ref('base.model_ir_attachment').id}
***************************************************************************************
set_param
'base.image_autoresize_max_px''1024x768'
***************************************************************************************
set_param
'base.image_autoresize_quality''50'
***************************************************************************************
set_param
'base.image_autoresize_max_px''0'
***************************************************************************************
set_param
'base.image_autoresize_max_px''10000x10000'
***************************************************************************************
set_param
'base.image_autoresize_quality''50'
***************************************************************************************
set_param
'base.image_autoresize_max_px''1024x768'
***************************************************************************************
set_param
'base.image_autoresize_quality''0'
***************************************************************************************
set_param
'base.image_autoresize_quality''50'
***************************************************************************************
set_param
'base.image_autoresize_max_px''0'
***************************************************************************************
search
[('key', 'ilike', 'base.image_autoresize%')]
***************************************************************************************
create
{'name': 'TestCron', 'model_id': self.env.ref('base.model_res_partner').id, 'state': 'code', 'code': 'model.search([("name", "=", "TestCronRecord")]).write({"name": "You have been CRONWNED"})', 'interval_number': 1, 'interval_type': 'days', 'numbercall': -1, 'doall': False}
***************************************************************************************
create
{'name': 'TestCronRecord'}
***************************************************************************************
create
{'name': 'NotTestCronRecord'}
***************************************************************************************
create
{'name': 'President'}
***************************************************************************************
create
{'name': 'C_A'}
***************************************************************************************
create
{'name': 'C_B'}
***************************************************************************************
create
{'name': 'u2', 'login': 'u2', 'company_id': company_a.id, 'company_ids': company_a_b.ids}
***************************************************************************************
with_user
multi_company_user
***************************************************************************************
with_user
ADMIN_USER_ID
***************************************************************************************
with_user
self.USER_ID
***************************************************************************************
with_user
self.USER_ID
***************************************************************************************
with_user
self.USER_ID
***************************************************************************************
with_user
self.USER_ID
***************************************************************************************
with_user
self.USER_ID
***************************************************************************************
with_user
self.USER_ID
***************************************************************************************
with_user
self.USER_ID
***************************************************************************************
with_user
self.USER_ID
***************************************************************************************
search
[]
***************************************************************************************
name_search
'demo'
***************************************************************************************
with_user
self.USER_ID
***************************************************************************************
with_user
self.USER_ID
***************************************************************************************
with_user
self.USER_ID
***************************************************************************************
with_context
context
***************************************************************************************
with_context
context
***************************************************************************************
create
{'datas': GIF, 'name': 'file.gif'}
***************************************************************************************
create
{'datas': GIF, 'name': 'file.png'}
***************************************************************************************
create
{'image_1920': GIF, 'name': 'Test mimetype basic field'}
***************************************************************************************
create
{'fields_id': self.env['ir.model.fields'].search([], limit=1).id, 'name': 'Property binary', 'value_binary': GIF, 'type': 'binary'}
***************************************************************************************
create
{'datas': GIF, 'name': 'image.gif'}
***************************************************************************************
search
[]
***************************************************************************************
with_user
public_user
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
domain
***************************************************************************************
_load_records
[{'xml_id': 'test_convert.foo', 'values': {'name': 'Foo', 'login': 'foo'}, 'noupdate': True}, {'xml_id': 'test_convert.bar', 'values': {'name': 'Bar', 'login': 'bar'}, 'noupdate': True}]
***************************************************************************************
create
{'name': 'MegaBananas', 'model': 'x_mega_bananas', 'order': 'x_name asc, id desc', 'field_id': fields_value}
***************************************************************************************
create
{'x_name': 'Ifan Ben-Mezd'}
***************************************************************************************
browse
record.id
***************************************************************************************
create
{'name': 'x_foo_bar_baz', 'model_id': self.env['ir.model'].search([('model', '=', 'res.partner')]).id, 'field_description': 'foo', 'ttype': 'integer', 'store': False, 'depends': 'name', 'compute': 'time.time()\ndatetime.datetime.now()\ndateutil.relativedelta.relativedelta(hours=1)'}
***************************************************************************************
create
{'name': 'GigaBananas', 'model': 'x_giga_bananas', 'order': 'x_name asc, x_wat', 'field_id': fields_value}
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'foo'}
***************************************************************************************
_get
'x_bananas''x_name'
***************************************************************************************
search
[('model', '=', 'res.partner')]
***************************************************************************************
create
{'number_next': 1, 'company_id': 1, 'padding': 4, 'number_increment': 1, 'implementation': 'standard', 'name': 'test-sequence-00'}
***************************************************************************************
create
{'code': 'test_sequence_date_range', 'name': 'Test sequence', 'use_date_range': True}
***************************************************************************************
search
domain
***************************************************************************************
search
domain
***************************************************************************************
search
[('code', '=', 'test_sequence_date_range')]
***************************************************************************************
create
{'code': 'test_sequence_date_range_2', 'name': 'Test sequence', 'use_date_range': True, 'implementation': 'no_gap'}
***************************************************************************************
with_context
{'ir_sequence_date': january(16)}
***************************************************************************************
search
domain
***************************************************************************************
search
domain
***************************************************************************************
search
[('code', '=', 'test_sequence_date_range_2')]
***************************************************************************************
create
{'code': 'test_sequence_date_range_3', 'name': 'Test sequence', 'use_date_range': True}
***************************************************************************************
create
{'code': 'test_sequence_date_range_4', 'name': 'Test sequence', 'use_date_range': True, 'implementation': 'no_gap'}
***************************************************************************************
with_context
{'ir_sequence_date': january(16)}
***************************************************************************************
search
domain
***************************************************************************************
search
domain
***************************************************************************************
build_email
False'recipient@example.com''Subject''The body of an email'
***************************************************************************************
build_email
False'recipient@example.com''Subject''The body of an email'
***************************************************************************************
send_email
msg
***************************************************************************************
with_context
{'ir.ui.menu.full_list': True}
***************************************************************************************
create
{'name': 'W'}
***************************************************************************************
create
{'name': 'Y'}
***************************************************************************************
create
{'name': 'test user', 'login': 'test2', 'groups_id': [Command.set([self.ref('base.group_user')])]}
***************************************************************************************
create
{'name': 'W'}
***************************************************************************************
create
{'name': 'Y'}
***************************************************************************************
create
{'name': 'test user', 'login': 'test2', 'groups_id': [Command.set([self.ref('base.group_user')])]}
***************************************************************************************
search
[('model', '=', 'res.partner')]
***************************************************************************************
create
{'name': 'Y is invisible', 'domain_force': [('id', '!=', p1.id)], 'model_id': partner_model.id}
***************************************************************************************
create
{'name': 'MyPartner1'}
***************************************************************************************
create
{'name': 'W'}
***************************************************************************************
create
{'name': 'test', 'login': 'test_m2m_store_trigger', 'groups_id': [Command.set([])]}
***************************************************************************************
create
{'name': 'Justine Bridou', 'login': 'saucisson', 'groups_id': [Command.set([self.ref('base.group_partner_manager')])]}
***************************************************************************************
create
[]
***************************************************************************************
create
vals_list
***************************************************************************************
create
vals_list
***************************************************************************************
default_get
['partner_id']
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'Foo', 'login': 'foo'}
***************************************************************************************
create
{'name': 'Foo'}
***************************************************************************************
search
[]
***************************************************************************************
create
{'partner_id': partner_foo.id, 'login': 'foo'}
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'Foo', 'login': 'foo'}
***************************************************************************************
create
{'name': 'Foo', 'login': 'foo', 'employee': True}
***************************************************************************************
create
{'login': 'foo', 'name': 'Foo', 'signature': 'Foo'}
***************************************************************************************
create
{'name': 'Bar'}
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
create
vals
***************************************************************************************
with_user
user
***************************************************************************************
with_user
user
***************************************************************************************
with_user
user
***************************************************************************************
with_user
user
***************************************************************************************
with_user
user
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="root">\n                <t t-foreach="{\'a\': 3, \'b\': 2, \'c\': 1}" t-as="item">\n                    [<t t-esc="item_index"/>: <t t-call="base.dummy"/> <t t-esc="item_value"/>]\n                    <b t-esc="add_one_query()"/>\n                </t>\n            </t>'}
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="dummy"><span><t t-esc="item"/> <t t-esc="add_one_query()"/></span></t>'}
***************************************************************************************
_render
template.idvalues
***************************************************************************************
search
[('id', '=', self.test_profile.id)]
***************************************************************************************
search
[]
***************************************************************************************
_render
template.idvalues
***************************************************************************************
_render
template.idvalues
***************************************************************************************
create
{'name': 'snail%s' % i}
***************************************************************************************
create
{'name': 'My Test Company'}
***************************************************************************************
create
{'name': s}
***************************************************************************************
create
{'name': 'dummy', 'type': 'qweb', 'arch': '\n                <t t-name="base.dummy"><root><span t-esc="5" t-options="{\'widget\': \'char\'}" t-options-widget="\'float\'" t-options-precision="4"/></root></t>\n            '}
***************************************************************************************
create
{'name': 'dummy', 'type': 'qweb', 'arch': '\n                <t t-name="base.dummy">\n                    <root>\n                        <script type="application/javascript">\n                            var s = <t t-esc="json.dumps({\'key\': malicious})"/>;\n                        </script>\n                    </root>\n                </t>\n            '}
***************************************************************************************
create
{'name': 'dummy', 'type': 'qweb', 'arch': '\n                <t t-name="base.dummy">%s</t>\n            ' % expected_result}
***************************************************************************************
create
{'name': 'dummy', 'type': 'qweb', 'arch': '\n                <t t-name="base.dummy">%s</t>\n            ' % expected_result}
***************************************************************************************
create
{'name': 'dummy', 'type': 'qweb', 'arch': '\n                <t t-name="base.dummy">\n                    <root>\n                        <h:table xmlns:h="http://www.example.org/table">\n                            <h:tr xmlns:h="http://www.example.org/table">\n                                <h:td xmlns:h="http://www.w3.org/TD/html4/">Apples</h:td>\n                                <h:td xmlns:h="http://www.example.org/table">Bananas</h:td>\n                            </h:tr>\n                        </h:table>\n                    </root>\n                </t>\n            '}
***************************************************************************************
create
{'name': 'dummy', 'type': 'qweb', 'arch': u'\n                <t t-name="base.dummy">%s</t>\n            ' % expected_result}
***************************************************************************************
create
{'name': 'dummy', 'type': 'qweb', 'arch': u'\n                <t t-name="base.dummy">%s</t>\n            ' % tempate}
***************************************************************************************
create
{'name': 'dummy', 'type': 'qweb', 'arch': u'\n                <t t-name="base.dummy">%s</t>\n            ' % tempate}
***************************************************************************************
create
{'name': 'dummy', 'type': 'qweb', 'arch': u'\n                <t t-name="base.dummy">\n                    <Invoice xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" t-esc="\'test\'"/>\n                </t>\n            '}
***************************************************************************************
create
{'name': 'dummy', 'type': 'qweb', 'arch': u'\n                <t t-name="base.dummy">\n                    <Invoice xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" t-attf-test="test">\n                        <cac:Test xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2">blabla</cac:Test>\n                    </Invoice>\n                </t>\n            '}
***************************************************************************************
create
{'name': 'dummy', 'type': 'qweb', 'arch': u'\n                <t t-name="base.dummy">\n                    <root>\n                        <h:table xmlns:h="http://www.example.org/table">\n                            <h:tr>\n                                <h:td xmlns:h="http://www.w3.org/TD/html4/">Apples</h:td>\n                                <h:td>Bananas</h:td>\n                            </h:tr>\n                        </h:table>\n                        <f:table xmlns:f="http://www.example.org/furniture">\n                            <f:width t-attf-test="1">80</f:width>\n                        </f:table>\n                    </root>\n                </t>\n            '}
***************************************************************************************
create
{'name': 'dummy', 'type': 'qweb', 'arch': u'\n                <t t-name="base.dummy">\n                <root>\n                    <h:table xmlns:h="http://www.example.org/table">\n                        <h:tr>\n                            <h:td xmlns:h="http://www.w3.org/TD/html4/">Apples</h:td>\n                            <h:td>Bananas</h:td>\n                        </h:tr>\n                    </h:table>\n                    <f:table xmlns:f="http://www.example.org/furniture">\n                        <f:width xmlns:f="http://www.example.org/furniture" t-attf-test="1">80</f:width>\n                    </f:table>\n                </root>\n\n                </t>\n            '}
***************************************************************************************
create
{'name': 'dummy', 'type': 'qweb', 'arch': u'\n                <t t-name="base.dummy">\n                    <Invoice xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2">\n                        <cbc:UBLVersionID t-esc="version_id"/>\n                        <t t-foreach="[1, 2, 3, 4]" t-as="value">\n                            Oasis <cac:Test t-esc="value"/>\n                        </t>\n                    </Invoice>\n                </t>\n            '}
***************************************************************************************
create
{'name': 'dummy', 'type': 'qweb', 'arch': u'\n                <t t-name="base.dummy">\n                    <cfdi:Comprobante xmlns:cfdi="http://www.sat.gob.mx/cfd/3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.sat.gob.mx/cfd/3 http://www.sat.gob.mx/sitio_internet/cfd/3/cfdv32.xsd">abc</cfdi:Comprobante>\n                </t>\n            '}
***************************************************************************************
create
{'name': 'dummy', 'type': 'qweb', 'arch': u'\n                <t t-name="base.dummy">\n                    <cfdi:Comprobante xmlns:cfdi="http://www.sat.gob.mx/cfd/3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.sat.gob.mx/cfd/3 http://www.sat.gob.mx/sitio_internet/cfd/3/cfdv32.xsd" t-esc="\'abc\'"/>\n                </t>\n            '}
***************************************************************************************
create
{'name': 'dummy', 'type': 'qweb', 'arch': u'\n                <t t-name="base.dummy">\n                    <cac:fruit xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2"\n                               xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2">\n                        <cac:table>\n                            <cbc:td>Appel</cbc:td>\n                            <cbc:td>Pineappel</cbc:td>\n                        </cac:table>\n                    </cac:fruit>\n                </t>\n            '}
***************************************************************************************
create
{'name': 'dummy2', 'type': 'qweb', 'arch': u'\n                <t t-name="base.dummy2">\n                    <root xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2">\n                        <cac:line t-foreach="[1, 2]" t-as="i" t-call="base.dummy"/>\n                    </root>\n                </t>\n            '}
***************************************************************************************
create
{'name': 'dummy', 'type': 'qweb', 'arch': u'\n                <t t-name="base.dummy">\n                    <root>\n                        <h:table xmlns:h="http://www.example.org/table">\n                            <h:tr>\n                                <h:td xmlns:h="http://www.w3.org/TD/html4/">Apples</h:td>\n                                <h:td>Bananas</h:td>\n                            </h:tr>\n                        </h:table>\n                    </root>\n                </t>\n            '}
***************************************************************************************
create
{'name': 'dummy_ext', 'type': 'qweb', 'inherit_id': view1.id, 'arch': u'\n                <xpath expr="//{http://www.example.org/table}table/{http://www.example.org/table}tr">\n                        <h:td xmlns:h="http://www.example.org/table">Oranges</h:td>\n                </xpath>\n            '}
***************************************************************************************
create
{'name': 'dummy', 'type': 'qweb', 'arch': u'\n                <t t-name="base.dummy">\n                    <Invoice xmlns:od="http://odoo.com/od">\n                        <od:name t-att-test="\'a\' + 1"/>\n                    </Invoice>\n                </t>\n            '}
***************************************************************************************
_activate_lang
other_lang
***************************************************************************************
create
{'name': 'callee', 'type': 'qweb', 'arch': u'\n                <t t-name="base.callee">\n                    <t t-esc="9000000.00" t-options="{\'widget\': \'float\', \'precision\': 2}" />\n                </t>\n            '}
***************************************************************************************
create
{'name': 'callee', 'model': 'ir.ui.view', 'module': 'base', 'res_id': view1.id}
***************************************************************************************
create
{'name': 'calling', 'type': 'qweb', 'arch': u'\n                <t t-name="base.calling">\n                    <t t-call="base.callee" t-lang="\'%s\'" />\n                </t>\n            ' % other_lang}
***************************************************************************************
create
{'name': 'bacode_test', 'barcode': 'test'}
***************************************************************************************
create
{'name': 'a_barcode_view', 'type': 'qweb'}
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="attr-escaping">\n                <div>\n                    <t t-set="o" t-value="(lambda a=open: a)()"/>\n                    <t t-out="o(\'/etc/passwd\').read()"/>\n                </div>\n            </t>'}
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="iter-list">\n                <t t-foreach="[3, 2, 1]" t-as="item">\n                    [<t t-esc="item_index"/>: <t t-esc="item"/> <t t-esc="item_value"/>]</t>\n            </t>'}
***************************************************************************************
_render
t.id
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="iter-dict">\n                <t t-foreach="{\'a\': 3, \'b\': 2, \'c\': 1}" t-as="item">\n                    [<t t-esc="item_index"/>: <t t-esc="item"/> <t t-esc="item_value"/>]</t>\n            </t>'}
***************************************************************************************
_render
t.id
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="attr-escaping">\n                <div t-att-bibi="json.dumps(bibi)">1</div>\n                <div t-att-toto="toto">2</div>\n            </t>'}
***************************************************************************************
_render
t.idvalues
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="attr-escaping">\n                <t t-set="abc"> <t t-if="add_abc"><t t-out="add_abc"/> <span a="b"> | </span></t><t t-out="efg"/> </t>\n                <div t-att-abc="abc">123</div>\n            </t>'}
***************************************************************************************
_render
t.idvalues
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="attr-escaping">\n                <div t-attf-bibi="a, b &gt; c &gt; #{d}">1</div>\n            </t>'}
***************************************************************************************
_render
t.idvalues
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="attr-escaping">\n                <a t-attf-href="/link/#{ url }/#{other and \'sub\'}">link</a>\n                <a t-attf-href="/link/#{ url }/#{(not other) and \'sub\'}">link2</a>\n            </t>'}
***************************************************************************************
_render
t.idvalues
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="attr-escaping">\n                <div t-attf-abc="abc #{val} { other }">123</div>\n            </t>'}
***************************************************************************************
_render
t.idvalues
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="attr-set">\n                <t t-set="abc"> <span a="b"> [%s] </span> </t>\n                <div t-att-abc="abc % add_abc">123</div>\n            </t>'}
***************************************************************************************
_render
t.idvalues
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="attr-set">\n                <t t-set="abc"> <span a="b"> toto </span> </t>\n                <div t-att-abc="\'[%s]\' % abc">123</div>\n                <div class="a1" t-out="abc"/>\n                <div class="a2" t-out="\'[%s]\' % abc"/>\n            </t>'}
***************************************************************************************
_render
t.id
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="out-format">\n                <t t-set="final_message">Powered by %s%s</t>\n                <div t-out="final_message % (a, b and (\'-%s\' % b) or \'\')"/>\n            </t>'}
***************************************************************************************
_render
t.id{'a': 1, 'b': 2}
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="attr-set">\n                <t t-set="toto">Toto %s</t>\n                <t t-set="abc"> <span a="b"> [%s , %s] </span> </t>\n                <div t-out="(abc % (add_abc, toto)) % 5">123</div>\n            </t>'}
***************************************************************************************
_render
t.idvalues
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="attr-set">\n                <t t-set="toto">Toto %s</t>\n                <t t-set="abc"> <span a="b"> a </span> </t>\n                <div t-out="(toto + abc) % v">123</div>\n            </t>'}
***************************************************************************************
_render
t.idvalues
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="attr-set">\n                <t t-set="abc"> <span a="b"> a </span> </t>\n                <div t-out="(v + abc)">123</div>\n            </t>'}
***************************************************************************************
_render
t.idvalues
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="attr-set">\n                <t t-set="abc"> <span a="b"> a </span> </t>\n                <div t-out="(abc + v)">123</div>\n            </t>'}
***************************************************************************************
_render
t.idvalues
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="attr-set">\n                <t t-set="abc"> <span a="b"> a </span> </t>\n                <div t-out="(abc.strip() + v)">123</div>\n            </t>'}
***************************************************************************************
_render
t.idvalues
***************************************************************************************
create
{'name': 'dummy', 'type': 'qweb', 'arch': '\n                <t t-name="base.dummy"><root><span t-out="text" t-options-widget="\'text\'"/></root></t>\n            '}
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="esc-markup">\n                <t t-set="content"><span>toto</span></t>\n                <div t-out="content"/>\n            </t>'}
***************************************************************************************
_render
t.id{}
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="esc-markup">\n                <t t-set="content"><span>toto</span></t>\n                <div t-esc="content"/>\n            </t>'}
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="esc-markup">\n                <t t-set="content"><span>toto</span></t>\n                <div t-out="content"/>\n            </t>'}
***************************************************************************************
_render
t.id{}
***************************************************************************************
_render
ref.id{}
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="attr-set">\n                <t t-set="abc"> <span a="b"> a </span> </t>\n                <div t-if="abc">123</div>\n                <div t-if="not abc">456</div>\n            </t>'}
***************************************************************************************
_render
t.id
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="test">\n                <section>\n                    <div t-esc="abc + def">\n                        <span>content</span>\n                    </div>\n                </section>\n            </t>'}
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name="test">\n                <section>\n                    <div t-esc="abc + def + (">\n                        <span>content</span>\n                    </div>\n                </section>\n            </t>'}
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name=\'test\'>\n            <div>\n                <table>\n                    <tr></tr>\n                    <tr data-pagebreak="before"></tr>\n                    <tr></tr>\n                </table>\n            </div>\n            </t>\n            '}
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': '<t t-name=\'test\'>\n            <div>\n                <table>\n                    <tr></tr>\n                    <tr data-pagebreak="after"></tr>\n                    <tr></tr>\n                </table>\n            </div>\n            </t>\n            '}
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': "<t t-name='test'>\n            <div>\n                <table>\n                    <tr></tr>\n                    <tr></tr>\n                    <tr></tr>\n                </table>\n            </div>\n            </t>\n            "}
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': self.arch}
***************************************************************************************
_render
t.id
***************************************************************************************
create
{'name': 'test', 'type': 'qweb', 'arch_db': self.arch}
***************************************************************************************
_render
t.id{'__keep_empty_lines': True}
***************************************************************************************
create
{'name': 'dummy', 'type': 'qweb', 'arch': '\n            <t>\n                <!-- it is a comment -->\n                <!-- it is another comment -->\n                Text 1\n                <!-- it is still another comment -->\n                Text 2\n                <t>ok</t>\n            </t>\n            '}
***************************************************************************************
_render
t.idvalues
***************************************************************************************
_render
t.id
***************************************************************************************
_render
t.id
***************************************************************************************
_render
t.id
***************************************************************************************
_render
t.id
***************************************************************************************
_render
t.id
***************************************************************************************
_render
t.id
***************************************************************************************
_render
t.id
***************************************************************************************
search
domain
***************************************************************************************
search
[('name', 'like', 'config.settings')]
***************************************************************************************
fields_get
[field_name]
***************************************************************************************
create
{}
***************************************************************************************
create
{'name': 'Vlad the Impaler'}
***************************************************************************************
create
{'name': 'Vlad the Impaler', 'login': 'vlad', 'email': 'vlad.the.impaler@example.com'}
***************************************************************************************
name_search
'Vlad'
***************************************************************************************
name_search
'Vlad'
***************************************************************************************
create
{'name': 'Jethala', 'street': 'Powder gali', 'street2': 'Gokuldham Society'}
***************************************************************************************
create
{'name': 'Atmaram Bhide'}
***************************************************************************************
create
{'name': 'Test Company'}
***************************************************************************************
create
{'name': 'First Child', 'parent_id': partner.id}
***************************************************************************************
_activate_lang
'de_DE'
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
create
{'name': 'First Child', 'parent_id': partner.id}
***************************************************************************************
create
{'name': 'Second Child', 'parent_id': partner.id}
***************************************************************************************
_activate_lang
'de_DE'
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
create
{'name': 'Radu the Handsome'}
***************************************************************************************
with_context
{'partner_show_db_id': True, 'default_dst_partner_id': test_partner}
***************************************************************************************
create
{'name': 'Pepper Test'}
***************************************************************************************
create
{'name': 'Foo'}
***************************************************************************************
create
[{'name': name, 'category_id': app.id} for name in ('User', 'Manager', 'Visitor')]
***************************************************************************************
create
{'name': 'foo', 'login': 'foo'}
***************************************************************************************
create
{'name': 'x_active', 'model_id': self.env.ref('base.model_res_country').id, 'ttype': 'boolean'}
***************************************************************************************
create
{'name': 'x_active', 'model_id': self.env.ref('base.model_res_bank').id, 'ttype': 'boolean'}
***************************************************************************************
search
[('name', '=', 'res.partner.category,name'), ('res_id', '=', category.id), ('lang', '=', 'fr_FR')]
***************************************************************************************
search
[('name', '=', 'res.partner.category,name'), ('res_id', '=', category.id), ('lang', '=', 'fr_FR')]
***************************************************************************************
create
{'name': 'Padawans'}
***************************************************************************************
create
{'name': 'Padawan'}
***************************************************************************************
create
{'type': 'model', 'name': 'res.partner.category,name', 'module': 'base', 'lang': 'fr_FR', 'res_id': padawans.id, 'value': 'Apprenti', 'state': 'translated'}
***************************************************************************************
translate_fields
'res.partner.category'padawans.id'name'
***************************************************************************************
search
[('res_id', '=', padawans.id), ('name', '=', 'res.partner.category,name'), ('lang', '=', 'fr_FR')]
***************************************************************************************
create
{'name': 'Cheese'}
***************************************************************************************
translate_fields
'res.partner.category'cheese.id'name'
***************************************************************************************
search
[('name', '=', 'res.partner.category,name'), ('res_id', '=', cheese.id)]
***************************************************************************************
search
[('name', '=', 'res.partner.category,name'), ('res_id', '=', category.id), ('lang', '=', 'fr_FR')]
***************************************************************************************
search
[('name', '=', 'res.partner.category,name'), ('res_id', '=', self.category.id), ('lang', '=', 'en_US')]
***************************************************************************************
create
{'type': 'model', 'name': 'res.partner.category,name', 'lang': 'en_US', 'res_id': self.category.id, 'src': 'Reblochon', 'value': 'Translated Name', 'state': 'translated'}
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
search
[('name', '=', 'res.partner.category,name'), ('res_id', '=', self.category.id), ('lang', '=', 'fr_FR')]
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
create
{'type': 'model', 'name': 'res.partner.category,name', 'lang': 'en_US', 'res_id': self.category.id, 'src': 'Reblochon', 'value': 'Translated Name', 'state': 'translated'}
***************************************************************************************
search
[('name', '=', 'res.partner.category,name'), ('res_id', '=', self.category.id)]
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
_activate_lang
'es_ES'
***************************************************************************************
search
[('name', '=', 'res.partner.category,name'), ('res_id', '=', self.category.id)]
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
search
[('name', '=', 'res.country,vat_label'), ('res_id', '=', belgium.id)]
***************************************************************************************
search
[('name', '=', 'res.country,vat_label'), ('res_id', '=', belgium.id)]
***************************************************************************************
translate_fields
'res.country'belgium.id'vat_label'
***************************************************************************************
search
[('name', '=', 'res.country,vat_label'), ('res_id', '=', belgium.id), ('lang', '=', 'en_US')]
***************************************************************************************
_get
'ir.model''state'
***************************************************************************************
fields_get
['state']
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
_get
'ir.model''name'
***************************************************************************************
create
{'type': 'model', 'name': 'ir.model.fields,field_description', 'lang': 'fr_FR', 'res_id': ir_model_field.id, 'src': 'Name', 'value': LABEL}
***************************************************************************************
create
{'name': 'test', 'model': 'res.partner', 'arch': archf % terms}
***************************************************************************************
search
[('type', '=', 'model_terms'), ('name', '=', 'ir.ui.view,arch_db'), ('res_id', '=', view.id)]
***************************************************************************************
search
[('type', '=', 'model_terms'), ('name', '=', 'ir.ui.view,arch_db'), ('res_id', '=', view.id)]
***************************************************************************************
create
{'name': 'test_translate_xml_cache_invalidation', 'model': 'res.partner', 'arch': '<form><b>content</b></form>'}
***************************************************************************************
create
{'type': 'model', 'name': 'res.partner.category,name', 'module': 'base', 'lang': 'fr_FR', 'res_id': padawans.id, 'value': 'Apprentis', 'state': 'translated'}
***************************************************************************************
create
{'type': 'model_terms', 'name': 'ir.ui.view,arch_db', 'lang': lang, 'res_id': view.id, 'src': src, 'value': val, 'state': 'translated'}
***************************************************************************************
_load_records
[dict(xml_id=self.group0, values={'name': 'group0'}), dict(xml_id=self.group1, values={'name': 'group1'})]
***************************************************************************************
create
{'login': 'testuser', 'partner_id': self.env['res.partner'].create({'name': 'Strawman Test User'}).id, 'groups_id': [Command.set([group0.id])]}
***************************************************************************************
with_user
self.test_user
***************************************************************************************
_load_records
[dict(xml_id=grp_test_portal_xml_id, values={'name': 'Test Group Portal'})]
***************************************************************************************
_load_records
[dict(xml_id='test_user_has_group.internal_implied_group1', values={'name': 'Test Group Itnernal 1'})]
***************************************************************************************
_load_records
[dict(xml_id=grp_test_internal2_xml_id, values={'name': 'Test Group Internal 2'})]
***************************************************************************************
create
{'login': 'portalTest', 'name': 'Portal test', 'sel_groups_%s_%s_%s' % (self.grp_internal.id, self.grp_portal.id, grp_public.id): self.grp_portal.id, 'sel_groups_%s_%s' % (grp_test_internal1.id, grp_test_internal2.id): grp_test_internal2.id}
***************************************************************************************
create
{'name': 'implied by portal'}
***************************************************************************************
create
{'login': 'portalTest2', 'name': 'Portal test 2', 'groups_id': [Command.set([self.grp_portal.id])]}
***************************************************************************************
create
{'name': 'fail', 'implied_ids': [Command.set([self.grp_internal.id])]}
***************************************************************************************
_load_records
[dict(xml_id='test_two_user_types.implied_groups', values={'name': 'Test Group'})]
***************************************************************************************
create
{'login': 'test_user_portal', 'name': 'Test User with two user types', 'groups_id': [Command.set([self.grp_portal.id])]}
***************************************************************************************
create
{'name': 'test', 'implied_ids': [Command.set([self.grp_internal.id])]}
***************************************************************************************
create
{'login': 'test_user_portal', 'name': 'Test User with one user types', 'groups_id': [Command.set([grp_test.id])]}
***************************************************************************************
create
{'name': 'U', 'implied_ids': [Command.set([self.grp_internal.id])]}
***************************************************************************************
create
{'login': 'portalFail', 'name': 'Portal fail', 'sel_groups_%s_%s_%s' % (self.grp_internal.id, self.grp_portal.id, grp_public.id): self.grp_portal.id, 'sel_groups_%s_%s' % (grp_test_internal1.id, grp_test_internal2.id): grp_test_internal2.id}
***************************************************************************************
create
{'login': 'test_two_user_types', 'name': 'Test User with two user types', 'groups_id': [Command.set([grp_test.id])]}
***************************************************************************************
create
{'name': 'Strawman Test User'}
***************************************************************************************
locate_node
E.root(E.foo(), E.bar(), E.baz())E.xpath(expr='//qux')
***************************************************************************************
locate_node
E.root(E.foo(), bar, E.baz())E.xpath(expr='//bar')
***************************************************************************************
locate_node
E.root(E.foo(), E.bar(), E.baz())E.field(name='qux')
***************************************************************************************
locate_node
E.root(E.field(name='foo'), E.field(name='bar'), E.field(name='baz'))E.field(name='qux')
***************************************************************************************
locate_node
E.root(E.field(name='foo'), bar, E.field(name='baz'))E.field(name='bar')
***************************************************************************************
locate_node
E.root(E.foo(), E.bar(), E.baz())E.qux()
***************************************************************************************
locate_node
E.root(E.foo(), bar, E.baz())E.bar()
***************************************************************************************
locate_node
E.root(E.foo(attr='1'), E.bar(attr='2'), E.baz(attr='3'))E.bar(attr='5')
***************************************************************************************
locate_node
E.root(E.bar(attr='1'), match, E.root(E.bar(attr='3')))E.bar(attr='2')
***************************************************************************************
locate_node
E.root(E.foo(attr='1'), version='4')E.foo(attr='1', version='3')
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
_upsert_translations
[{'type': 'model_terms', 'name': 'ir.ui.view,arch_db', 'lang': 'fr_FR', 'res_id': v.id, 'src': 'Foo', 'value': 'Fou'}, {'type': 'model_terms', 'name': 'ir.ui.view,arch_db', 'lang': 'fr_FR', 'res_id': v.id, 'src': 'Bar', 'value': 'Barre'}]
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
create
{'type': 'model_terms', 'name': 'ir.ui.view,arch_db', 'res_id': view.id, 'lang': 'fr_FR', 'src': TEXT_EN, 'value': TEXT_FR}
***************************************************************************************
create
{'name': 'test', 'model': 'res.partner', 'arch': archf % terms}
***************************************************************************************
create
[{'type': 'model_terms', 'name': 'ir.ui.view,arch_db', 'lang': lang, 'res_id': view.id, 'src': src, 'value': val, 'state': 'translated'} for (lang, trans_terms) in kwargs.items() for (src, val) in zip(terms, trans_terms)]
***************************************************************************************
search
[('type', '=', 'model_terms'), ('name', '=', 'ir.ui.view,arch_db'), ('res_id', '=', view.id)]
***************************************************************************************
search
[('type', '=', 'model_terms'), ('name', '=', 'ir.ui.view,arch_db'), ('res_id', '=', view.id)]
***************************************************************************************
create
{'name': 'test_translate_xml_cache_invalidation', 'model': 'res.partner', 'arch': '<form><b>content</b></form>'}
***************************************************************************************
search
[('model', '=', 'res.partner'), ('type', '=', 'form')]
***************************************************************************************
create
{'name': 'bob', 'login': 'bob', 'signature': sig}
***************************************************************************************
create
{'name': 'a', 'login': 'a', 'groups_id': self.env.ref('base.group_user').ids}
***************************************************************************************
create
{'name': 'n', 'raw': b'\x01\x02\x03'}
***************************************************************************************
search
[('state', '=', 'installed')]
***************************************************************************************
_activate_lang
self.lang
***************************************************************************************
browse
self._context.get('active_id')
***************************************************************************************
search
[('transient', '=', False)]
***************************************************************************************
search
[('state', 'in', states)]
***************************************************************************************
search
[('ttype', '=', 'reference')]
***************************************************************************************
search
[('id', 'in', aggr_ids)]
***************************************************************************************
create
{'wizard_id': self.id, 'min_id': min_id, 'aggr_ids': partners.ids}
***************************************************************************************
search_count
[(field, 'in', aggr_ids)]
***************************************************************************************
browse
partner_ids
***************************************************************************************
_lang_get
lang_code
***************************************************************************************
create
{'login': 'P', 'name': 'P', 'groups_id': [Command.set([self.env.ref('base.group_portal').id])]}
***************************************************************************************
create
{'name': 'I'}
***************************************************************************************
create
{'name': 'Need help here', 'message_partner_ids': [Command.set([self.portal_user.partner_id.id, self.internal_user_partner.id])]}
***************************************************************************************
create
{'login': 'no_access', 'name': 'no_access', 'groups_id': [Command.clear()]}
***************************************************************************************
with_user
no_access_user
***************************************************************************************
create
{'name': 'Group 0'}
***************************************************************************************
create
{'name': 'Group 1'}
***************************************************************************************
create
{'name': 'Group 2'}
***************************************************************************************
create
{'login': 'bob', 'name': 'Bob Bobman', 'groups_id': [Command.set(self.group2.ids)]}
***************************************************************************************
create
{'val': 5}
***************************************************************************************
create
{'name': 'Marc Demo'}
***************************************************************************************
create
{'login': 'demo2', 'password': 'demo2', 'partner_id': partner_demo.id, 'groups_id': [Command.set([self.env.ref('base.group_user').id, self.env.ref('base.group_partner_manager').id])]}
***************************************************************************************
search
[('model', '=', 'test_access_right.some_obj')]
***************************************************************************************
create
{'val': 5}
***************************************************************************************
search
[('model', '=', 'test_access_right.some_obj')]
***************************************************************************************
create
{'name': name, 'model_id': self.model.id, 'groups': [] if global_ else [Command.link(self.group2.id)], 'domain_force': domain, 'perm_read': False, 'perm_write': False, 'perm_create': False, 'perm_unlink': False, 'perm_' + attr: True}
***************************************************************************************
create
{'obj_id': self.record.id}
***************************************************************************************
create
{'obj_id': self.record.id}
***************************************************************************************
create
{'val': 0}
***************************************************************************************
create
{'val': 0}
***************************************************************************************
create
{'name': 'Forbid negatives', 'model_id': self.browse_ref('test_access_rights.model_test_access_right_some_obj').id, 'domain_force': "[('val', '>', 0)]"}
***************************************************************************************
create
{'name': 'See all categories', 'model_id': self.browse_ref('test_access_rights.model_test_access_right_some_obj').id, 'domain_force': "[('categ_id', 'in', user.env['test_access_right.obj_categ'].search([]).ids)]"}
***************************************************************************************
create
{'name': 'Forbid public group', 'model_id': self.browse_ref('test_access_rights.model_test_access_right_some_obj').id, 'groups': [Command.set([self.browse_ref('base.group_public').id])], 'domain_force': "[(0, '=', 1)]"}
***************************************************************************************
create
{'some_ids': [Command.set(ids)]}
***************************************************************************************
search
[('groups_id', '=', False)]
***************************************************************************************
_get
'res.partner'
***************************************************************************************
search
[('login', '=', 'demo')]
***************************************************************************************
_activate_lang
'ar_SY'
***************************************************************************************
search
domain
***************************************************************************************
create
{'name': 'test bundle inheritance', 'bundle': self.jsbundle_name, 'path': 'test_assetsbundle/static/src/js/test_jsfile4.js'}
***************************************************************************************
create
{'name': 'test bundle inheritance', 'bundle': self.cssbundle_name, 'path': 'test_assetsbundle/static/src/css/test_cssfile2.css'}
***************************************************************************************
search
[('url', '=like', '/web/assets/%-%/{0}%.{1}'.format(self.cssbundle_name, 'min.css'))]
***************************************************************************************
search
[('url', '=like', '/web/assets/%-%/{0}%.{1}'.format(self.cssbundle_name, 'min.css'))]
***************************************************************************************
create
{'name': 'test bundle inheritance', 'bundle': self.cssbundle_name, 'path': 'test_assetsbundle/static/src/css/test_cssfile3.css'}
***************************************************************************************
search
[('url', '=like', '/web/assets/%-%/{0}%.{1}'.format(self.cssbundle_name, 'min.css'))]
***************************************************************************************
search
[('url', '=like', '/web/assets/%-%/rtl/{0}.css'.format(self.cssbundle_name))]
***************************************************************************************
_render_template
'test_assetsbundle.template2'
***************************************************************************************
search
[('url', '=like', '/web/assets/%-%/test_assetsbundle.bundle4.%')]
***************************************************************************************
_render_template
'test_assetsbundle.template2'{'debug': 'assets'}
***************************************************************************************
search
[('url', '=like', '%/test_assetsbundle.bundle4.js')]
***************************************************************************************
create
{'name': 'test bundle inheritance inline js', 'type': 'qweb', 'arch': view_arch, 'inherit_id': self.browse_ref('test_assetsbundle.bundle1').id}
***************************************************************************************
create
{'name': 'CustomJscode.js', 'mimetype': 'text/javascript', 'datas': base64.b64encode(code)}
***************************************************************************************
create
{'name': 'lol', 'bundle': 'test_assetsbundle.bundle1', 'path': custom_url}
***************************************************************************************
_get_asset_content
self.stylebundle_name
***************************************************************************************
create
{'name': 'test asset', 'arch': arch, 'type': 'qweb'}
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.manifest1.min.js')]
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.manifest2.min.js')]
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.manifest3.min.js')]
***************************************************************************************
create
{'name': 'test_jsfile4', 'bundle': 'test_assetsbundle.manifest4', 'path': 'test_assetsbundle/static/src/js/test_jsfile1.js'}
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.manifest4.min.js')]
***************************************************************************************
create
{'name': 'test_jsfile4', 'bundle': 'test_assetsbundle.irasset1', 'path': 'test_assetsbundle/static/src/js/test_jsfile1.js'}
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.irasset1.min.js')]
***************************************************************************************
create
{'name': 'test_jsfile4', 'bundle': 'test_assetsbundle.manifest1', 'directive': 'replace', 'target': 'test_assetsbundle/static/src/js/test_jsfile1.js', 'path': 'http://external.link/external.js'}
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.manifest1')]
***************************************************************************************
create
{'name': 'test_jsfile4', 'bundle': 'test_assetsbundle.manifest4', 'directive': 'replace', 'path': 'test_assetsbundle/static/src/js/test_jsfile1.js', 'target': 'test_assetsbundle/static/src/js/test_jsfile3.js'}
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.manifest4')]
***************************************************************************************
create
{'name': 'test_jsfile4', 'directive': 'prepend', 'bundle': 'test_assetsbundle.manifest4', 'path': 'test_assetsbundle/static/src/js/test_jsfile4.js'}
***************************************************************************************
create
{'name': 'test_jsfile4', 'bundle': 'test_assetsbundle.manifest4', 'directive': 'replace', 'path': 'test_assetsbundle/static/src/js/test_jsfile[12].js', 'target': 'test_assetsbundle/static/src/js/test_jsfile[45].js'}
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.manifest4')]
***************************************************************************************
create
{'name': 'test_jsfile4', 'bundle': 'test_assetsbundle.manifest5', 'directive': 'remove', 'path': 'test_assetsbundle/static/src/js/test_jsfile2.js'}
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.manifest5')]
***************************************************************************************
create
{'name': 'test_jsfile4', 'bundle': 'test_assetsbundle.remove_error', 'path': '/test_assetsbundle/static/src/js/test_jsfile1.js'}
***************************************************************************************
create
{'name': 'test_jsfile4', 'bundle': 'test_assetsbundle.remove_error', 'directive': 'remove', 'path': 'test_assetsbundle/static/src/js/test_doesntexist.js'}
***************************************************************************************
create
{'name': 'test_jsfile4', 'bundle': 'test_assetsbundle.manifest2', 'directive': 'remove', 'path': 'test_assetsbundle/static/src/**/*'}
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.manifest2.js')]
***************************************************************************************
create
{'name': 'test_jsfile4', 'directive': 'prepend', 'bundle': 'test_assetsbundle.manifest4', 'path': 'test_assetsbundle/static/src/js/test_jsfile1.js'}
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.manifest4')]
***************************************************************************************
create
{'name': 'test_jsfile4', 'directive': 'include', 'bundle': 'test_assetsbundle.irasset_include1', 'path': 'test_assetsbundle.manifest6'}
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.irasset_include1')]
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.manifest6')]
***************************************************************************************
create
{'name': 'test_jsfile4', 'directive': 'include', 'bundle': 'test_assetsbundle.irasset_include1', 'path': 'test_assetsbundle.irasset_include2'}
***************************************************************************************
create
{'name': 'test_jsfile4', 'directive': 'include', 'bundle': 'test_assetsbundle.irasset_include2', 'path': 'test_assetsbundle.irasset_include1'}
***************************************************************************************
create
{'name': 'test_jsfile4', 'directive': 'include', 'bundle': 'test_assetsbundle.irasset_include1', 'path': 'test_assetsbundle.irasset_include2'}
***************************************************************************************
create
{'name': 'test_jsfile4', 'directive': 'include', 'bundle': 'test_assetsbundle.irasset_include2', 'path': 'test_assetsbundle.irasset_include3'}
***************************************************************************************
create
{'name': 'test_jsfile4', 'directive': 'include', 'bundle': 'test_assetsbundle.irasset_include2', 'path': 'test_assetsbundle.irasset_include4'}
***************************************************************************************
create
{'name': 'test_jsfile4', 'directive': 'include', 'bundle': 'test_assetsbundle.irasset_include4', 'path': 'test_assetsbundle.irasset_include3'}
***************************************************************************************
create
{'name': 'test_jsfile4', 'bundle': 'test_assetsbundle.irasset_include3', 'path': 'test_assetsbundle/static/src/js/test_jsfile1.js'}
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.irasset_include1')]
***************************************************************************************
search
[('name', 'ilike', 'test_other.mockmanifest1')]
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.manifest4')]
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.manifest4')]
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.manifest4')]
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.manifest4')]
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.manifest4')]
***************************************************************************************
create
{'name': '1', 'bundle': 'test_assetsbundle.irasset2', 'path': 'http://external.css/externalstyle.css'}
***************************************************************************************
create
{'name': '2', 'bundle': 'test_assetsbundle.irasset2', 'path': 'test_assetsbundle/static/src/css/test_cssfile1.css'}
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.irasset2')]
***************************************************************************************
create
{'name': '1', 'bundle': 'test_assetsbundle.irasset2', 'path': 'http://external.css/externalstyle.css'}
***************************************************************************************
create
{'name': '2', 'bundle': 'test_assetsbundle.irasset2', 'path': 'test_assetsbundle/static/src/scss/test_file1.scss'}
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.irasset2')]
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.bundle4')]
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.bundle4')]
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.bundle4')]
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.bundle4')]
***************************************************************************************
create
{'name': '1', 'bundle': 'test_assetsbundle.bundle4', 'path': '/test_assetsbundle/static/src/js/test_jsfile4.js', 'target': '/test_assetsbundle/static/src/js/test_jsfile3.js', 'directive': 'before'}
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.bundle4')]
***************************************************************************************
create
{'name': '1', 'bundle': 'test_assetsbundle.bundle4', 'path': '/test_assetsbundle/static/src/js/test_jsfile4.js', 'target': '/test_assetsbundle/static/src/js/test_jsfile2.js', 'directive': 'after'}
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.bundle4')]
***************************************************************************************
create
{'name': '1', 'bundle': 'test_assetsbundle.bundle4', 'path': '/test_assetsbundle/static/src/js/test_jsfile4.js', 'target': '/test_assetsbundle/static/src/css/test_cssfile1.css', 'directive': 'after'}
***************************************************************************************
create
{'name': '1', 'bundle': 'test_assetsbundle.bundle4', 'path': '/test_assetsbundle/static/src/css/test_cssfile3.css', 'target': '/test_assetsbundle/static/src/js/test_jsfile2.js', 'directive': 'before'}
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.bundle4')]
***************************************************************************************
create
{'name': '1', 'bundle': 'test_assetsbundle.wrong_path', 'path': '/test_assetsbundle/static/src/js/test_jsfile4.js'}
***************************************************************************************
create
{'name': '1', 'bundle': 'test_assetsbundle.wrong_path', 'path': '/test_assetsbundle/static/src/js/test_jsfile1.js', 'target': '/test_assetsbundle/static/src/js/doesnt_exist.js', 'directive': 'after'}
***************************************************************************************
create
{'name': '1', 'bundle': 'test_assetsbundle.manifest4', 'path': '/test_assetsbundle/static/src/*/**', 'target': '/test_assetsbundle/static/src/js/test_jsfile3.js', 'directive': 'after'}
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.manifest4')]
***************************************************************************************
create
{'name': '1', 'bundle': 'test_assetsbundle.manifest4', 'path': '/test_assetsbundle/static/src/js/test_jsfile[124].js', 'target': '/test_assetsbundle/static/src/js/test_jsfile3.js', 'directive': 'before'}
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.manifest4')]
***************************************************************************************
create
{'name': '1', 'bundle': 'test_assetsbundle.irassetsec', 'path': '/test_assetsbundle/%s' % path_to_dummy}
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.irassetsec')]
***************************************************************************************
create
{'name': '1', 'bundle': 'test_assetsbundle.irassetsec', 'path': '/test_assetsbundle/%s' % path_to_dummy}
***************************************************************************************
_get_asset_paths
'test_assetsbundle.irassetsec'
***************************************************************************************
create
{'name': '1', 'bundle': 'test_assetsbundle.irassetsec', 'path': '/notinstalled_module/somejsfile.js'}
***************************************************************************************
create
{'name': '1', 'bundle': 'test_assetsbundle.irassetsec', 'path': '/notinstalled_module/somejsfile.js'}
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.irassetsec')]
***************************************************************************************
create
{'name': '1', 'bundle': 'test_assetsbundle.irassetsec', 'path': '/test_assetsbundle/__manifest__.py'}
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.irassetsec')]
***************************************************************************************
create
{'name': '1', 'bundle': 'test_assetsbundle.irassetsec', 'path': '/test_assetsbundle/data/ir_asset.xml'}
***************************************************************************************
_get_asset_paths
'test_assetsbundle.irassetsec'
***************************************************************************************
create
{'name': '1', 'bundle': 'test_assetsbundle.irassetsec', 'path': '/test_assetsbundle/static/accessible.xml'}
***************************************************************************************
_get_asset_paths
'test_assetsbundle.irassetsec'
***************************************************************************************
create
{'name': 'my custom scss', 'mimetype': 'text/scss', 'type': 'binary', 'url': 'test_assetsbundle/my_style_attach.scss', 'datas': scss_code}
***************************************************************************************
create
{'name': '1', 'bundle': 'test_assetsbundle.irasset_custom_attach', 'path': 'test_assetsbundle/my_style_attach.scss'}
***************************************************************************************
search
[('name', 'ilike', 'test_assetsbundle.irasset_custom_attach')]
***************************************************************************************
_lang_get
lang or self.env.user.lang
***************************************************************************************
search
[('url', '=like', '/web/assets/%-%/{0}%.{1}'.format(self.cssbundle_name, 'min.css'))]
***************************************************************************************
flush
['checksum', 'write_date']
***************************************************************************************
invalidate_cache
['write_date']
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
browse
1
***************************************************************************************
search
[('name', '=', 'test_data_module')]
***************************************************************************************
create
{'module': '', 'name': 'x', 'model': self.model_name, 'res_id': record.id}
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
_get
'export.selection''value'
***************************************************************************************
create
{'value': 42}
***************************************************************************************
create
{'value': 42}
***************************************************************************************
create
{'value': 42}
***************************************************************************************
search
[]
***************************************************************************************
create
{'value': 42}
***************************************************************************************
create
{'name': 'whopwhopwhop', 'module': '__t__', 'model': r._name, 'res_id': r.id}
***************************************************************************************
create
{'value': 42}
***************************************************************************************
create
{'name': sub.str, 'module': '__t__', 'model': sub._name, 'res_id': sub.id}
***************************************************************************************
_activate_lang
code
***************************************************************************************
create
{'value': 42}
***************************************************************************************
create
{'value': 36}
***************************************************************************************
create
{'value': 42}
***************************************************************************************
create
{'value': 42}
***************************************************************************************
create
{'value': 42}
***************************************************************************************
create
{'value': 42}
***************************************************************************************
create
{'value': 42}
***************************************************************************************
create
{'value': 36}
***************************************************************************************
create
{'value': 3, 'str': 'record0'}
***************************************************************************************
create
{'value': 44, 'str': 'record1'}
***************************************************************************************
create
{'value': 84, 'str': 'record2'}
***************************************************************************************
create
{'value': 9, 'str': 'record3'}
***************************************************************************************
create
{'value': 3, 'str': 'record0'}
***************************************************************************************
create
{'value': 44, 'str': 'record1'}
***************************************************************************************
create
{'value': 84, 'str': 'record2'}
***************************************************************************************
create
{'value': 9, 'str': 'record3'}
***************************************************************************************
load
['name', 'mobile', 'email', 'image_1920']data
***************************************************************************************
load
fnamesdata
***************************************************************************************
browse
r['ids']
***************************************************************************************
create
{'value_parent': 0}
***************************************************************************************
browse
r['ids']
***************************************************************************************
create
{'value_parent': 0}
***************************************************************************************
create
{'model': 'export.inherits.parent', 'res_id': parent.id, 'module': 'xxx', 'name': 'parent'}
***************************************************************************************
browse
r['ids']
***************************************************************************************
create
{'value_parent': 0}
***************************************************************************************
create
{'model': 'export.inherits.parent', 'res_id': parent.id, 'module': 'xxx', 'name': 'parent'}
***************************************************************************************
browse
r['ids']
***************************************************************************************
create
{'value_parent': 0}
***************************************************************************************
create
{'parent_id': parent.id, 'value': 1}
***************************************************************************************
create
{'model': self.model_name, 'res_id': child.id, 'module': 'xxx', 'name': 'child'}
***************************************************************************************
create
{'value_parent': 0}
***************************************************************************************
create
{'parent_id': parent.id, 'value': 1}
***************************************************************************************
create
[{'model': 'export.inherits.parent', 'res_id': parent.id, 'module': 'xxx', 'name': 'parent'}, {'model': self.model_name, 'res_id': child.id, 'module': 'xxx', 'name': 'child'}]
***************************************************************************************
create
{'value': 3, 'str': 'record0'}
***************************************************************************************
create
{'value': 44, 'str': 'record1'}
***************************************************************************************
create
{'value': 84, 'str': 'record2'}
***************************************************************************************
create
{'value': 9, 'str': 'record3'}
***************************************************************************************
create
{'value': 99, 'str': 'record4'}
***************************************************************************************
create
{'value': 3, 'str': 'record0'}
***************************************************************************************
create
{'value': 44, 'str': 'record1'}
***************************************************************************************
create
{'value': 84, 'str': 'record2'}
***************************************************************************************
create
{'value': 9, 'str': 'record3'}
***************************************************************************************
create
{'str': 'Bf', 'value': 109}
***************************************************************************************
create
{'str': 'Me', 'value': 262}
***************************************************************************************
create
{'str': 'Bf', 'value': 109}
***************************************************************************************
create
{'str': 'Me', 'value': 262}
***************************************************************************************
create
{'str': 'Bf', 'value': 109}
***************************************************************************************
create
{'str': 'Me', 'value': 262}
***************************************************************************************
create
{'partner_id': partner_demo.id}
***************************************************************************************
search
[('daughter_ids', 'like', 'not existing daugther')]
***************************************************************************************
search
[('daughter_ids', 'not like', 'not existing daugther')]
***************************************************************************************
search
[('daughter_ids', '!=', False)]
***************************************************************************************
search
[('daughter_ids', 'in', daughter.ids)]
***************************************************************************************
create
{'name': 'Stuff'}
***************************************************************************************
create
{'name': 'Stuff'}
***************************************************************************************
_get
'test_new_api.selection''state'
***************************************************************************************
_get
'test_new_api.foo''published'
***************************************************************************************
create
{'name': 'B', 'field_in_box': 'box', 'field_in_pallet': 'pallet'}
***************************************************************************************
create
{'name': 'U', 'state': 'a', 'size': 1}
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
create
{'name': 'Bread'}
***************************************************************************************
create
{'name': 'foo'}
***************************************************************************************
create
[{'unit_id': unit_foo.id}] * 5
***************************************************************************************
create
{'name': 'bar'}
***************************************************************************************
with_context
ctx
***************************************************************************************
create
{'code': 'X2120', 'name': 'Expenses - (test)', 'user_type_id': self.env.ref('account.data_account_type_expenses').id}
***************************************************************************************
create
{'code': 'X1012', 'name': 'Debtors - (test)', 'reconcile': True, 'user_type_id': self.env.ref('account.data_account_type_receivable').id}
***************************************************************************************
create
{'code': 'X1111', 'name': 'Creditors - (test)', 'user_type_id': self.env.ref('account.data_account_type_payable').id, 'reconcile': True}
***************************************************************************************
create
{'code': 'X2020', 'name': 'Product Sales - (test)', 'user_type_id': self.env.ref('account.data_account_type_revenue').id}
***************************************************************************************
create
{'code': 'X1014', 'name': 'Bank Current Account - (test)', 'user_type_id': self.env.ref('account.data_account_type_liquidity').id}
***************************************************************************************
create
{'name': 'Vendor Bills - Test', 'code': 'TEXJ', 'type': 'purchase', 'refund_sequence': True}
***************************************************************************************
create
{'name': 'Bank - Test', 'code': 'TBNK', 'type': 'bank', 'default_account_id': bnk.id}
***************************************************************************************
create
{'name': 'Customer Invoices - Test', 'code': 'TINV', 'type': 'sale', 'default_account_id': a_sale.id, 'refund_sequence': True}
***************************************************************************************
browse
value
***************************************************************************************
get_param
'test_new_api.full_name'''
***************************************************************************************
search
[('name', '=', bar.name)]
***************************************************************************************
browse
rec.res_id
***************************************************************************************
create
{'name': 'Company A'}
***************************************************************************************
create
{'name': 'Company B'}
***************************************************************************************
create
{'name': 'M1', 'company_id': self.company_a.id}
***************************************************************************************
create
{'name': 'M2', 'company_id': self.company_b.id}
***************************************************************************************
create
{'name': 'Company C'}
***************************************************************************************
create
{'name': 'Test', 'login': 'test', 'company_id': self.company_a.id, 'company_ids': (self.company_a | self.company_c).ids}
***************************************************************************************
create
{'company_id': self.company_a.id}
***************************************************************************************
create
{'name': 'M1', 'company_id': self.company_a.id, 'parent_id': self.parent_company_a_id.id}
***************************************************************************************
create
{'name': 'M1', 'company_id': self.company_b.id, 'parent_id': self.parent_company_a_id.id}
***************************************************************************************
create
{'name': 'M1', 'company_id': self.company_a.id, 'parent_id': self.parent_company_a_id.id}
***************************************************************************************
create
{'name': 'My Classic User', 'login': 'My Classic User', 'groups_id': [Command.set(self.env.ref('base.group_user').ids)]}
***************************************************************************************
with_context
context
***************************************************************************************
create
{'name': 'M1', 'company_id': self.company_b.id, 'parent_id': self.parent_company_a_id.id}
***************************************************************************************
with_user
user
***************************************************************************************
create
{'name': 'x_bool_new_undefined', 'model_id': self.env.ref('test_new_api.model_domain_bool').id, 'field_description': 'A new boolean column', 'ttype': 'boolean'}
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'Foo'}
***************************************************************************************
create
{'name': 'x_bool_false_computed', 'model_id': self.env.ref('test_new_api.model_test_new_api_message').id, 'field_description': 'A boolean computed to false', 'compute': "for r in self: r['x_bool_false_computed'] = False", 'store': False, 'ttype': 'boolean'}
***************************************************************************************
create
{'name': 'x_computed_custom_valid_depends', 'model_id': self.env.ref('test_new_api.model_test_new_api_foo').id, 'state': 'manual', 'field_description': 'A compute with a valid depends', 'compute': "for r in self: r['x_computed_custom_valid_depends'] = False", 'depends': 'value1', 'store': False, 'ttype': 'boolean'}
***************************************************************************************
create
{'name': 'x_computed_custom_valid_transitive_depends', 'model_id': self.env.ref('test_new_api.model_test_new_api_foo').id, 'state': 'manual', 'field_description': 'A compute with a valid transitive depends', 'compute': "for r in self: r['x_computed_custom_valid_transitive_depends'] = False", 'depends': 'x_computed_custom_valid_depends', 'store': False, 'ttype': 'boolean'}
***************************************************************************************
create
{'name': 'x_computed_custom_invalid_depends', 'model_id': self.env.ref('test_new_api.model_test_new_api_foo').id, 'state': 'manual', 'field_description': 'A compute with an invalid depends', 'compute': "for r in self: r['x_computed_custom_invalid_depends'] = False", 'depends': 'bar', 'store': False, 'ttype': 'boolean'}
***************************************************************************************
create
{'name': 'x_computed_custom_invalid_transitive_depends', 'model_id': self.env.ref('test_new_api.model_test_new_api_foo').id, 'state': 'manual', 'field_description': 'A compute with an invalid transitive depends', 'compute': "for r in self: r['x_computed_custom_invalid_transitive_depends'] = False", 'depends': 'x_computed_custom_invalid_depends', 'store': False, 'ttype': 'boolean'}
***************************************************************************************
create
{'name': 'x_test_10_compute_store_x_name', 'model': 'x_test_10_compute_store_x_name', 'field_id': [(0, 0, {'name': 'x_name', 'ttype': 'char'}), (0, 0, {'name': 'x_stuff_id', 'ttype': 'many2one', 'relation': 'ir.model'})]}
***************************************************************************************
search
[]
***************************************************************************************
create
{}
***************************************************************************************
create
{}
***************************************************************************************
create
{'name': 'Stuff', 'participants': [Command.link(user_root.id), Command.link(user_demo.id)], 'messages': [Command.create({'author': user_root.id, 'body': 'one'}), Command.create({'author': user_demo.id, 'body': 'two'}), Command.create({'author': user_root.id, 'body': 'three'})]}
***************************************************************************************
create
{'model_id': self.env['ir.model'].search([('model', '=', 'res.users')]).id, 'domain_force': "[('id', '!=', %d)]" % user2.id}
***************************************************************************************
create
{'name': 'A'}
***************************************************************************************
create
{'name': 'B', 'parent': a.id}
***************************************************************************************
create
{'name': 'C', 'parent': b.id}
***************************************************************************************
create
{'name': 'D', 'parent': c.id}
***************************************************************************************
create
{'name': 'foo'}
***************************************************************************************
create
{'foo': 'Hi'}
***************************************************************************************
set_param
'test_new_api.full_name''name1,name2'
***************************************************************************************
create
{'name': 'Foo'}
***************************************************************************************
create
{'name': 'Foo', 'login': 'foo'}
***************************************************************************************
create
{'name': 'test country'}
***************************************************************************************
create
{'name': 'other country'}
***************************************************************************************
create
{'name': 'test company', 'child_ids': [(0, 0, {'name': 'Child Company 1'}), (0, 0, {'name': 'Child Company 2'})]}
***************************************************************************************
create
{'discussion': discussion.id, 'body': 'Whatever'}
***************************************************************************************
create
[{}, {}]
***************************************************************************************
create
{}
***************************************************************************************
create
{'name': 'Foo'}
***************************************************************************************
create
{}
***************************************************************************************
create
{}
***************************************************************************************
create
{}
***************************************************************************************
search
[]
***************************************************************************************
create
{}
***************************************************************************************
search
[('discussion_name', '=', 'Bar')]
***************************************************************************************
search
[('discussion.name', '=', 'Bar')]
***************************************************************************************
create
{'name': 'A'}
***************************************************************************************
create
{'name': 'A', 'value1': 1, 'value2': 2}
***************************************************************************************
create
{'name': 'B', 'value1': 1, 'value2': 2}
***************************************************************************************
create
{'name': 'A'}
***************************************************************************************
create
{}
***************************************************************************************
create
{}
***************************************************************************************
create
{'left_id': left.id, 'right_id': right.id}
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'A'}
***************************************************************************************
create
{'name': 'B'}
***************************************************************************************
create
{'name': 'Foo', 'login': 'foo', 'company_id': company0.id, 'company_ids': [Command.set([company0.id, company1.id, company2.id])]}
***************************************************************************************
create
{'name': 'Bar', 'login': 'bar', 'company_id': company1.id, 'company_ids': [Command.set([company0.id, company1.id, company2.id])]}
***************************************************************************************
create
{'name': 'Baz', 'login': 'baz', 'company_id': company2.id, 'company_ids': [Command.set([company0.id, company1.id, company2.id])]}
***************************************************************************************
create
{'name': 'Qux'}
***************************************************************************************
create
{'name': 'Quux'}
***************************************************************************************
create
{'name': 'Quuz'}
***************************************************************************************
_set_default
'foo''test_new_api.company''default'
***************************************************************************************
_set_default
'foo''test_new_api.company''default1'company1
***************************************************************************************
_set_default
'tag_id''test_new_api.company'tag0
***************************************************************************************
search
[('model_id.model', '=', 'ir.property')]
***************************************************************************************
create
{'foo': 'main', 'date': '1932-11-09', 'moment': '1932-11-09 00:00:00', 'tag_id': tag1.id}
***************************************************************************************
create
{'model_id': self.env['ir.model']._get_id(record._name), 'groups': [self.env.ref('base.group_user').id], 'domain_force': str([('id', '!=', record.id)])}
***************************************************************************************
create
{'foo': 'ABC'}
***************************************************************************************
create
{'company': company_record.id, 'quantity': 1}
***************************************************************************************
search
[('foo', '=', 'DEF')]
***************************************************************************************
new
{'body': 'XXX'}
***************************************************************************************
create
{'name': 'Cat1'}
***************************************************************************************
create
{'name': 'Cat2'}
***************************************************************************************
create
{'body': 'XXX'}
***************************************************************************************
create
{'body': 'WWW'}
***************************************************************************************
create
{'name': 'AAA'}
***************************************************************************************
create
{'name': 'DDD'}
***************************************************************************************
new
{'name': 'Stuff', 'moderator': self.env.uid, 'messages': [Command.link(msg0.id), Command.link(msg1.id), Command.update(msg1.id, {'body': 'YYY'}), Command.create({'body': 'ZZZ'})], 'categories': [Command.link(cat0.id), Command.link(cat1.id), Command.update(cat1.id, {'name': 'BBB'}), Command.create({'name': 'CCC'})]}
***************************************************************************************
new
{'body': 'XXX'}
***************************************************************************************
new
{'message': msg0.id}
***************************************************************************************
new
{'body': 'XXX'}
***************************************************************************************
create
{'name': 'Foo'}
***************************************************************************************
create
{'lines': [(0, 0, {'tags': [(6, 0, tag.ids)]})]}
***************************************************************************************
create
{'line_ids': [Command.create({'quantity': 1}), Command.create({'quantity': 1})]}
***************************************************************************************
create
{}
***************************************************************************************
create
{'move_id': move.id, 'quantity': 1}
***************************************************************************************
create
{'name': 'Foo', 'child_ids': [Command.create({'name': 'Bar'})]}
***************************************************************************************
default_get
fields
***************************************************************************************
default_get
['number']
***************************************************************************************
search
[('author_partner.name', '=', 'Marc Demo')]
***************************************************************************************
create
{'name': 'bar'}
***************************************************************************************
create
{'tags': tag.ids}
***************************************************************************************
create
{}
***************************************************************************************
create
{}
***************************************************************************************
create
{'move_id': move1.id}
***************************************************************************************
create
{}
***************************************************************************************
create
{}
***************************************************************************************
create
{'move_id': move1.id}
***************************************************************************************
search
[('line_ids', 'in', line.id)]
***************************************************************************************
search
[('line_ids', 'in', line.id)]
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
create
{'name': 'Test without attachment', 'image_wo_attachment': SVG}
***************************************************************************************
create
{'name': 'Test without attachment', 'image_attachment': SVG}
***************************************************************************************
search
[('res_model', '=', record._name), ('res_field', '=', 'image_attachment'), ('res_id', '=', record.id)]
***************************************************************************************
search
[('res_model', '=', record._name), ('res_field', '=', 'image_attachment'), ('res_id', '=', record.id)]
***************************************************************************************
search
[('res_model', '=', demo_user.partner_id._name), ('res_field', '=', 'image_1920'), ('res_id', '=', demo_user.partner_id.id)]
***************************************************************************************
create
{'name': 'image', 'image': image_w, 'image_128': image_w}
***************************************************************************************
create
{'name': 'image', 'image': image_h, 'image_128': image_h}
***************************************************************************************
create
{'name': 'image', 'image_512': image_w}
***************************************************************************************
create
{'binary': binary_value}
***************************************************************************************
browse
record.id
***************************************************************************************
browse
record.id
***************************************************************************************
create
{'binary': binary_value}
***************************************************************************************
create
{}
***************************************************************************************
create
[{'name': 'Duchy of Brabant'}, {'name': 'Congo'}]
***************************************************************************************
create
[{'name': 'Brussels', 'country_id': belgium.id}, {'name': 'Kinshasa', 'country_id': congo.id}]
***************************************************************************************
create
{}
***************************************************************************************
create
{'name': 'image', 'tags': [Command.link(tag.id)]}
***************************************************************************************
create
{'name': 'user', 'login': 'user'}
***************************************************************************************
create
{'model_id': self.env['ir.model']._get(record._name).id, 'domain_force': "[('id', '=', %d)]" % record.id}
***************************************************************************************
create
{'model_id': self.env['ir.model']._get(record._name).id, 'domain_force': "[('id', '!=', %d)]" % record.id}
***************************************************************************************
create
{'name': 'a'}
***************************************************************************************
create
{'name': 'b'}
***************************************************************************************
create
{'name': 'a'}
***************************************************************************************
create
{'name': 'b'}
***************************************************************************************
create
[{'tags': [Command.create({'name': str(j)}) for j in range(3)]} for i in range(3)]
***************************************************************************************
_get_id
'res.partner'
***************************************************************************************
create
{'name': 'x_foo', 'field_description': 'Foo', 'model_id': model_id, 'ttype': 'many2many', 'relation': 'res.country', 'store': False}
***************************************************************************************
create
{'name': 'Booba'}
***************************************************************************************
create
{'my_selection': 'foo'}
***************************************************************************************
create
{'my_selection': 'bar'}
***************************************************************************************
create
{'my_selection': 'baz'}
***************************************************************************************
create
{'my_selection': 'foo'}
***************************************************************************************
create
{'my_selection': 'bar'}
***************************************************************************************
create
{'my_selection': 'quux'}
***************************************************************************************
create
{'my_selection': 'foo'}
***************************************************************************************
create
{'my_selection': 'bar'}
***************************************************************************************
create
{'my_selection': 'ham'}
***************************************************************************************
create
{'my_selection': 'foo'}
***************************************************************************************
create
{'my_selection': 'bar'}
***************************************************************************************
create
{'my_selection': 'eggs'}
***************************************************************************************
create
{'my_selection': 'foo'}
***************************************************************************************
create
{'my_selection': 'bar'}
***************************************************************************************
create
{'my_selection': 'bacon'}
***************************************************************************************
create
{'my_selection': 'foo'}
***************************************************************************************
create
{'my_selection': 'eevee'}
***************************************************************************************
create
{'my_selection': 'pikachu'}
***************************************************************************************
create
{'my_selection': 'knickers'}
***************************************************************************************
create
{}
***************************************************************************************
create
{'my_selection': 'foo'}
***************************************************************************************
create
{'my_selection': 'divinity'}
***************************************************************************************
create
{'name': 'Shared Task'}
***************************************************************************************
create
{'user_id': self.env.ref('base.user_admin').id, 'parent_id': task.id, 'amount': 1}
***************************************************************************************
search
[('discussion', '=', discussion.id), ('size', '<=', size)]
***************************************************************************************
create
{'discussion': discussion.id, 'body': 'Whatever'}
***************************************************************************************
search
[]
***************************************************************************************
_get_id
record._name
***************************************************************************************
with_user
self.env.ref('base.user_demo')
***************************************************************************************
with_user
self.user_demo
***************************************************************************************
search
[('field_id.model', '=', self.MODEL_ABSTRACT), ('field_id.name', '=', 'state'), ('value', '=', 'confirmed')]
***************************************************************************************
search
[('field_id.model', '=', model), ('field_id.name', '=', 'my_selection'), ('value', '=', option)]
***************************************************************************************
search
[('model', '=', 'res.users')]
***************************************************************************************
with_user
self.env.ref('base.user_demo')
***************************************************************************************
with_user
self.user_demo
***************************************************************************************
_get
record._name
***************************************************************************************
_get
record._name
***************************************************************************************
create
{'name': 'A partner'}
***************************************************************************************
create
{'partner': partner1.id}
***************************************************************************************
create
{'name': 'A second partner'}
***************************************************************************************
set
'test_new_api.foo''value2'666
***************************************************************************************
create
{'name': 'X', 'country_id': self.env.ref('base.be').id}
***************************************************************************************
create
[{'name': 'Foo'}, {'name': 'Bar'}]
***************************************************************************************
create
{'name': 'Payment form view', 'model': 'test_new_api.payment', 'arch': '\n                <form>\n                    <field name="move_id" readonly="1" required="0"/>\n                    <field name="tag_id"/>\n                    <field name="tag_name"/>\n                    <field name="tag_repeat"/>\n                    <field name="tag_string"/>\n                </form>\n            '}
***************************************************************************************
create
[{'name': 'foo1'}, {'name': 'bar1'}]
***************************************************************************************
create
{'name': 'Family', 'child_ids': [Command.create({'name': 'W', 'cost': 10}), Command.create({'name': 'X', 'cost': 10}), Command.create({'name': 'Y'}), Command.create({'name': 'Z'})]}
***************************************************************************************
create
{'line_ids': [(0, 0, {'value': 7})]}
***************************************************************************************
create
{'name': 'foo'}
***************************************************************************************
create
{'name': 'What is up?'}
***************************************************************************************
new
{'name': 'What is up?'}
***************************************************************************************
new
{'name': 'What is up?'}
***************************************************************************************
_merge
(p1 + p2).idsp1
***************************************************************************************
create
{}
***************************************************************************************
create
{'res_model': record0._name, 'res_id': record0.id}
***************************************************************************************
create
{'name': 'parent', 'child_ids': [Command.create({'name': 'A'})]}
***************************************************************************************
create
{'name': 'parent'}
***************************************************************************************
create
{'name': 'A', 'parent_id': parent.id}
***************************************************************************************
create
{'name': 'Foo'}
***************************************************************************************
create
{'name': 'Foo'}
***************************************************************************************
create
{'line_ids': [Command.create({'product': 'a'}), Command.create({'product': 'b'}), Command.create({'product': 'b', 'reward': True})]}
***************************************************************************************
search
[('model', '=', self.Book._name)]
***************************************************************************************
search
[('model', '=', self.Movie._name)]
***************************************************************************************
create
{}
***************************************************************************************
create
{'name': 'A', 'digits': 2}
***************************************************************************************
create
{'name': 'B', 'digits': 6}
***************************************************************************************
new
{name: value}
***************************************************************************************
search
[('model', 'in', list(model_names))]
***************************************************************************************
search
[('name', '=', field.relation)]
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
create
{'name': 'X'}
***************************************************************************************
create
{'name': 'X'}
***************************************************************************************
create
{'name': 'Y'}
***************************************************************************************
create
{'name': 'X'}
***************************************************************************************
create
{'name': 'X'}
***************************************************************************************
create
[{'name': val} for val in range(10)]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[]
***************************************************************************************
search
[('id', 'in', all_records.mapped('partner_id').ids)]
***************************************************************************************
_set_default
'property_eggs''test_performance.bacon'eggs
***************************************************************************************
create
[{'name': 'foo%d' % index, 'line_ids': [Command.create({'value': index})]} for index in range(1000)]
***************************************************************************************
create
{'name': 'X'}
***************************************************************************************
create
{'name': 'X', 'line_ids': [Command.create({'value': val}) for val in range(10)]}
***************************************************************************************
create
{'name': 'X'}
***************************************************************************************
create
{'name': 'X', 'tag_ids': [Command.create({'name': val}) for val in range(10)]}
***************************************************************************************
create
{'name': 'X', 'tag_ids': [Command.link(tag.id) for tag in tags]}
***************************************************************************************
create
{'name': 'X', 'tag_ids': [Command.set([])]}
***************************************************************************************
create
{'name': 'X', 'tag_ids': [Command.set(tags.ids)]}
***************************************************************************************
_get
'property_eggs''test_performance.bacon'
***************************************************************************************
_get
'property_eggs''test_performance.bacon'
***************************************************************************************
browse
new
***************************************************************************************
search
[('model', '=', model._name)]
***************************************************************************************
create
{'name': 'Foo'}
***************************************************************************************
create
{'name': 'Bar'}
***************************************************************************************
_get
self.users._name
***************************************************************************************
create
{'name': 'Only The Lone Wanderer allowed', 'model_id': users_model.id, 'domain_force': [('id', '=', self.users[0].id)]}
***************************************************************************************
search
[]
***************************************************************************************
search
[('name', 'ilike', self.f2)]
***************************************************************************************
new
{'parent': self.id}
***************************************************************************************
search
[]
***************************************************************************************
create
{'move_id': move.id, 'product_id': move.product_id.id, 'product_uom_qty': 0, 'qty_done': quantity_done}
***************************************************************************************
create
{'name': 'A'}
***************************************************************************************
create
{'name': 'B'}
***************************************************************************************
create
{}
***************************************************************************************
create
{'name': 'A'}
***************************************************************************************
create
{'name': 'B'}
***************************************************************************************
create
{'m2m': [Command.set(a.ids)]}
***************************************************************************************
create
{'subs': [Command.create({})]}
***************************************************************************************
create
{'product_id': product0, 'product_qty': 1.0, 'move_raw_ids': [Command.create({'product_id': product2, 'move_line_ids': [Command.create({'product_id': product2, 'product_uom_qty': 1.0, 'qty_done': 0.0})]}), Command.create({'product_id': product1, 'unit_factor': 4, 'move_line_ids': [Command.create({'product_id': product1, 'product_uom_qty': 4.0, 'qty_done': 0.0})]})], 'move_finished_ids': [Command.create({'product_id': product0})]}
***************************************************************************************
create
{}
***************************************************************************************
create
{'product_id': product0, 'product_qty': 1.0, 'move_raw_ids': [Command.create({'product_id': product2, 'move_line_ids': [Command.create({'product_id': product2, 'product_uom_qty': 1.0, 'qty_done': 0.0})]}), Command.create({'product_id': product1, 'unit_factor': 4, 'move_line_ids': [Command.create({'product_id': product1, 'product_uom_qty': 4.0, 'qty_done': 0.0})]})], 'move_finished_ids': [Command.create({'product_id': product0})]}
***************************************************************************************
create
{'name': 'A', 'line_ids': [Command.create({'name': 'line 1', 'v': 42, 'line_ids': [Command.create({'v': 1, 'vv': 1})]})]}
***************************************************************************************
create
{'f1': '5'}
***************************************************************************************
create
{'f': c.id, 'f2': 'OK'}
***************************************************************************************
create
{'name': 'a'}
***************************************************************************************
create
{'m2m': []}
***************************************************************************************
create
{'m2m': [Command.set((a | b | c).ids)]}
***************************************************************************************
create
{'name': 'ok'}
***************************************************************************************
create
{}
***************************************************************************************
create
{}
***************************************************************************************
create
{}
***************************************************************************************
create
{}
***************************************************************************************
create
{}
***************************************************************************************
create
{}
***************************************************************************************
create
[{'datas': base64.b64encode(resolver_schema_int), 'name': 'resolver_schema_int.xsd'}, {'datas': base64.b64encode(incomplete_schema_int), 'name': 'incomplete_schema_int.xsd'}, {'datas': base64.b64encode(imported_schema), 'name': 'imported_schema.xsd'}]
***************************************************************************************
create
[X1, Y2]
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
search
[('lang', '=', 'fr_FR'), ('src', '=', '1XBUO5PUYH2RYZSA1FTLRYS8SPCNU1UYXMEYMM25ASV7JC2KTJZQESZYRV9L8CGB')]
***************************************************************************************
search
[('model', '=', 'test.translation.import'), ('name', '=', 'name')]
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
search
[('lang', '=', 'fr_FR'), ('src', '=', 'Ijkl'), ('module', '=', 'test_translation_import')]
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
_activate_lang
'fr_BE'
***************************************************************************************
search
[('lang', '=', 'fr_BE'), ('value', '=like', '% belgian french')]
***************************************************************************************
search
[('lang', '=', 'fr_BE'), ('src', '=', 'Efgh'), ('value', '=', 'Efgh in french')]
***************************************************************************************
search
[('lang', '=', 'fr_BE'), ('src', '=', 'Test translation with a code type but different line number in pot'), ('value', '=', 'Test traduction avec un type code mais différent numéro de ligne dans le pot')]
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
search
[('lang', '=', 'fr_FR'), ('src', '=', 'Test translation with two code lines')]
***************************************************************************************
search
[('lang', '=', 'fr_FR'), ('src', '=', 'Test translation with a code type but different line number in pot')]
***************************************************************************************
search
[('lang', '=', 'fr_FR'), ('src', '=', 'Test translation with two code type and model')]
***************************************************************************************
search_count
[('src', '=', 'Efgh'), ('value', '=', '')]
***************************************************************************************
search_count
[('src', '=', 'Efgh'), ('value', '=', '')]
***************************************************************************************
create
{'name': 'Klingon', 'code': 'tlh', 'data': po_file, 'filename': 'tlh.po'}
***************************************************************************************
_lang_get
'tlh'
***************************************************************************************
search_count
[('lang', '=', 'tlh')]
***************************************************************************************
create
{'name': 'Klingon', 'code': 'tlh', 'data': po_file, 'filename': 'tlh.po'}
***************************************************************************************
create
{'name': 'Dothraki', 'code': 'dot', 'data': po_file, 'filename': 'dot.csv'}
***************************************************************************************
_lang_get
'dot'
***************************************************************************************
search_count
[('lang', '=', 'dot')]
***************************************************************************************
create
{'name': 'Dothraki', 'code': 'dot', 'data': csv_file, 'filename': 'dot.csv'}
***************************************************************************************
create
{'src': '1XBUO5PUYH2RYZSA1FTLRYS8SPCNU1UYXMEYMM25ASV7JC2KTJZQESZYRV9L8CGB', 'value': '1XBUO5PUYH2RYZSA1FTLRYS8SPCNU1UYXMEYMM25ASV7JC2KTJZQESZYRV9L8CGB in Dothraki', 'type': 'model', 'name': 'ir.model.fields,field_description', 'res_id': -1, 'lang': 'dot'}
***************************************************************************************
create
{'lang': 'dot', 'format': 'po', 'modules': [Command.set([module.id])]}
***************************************************************************************
create
{'src': 'Text with %s placeholder', 'value': 'Text avec %s marqueur', 'type': 'code', 'name': 'addons/test_translation_import/tests/test_count_term.py', 'res_id': 0, 'lang': 'fr_BE'}
***************************************************************************************
create
{'src': 'Text with %(num)s placeholders %(symbol)s', 'value': 'Text avec %(num)s marqueurs %(symbol)s', 'type': 'code', 'name': 'addons/test_translation_import/tests/test_count_term.py', 'res_id': 0, 'lang': 'fr_BE'}
***************************************************************************************
search
[('lang', '=', 'fr_FR'), ('module', '=', 'test_translation_import'), ('value', '!=', '')]
***************************************************************************************
create
{'lang': 'fr_FR', 'format': 'po', 'modules': [Command.set([module.id])]}
***************************************************************************************
create
{'name': 'French', 'code': 'fr_FR', 'data': export.data, 'filename': export.name, 'overwrite': False}
***************************************************************************************
search
[('lang', '=', 'fr_FR'), ('module', '=', 'test_translation_import'), ('value', '!=', '')]
***************************************************************************************
create
{'lang': 'fr_FR', 'format': 'csv', 'modules': [Command.set([module.id])]}
***************************************************************************************
create
{'name': 'French', 'code': 'fr_FR', 'data': export.data, 'filename': export.name, 'overwrite': False}
***************************************************************************************
_activate_lang
'fr_FR'
***************************************************************************************
create
{'lang': 'fr_FR'}
***************************************************************************************
search
[('lang', '=', 'fr_FR'), ('module', '=', 'test_translation_import')]
***************************************************************************************
create
{'lang': 'fr_FR', 'overwrite': True}
***************************************************************************************
for_model
self
***************************************************************************************
get_model_defaults
self._name
***************************************************************************************
check
self._nameoperationraise_exception
***************************************************************************************
_compute_domain
self._nameoperation
***************************************************************************************
get_model_defaults
self._namecondition
***************************************************************************************
get_filters
self._nameoptions.get('action_id')
***************************************************************************************
get_bindings
self._name
***************************************************************************************
browse
[value[0] for value in values]
***************************************************************************************
browse
ids_set
***************************************************************************************
_add_manual_fields
self
***************************************************************************************
_make_access_error
operationforbidden
***************************************************************************************
flush
field_names
***************************************************************************************
get_field_string
self._name
***************************************************************************************
default_get
names
***************************************************************************************
_make_access_error
'read'forbidden
***************************************************************************************
_get
self._namename
***************************************************************************************
create
[data['inherited'][model_name] for data in parent_data_list]
***************************************************************************************
_compute_domain
self._name'read'
***************************************************************************************
_get
self._name
***************************************************************************************
_get
keyself._name
***************************************************************************************
_flush_search
[]
***************************************************************************************
flush
[field.inverse_name]
***************************************************************************************
browse
ids
***************************************************************************************
browse
data['stored'][parent_name]
***************************************************************************************
_get
self._name
***************************************************************************************
_load_records
[data]self.mode == 'update'
***************************************************************************************
_load_records
[data]self.mode == 'update'
***************************************************************************************
_load_records
[data]self.mode == 'update'
***************************************************************************************
_xmlid_to_res_model_res_id
id_str
***************************************************************************************
_load_xmlid
xid
***************************************************************************************
search_count
[('name', '=', module), ('state', '=', 'installed')]
***************************************************************************************
_get
binding_model
***************************************************************************************
search_read
[('state', '=', 'installed')]
***************************************************************************************
browse
res_ids
***************************************************************************************
search
[('name', '=', url)]
***************************************************************************************
