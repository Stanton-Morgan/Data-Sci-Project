'account.journal'      search
'ir.model.data'      sudo().search
'account.account'      search
'account.account'      search([
'account.move.line'      flush
'account.account'      flush
'account.journal'      flush
'account.payment.method'      flush
'account.payment.method.line'      flush
'account.account'      browse
'account.journal'      browse
'account.payment.method.line'      flush
'account.journal'      browse
'account.group'      _adapt_accounts_for_account_groups
'account.move.line'      read_group
'account.tax'      search_count
'account.move.line'      search([
'account.move.line'      with_context(check_move_validity=False).create
'account.account'      search([
'account.move.line'      search_count
'account.move.line'      search([
'account.move.line'      search_count([('account_id', '=', account.id), ('currency_id', 'not in', 
'account.move.line'      search([
'ir.property'      sudo().search([
'account.tax'      search
'account.group'      flush
'account.account'      search([
'account.group'      search([
'account.group'      flush
'account.account'      flush
'account.account'      invalidate_cache
'account.group'      flush
'account.group'      invalidate_cache
'account.group'].search([('company_id', 'in', self.company_id.ids)      ._parent_store_update
'account.move'      get_sale_types
'account.move.line'      read_group
'account.move'      get_purchase_types
'account.move.line'      read_group
'account.move'      get_sale_types
'account.move'      get_purchase_types
'account.analytic.account'      browse
'account.bank.statement'      browse(bnk_stmt_id).button_validate
'account.bank.statement'      search([
'account.journal'      search
'account.bank.statement.line'      create
'ir.attachment'      create
'ir.actions.act_window'      _for_xml_id
'account.bank.statement'      browse
'account.move.line'      browse
'account.move.line'      create
'res.partner.bank'      search
'res.partner.bank'      create
'account.payment.method'      _get_payment_method_information
'account.payment.method'      search([('code', 'in', list(method_information.keys
"ir.config_parameter"      sudo().get_param
'account.move.line'      flush
'account.move.line'      flush
'account.payment.method'      _get_payment_method_information
'account.payment.method.line'      flush
'account.payment.method'      flush
'account.payment.method'      browse
'account.move'      search
'res.partner.bank'      browse
'account.journal'      with_context(active_test=False).search_read([
'ir.model'      _get
'ir.model'      _get
'mail.alias'      sudo().create
'account.move'      search([
'res.company'      browse
'res.partner.bank'      browse
'account.move'      search([('journal_id', '=', self.id), ('state', '=', 'posted'), 
'account.journal'      search([('code', 'like', journal_code_base + '%'), 
'res.company'].browse(vals['company_id'       if vals.get
'account.account'      search([
'account.account'      _search_new_account_code
'account.account'      create
'res.partner.bank'      search([('sanitized_acc_number', '=', sanitize_account_number
'res.partner.bank'      create
'res.company'      setting_init_bank_account_action
'ir.attachment'      browse
'account.move'      _get_create_invoice_from_attachment_decoders
'account.move'      create
'ir.sequence'      create
'account.move.line'      check_access_rights
'account.move.line'      _where_calc
'account.account'      browse
'account.account'      browse
'account.move.line'      check_access_rights
'account.move.line'      _where_calc
'account.bank.statement.line'      search
'account.move'      read_group
'account.move'      get_invoice_types
'account.move'      flush
'account.move'      read_group([('journal_id', '=', self.id), 
'account.move'      read_group([('journal_id', '=', self.id), 
'res.currency'      browse(result.get
'res.company'      browse(result.get
'res.currency'      _get_conversion_rate
'account.bank.statement'      search([('journal_id', '=', self.id), 
'account.tour.upload.bill'      create
'account.move.line'      _get_suspense_moves_domain
'account.move.line'      search(domain).mapped
"ir.actions.act_window"      _for_xml_id
'ir.actions.act_window'      _for_xml_id
'ir.actions.act_window'      _for_xml_id
"ir.actions.actions"      _for_xml_id
'account.journal'      search
'account.journal'      search
'res.company'      browse
'account.journal'      browse
'res.partner.bank'      get_available_qr_methods_in_sequence
'account.fiscal.position'      get_fiscal_position
'account.move.line'      new
'account.tax.repartition.line'      browse
'account.tax.repartition.line'      browse
'res.currency'      browse
'account.move.line'      create
'account.tax.repartition.line'      browse
'account.move.line'      create
'account.account'      search
'account.move.line'      create
'account.journal'      search
'account.move'      
'account.move'      search([('reversed_entry_id', '=', move.id), ('state', '=', 'posted'), 
'account.move.line'      _get_suspense_moves_domain
'account.move.line'      search_count
'account.move'      search_count
'account.move.line'      search
'account.tax'      browse
'account.tax'      browse
"account.move"      flush
"account.journal"      flush
"res.partner"      flush
'account.move.line'      flush
'account.move'      flush
'account.journal'      browse
'account.tax'      browse(tax_ids).flatten_taxes_hierarchy
'account.tax.repartition.line'      browse
'account.move.line'      _get_default_tax_account
'account.tax'      browse
'account.tax'].browse(line_vals['tax_ids'][0][2      .flatten_taxes_hierarchy
'account.move'      create
"ir.actions.actions"      _for_xml_id
'account.move.line'      browse
'account.partial.reconcile'      browse
'account.move'      search([
"ir.actions.actions"      _for_xml_id
'res.partner'].browse(line[2]['partner_id'      .sudo
'account.account'].browse(line[2]['account_id'      .display_name or _
'res.partner.bank'      get_available_qr_methods_in_sequence
'account.move'      _get_update_invoice_from_attachment_decoders
'ir.config_parameter'      sudo().get_param
'account.tax'      browse
'account.analytic.default'      account_get
'account.analytic.default'      account_get
'account.tax'      browse
'account.move'      browse
'res.partner'      browse(vals.get
'account.tax'      browse
'product.product'      browse(vals.get
'product.product'      browse(vals.get
'product.product'      browse(vals.get
'account.account'      browse
'account.move'      _field_will_change
'account.move'      _field_will_change
'account.move'      _field_will_change
'account.move.line'      fields_get
'account.journal'      browse(self._context.get
'account.move'      new
'account.journal'      browse(self._context.get
'ir.model.fields'      _get
'account.journal'      browse
'account.partial.reconcile'      _get_cash_basis_tax_line_grouping_key_from_record
'account.partial.reconcile'      _get_cash_basis_base_line_grouping_key_from_record
'account.move'      search([
'account.partial.reconcile'      _get_cash_basis_tax_line_grouping_key_from_record
'account.partial.reconcile'      _get_cash_basis_base_line_grouping_key_from_record
'account.tax.repartition.line'      browse
'account.account'      browse
'account.move'      create
'account.partial.reconcile'      create
'account.partial.reconcile'      create(sorted_lines._prepare_reconciliation_partials
'account.full.reconcile'      create
'account.analytic.line'      create
'ir.actions.act_window'      _for_xml_id
'ir.actions.act_window'      _for_xml_id
'account.journal'      search
'account.payment.method.line'      create
'account.payment'      search_count([
'account.account'      browse
'account.account'      browse
'res.currency'      browse
'account.move'      search([
'ir.property'      sudo().search
'res.lang'      _lang_get
"ir.actions.actions"      _for_xml_id
'account.move.line'      read_group([
'account.tax'      browse
'account.fiscal.position'      get_fiscal_position
model_name      flush
'res.partner'      browse
'account.tax'      search
'res.company'      browse
'account.journal'      browse(context.get
'res.currency'      browse
'product.product'      browse
'res.partner'      browse
'account.account.tag'      _get_tax_tags
'account.tax.report'      browse
'account.account.tag'      _get_tax_tags
'account.tax.report.line'       + record
'account.account.tag'      _get_tax_tags
'account.move.line'      invalidate_cache
'account.tax.repartition.line'      invalidate_cache
'account.account.tag'      browse(tag_ids_to_delete).unlink
'account.tax.carryover.line'      search
'account.account.template'      search
'account.account'      create
'account.account'      _search_new_account_code
'res.company'      browse
model      _load_records
'account.account'      search([
'account.journal'      search([
'ir.property'      sudo().search
model      sudo().search([
'account.account'      create
'account.account'      _search_new_account_code
'account.account'      create
'account.account'      _search_new_account_code
'account.account'      create
'account.account'      _search_new_account_code
'account.account'      create
'account.account'      _search_new_account_code
'account.account'      search
'account.tax'      search([('type_tax_use', 'in', ('sale', 'all')), 
'account.tax'      search([('type_tax_use', 'in', ('purchase', 'all')), 
model      sudo().search([
'account.move'      sudo().search([('company_id', '=', company_id.id), 
'account.journal'      create
'res.currency'      .id,
'account.account'      _search_new_account_code
model      _load_records
'account.account.template'      _load_records
'account.group.template'      search([
'account.reconcile.model.line.template'      search
'account.reconcile.model.template'      search
'account.reconcile.model'      sudo().create
'account.reconcile.model'      sudo().create
'account.fiscal.position.template'      search([
'account.account'      _search_new_account_code(existing_account.company_id, len
'account.account'      create
'account.tax.repartition.line'      search
'account.tax'      search
'account.tax.template'      with_context(active_test=False).search([
'account.tax.group'      search([
'ir.property'      with_company
'account.chart.template'      with_context
'account.account.template'      browse(vals.get
'account.fiscal.position'      search([('company_id', '=', record.id), 
'account.account'      search([('code', 'like', old_code), 
'account.move'      search
'account.bank.statement.line'      search
'account.move.line'      search([
'account.financial.year.op'      create
'account.journal'      search([('type', '=', 'general'), 
'account.move'      create
'account.account'      search([
'account.account'      search([('code', '=', str(code)), 
'account.account'      create
'account.move.line'      create
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
'account.account'      search([
'account.journal'      search([
'account.move'      search_count([('state', '=', 'posted'), 
'account.move'      search([('state', '=', 'posted'), 
'account.move'      browse
'ir.attachment'      sudo().browse(att_ids).filtered
'account.tax'      search([
'account.tax.template'      search([
'account.fiscal.position'      search_count
'account.tax.template'      _try_instantiating_foreign_taxes
'account.move.line'      with_context(state='posted', company_id=self.env.company.id)._query_get
'account.invoice.report'      read_group
'account.partial.reconcile'      check_access_rights
'res.partner.bank'      read_group([
"ir.actions.actions"      _for_xml_id
'account.move'      search
'account.chart.template'      existing_accounting
'account.tax'      search
'account.move.line'      search_count(['|', ('currency_id', '=', self.id), 
'ir.config_parameter'      sudo().get_param
'ir.model'      _get
'res.company'      search
'account.journal'      search
'res.partner'      search
'account.bank.statement'      browse
'account.bank.statement'      browse
'account.bank.statement'      browse
'res.currency'      search([
'res.company'      search
'res.currency'      search
'account.account'      search
'account.journal'      search
'res.partner'      search
'res.currency'      browse
'res.company'      search
'res.currency'      search
'account.payment.register'      with_context(active_model='account.move', active_ids=invoice.ids).create
'res.partner'      search
'account.journal'      search
'account.payment.method.line'      search
'res.company'      search
'res.company'      search
'account.account'      search
'account.reconcile.model'      browse
'res.company'      
'res.company'      browse
'account.move.line'      browse
'account.tax'      browse
'account.move.line'].with_context(data['form'      get('used_context', {}))._query_get
'account.journal'      
'account.journal'      browse
'res.company'      browse
'account.move'      message_new
'account.move'      message_new
'account.move'      message_new
'account.move'      message_new
'account.bank.statement'      create
'account.move'      create
'res.company'      create
'res.partner'      create
'res.partner'      create
'account.move'      
'account.tax'      create
'account.move'      with_context
'account.move'      create
'account.move'      with_context
'account.tax'      create
'account.tax'      create
'account.fiscal.position'      create
'product.product'      create
'account.move'      with_context
'account.tax'      create
'account.tax'      create
'account.fiscal.position'      create
'product.product'      create
'account.move'      with_context
'account.move.reversal'      with_context(active_model="account.move", active_ids=self.invoice.ids).create
'account.move'      browse
'account.move.reversal'      with_context(active_model="account.move", active_ids=self.invoice.ids).create
'account.move'      browse
'account.move.reversal'      with_context(active_model="account.move", active_ids=self.invoice.ids).create
'account.move'      browse
'account.move.reversal'      with_context(active_model="account.move", active_ids=self.invoice.ids).create
'account.move'      browse
'account.move'      create
'account.move'      create
'account.move'      create
'account.move'      create
'account.move'      create
'account.automatic.entry.wizard'      
'account.account'      create
'account.account'      create
'account.move'].browse(wizard_res['domain'][0][2      .line_ids.sorted
'account.move.line'      _get_query_tax_details_from_domain
'account.tax'      create
'account.tax'      create
'account.tax'      create
'account.move'      create
'account.tax'      create
'account.tax'      create
'account.move'      create
'account.tax'      create
'account.tax'      create
'account.move'      create
'account.tax'      create
'account.tax'      create
'account.move'      create
'account.tax'      create
'account.tax'      create
'account.move'      create
'account.tax'      create
'account.move'      create
'account.tax'      create
'account.tax'      create
'account.tax'      create
'account.move'      create
'account.tax'      create
'account.move'      create
'account.tax'      create
'account.move'      create
'account.tax'      create
'account.move'      create
'account.tax'      create
'account.move'      create
'account.tax'      create
'account.tax'      create
'account.move'      create
'account.tax'      create
'account.move'      create
'account.tax'      create
'account.move'      create
'account.tax'      create
'account.tax'      create
'account.fiscal.position'      create
'product.product'      create
'account.move'      with_context
'account.tax'      create
'account.tax'      create
'account.fiscal.position'      create
'product.product'      create
'account.move'      with_context
'account.move.line']._fields['price_unit'      _digits
'decimal.precision'      search([
'account.move'      create
'account.move'      create
'account.tax'      create
'account.move'      create
'account.move'      with_context
'product.product'      create
'account.move'      with_context
'account.fiscal.position'      create
'account.move'      with_context
'account.tax'      create
'account.analytic.tag'      create
'account.analytic.account'      create
'account.analytic.account'      create
'account.move.reversal'      with_context(active_model="account.move", active_ids=self.invoice.ids).create
'account.move'      browse
'account.move.reversal'      with_context(active_model="account.move", active_ids=self.invoice.ids).create
'account.move'      browse
'account.move.reversal'      with_context(active_model="account.move", active_ids=self.invoice.ids).create
'account.move'      browse
'account.move.reversal'      with_context(active_model="account.move", active_ids=self.invoice.ids).create
'account.move'      browse
'account.move.reversal'      with_context(active_model="account.move", active_ids=self.invoice.ids).create
'account.move'      search([('move_type', '=', 'out_refund'), 
'account.move'      create
'res.partner'      create
'account.move'      create
'account.move'      create
'account.move'      create
'account.move'      create
'account.move'      create
'account.move'      create
'account.move'      create
'account.account.tag'      create
'account.tax'      create
'account.move'      create
'account.move'      create
'account.automatic.entry.wizard'      
'account.account'      create
'account.account'      create
'account.move'].browse(wizard_res['domain'][0][2      .line_ids.sorted
'account.payment.term'      create
'account.tax'      create
'account.move'      create
'decimal.precision'      search
'account.move.line']._fields['price_unit'      _digits),
'res.currency.rate'      create
'account.move'      create
'decimal.precision'      search
'account.move.line']._fields['price_unit'      _digits),
'res.currency.rate'].search([      .unlink
'account.move'      create
'product.product'      create
'res.partner'      create
'account.journal'      create
'account.move'      create
'account.move'      with_context
'account.move'      create
'account.move'      create
'account.account.tag'      create
'account.account'      create
'account.account'      create
'account.tax'      create
'account.tax'      create
'account.tax'      create
'account.move'       view='account.view_move_form')
'account.move'       view='account.view_move_form')
'account.tax'      create
'account.move'      
'account.move'      
'account.tax'      create
'account.tax'      create
'account.tax'      create
'account.move'       view='account.view_move_form') as move_form:
'res.currency.rate'      create
'account.move'      create
'res.currency.rate'      create
'res.currency.rate'      create
'res.partner'      create
'account.move'      with_context(default_move_type='out_invoice').create
'account.bank.statement'      create
'account.bank.statement'      create
'account.move'      create
'account.move.line'      search([('move_id', 'in', move_ids), ('account_id', '=', self.account_rcv.id), 
'account.journal'      create
'res.currency.rate'      create({'name': time.strftime
'res.currency.rate'      create({'name': time.strftime
'res.currency.rate'      create({'name': time.strftime
'account.move'      with_context(default_move_type='in_invoice').create
'account.move'      with_context(default_move_type='in_invoice').create
'account.payment'      create
'account.payment'      create
'account.payment'      create
'account.payment'      create
'res.currency.rate'      create
'res.currency.rate'      create
'account.payment'      create
'account.payment'      create
'res.currency.rate'      create
'res.currency.rate'      create
'account.payment'      create
'account.move'      search([('journal_id', '=', exchange_move.journal_id.id), 
'account.journal'      create
'res.currency.rate'      create
'account.move'      with_context(default_move_type='out_invoice').create
'res.currency.rate'      create
'account.payment.register'      
'account.payment.term'      create
'account.payment'      create
'account.move.line'      with_context
'account.move'      create
'account.move'      create
'account.move'      create
'res.currency.rate'      create
'res.currency.rate'      create
'account.payment'      create
'account.move'      create
'res.currency.rate'      create
'res.currency.rate'      create
'account.payment'      create
'account.move'      create
'res.currency.rate'      create
'res.currency.rate'      create
'res.currency.rate'      create
'account.payment'      create
'account.move'      create
'res.currency.rate'      create
'res.currency.rate'      create
'account.payment.register'      
'res.currency.rate'      create
'res.currency.rate'      create
'account.payment.register'      
'res.currency'      create
'res.currency'      browse
'res.currency.rate'      create
'res.currency.rate'      create
'res.currency.rate'      create
'account.payment.register'      
'res.currency.rate'      create
'res.currency.rate'      create
'account.payment.register'      
'res.currency.rate'      create
'res.currency.rate'      create
'account.move'      create
'res.partner.category'      create
'res.partner'      create
'account.fiscal.position'      create
'res.partner'      create
'res.partner'      create
'account.journal'      create
'account.reconcile.model'      create
'account.bank.statement'      create
'account.move'      create
'account.payment'      create
'res.partner'      create
'account.journal'      create
'account.account'      search
'account.move'      create
'account.move'      create
'account.journal'      create
'account.resequence.wizard'      with_context
'res.config.settings'      create
'res.company'      create
'res.config.settings'      with_user
'account.tax'      create
'account.tax'      create
'account.tax'      create
'account.tax'      create
'account.tax'      create
'account.tax'      create
'account.tax'      create
'account.tax'      create
'account.tax'      create
'account.tax'      create
'account.tax'      create
'account.account.tag'      search
'account.tax'      create
'account.move'      create
'account.account.tag'      search([
'account.account'      search([('tax_ids', '!=', False), 
'account.move'      search([
'account.move.line'      browse
'account.move.line'      
'account.move'      _move_dict_to_preview_vals
'account.move'      create
'account.move'      create
'account.move.line'      
'account.move'      browse(res_ids).filtered(lambda move: move.is_invoice
'mail.compose.message'      create
'account.move'      browse(self.env.context.get
'mail.compose.message'      create
'account.move'      search
self.model      browse
'account.journal'      search
'account.journal'      search([
'account.move'].browse(self.env.context['active_ids'       if self.env.context.get
'account.move'], [], True         # Moves to be cancelled by the reverses.
'account.move'], [], False        # Others.
'account.move'      create
'account.journal'      search([
'account.journal'      search
'account.journal'      search
'account.journal'      search([
'account.move'      browse
'account.move'      _get_sequence_format_param
'account.journal'      \
'account.journal'      browse
'account.journal'      search([
'ir.actions.report'      _prepare_html
'ir.actions.report'      _run_wkhtmltopdf
'ir.attachment'      create
'res.partner'      search([
'res.partner'      create
'account.move'      create
'account.tour.upload.bill.email.confirm'      create
'account.journal'      search([
'account.move'      search([
'account.tour.upload.bill'      _action_list_view_bill
self._context['active_model']      browse
'account.journal'      search
'account.move'      _move_dict_to_preview_vals
self._context['active_model']      with_company(self.company_id).browse
'account.move'      create
'account.journal'      search([('type', '=', 'bank'), 
'res.bank'      search([
'res.bank'      create
'account.journal'      search([('type', '=', 'bank'), 
'account.journal'      get_next_bank_cash_default_code
'account.journal'      create
'ir.sequence'      sudo().create
'account.payment'      search_count
'account.journal'      browse
'account.partial.reconcile'      for invoice in invoices}
'account.payment'      browse
'account.move'].browse(self.env.context['active_ids'       if self.env.context.get
'account.edi.document'      
'account.move'      browse(list
'account.journal'      search
'res.partner'      search
'product.product'      search
'account.tax'      search(expression.AND
'res.currency'      search([('name', '=', code.upper
'account.tax'      browse
'account.tax'      browse
'account.move.line'      
'account.edi.format'      browse
'account.edi.document'      create
'account.edi.document'      create
'account.edi.format'      search
'account.edi.format'      search
'account.edi.format'      sudo().create
'account.move'      create
'ir.attachment'      create
'account.move'      
'account.journal'      browse
'account.move'      get_invoice_types
'ir.config_parameter'      get_param
'ir.config_parameter'      get_param
'ir.config_parameter'      get_param
'ir.config_parameter'      get_param
'account.incoterms'      search([
'ir.attachment'      create
'ir.attachment'      create
'fleet.vehicle.log.services'      create
'account.move.line'      search([('vehicle_id', '=', vehicle.id), 
'ir.actions.act_window'      _for_xml_id
'account.move'      search([
'ir.actions.report'      _get_report_from_name
'accounting.assert.test'      browse
'res.partner'      _search([
'res.users'      sudo().with_context
'ir.config_parameter'      get_param
'auth.oauth.provider'      browse
"ir.actions.actions"      _for_xml_id
'ir.config_parameter'      sudo().get_param
'res.users'      check_access_rights
'res.users'      _get_signup_invitation_scope
'res.partner'      _signup_retrieve_partner
'ir.config_parameter'      sudo().get_param
'bus.bus'      _sendone
'ir.config_parameter'      sudo().get_param
'res.users'      search_read
'auth_totp.wizard'      create
'ir.http'      _clear_routing_map
'ir.http'      _clear_routing_map
'ir.config_parameter'      sudo().get_param
'res.company'      create
'res.company'      create
'res.company'      create
'res.partner'      create
'res.partner'      create
'res.partner'      create
'base.automation'      _get_actions
'base.automation'      _get_actions
'base.automation'      _get_actions
'base.automation'      _get_actions
'base.automation'      browse
action.model_name      with_context(context).search
"base.automation"      create
"res.partner"      create
"base.automation"      create
"ir.filters"      with_user(self.env.ref
"base.automation"      create
"ir.filters"      with_user(self.env.ref
'mail.template'      create
'res.users'      create
'base.automation'      create
'ir.config_parameter'      set_param
'res.lang'      _lang_get
'base_import.mapping'      search_read([
'res.currency'].search([('symbol', '=', split_value[currency_index      strip
model      fields_get
self.res_model      with_context
target_model][field      _name
target_model      fields_get().get(target_field, {}).get
fallback_values[field_string]['field_model'      
'base_import.import'      get_fields_tree
'base_import.import'      get_fields_tree
'base_import.import'      _get_mapping_suggestion
'base_import.import'      _get_mapping_suggestion
'base_import.import'      _get_mapping_suggestion
'base_import.import'      _get_mapping_suggestion
'base_import.import'      _get_mapping_suggestion
'base_import.import'      _get_mapping_suggestion
'base_import.import'      _get_mapping_suggestions
'base_import.import'      _get_mapping_suggestions
'base_import.import'      _get_mapping_suggestions
'base_import.import'      create
'base_import.mapping'      search_read
'base_import.import'      _get_mapping_suggestion
'base_import.import'      create
'base_import.import'      create
'base_import.import'      create
'base_import.import'      create
'base_import.import'      create
'base_import.import'      create
'base_import.import'      create
'base_import.import'      create
'base_import.import'      create
'base_import.import'      create
'base_import.import'      create
'base_import.import'      create
'base_import.import'      create
'base_import.import'      create
'res.partner'      search
'base_import.import'      create
'res.partner'      search
'res.partner'      search
'base_import.import'      create
'res.partner'      search
'base_import.import'      create
'base_import.import'      create
'res.partner'      search
'base_import.import'      create
'res.partner'      search
'res.partner'].search([       - 
'res.partner'].search([       - 
'base_import.import'      create
"ir.actions.actions"      _for_xml_id
'res.company'      sudo().search_count
'res.users'      sudo().search_count([
'res.lang'      get_installed
'res.company'      create
'res.config.settings'      with_user
'res.company'      create
'res.partner'      create
'res.users'      create
'res.partner'      create
'res.users'      create
'res.partner'      create
'res.users'      create
'sparse_fields.test'      create
'ir.model.fields'      search
'res.country'      search([
"res.country"      browse
"res.country.group"      search([
'res.company'      browse
'res.country'      search([('code', '=', vat_country_code.upper
'res.company'      browse
'res.country'      browse
'res.partner'      create({'name': "Dummy partner", 'country_id': self.env.ref
'res.partner'      create
"res.partner"      create
"res.partner"      create
'res.partner'      create
'ir.ui.view.custom'      search([('user_id', '=', self.env.uid), 
'ir.attachment'      search(domain).unlink
'bus.bus'      , '_sendone', patched_sendone)
'ir.model.data'      _xmlid_to_res_id
'calendar.event'      browse
'calendar.event'      browse
'calendar.alarm'      browse(events_by_alarm.keys
'calendar.event'      browse
'calendar.alarm'      browse
'calendar.event'      browse
'res.users'      search([('partner_id', 'in', tuple
'bus.bus'      _sendmany
'calendar.event'      
'ir.config_parameter'      sudo().get_param('calendar.block_mail') or self._context.get
'ir.model'      _get_id
'ir.model'      _get_id
'res.partner'      browse
'calendar.recurrence'      default_get
'mail.activity.type'      search([
model_name      sudo().browse(model_ids).filtered
'calendar.event'      _get_time_fields
'bus.bus'      _sendone
'calendar.alarm_manager'      _notify_next_alarm
'calendar.attendee'      search
self.res_model      browse(self.res_id).get_formview_action
'ir.model.data'      _xmlid_to_res_id
'res.partner'      browse
'calendar.alarm_manager'      _notify_next_alarm
'calendar.recurrence'      create
'calendar.filters'      search
'calendar.event'      read_group([
'calendar.event'      with_context(no_mail_to_attendees=True, mail_create_nolog=True).create
'res.lang'      _lang_get
'calendar.event'      search
"ir.actions.actions"      _for_xml_id
'calendar.event'      search([
'calendar.event'      browse
'res.users'      browse(self.env.context.get
"ir.actions.actions"      _for_xml_id
'calendar.event'      search_read
'calendar.event'      _original_module),
'mail.activity.type'      search([
'mail.activity.type'      create
'res.partner'      create
'calendar.event'      with_user(test_user).with_context
'calendar.event'      search([
'calendar.event'      with_user(self.user_demo).with_context
'mail.activity.type'      create
'mail.activity'      create
'ir.model'      _get_id
'res.partner'      create
'calendar.event'      create
'mail.activity.type'      create
'mail.activity'      create
'ir.model'      _get_id
'res.partner'      create
'calendar.event'      create
'mail.message'      sudo().search
'res.partner'      create
'res.partner'      create
'res.partner'      create
'res.partner'      create
'res.partner'      create
'res.company'      sudo().create
'res.users'      with_company(web_company).sudo().create
'calendar.event'].with_context(calendar_action['context'      .create
'calendar.alarm'      create
'calendar.alarm'      create
'calendar.alarm_manager'      with_context(lastcall=now - relativedelta(minutes=15))._send_reminder
'calendar.recurrence'      search([
'calendar.recurrence'      search([
'res.lang'      _lang_get
'calendar.recurrence'      search([
'calendar.recurrence'      search([
'calendar.recurrence'      search([
'calendar.recurrence'      search([
'calendar.recurrence'      search([
'calendar.recurrence'      search([
'calendar.recurrence'      search([
'calendar.recurrence'      search
'calendar.recurrence'      search
'calendar.event'      create
'calendar.recurrence'      search
'calendar.recurrence'      search
'calendar.recurrence'      search
'calendar.recurrence'      search([
'calendar.event'      create
'ir.model.data'      _xmlid_to_res_id
'res.partner'      browse
'mail.activity'      
'coupon.coupon'      read_group([
'product.product'      create
'res.partner'      search_count
'coupon.coupon'      create
'coupon.program'      browse(self.env.context.get
'coupon.coupon'      create
'res.partner'      search(ast.literal_eval
'coupon.coupon'      create
'res.partner'      search_count
'ir.model'      sudo().browse
'res.users'      has_group
'res.company'      search
'crm.team'      _get_default_team_id
'calendar.event'      sudo().read_group
model_name      sudo().with_context
'res.partner'      _clean_website
'res.partner'      _clean_website
'crm.stage'      browse
'mail.activity'      read_group
'crm.stage'      search([
'crm.stage'      search
"ir.actions.actions"      _for_xml_id
"calendar.event"      search_read([
"res.lang"      search_read([
"ir.actions.actions"      _for_xml_id
'mail.alias'      search
'ir.model.fields'      sudo().search
'crm.stage'].search(['|', ('team_id', '=', merged_data['team_id'      , 
'ir.attachment'      search
'calendar.event'      search([
'res.partner'      browse
'crm.lead'      browse(subset_ids).write
'res.partner'      search([
'res.partner'      search([
'crm.team'      browse
'crm.stage'      search([
'crm.lead.scoring.frequency'      search([('variable', 'in', list
'crm.lead'      search
'crm.team'      with_context(active_test=False).search
'crm.lead.scoring.frequency'      search_read
'crm.lead.scoring.frequency'      sudo
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo().get_param
'crm.stage'      search([
'crm.stage'      search_read
'crm.lead'      with_context(active_test=False)._where_calc(domain).get_sql
'crm.team'      search_count
'ir.config_parameter'      sudo().get_param
'crm.lead'      read_group
'crm.lead'      read_group
'crm.lead'      read_group
'crm.lead'      search
'crm.lead.scoring.frequency'      search([
'crm.lead.scoring.frequency'      sudo().search
'crm.lead.scoring.frequency'      sudo().create
'ir.model'      _get
'crm.team'      search
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo().get_param
"crm.lead"      search
'crm.lead'      browse(lead_unlink_ids).unlink
'crm.lead'      browse(lead_unlink_ids).unlink
'crm.lead'       # direct team assign
"ir.actions.actions"      _for_xml_id
'ir.actions.actions'      _for_xml_id
'ir.actions.actions'      _for_xml_id
'ir.ui.view'      _render_template
'crm.lead'      search_count
'crm.lead'      search_count
'ir.model.fields'      search([('name', 'in', names), 
'crm.lead.scoring.frequency.field'      search([
'crm.team'      search
'crm.team'].search([('assignment_optout', '=', False)      .action_assign_leads
active_model      browse(self.env.context.get('active_id')).exists
'crm.lead'      with_context(active_test=False).read_group
'ir.actions.act_window'      _for_xml_id
'crm.lead'      with_context(active_test=False).read_group
'ir.actions.act_window'      _for_xml_id
'crm.lead'      _order
'crm.lead'      search([
'crm.lead'      search([
'crm.lead'      browse
'crm.lead'      browse
'crm.lead'      search
'crm.lead'      search
'crm.lead'      search
'crm.lead'      search
'crm.lead'      search
'crm.lead'      search
'crm.lead'      search
'crm.lead'      search
'mail.activity'      with_user(self.user_sales_leads).create
'ir.model'      _get
'mail.activity'      with_user(self.user_sales_manager).create
'crm.lead'      create
'res.country.state'       self.country_ref)
'res.country.state'       self.country_ref)
'crm.lead'      new
'crm.lead'      create
'crm.lead'      create
'res.partner'      create
'res.country.state'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      create
'res.partner'      create
'crm.lead'      create
'res.country.state'       "State should remain since partner has no address field set")
'crm.lead'      with_context(default_user_id=False).create
'res.users'      
'crm.team'      
'crm.lead'      create
'res.partner'      create
'crm.lead'      create
'crm.team'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      search([
'crm.lead'      search([
'crm.lead'      search([
'crm.lead'      search([
'crm.lead'      search([
'crm.lead'      search([
'crm.lead'      search
'crm.lead'      search
'crm.lead'      search
'crm.lead'      search
'crm.lead'      search([
'crm.lead'      search([
'crm.lead'      search([
'crm.lead'      
'crm.lead'      create
'crm.lead'      search
'crm.lead'      search
'crm.lead'      search
'crm.lead'      search
'crm.lead'      search
'crm.lead'      create
'res.config.settings'      create
'crm.lead'      search([
'crm.team'      browse(self.sales_team_1.ids)._action_assign_leads
'crm.team'      browse(self.sales_team_1.ids)._action_assign_leads
'crm.lead'      search([
'crm.team'      browse(self.sales_teams.ids)._action_assign_leads
'crm.lead'      search([
'crm.lead'      search([
'crm.lead'      search
'crm.lead'      search([
'crm.team'      browse(self.sales_teams.ids)._action_assign_leads
'crm.lead'      search([
'crm.team'      create
'crm.team.member'      create
'crm.team.member'      create
'crm.team.member'      create
'crm.lead'      search([
'crm.team'      browse(sales_teams.ids)._action_assign_leads
'crm.lead'      search([
'crm.team'      browse(self.sales_team_1.ids)._action_assign_leads
'crm.team'       'Won lead should not be assigned')
'res.users'       'Won lead should not be assigned')
'crm.team'       'Lost lead should not be assigned')
'res.users'       'Lost lead should not be assigned')
'crm.team'      create
'crm.team.member'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      browse
'res.partner'      create
'crm.lead2opportunity.partner'      with_context
'crm.lead'      browse
'res.partner'      create
'crm.lead2opportunity.partner'      with_context
'crm.lead'      browse
'crm.lead'      create
'res.partner'      
'res.partner'      
'crm.lead2opportunity.partner'      with_context
'crm.lead2opportunity.partner'      with_context
'res.partner'      create
'crm.lead2opportunity.partner'      with_context
'crm.lead2opportunity.partner'      with_context
'crm.lead2opportunity.partner'      with_context
'crm.lead2opportunity.partner'      with_context
'res.partner'      
'res.company'      with_user(SUPERUSER_ID).create
'res.partner'      with_user(SUPERUSER_ID).create
'crm.lead'      create
'crm.lead2opportunity.partner'      with_context
'res.partner'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead2opportunity.partner'      with_context
'crm.lead2opportunity.partner'      with_context
'crm.lead2opportunity.partner'      with_context
'crm.lead2opportunity.partner'      with_context
'crm.stage'      
'crm.lead2opportunity.partner'      with_context
'res.partner'      
'res.partner'      create
'res.partner'      create
'res.partner'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead.lost'      with_context
'crm.lost.reason'      create
'crm.lost.reason'      create
'crm.lead.lost'      with_context
'crm.lead'      create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      
'res.users'      
'crm.team'      
'res.company'      
'res.users'      
'crm.team'      
'crm.lead'      create
'res.company'      
'res.company'      
'res.company'        # FIXME
'crm.team'      create
"crm.lead"      with_context(mail_create_nosubscribe=True).sudo().create
'res.company'      create
'ir.model'      search([
'ir.model'      search([
"ir.config_parameter"      sudo().set_param
'crm.team'      create
'crm.team'      create
'mail.alias'      create
'mail.alias'      create
'mail.thread'      message_process
'mail.thread'      message_process
'crm.lead'      browse
'crm.lead'      browse
'crm.lead'      search([
'crm.team'      browse(self.sales_teams.ids)._action_assign_leads
'crm.lead'      search([
'crm.lead'      search([
'crm.team'      browse(self.sales_teams.ids)._action_assign_leads
'crm.lead'      search([
'crm.team'      create
'crm.team.member'      create
'crm.team.member'      create
'crm.team.member'      create
'crm.lead'      search([
'crm.team'      browse(sales_teams.ids)._action_assign_leads
'crm.lead'      search([
'crm.lead'      browse(self.env.context.get
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo().get_param
'ir.model.fields'      search([('name', 'in', names), 
'crm.lead.scoring.frequency.field'      search([
'ir.config_parameter'      sudo
'crm.lead'      sudo()._cron_update_automated_probabilities
'crm.lead'      _get_lead_duplicates
'crm.team'      _get_default_team_id
'crm.lead'      browse(self._context.get
'crm.lead'      browse(self._context.get
'crm.team'      _get_default_team_id
'crm.lead'      _get_lead_duplicates
'crm.lead'      _get_lead_duplicates
'ir.config_parameter'      sudo().get_param
'iap.enrich.api'      _request_enrich
'iap.account'      get_credits_url
'res.country'].search([('code', '=', iap_data['country_code'      upper
'res.country.state'      search
'crm.lead'      browse
'crm.lead'      browse
'crm.lead'      browse
'ir.config_parameter'      sudo().get_param
'iap.account'      search([
model_name      search_read
'res.users'      search_read([('id', 'in', list
'ir.config_parameter'      sudo().set_param
'res.country'      search([
'res.country.state'      search([('code', '=', state_code), 
'crm.lead'      read_group
'crm.team'      _get_default_team_id
'res.country.state'      search
'iap.account'      get
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo().get_param
'crm.lead'      create
'crm.iap.lead.helpers'      lead_vals_from_response
'ir.sequence'      next_by_code('crm.iap.lead.mining.request') or _
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
'iap.account'      get_credits_url
'crm.lead'      create
'mail.channel'      create
'res.partner'      
'mail.channel'      create
'res.partner'      
'res.partner'      
'mail.channel'      create
'crm.lead'      create
'sale.order.line'      search([('order_id', 'in', self.ids), 
'stock.move.line'      search
'product.template'      _get_weight_uom_name_from_ir_config_parameter
'product.template'      _get_weight_uom_name_from_ir_config_parameter
'product.template'      _get_weight_uom_name_from_ir_config_parameter
'product.template'      _get_weight_uom_name_from_ir_config_parameter
'ir.attachment'      search([('res_model', '=', 'stock.picking'), ('res_id', '=', picking.id), ('name', 'like', '%s%%' % picking.carrier_id.get_return_label_prefix
"ir.actions.actions"      _for_xml_id
'stock.picking'      browse
'res.partner'      create
'product.product'      create
'product.product'      create
'delivery.carrier'      create
'res.partner'      create
'res.partner'      create
'product.product'      create
'choose.delivery.carrier'      with_context
'choose.delivery.carrier'      with_context
'stock.picking'      browse(defaults.get
'product.template'      _get_weight_uom_id_from_ir_config_parameter
'res.users'      search_count([('company_id', '=', company.id), ('login_date', '>=', start), 
'mail.message'      search_count([('create_date', '>=', start), ('create_date', '<', end), ('subtype_id', '=', discussion_subtype_id), 
'mail.render.mixin'      _render_template
'mail.render.mixin'      _render_encapsulate
'mail.mail'      sudo().create
'ir.model.fields'      _get
'digest.tip'      search
'mail.render.mixin'      sudo()._render_template(tools.html_sanitize
'res.users.log'      sudo().search_count
'event.stage'      search
'ir.ui.view'      _render_template
'event.type'      _default_event_mail_type_ids
'event.registration'      flush
'event.event'      _search
'event.event'      _search
'event.type.ticket'      _get_event_ticket_fields_whitelist
'event.stage'      search
'event.stage'      search([
'mail.template'      browse(template_id).send_mail
'event.event'      search
'ir.model'      _get
'ir.model'      _get
'event.mail.registration'      create
'ir.mail_server'      build_email
'ir.mail_server'      send_email
'res.partner'      browse
'event.mail'      sudo().search
'res.users'      sudo
'event.registration'      flush
'event.type'      browse
'event.event'      create
'event.mail'      
'event.event.ticket'      
'ir.model.data'      _xmlid_to_res_id
"event.type"      
'event.type'      create
'event.type'      create
'ir.model.data'      _xmlid_to_res_id
'event.event'      create
'ir.model.data'      _xmlid_to_res_id
'event.type'      browse
'event.event'      create
'event.type'      create
'event.type'      create
'event.event'      create
'event.event'      create
'event.mail'      
'mail.template'].search([('model', '=', 'event.registration')      .unlink
'ir.model'      _get
'ir.model'      _get
'mail.template'      with_context(filter_template_on_event=True).name_search
'event.event.ticket'      create
'event.registration'      create
'event.event'      create
'event.event'      _search([
'event.event'      _search([
'event.event'      create
'event.event'      _search([
'event.event'      _search([
'event.event'      create
'event.registration'      create
'event.registration'      create
'event.registration'      create
'event.event'      browse
'res.partner'      browse
'event.event'      browse
'res.partner'      browse
'res.partner'      sudo().create
'res.partner'      sudo().create
'event.type'      create
'event.mail'].search([      .unlink
'event.event'      create
'ir.model.data'      _xmlid_to_res_id
'ir.model.data'      _xmlid_to_res_id
'ir.model.data'      _xmlid_to_res_id
'ir.model.data'      _xmlid_to_res_id
'event.mail'      search([('event_id', '=', test_event.id), ('interval_type', '=', 'after_sub'), 
'event.mail'      search([('event_id', '=', test_event.id), ('interval_type', '=', 'after_sub'), 
'event.mail'      search([('event_id', '=', test_event.id), 
'event.mail'      search([('event_id', '=', test_event.id), 
'event.registration'      with_user(self.user_eventuser).create
'event.registration'      with_user(self.user_eventuser).create
'event.registration'      with_user(self.user_eventuser).create
'product.product'      create
'ir.model.data'      create
'event.booth.registration'      create
'event.type'      create
'event.type'      create
'event.event'      create
'event.booth'      
'res.partner'      
'event.lead.rule'].search([('lead_creation_trigger', '=', 'create')      .sudo()._run_on_registrations
'event.lead.rule'].search([('lead_creation_trigger', '=', 'confirm')      .sudo()._run_on_registrations
'event.lead.rule'].search([('lead_creation_trigger', '=', 'done')      .sudo()._run_on_registrations
'event.lead.rule'].search([('lead_creation_trigger', '=', 'confirm')      .sudo()._run_on_registrations
'event.lead.rule'].search([('lead_creation_trigger', '=', 'done')      .sudo()._run_on_registrations
'crm.lead'      _prepare_values_from_partner
'event.registration'      
"ir.actions.actions"      _for_xml_id
'sale.order.line'      browse
'sale.order.line'      browse
'event.event.ticket'      browse
'product.product'      create
'ir.model.data'      create
'event.event'      create
'event.event.ticket'      create
'product.product'      create
'event.event.ticket'      create
'event.registration'      create
'registration.editor'      with_context
'product.pricelist'      search
'account.tax'      create
'product.template'      create
'event.event'      create
'event.event.ticket'      create
'product.pricelist.item'      create
'sale.order'      create
'sale.order.line'      create
'event.event'      browse
'event.event'      browse
'event.event'      browse
'event.event'      create
'event.event.ticket'      create
'fleet.vehicle.odometer'      create
'fleet.vehicle.assignation.log'      search_count([
'ir.config_parameter'      sudo
'fleet.vehicle.log.contract'      search
'ir.config_parameter'      sudo
'fleet.vehicle.log.contract'      search
'fleet.vehicle.log.contract'      search
'res.partner'      browse
'res.partner'      browse
'fleet.vehicle.assignation.log'      create
'fleet.vehicle.log.contract'].with_context(active_test=False).search([('vehicle_id', 'in', self.ids)      .toggle_active
'fleet.vehicle.log.services'].with_context(active_test=False).search([('vehicle_id', 'in', self.ids)      .toggle_active
'fleet.vehicle.state'      search
'ir.actions.act_window'      _for_xml_id
'ir.actions.act_window'      _for_xml_id
self._name       self.env[self._name]
'ir.config_parameter'      sudo
'fleet.vehicle.odometer'      create
'mail.thread'      message_post_with_template
'mail.compose.message'      create
'gamification.badge'].browse(vals['badge_id'      .check_granting
'gamification.badge.user'].search([('user_id', '=', self.env.uid)      .mapped
'gamification.goal'      search([('challenge_id', 'in', self.ids), 
'res.users'      search
'gamification.goal'      search
'gamification.goal'      read_group
'res.users'      browse
'gamification.badge.user'      search_count
'gamification.badge.user'      create
'gamification.karma.tracking'      sudo().create
'gamification.karma.tracking'      sudo().create
'res.users'      _where_calc
'res.users'      _where_calc
'gamification.karma.rank'      search
'gamification.karma.rank'      search
'res.users'      search
'res.users'      search
'res.users'      search
'res.users'      search
'gamification.karma.rank'      search
'res.users'      with_context(no_reset_password=True).create
'gamification.badge.user'      search([('badge_id', '=', badge_id), 
'gamification.badge.user.wizard'      create
'res.users'      _get_tracking_karma_gain_position
'gamification.karma.tracking'      _consolidate_last_month
'gamification.karma.tracking'      search
'gamification.karma.tracking'      search
'res.users'      with_user(self.test_user).create
'gamification.karma.tracking'      sudo().search([
'res.users'      with_user(self.test_user).create
'gift.card'      search
'ir.config_parameter'      sudo
'res.config.settings'      get_config_warning
'ir.config_parameter'      sudo
'ir.config_parameter'      sudo
'ir.config_parameter'      sudo
'res.config.settings'      get_config_warning
'calendar.event'      search(self._get_sync_domain()).write
'ir.config_parameter'      sudo
'mail.thread'      _mail_find_partner_from_emails
'calendar.alarm'      search
'google.service'      with_user
'google.service'      
'google.service'      
'calendar.event'      create
'calendar.recurrence'      search(self._get_sync_domain()).write
"calendar.event"      _odoo_values
'mail.thread'      _mail_find_partner_from_emails
"calendar.event"      _get_time_fields
"calendar.event"      _get_recurrent_fields
'calendar.event'      _odoo_values
'calendar.event'      search([
'calendar.event'      create
'ir.config_parameter'      sudo
'google.service'      _do_request
'calendar.recurrence'      _sync_google2odoo
'calendar.event'      _sync_google2odoo
'calendar.recurrence'      _get_records_to_sync
'calendar.event'      _get_records_to_sync
'google.service'      
'google.service'      
'calendar.recurrence'      _sync_google2odoo
'calendar.event'      _sync_google2odoo
'calendar.recurrence'      _get_records_to_sync
'calendar.event'      _get_records_to_sync
'res.users'      search([('google_calendar_rtoken', '!=', False), 
'google.service'      
'google.calendar.credentials'      sudo().create([{'user_ids': [Command.set
'calendar.recurrence'      _restart_google_sync
'calendar.event'      _restart_google_sync
'calendar.recurrence'      _sync_google2odoo
'calendar.event'      _sync_google2odoo
'calendar.event'      _sync_google2odoo(GoogleEvent
'calendar.event'      search([('google_id', '=', values.get
'calendar.event'      _sync_google2odoo(GoogleEvent
'calendar.event'      search([('google_id', '=', values.get
'calendar.event'      _sync_google2odoo(GoogleEvent
'calendar.event'      search([('google_id', '=', values.get
'calendar.event'      create
'calendar.event'      create
'calendar.event'      with_user(user)._sync_google2odoo
'calendar.event'      create
'calendar.event'      with_user(user).create
'calendar.recurrence'      _sync_google2odoo(GoogleEvent
'calendar.recurrence'      search([('google_id', '=', values.get
'calendar.recurrence'      _sync_google2odoo(GoogleEvent
'calendar.recurrence'      search([('google_id', '=', values.get
'calendar.recurrence'      search([
'calendar.recurrence'      search([
'calendar.recurrence'      search([
'calendar.event'      create
'calendar.recurrence'      create
'calendar.event'      _sync_google2odoo(GoogleEvent
'calendar.recurrence'      search([
'calendar.recurrence'      search([
'calendar.event'      create
'calendar.recurrence'      create
'calendar.recurrence'      _sync_google2odoo(GoogleEvent
'calendar.event'      create
'calendar.recurrence'      create
'calendar.recurrence'      _sync_google2odoo(GoogleEvent
'calendar.event'      create
'calendar.recurrence'      create
'calendar.recurrence'      _sync_google2odoo(GoogleEvent
'calendar.event'      create
'calendar.recurrence'      create
'calendar.recurrence'      _sync_google2odoo(GoogleEvent
'calendar.event'      create
'calendar.recurrence'      create
'calendar.recurrence'      _sync_google2odoo(GoogleEvent
'calendar.recurrence'      search([('google_id', '=', values.get
'calendar.event'      _sync_google2odoo(GoogleEvent
'calendar.recurrence'      _sync_google2odoo(GoogleEvent
'calendar.event'      search([('google_id', '=', values.get
'ir.cron.trigger'      search([
'calendar.event'      _sync_google2odoo(GoogleEvent
'ir.cron.trigger'      search([
'calendar.event'      _sync_google2odoo(GoogleEvent
'ir.cron.trigger'      search([
'calendar.event'      with_user(user).create
'calendar.event'      _sync_google2odoo(GoogleEvent
'calendar.event'      create
'calendar.event'      create
'calendar.recurrence'      create
'calendar.recurrence'      _sync_google2odoo(GoogleEvent
'calendar.recurrence'      _sync_google2odoo(GoogleEvent
'calendar.recurrence'      search([
'google.service'      
'ir.config_parameter'      set_param
'res.partner'      create
'calendar.alarm'      create
'calendar.event'      create
'res.partner'      create
'calendar.alarm'      create
'res.partner'      search
'calendar.event'      create
'res.partner'      create
'calendar.alarm'      create
'res.partner'      search
'calendar.event'      create
'calendar.event'      create
'calendar.event'      create
'calendar.event'      create
'calendar.event'      create
'calendar.event'      create
'calendar.recurrence'      create
'calendar.event'      create
'calendar.event'      with_context(active_test=False).search([
'calendar.event'      create
'calendar.event'      create
'calendar.recurrence'      create
'calendar.event'      create
'res.partner'      create
'res.users'      create
'calendar.event'      with_user(user).create
'calendar.event'      create
'calendar.recurrence'      create
'calendar.event'      create
'calendar.recurrence'      create
'calendar.event'      create
'calendar.event'      create
'calendar.recurrence'      create
'calendar.event'      create
'calendar.recurrence'      create
'calendar.event.type'      create
'res.partner'      create
'calendar.event'      create
'calendar.event'      create
'calendar.recurrence'      create
model.model      browse(res_id).read
"ir.attachment"      search([('res_model', '=', model.model), ('name', '=', name_gdocs), 
'ir.config_parameter'      sudo
'ir.model.data'      _xmlid_lookup
'ir.model.data'      _xmlid_lookup
'ir.config_parameter'      sudo().get_param
"ir.attachment"      create
'res.config.settings'      get_config_warning(_
'ir.model'      _get_id
config.filter_id.model_id      with_context(**additionnal_context).search
'ir.config_parameter'      sudo().get_param
'google.drive.config'      get_google_scope
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo
'google.service'      generate_refresh_token
model      fields_view_get
'ir.config_parameter'      sudo().get_param
'res.users'      browse(self.env.user.id).read
'ir.attachment'      browse(attachment_id).write
'hr.employee'      read_group([
'hr.employee'      browse(vals.get
'hr.employee'      browse
'hr.employee'      search
'hr.employee.public'      browse(self.ids).name_get
'hr.employee.public'      browse(self.ids).read
'res.partner'      browse
'hr.employee.public'      _fields.keys
'hr.employee.public'      browse(self.ids).read
'hr.employee.public'      load_views
'hr.employee.public'      _search
'res.users'      browse
'mail.channel'      sudo().search
'res.partner.bank'      browse
'res.users'      browse
'mail.channel'      sudo().search
'hr.employee'      search(expression.OR
'hr.employee'      browse
'hr.employee'      read_group([
'ir.config_parameter'      sudo().get_param('hr.hr_employee_self_edit') or self.env.user.has_group
'ir.config_parameter'      sudo().get_param('hr.hr_employee_self_edit') or self.env.user.has_group
'hr.employee'      sudo().search([('user_id', 'in', self.ids), 
'hr.employee'      sudo().search([('user_id', 'in', self.ids), 
'hr.employee'].sudo().search([('user_id', 'in', self.ids)      .write
'ir.actions.act_window'      _for_xml_id
'hr.employee'      search([('user_id', 'in', self.ids), 
'hr.employee'      create(dict
'hr.employee'      _sync_user
'res.company'      create
'res.company'      create
'hr.employee'      create
'hr.employee'      create
'ir.config_parameter'      sudo().set_param
'hr.employee'      create
'res.users'      _fields.values
'res.users'      with_user(user_all_groups).fields_view_get
'res.users'      with_user(user).fields_view_get
'hr.employee'      create
'res.partner'      create
'hr.employee'      create
'res.partner'      create
'hr.employee'      _fields.items
'hr.employee'      _fields.items
'res.users'      _fields.items
'res.users'      SELF_READABLE_FIELDS
'ir.config_parameter'      set_param
'ir.config_parameter'      set_param
'ir.config_parameter'      set_param
'ir.config_parameter'      set_param
'res.users'      with_user(self.richard).search([
'hr.departure.reason'      search
'res.users'      search([
'hr.plan'      search
'hr.employee'      with_user(responsible).check_access_rights
'mail.activity'      _calculate_date_deadline
'hr.attendance'      search
'hr.attendance'      search
'hr.attendance'      search
'hr.attendance'      
'hr.attendance'      search
'hr.attendance.overtime'      sudo().search
'hr.attendance.overtime'      sudo().create
'hr.attendance'      search
'hr.attendance'      search
'hr.attendance'      search
"ir.actions.actions"      _for_xml_id
'hr.attendance'      create
'hr.attendance'      search([('employee_id', '=', self.id), 
'hr.payroll.structure.type'      search
'hr.contract'      
'ir.actions.actions'      _for_xml_id
'ir.actions.act_window'      _for_xml_id
'uom.uom'      search
'ir.property'      _get
'ir.attachment'      read_group([('res_model', '=', 'hr.expense'), 
'account.analytic.default'      sudo().account_get
'ir.attachment'      browse
'product.product'      search([
'hr.expense'      create
'ir.config_parameter'      sudo().get_param
'ir.actions.act_window'      _for_xml_id
'ir.model.data'      _xmlid_to_res_id
'account.move'].with_context(default_journal_id=move_vals['journal_id'      .create
'ir.property'      with_company(self.company_id)._get
'account.tax.repartition.line'      browse
'account.move'      _get_base_amount_to_display
'res.currency'      browse
'hr.employee'      search
'product.product'      search([('can_be_expensed', '=', True), 
'mail.render.mixin'      _replace_local_links
'mail.mail'      sudo().create
'account.journal'      search([('type', '=', 'purchase'), 
'account.journal'].search([('type', 'in', ['cash', 'bank'      , 
'hr.expense'      _get_employee_id_domain
'hr.employee'      browse
'ir.actions.act_window'      _for_xml_id
"ir.actions.act_window"      _for_xml_id
'account.payment.register'      with_context(**ctx).create
'hr.expense.sheet'      create
'account.bank.statement'      create
'hr.expense.sheet'      create
'res.currency.rate'].search([      .unlink
'res.currency.rate'      create
'hr.expense.sheet'      create
'account.tax'      create
'hr.expense'      create
'hr.expense.sheet'      create
'hr.expense'      create
'account.tax'      create
'account.account'      create
'hr.expense.sheet'      create
'account.payment.register'].with_context(action_data['context'      ).save
'hr.employee'      create
'hr.expense'      with_user(self.expense_user_employee).create
'hr.expense.sheet'      with_user(self.expense_user_employee).create
'hr.expense.sheet'      with_user(self.expense_user_employee).create
'hr.expense'      message_new
'hr.expense'      message_new
'hr.expense'      
'product.product'      
'product.product'      
'product.product'      
'product.product'      
'product.product'      
'hr.expense.sheet'      
'hr.expense.sheet'      
'gamification.badge.user'      create(values)._send_badge
'hr.leave.allocation'      read_group
'hr.leave'      sudo().search
'res.users'      has_group
'hr.leave'      sudo().search
'hr.employee'      browse
'hr.employee'      browse
'res.users'      browse
'hr.leave'].sudo().search(['|', ('state', 'in', ['draft', 'confirm'      , ('date_from', '>', today_date), 
'hr.leave.allocation'].sudo().search([('state', 'in', ['draft', 'confirm'      , 
'hr.leave'      sudo().search
'hr.leave.type'      search(['|', ('requires_allocation', '=', 'no'), 
'hr.leave.type'      browse(defaults.get
'hr.leave.allocation'      search_read
'hr.leave.allocation'      browse
'resource.calendar.attendance'      read_group(domain, ['ids:array_agg(id)', 'hour_from:min(hour_from)', 'hour_to:max
'resource.calendar.attendance'      get_week_type
'resource.calendar.attendance'      get_week_type
'hr.employee'      browse
'hr.employee'      browse
'hr.leave.type'      browse([values.get('holiday_status_id') for values in vals_list if values.get
'hr.employee'      browse
'hr.employee'      browse(values.get
'resource.calendar.leaves'      sudo().create
'resource.calendar.leaves'].search([('holiday_id', 'in', self.ids)      .unlink
'calendar.event'      with_context
'hr.employee'      search([
'hr.leave'      with_context
'hr.leave'      new
'hr.leave'      new
'hr.leave'      with_context
'hr.leave'      with_context
'hr.leave'       self.env['hr.leave']
'hr.leave.type'      search
'hr.leave.accrual.plan'      read_group
'hr.employee'      browse
'hr.employee'      browse
'hr.employee'      search([
'hr.leave.allocation'       self.env['hr.leave.allocation']
'hr.leave.allocation'      search
'hr.leave.allocation'      search
'hr.leave.type'      search
'hr.leave'      search
'hr.leave.allocation'      search
'hr.leave.allocation'      read_group
'hr.leave'      read_group
'hr.leave.accrual.plan'      read_group([
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
'res.users'      flush
'hr.leave'      flush
'hr.employee'      read_group
'hr.department'      with_context
'hr.employee'      create
'hr.employee'      create
'hr.employee'      create
'hr.leave.type'      create
'hr.leave.accrual.plan'      with_context(tracking_disable=True).create
'hr.leave.allocation'      with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create
'hr.leave.accrual.plan'      with_context(tracking_disable=True).create
'hr.leave.allocation'      with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create
'hr.leave.accrual.plan'      with_context(tracking_disable=True).create
'hr.leave.allocation'      with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create
'hr.leave.accrual.plan'      with_context(tracking_disable=True).create
'hr.leave.allocation'      with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create
'hr.leave.accrual.plan'      with_context(tracking_disable=True).create
'hr.leave.allocation'      with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create
'hr.leave.accrual.plan'      with_context(tracking_disable=True).create
'hr.leave.allocation'      with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create
'resource.calendar'      create
'hr.leave.accrual.plan'      with_context(tracking_disable=True).create
'hr.leave.accrual.plan'      with_context(tracking_disable=True).create
'hr.leave.allocation'      with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create
'hr.leave.allocation'      with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create
'hr.leave.type'      create
'hr.leave'      create
'hr.leave.allocation'      _update_accrual
'hr.leave.allocation'      _update_accrual
'hr.leave.accrual.plan'      with_context(tracking_disable=True).create
'hr.leave.allocation'      with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create
'hr.leave.accrual.plan'      with_context(tracking_disable=True).create
'hr.leave.allocation'      with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create
'hr.leave.accrual.level'      search([('accrual_plan_id', '=', accrual_plan.id), 
'hr.leave.accrual.plan'      with_context(tracking_disable=True).create
'hr.leave.allocation'      with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create
'hr.leave.accrual.level'      search([('accrual_plan_id', '=', accrual_plan.id), 
'hr.leave.accrual.plan'      with_context(tracking_disable=True).create
'hr.leave.allocation'      with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create
'hr.leave.accrual.plan'      with_context(tracking_disable=True).create
'hr.leave.allocation'      with_user(self.user_hrmanager_id).with_context(tracking_disable=True).create
'hr.leave.type'      create
'resource.calendar'      create
'hr.leave'      with_context
'resource.calendar'      create
'hr.leave'      with_context
'resource.calendar'      create
'hr.leave'      with_context
'resource.calendar'      create
'hr.leave'      with_context
'resource.calendar'      create
'hr.leave'      with_context
'resource.calendar'      create
'hr.leave'      with_context
'resource.calendar'      create
'hr.leave'      with_context
'hr.leave'      with_context
'resource.calendar'      create
'hr.leave'      with_context
'hr.leave.type'      create
'hr.leave.allocation'      create
'hr.leave.type'      create
'hr.leave.allocation'      create
'hr.leave'      create
'hr.leave'      create
'hr.leave.type'      with_user(self.user_hrmanager_id).with_context
'hr.leave'      with_user(self.user_employee_id).create
'hr.leave'      with_user(self.user_employee_id).create
'hr.leave'      with_user(self.user_employee_id).create
'hr.leave.allocation'      with_user(self.user_hruser_id).create
'hr.leave'      with_user(self.user_employee_id).create
'hr.leave.allocation'      with_user(self.user_hrmanager_id).create
'hr.leave'      with_user(self.user_employee_id).create
'hr.leave'      with_user(self.user_employee).create
'hr.leave'      search([
'hr.leave'      with_user
'hr.leave'].search_count([('employee_id', 'in', member_ids)      , len
'hr.leave.allocation'      with_user
'hr.leave'      with_user(self.user_employee_id).create
'hr.leave'      new
'res.company'      create
'hr.leave'      new
'res.company'      create
'hr.employee'      create
'hr.leave'       view='hr_holidays.hr_leave_view_form_manager')
'hr.leave'      search([
'res.company'      create
'hr.department'      create
'hr.leave'      new
'resource.calendar'      create
'hr.leave.type'      create
'hr.leave.allocation'      create
'hr.leave'      create
'hr.leave'      create
'resource.calendar'      create
'hr.leave.type'      create
'hr.leave'      create
'hr.leave'      with_user(self.user_employee_id)._default_get_request_parameters
'hr.leave'      with_user(self.user_employee_id).new
'hr.leave.allocation'      create
'hr.leave'      with_user(self.user_employee_id).create
'hr.leave'      with_user(self.user_employee_id).create
'hr.leave.allocation'      create
'hr.leave.allocation'      create
'hr.leave'      with_user(self.user_employee_id).create
'hr.leave'      with_user(self.user_employee_id).create
'res.users'      create
'res.users'      create
'hr.employee'      create
'hr.leave.type'      create
'hr.leave'      create
'hr.employee'      browse
'hr.attendance.overtime'      sudo().create
'hr.attendance.overtime'      sudo().create
'hr.leave.type'      search
'hr.attendance.overtime'      sudo().create
'hr.attendance.overtime'      sudo().create
'hr.leave.type'      search
'hr.employee'      sudo().browse
'res.company'      sudo().search
'hr.leave.type'      search_count
'hr.employee'      browse
'hr.department'      browse
'hr.employee'      browse
'res.users'      search([
'hr.employee'      search
'hr.employee'      search([
'ir.config_parameter'      sudo().get_param
'res.users.log'      search
'ir.config_parameter'      sudo().get_param
'mail.message'      search_count
'ir.model'      sudo().browse
'hr.employee'      search_count
'hr.employee'      search
'ir.attachment'      search
'ir.attachment'      
'hr.applicant'      with_context(active_test=False).read_group([
'hr.applicant'      read_group([
'hr.recruitment.stage'      search
"hr.applicant"      search_count
'ir.model'      _get
'hr.recruitment.source'      create
"ir.actions.actions"      _for_xml_id
'ir.model'      _get
'ir.model'      _get
'mail.alias'      create
'hr.applicant'      read_group([
'hr.applicant'      with_context(active_test=False).read_group
'ir.attachment'      read_group
'hr.recruitment.stage'      search
'hr.job'      browse
'ir.actions.act_window'      _for_xml_id
'ir.actions.act_window'      _for_xml_id
'ir.model.data'      _xmlid_to_res_id
'hr.job'].browse(custom_values['job_id'      ._get_first_stage
'res.partner'      create
'ir.actions.act_window'      _for_xml_id
'hr.recruitment.stage'      search
'hr.department'      create
'hr.job'      create
'hr.employee'      create
'res.users'      create
'mail.thread'      with_user(self.res_users_hr_recruitment_officer).message_process
'hr.applicant'      search([
'ir.attachment'      search
'hr.applicant'      _name),
"res.users"      with_context(no_reset_password=True).create
"hr.job"      create
"mail.followers"      create
"hr.applicant"      create
'hr.resume.line'      create
'hr.employee'      sudo().search([('user_id.partner_id', 'in', list(partner_has_completed.keys
'hr.resume.line'      create
'hr.employee'      sudo().search([('user_id.partner_id', 'in', certification_user_inputs.mapped
'hr.resume.line'      create
'hr.employee'      search([
self._name      search_read([('project_id', '!=', False), 
'hr.employee'      search([
'ir.rule'      _compute_domain
'project.task'      browse(vals.get
'project.project'      browse(vals.get
'hr.employee'      browse
'project.task'      browse
'project.project'      browse
'account.analytic.account'      sudo().browse
'project.task'      read_group
'account.analytic.line'      read_group
'uom.uom'      browse
"ir.actions.actions"      _for_xml_id
'project.project'      browse(values.get
'account.analytic.line'      sudo()._apply_timesheet_label
'account.analytic.line'      _apply_time_label
'uom.uom'      search([('category_id', '=', wtime.id), 
'uom.uom'      search([
'uom.uom'      search([('category_id', '=', wtime.id), 
'uom.uom'      search([
'project.project'      create
'account.analytic.line'      _apply_time_label
'res.partner'      create
'account.analytic.account'      create
'project.project'      create
'project.task'      create
'project.task'      create
'res.users'      create
'res.users'      create
'res.users'      create
'hr.employee'      create
'hr.employee'      create
'hr.employee'      create
'project.project'      create
'project.project'      create
'project.project'      create
'project.task'      create
'project.project'      create
'res.partner'      create
'account.analytic.line'      create
'account.analytic.line'      create
'resource.resource'       resource]
'resource.calendar.leaves'      search
'hr.contract'      
'hr.work.entry'      create
'hr.work.entry'      search([('date_stop', '<=', date_start), 
'hr.work.entry'      search([('date_start', '>=', date_end), 
'hr.work.entry'      search
'hr.work.entry.regeneration.wizard'      create
'hr.employee'      browse(vals.get
'hr.work.entry'      
'resource.calendar'      create
'hr.contract'      create
'hr.work.entry'      search_count
'hr.work.entry'      search_count
'hr.work.entry'      search_count
'hr.work.entry'      create
'hr.work.entry'      search([
'hr.work.entry'      create
'hr.work.entry'      create
'hr.work.entry'      create
'hr.work.entry'      search
'res.lang'      _lang_get
'hr.work.entry'      search
"ir.actions.actions"      _for_xml_id
'hr.leave'      search
'resource.calendar.leaves'      create
'hr.contract'      sudo().search_count
'hr.contract'      sudo().search
'hr.work.entry'      create
'hr.work.entry'      read_group
'hr.work.entry'      
'hr.work.entry'      browse(group.get
'hr.work.entry'      _from_intervals
'hr.work.entry'      _error_checking
'hr.work.entry'      _error_checking(start=min(start_dates, default=False), stop=max
'hr.work.entry'      _error_checking
'hr.work.entry'      sudo().search([
'hr.work.entry'      create
'hr.employee'      browse
'hr.leave'      flush
'hr.leave.type'      create
'hr.leave'      create
'hr.contract'      create
'hr.leave.type'      create
'hr.leave'      create
'resource.calendar'      create
'hr.contract'      create
'hr.work.entry'      create
'hr.leave'      create
'hr.leave'      create
'hr.work.entry'      create
'hr.leave'      create
'res.company'      create
'hr.employee'      create
'hr.contract'      create
'hr.leave.type'      create
'hr.leave'      create
'res.users'      create
'hr.employee'      with_user(user).generate_work_entries
'hr.employee'      create
'resource.calendar'      create
'hr.contract'      create
'hr.leave.type'      create
'hr.leave'      create
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo().get_param
'iap.account'      get
'ir.config_parameter'      sudo().get_param
'mail.channel'      search([
'mail.channel'      search_count
'im_livechat.report.operator'      sudo().read_group
'mail.channel'      read_group
'ir.actions.act_window'      _for_xml_id
'res.users'      browse
"mail.channel"      with_context(mail_create_nosubscribe=False).sudo().create
'bus.bus'      _sendone
'res.partner'      browse
'mail.render.mixin'      _replace_local_links
'mail.mail'      sudo().create
rating.res_model      sudo().browse
'res.users'      search([('partner_id', 'in', self.ids), 
'mail.channel'      search
'mail.channel.partner'      sudo()._search
'res.users'      create
'res.users'      create
'im_livechat.channel'      create
'im_livechat.channel'      , '_get_available_users', get_available_users)
'res.users'      create
'mail.channel'].browse(mail_channel['id'      .message_post
'mail.channel.partner'].search([('channel_id', '=', channel_info['id'      , 
'mail.channel'].browse(channel_info['id'      .message_post
'account.journal'      search
'account.account'      browse([account_ref.get
'res.country'      search([
'res.partner'      browse
'account.move'      search([('journal_id', 'in', journals.ids), 
'account.move'      with_context
'account.journal'      create
'account.move'      with_context
'account.move.reversal'].with_context({'active_ids': [invoice.id       'active_model': 'account.move'}).create
'account.move'      browse
'account.debit.note'      with_context
'account.move'      browse
'account.tax'      with_context(active_test=False).search
'account.fiscal.position'      search([('company_id', '=', self.env.company.id), 
'ir.attachment'      create
self.model      browse
'res.partner.bank'      create
'res.partner.bank'      create
'res.partner.bank'      create
'account.move'      create
'account.move'      create
'ir.config_parameter'      create
'res.partner'      create
'product.product'      create
'account.journal'      search([
'account.account'      search
'res.partner.bank'      create
"account.move"      with_context
"account.move"      with_context
"account.move"      with_context
"account.move"      with_context
'account.journal'      search
"res.country"      browse(values.get
'l10n_latam.identification.type'      browse
'account.account'      search([('internal_group', '=', 'income'), 
'account.account'      search([('internal_group', '=', 'expense'), 
'ir.attachment'      create
'ir.model.data'      search
'account.tax'      search
'account.fiscal.position'      search
'account.fiscal.position'      search
'account.fiscal.position'      create
'ir.model.data'      create
'account.tax.group'      create
'account.tax'      create
'account.tax'      with_company(self).default_get
'account.tax'      search
'account.account'      _search_new_account_code(self, len
'account.account'      create
'ir.model.data'      create
'account.account'      browse
'account.account'      search([('user_type_id', '=', self.env.ref
'pos.order'      search
'res.company'      search
'pos.order'].search([('state', 'in', ['paid', 'done', 'invoiced'      , 
'res.company'      
'res.company'      browse
'l10n_id_efaktur.efaktur.range'      pop_number
'l10n_id_efaktur.efaktur.range'      push_number
'ir.config_parameter'      sudo().get_param
'ir.attachment'      create
'l10n_id_efaktur.efaktur.range'      search([
'account.tax.unit'      browse
'ir.model.data'      _xmlid_to_res_id
'account.move'      
'account.move'      
'res.company'      search([
'res.company'      search([
'res.partner'].search(['&', ('vat', 'ilike', elements[0      text), '|', ('company_id', '=', company.id), 
'res.partner'      _l10n_it_normalize_codice_fiscale
'res.partner'      search
'res.partner'].search(['&', '|', ('email', '=', elements[0].text), ('l10n_it_pec_email', '=', elements[0      text), '|', ('company_id', '=', company.id), 
'res.partner.bank'      search
'res.partner.bank'      search([
'product.product'      search([
'product.supplierinfo'      search([('name', '=', partner.id), 
'product.product'      search([
'account.tax'      search
'account.tax'      search
'ir.attachment'      create
'account.edi.format'      _l10n_it_edi_check_invoice_configuration
'account.edi.format'      _format_error_message(_
'account.edi.format'      _l10n_it_edi_generate_electronic_invoice_filename
'ir.attachment'      create
'mail.message'      create
'mail.mail'      sudo().with_context(wo_bounce_return_path=True).create
'account.edi.document'      search
'ir.config_parameter'      get_param
'mail.thread'      _message_parse_extract_payload
'ir.attachment'      search([('name', '=', att_name), 
'ir.attachment'      create
'ir.attachment'      search([('name', '=', att_name), 
"res.company"      search([
'ir.config_parameter'      get_param
'ir.config_parameter'      get_param
'account_edi_proxy_client.user'      search([('edi_format_id', '=', self.env.ref
'ir.attachment'].search([('name', '=', fattura['filename'      , 
'ir.attachment'      create
'ir.attachment'      create
'ir.config_parameter'      get_param
'ir.config_parameter'      get_param
'ir.config_parameter'      get_param
'res.partner'      _l10n_it_normalize_codice_fiscale
'ir.config_parameter'      get_param
'account_edi_proxy_client.user'      _register_proxy_user
'l10n_latam.identification.type'      search
'l10n_latam.document.type'      search(rec._get_l10n_latam_documents_domain
'ir.model.data'      search
'res.lang'      get_installed
'ir.model.data'      
'ir.model.data'      search
'ir.model.data'      search
model + '.template'      browse
model      browse
'res.lang'      get_installed
'account.chart.template'      search([
'res.company'      search([
'account.journal'      search
'account.account'      search([('code', '=', '999999'), 
'res.company'].browse(vals['company_id'       if vals.get
'ir.attachment'      create
'account.move'      
'ir.attachment'      create
'account.move'      
'account.journal'      search([('company_id', '=', company.id), 
'account.account'      browse([account_ref.get
'account.journal'      search([('company_id', '=', company.id), 
'account.account'      browse([account_ref.get
'ir.cron'      sudo().create
'ir.model'      _get_id
'lunch.order'      search
'mail.thread'      message_notify
'lunch.cashmove.report'      search_read
'lunch.cashmove'      get_wallet_balance
'ir.actions.act_window'      _for_xml_id
'lunch.order'      search
'lunch.order'      
'ir.cron'      sudo().create
'ir.model'      _get_id
'lunch.order'].search([('supplier_id', 'in', self.ids)      .write
'lunch.product'      with_context
'lunch.order'      search
'lunch.product.category'      browse
'lunch.supplier'      browse
'ir.cron'      sudo().search([
'lunch.supplier'      invalidate_cache
'lunch.order'      create
'lunch.order'      create
'lunch.order'      create
'lunch.order'      create
'lunch.order'      create
'lunch.order'      create
self.model_name      browse
self.model_name      browse(self._context.get('active_ids', self._context.get
'mail.alias'      _clean_and_check_unique([vals.get
'mail.alias'      _clean_and_check_unique([vals.get
'ir.attachment'      _file_delete
'ir.model'      _get
"ir.model"      sudo().browse
activity.res_model      browse
doc_model       '_mail_post_access'):
doc_model      _mail_post_access
doc_model      check_access_rights
doc_model      browse(doc_ids), filter_access_rules_method)
activity.res_model      with_user(activity.user_id).with_context
activity.res_model      browse
activity.res_model      browse(activity.res_id).message_subscribe
'bus.bus'      _sendone
activity.res_model      browse(activity.res_id).message_subscribe
'bus.bus'      _sendone
'bus.bus'      _sendone
'bus.bus'      _sendone
doc_model       '_mail_post_access'):
doc_model      _mail_post_access
doc_model      with_user
'ir.model'      _get
'mail.thread'      _notify_get_action_link
activity.res_model      browse
'ir.attachment'      search_read
activity.res_model      browse
'ir.model.data'      _xmlid_to_res_id
'ir.attachment'      browse
'mail.activity'      create
"mail.template"      browse(mail_template_ids).read
res_model      search
'mail.activity'      read_group
res_model      search([
'mail.activity.type'      search
'ir.model'      _get
'mail.activity.type'      search([
'mail.activity.type'      search([
'mail.activity'      _search
'mail.activity'      sudo().search
'mail.activity'      sudo().search
'mail.activity'      flush
'mail.activity'      sudo().search
'mail.template'      browse(template_id).exists
'ir.model.data'      sudo
'mail.activity'      search
'mail.activity.type'      sudo().browse
'ir.model'      _get
'mail.activity'      create
'ir.model.data'      sudo
'ir.model.data'      sudo
'ir.model.data'      sudo
'ir.model'      sudo().search
"ir.config_parameter"      sudo().get_param
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo().get_param
"ir.config_parameter"      sudo().get_param
matching_alias.alias_parent_model_id.model      sudo().browse
'res.partner'      browse
'mail.channel.partner'      create
'mail.channel.partner'      sudo()._search
'bus.bus'      _sendmany
'mail.channel.partner'      sudo().create
'bus.bus'      _sendone
'bus.bus'      _sendone
'res.partner'].browse(partner_ids or [      .exists
'mail.guest'].browse(guest_ids or [      .exists
'res.partner'      search([('id', 'in', partners.ids), 
'mail.guest'      search([('id', 'in', guests.ids), 
'mail.channel.partner'      sudo().create
'bus.bus'      _sendone
'bus.bus'      _sendone
'mail.channel.partner'      sudo().search([('channel_id', '=', channel.id), ('partner_id', '=', partner.id), 
'mail.channel.partner'      sudo().search
'res.partner'      browse
'mail.channel.partner'      search
'bus.bus'      _sendmany
'bus.bus'      _sendone
'ir.model'      _get
'res.partner'      browse(message_dict.get
'res.partner'      flush
'res.users'      flush
'bus.bus'      sudo()._sendmany
'bus.bus'      _sendmany
'bus.bus'      _sendone
'mail.message.reaction'      sudo().search([('message_id', '=', message.id), 
'bus.bus'      _sendone
'mail.message.reaction'      sudo().search([('message_id', '=', message.id), 
'bus.bus'      _sendone
'bus.bus'      _sendmany
'res.partner'      browse
'mail.message'      _message_fetch
'mail.channel.partner'].search([('partner_id', '=', self.env.user.partner_id.id), ('channel_id', '=', channel.id)      .write
'res.partner'      sudo().browse(partners_to).mapped
'mail.channel.partner'      search
'bus.bus'      _sendone
'mail.channel.partner'      search
'bus.bus'      _sendone
'bus.bus'      _sendone(self.env.user.partner_id, 'mail.channel/legacy_insert', self.channel_info
'mail.message'      search
'bus.bus'      _sendone
'mail.channel.partner'      search
'mail.channel.partner'      search([('channel_id', '=', channel.id), 
'bus.bus'      _sendone
'mail.channel.partner'      search([('partner_id', '=', self.env.user.partner_id.id), 
'bus.bus'      _sendone
'bus.bus'      _sendone
'bus.bus'      _sendone
'bus.bus'      _sendmany
'bus.bus'      _sendone
'mail.message'      browse(channels_preview).message_format
'res.partner'      with_context(active_test=False).search_read
'bus.bus'      _sendone
'mail.channel.partner'      with_context
'mail.channel'      browse
'mail.channel.partner'      sudo().search([('channel_id', '=', channel_id), 
'mail.guest'      _get_guest_from_request
'mail.channel.partner'      sudo
'mail.channel.rtc.session'      create
'mail.ice.server'      _get_ice_servers
'mail.channel.rtc.session'      browse([int(check_rtc_session_id) for check_rtc_session_id in 
'mail.channel.partner'      search
'bus.bus'      _sendmany
'bus.bus'      _sendone
'mail.followers'      flush
'mail.message.subtype'      flush
'res.users'      flush
'res.partner'      flush
'res.groups'      flush
'mail.message.subtype'      default_subtypes
'res.partner'      sudo().search([('id', 'in', partner_ids), 
'res.lang'      get_installed
'mail.guest'      browse(int(guest_id)).sudo().exists
'bus.bus'      _sendmany
'mail.thread'      _message_compute_author(res.get('author_id'), res.get
'mail.notification'      sudo().search
'mail.notification'      _search([('res_partner_id', '=', self.env.user.partner_id.id), 
'mail.notification'      sudo().search
'res.users'      has_group
'mail.notification'      flush
doc_model      with_context(active_test=False).search([
'res.users'      has_group
'mail.notification'      flush
'mail.thread'      _get_mail_message_access
'mail.followers'      sudo().search
'mail.thread'      _message_compute_author(values.get
'ir.attachment'      with_context(clean_context
'ir.attachment'      browse(check_attachment_access).check
'mail.tracking.value'      sudo().create
self.model      browse
'mail.notification'      sudo().search
'bus.bus'      _sendone
'mail.notification'      sudo().search
'bus.bus'      _sendone
'bus.bus'      _sendone
'bus.bus'      _sendone
'mail.message.reaction'      sudo().search([('message_id', '=', self.id), ('partner_id', '=', partner.id), ('guest_id', '=', guest.id), 
'mail.message.reaction'      sudo().create
self.model      browse(self.res_id)._message_add_reaction_after_hook
'mail.message.reaction'      sudo().search([('message_id', '=', self.id), ('partner_id', '=', partner.id), ('guest_id', '=', guest.id), 
self.model      browse(self.res_id)._message_remove_reaction_after_hook
message_sudo.model      sudo().browse
message_sudo.model      \
'mail.message.reaction'      
'ir.model.data'      _xmlid_to_res_id
'ir.model.data'      _xmlid_to_res_id
vals['model']      _original_module:
vals['model']      _original_module)
message.model      browse
'mail.message'      
'bus.bus'      _sendmany
model      sudo().browse
model      browse
model      if model else self.env['mail.thread']
model      invalidate_cache
'mail.message'      browse
'ir.model'      _get
"ir.config_parameter"      sudo().get_param
'ir.model'      _get
'mail.render.mixin'      _replace_local_links
model      browse
'ir.qweb'      _render(html.fragment_fromstring
model      browse
model      browse
'ir.model'      _get(res.pop
self.model      browse(res_ids).sudo
self.model      _fields:
self.model      browse(results.keys()).read
'res.partner'      sudo().browse(tpl_partner_ids).exists
self.model      browse
'ir.attachment'       # TDE FIXME: should remove default_type from context
self.model      browse
'ir.model'      _get
'mail.message'      sudo().new(dict
'mail.render.mixin'      _replace_local_links
'mail.mail'      sudo().create
'mail.followers'      sudo().search
'mail.followers'      sudo().search
'mail.followers'      sudo().search
'mail.message'      _search([('has_error', operator, operand), 
'ir.attachment'      read_group([('res_id', 'in', self.ids), 
'mail.followers'      _insert_followers
'mail.message'].search([('model', '=', self._name), ('res_id', 'in', self.ids)      .sudo().unlink
'mail.followers'      sudo().search
'ir.config_parameter'      sudo().get_param
model      sudo().browse
'ir.model'      _get
model_name      if model_name else self
'ir.model.data'      _xmlid_to_res_id
'ir.mail_server'      _get_default_bounce_address
'ir.config_parameter'      sudo().get_param
'mail.mail'      sudo().create(bounce_mail_values).send
bounced_model      sudo().browse(bounced_res_id).exists
'ir.model'      sudo().search(['&', ('is_mail_blacklist', '=', True), 
model.model      sudo().search([
'mail.notification'      sudo().search
model      browse
alias.alias_parent_model_id.model      browse
alias.alias_parent_model_id.model      browse
'ir.model'      sudo().search(['&', ('is_mail_blacklist', '=', True), 
model.model].sudo().search([('message_bounce', '>', 0), ('email_normalized', '=', valid_email)      ._message_reset_bounce
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo().get_param
'mail.message'      sudo().search([
'ir.model'      _get_id
'mail.alias'      search
'ir.model'      _get_id
'mail.alias'      search
'mail.alias'      search([
'res.users'      browse
model      with_context
'mail.message'      sudo().browse
'ir.model.data'      _xmlid_to_res_id
'ir.model.data'      _xmlid_to_res_id
'ir.model.data'      _xmlid_to_res_id
'mail.message'      search([
'res.partner'      sudo
'res.partner'      sudo().search([
'mail.message'      sudo
'mail.message'      sudo().search([
'mail.message'      search([
'mail.message'      search([('message_id', 'in', [x.strip
'res.partner'      sudo().browse
'res.users'      sudo().search(domain, order='name ASC').mapped
'res.partner'      search([
'res.partner'      search
'ir.config_parameter'      sudo().get_param
'mail.alias'      sudo().search_count([
'mail.followers'      search
'res.users'      search
'res.users'      sudo().search([
'ir.config_parameter'      sudo().get_param
'mail.alias'].sudo().search([('alias_name', 'in', domain_left_parts)      .mapped
'res.partner'      
'res.partner'      name_create
'mail.message'      sudo
'ir.attachment'      sudo().browse(attachment_ids).filtered
'ir.attachment'      _generate_access_token
'ir.attachment'      create
'mail.message'      _fields)
'ir.model.data'      _xmlid_to_res_id
'ir.model.data'      _xmlid_to_res_id
'res.partner'      browse
'ir.attachment'      browse
'ir.model.data'      _xmlid_to_res_id
'mail.compose.message'      with_context
'mail.message'      _fields)
'ir.model.data'      _xmlid_to_res_id
'ir.model.data'      _xmlid_to_res_id
'mail.thread'      _notify_get_reply_to
'ir.model.data'      _xmlid_to_res_id
'mail.thread'      _notify_get_reply_to
'res.partner'      browse
'mail.message'      sudo
'mail.message'      create
'mail.notification'      sudo().create
'res.partner'      browse(partner_id), 'mail.message/inbox', dict
'bus.bus'      sudo()._sendmany
'mail.mail'      sudo().with_context(clean_context
'mail.notification'      sudo().with_context(clean_context
'mail.mail'      sudo
'mail.render.mixin'      _replace_local_links
'mail.notification'      sudo().search
'mail.template'      browse
'ir.model'      with_context(lang=lang)._get
'mail.tracking.value'      sudo().search([
'ir.model.data'      _xmlid_to_res_id
'mail.followers'      _get_recipient_data
'ir.config_parameter'      sudo().get_param
'res.partner'      sudo().search([('id', 'in', partner_ids), ('active', '=', True), 
'mail.followers'      _insert_followers
'mail.followers'      _insert_followers
'mail.followers'      sudo().search
'res.users'      sudo().browse
'ir.model.data'      _xmlid_to_res_id
'ir.model'      _get
'mail.render.mixin'      _replace_local_links
'mail.message.subtype'      _get_auto_subscription_subtypes
'mail.followers'      _get_subscription_data
'res.partner'      browse
'mail.followers'      _insert_followers
'mail.tracking.value'      create_tracking_values
'ir.config_parameter'      sudo().get_param
'mail.alias'      sudo().search
'ir.config_parameter'      sudo().get_param
'res.partner'      browse(message_dict.get
'mail.message.subtype'      search
'ir.model.data'      _xmlid_to_res_id
'res.partner'      browse
'mail.notification'      flush
'mail.message'      search
'mail.channel'      search
'mail.channel'      search
'mail.channel.partner'      sudo()._search
'mail.channel'      search([('id', '=', int
'res.partner'      _search
'res.partner'      search_count
'res.partner'      browse(query).mail_partner_format().values
'mail.channel'      check_access_rights
'mail.channel'].search([('group_ids', 'in', users.groups_id.ids)      ._subscribe_users_automatically
'mail.channel'].search([('group_ids', 'in', user_group_ids)      ._subscribe_users_automatically
'mail.channel'].search([('group_ids', 'in', sel_groups)      ._subscribe_users_automatically
'mail.channel.partner'      sudo().search
'res.users.settings'      _find_or_create_for_user(self)._res_users_settings_format
'ir.model.data'      _xmlid_to_res_id
'mail.shortcode'      sudo().search_read
'ir.model'      sudo().browse(model_ids).name_get
activity['model']      _original_module
'ir.config_parameter'      sudo
'ir.module.module'      sudo().search_read
'res.users'      sudo().browse
'ir.config_parameter'      sudo
'mail.mail'      sudo
target_model      search([
'mail.thread'      message_process
target_model      search([
'res.partner'      __class__):
'res.partner'      __class__):
'base'      flush
'bus.bus'      sudo
'bus.bus'].sudo().search([      .unlink
'mail.message'      sudo
'mail.notification'      sudo
'res.partner'].sudo().concat(*list(p['partner'] for i in recipients_info for p in i['notif'      if p.get
'mail.notification'      sudo().search
'mail.message'      sudo
'mail.notification'      sudo
'mail.message'      sudo().search([('body', 'ilike', mbody), ('message_type', '=', mtype), 
'res.partner'      sudo().concat
'bus.bus'      sudo().search([('channel', 'in', [json_dump
'mail.channel'      browse(self.group_public.id).read
'mail.channel'      browse(self.group_groups.id).read
'mail.channel'      browse(self.group_private.id).read
'mail.channel'      browse(self.group_private.id).read
'mail.channel'      create
'mail.channel'      browse(self.group_public.id).write
'mail.channel'      browse(self.group_public.id).unlink
'mail.channel'      browse
'mail.channel'      create
'mail.channel'      browse(self.group_private.id).read
'mail.channel'      browse(self.group_private.id).write
'mail.channel'      browse(self.group_private.id).unlink
'mail.channel'      browse
'mail.channel'      browse
'mail.channel'      browse
'mail.channel'      browse
'mail.channel.partner'      create
'mail.channel'      with_user
'mail.channel'      browse
'res.partner'      
'res.partner'      
'res.partner'      
'res.partner'      
'res.partner'      
'res.partner'      
'res.partner'      
'mail.channel'      with_user(self.user_admin).channel_get(
'mail.channel'      with_user(self.user_admin).browse
'mail.channel.partner'      search
'mail.channel.partner'      search
'mail.channel'      browse
'res.partner'      
'res.partner'      
'mail.channel'      browse
'res.partner'      
'res.partner'      
'mail.channel'      with_context(self._test_context).create
'mail.channel'      with_context(self._test_context).create
'res.partner'      
'res.partner'      
'mail.channel'      channel_get
'mail.channel'      channel_get
'mail.channel'      channel_get(partners_to=
'mail.channel'      channel_get
'mail.channel'      channel_get
'mail.channel'      channel_get
'mail.channel'      channel_get
'mail.channel'      browse
'res.users'      create
'mail.channel'      with_context(self._test_context).create
'mail.channel'      with_context(self._test_context).create
'mail.channel'      with_context(self._test_context).create
'res.partner'      
'res.partner'      
'mail.channel'      browse
'mail.message'      search
'mail.message'      search
'mail.message'      search
'mail.channel'      create
'mail.channel'      create
'bus.bus'].search([      .unlink
'mail.channel'      with_context
'res.partner'      browse
'mail.template'      browse
'res.partner'      browse
'res.partner'      browse
'res.partner'      browse
'mail.render.mixin'      _render_template
'res.partner'      browse
'mail.render.mixin'      _render_template
'res.partner'      browse
'mail.render.mixin'      _render_template
'res.partner'      browse
'mail.render.mixin'      sudo()._render_template_inline_template
model      search
model      browse
'mail.render.mixin'      with_user(self.user_admin)._render_template_inline_template
model      search
'res.partner'      search
'mail.render.mixin'      _render_template_inline_template
'res.partner'      search
'mail.render.mixin'      _render_template_inline_template
'res.partner'      browse
'res.partner'      search
'mail.render.mixin'      _render_template_inline_template
'res.partner'      search
'mail.render.mixin'      _render_template_inline_template
'res.partner'      search
'mail.render.mixin'      _render_template_qweb
'res.partner'      search
'mail.render.mixin'      with_user(self.user_admin)._render_template_qweb
'mail.render.mixin'      _render_template_qweb
'res.partner'      search
'mail.render.mixin'      _render_template_qweb
model      search
model      browse
'mail.render.mixin'      _render_template_inline_template
model      search
model      browse
'mail.render.mixin'      _render_template_qweb
'mail.render.mixin'      _prepend_preview(Markup
'res.partner'      find_or_create
'mail.activity'      
'base.partner.merge.automatic.wizard'      with_context
'mail.thread'      _message_compute_author(result.get('author_id'), result.get
result['model']       'message_post'):
'ir.model.data'      _xmlid_to_res_id
'mail.message'      browse(values.get
values.get('model')      browse(values.get('res_id')).name_get
'ir.attachment'      search
wizard.model      if wizard.model and hasattr
wizard.model      search(ast.literal_eval
'ir.config_parameter'      sudo().get_param
'ir.model.data'      _xmlid_to_res_id
'mail.mail'      sudo
'mail.mail'      sudo().create
'ir.model'      _get
'mail.template'      create
self.model      browse
self.model      browse
'ir.attachment'      browse(attach_id).copy
'mail.thread'      with_context(attached_to=record)._message_post_process_attachments
'res.partner'      browse(set
self.model]), self.pool['mail.thread.blacklist'      :
'mail.blacklist'      flush
self.model      browse(mail_values_dict.keys()).read
'mail.template'      browse
self.model      browse(res_ids).sudo
'mail.template'      with_context(tpl_partners_only=True).browse(template_id).generate_email
"mail.notification"      browse(notif_ids).sudo().write
"mail.message"      browse(messages_ids)._notify_message_notification_update
'ir.model'      _get
model      browse
'ir.model'      _get
'mail.message'      create
'mail.followers'      _get_recipient_data
'bus.bus'      _sendone
'ir.model.data'      _xmlid_to_res_id
'ir.model.data'      _xmlid_to_res_id
'ir.model.data'      _xmlid_to_res_id
'ir.model.data'      _xmlid_to_res_id
'mail.bot'      _apply_logic
'ir.model.data'      _xmlid_to_res_id
'mail.group.message'      read_group
'mail.group.message'      read_group
'mail.group.message'      read_group
'mail.group.member'      sudo().search
'mail.group.member'      sudo()._search
'ir.model'      _get
'mail.message'      _fields)
'mail.message'      _get_reply_to
'mail.group.message'      search
'mail.group.message'      create
'mail.group.moderation'      search
'mail.mail'      sudo().create
'mail.group.moderation'      sudo().search
'mail.render.mixin'      _replace_local_links
'mail.mail'      sudo().create
'mail.group'      search([
'mail.group.message'      read_group
'mail.thread'      with_context
'res.partner'      browse(partner_id).exists
'mail.group.member'      create
'mail.group.member'      search
'mail.group.member'      sudo().search
'mail.group.moderation'      search
'mail.message'      sudo().create
'mail.message'      _fields
'mail.group.moderation'      search
'mail.group.moderation'      create
'mail.render.mixin'      _replace_local_links
'mail.mail'      sudo().create
'mail.group'      _clean_email_body
'mail.group'      with_user(self.user_employee).browse
'mail.group.member'      create
'mail.group.member'      create
'mail.group'      browse
'mail.group'      browse
'mail.group'      browse
'mail.group'      browse
'mail.group.member'      browse
'mail.group.message'      search([
'mail.group.message'      search([
'mail.mail'      search([
'mail.group'      browse
'mail.group.moderation'      create
'mail.group'      browse
'mail.group'      browse
'mail.group.moderation'      create
'mail.group.message'      create
'mail.group.moderation'      create
'mail.group.moderation'      with_user(self.user_portal).browse
'mail.group.moderation'      with_user(self.user_employee).browse
'mail.group.moderation'      with_user(self.user_admin).browse
'mail.group'      browse
'mail.group'      with_user(self.user_employee_2).browse
'mail.group.moderation'      search
'mail.group'      browse
'mail.group.moderation'      search
'mail.group'      browse
'mail.group'      browse
'mail.group'      browse
'maintenance.equipment'      read_group([
'maintenance.request'      read_group([
'ir.model'      _get
'maintenance.request'      search
'maintenance.request'      search
'res.users'      browse
'maintenance.request'      create
'maintenance.request'      search([
'maintenance.stage'      search
'maintenance.stage'      search
'maintenance.equipment.category'      create
'maintenance.equipment'      _cron_generate_requests
'maintenance.equipment'      _cron_generate_requests
'maintenance.stage'      with_user(user).create
'mail.render.mixin'      _replace_local_links
'ir.model'      _get
'mailing.list'      search
'ir.config_parameter'      sudo().get_param
'ir.mail_server'      search([
'ir.mail_server'      _get_default_from_address
mass_mailing.mailing_model_real      search_count(mass_mailing._parse_mailing_domain
'ir.config_parameter'      sudo().get_param
'ir.qweb'      _render
'utm.campaign'      create
'utm.campaign'].create(self[0      _get_default_ab_testing_campaign_values
"ir.actions.actions"      _for_xml_id
'mail.mail'      sudo().search
"ir.actions.actions"      _for_xml_id
'ir.model'      _get
'ir.model'      _get
'mailing.contact'      with_context
'mailing.contact.subscription'      search
'ir.actions.act_window'      _for_xml_id
self.mailing_model_name       '_mailing_get_opt_out_list'):
self.mailing_model_name      _mailing_get_opt_out_list
self.mailing_model_real      search
self.mailing_model_real      search_count
'mailing.trace'      search_read
'mail.compose.message'      with_context(active_ids=res_ids).create
'mailing.mailing'      search
'link.tracker'      search
'ir.qweb'      _render
'ir.qweb'      _render
'mail.render.mixin'      _render_encapsulate
'mail.mail'      sudo().create
'digest.tip'      search
self.mailing_model_name       '_mailing_get_default_domain'):
self.mailing_model_name      _mailing_get_default_domain
self.mailing_model_name      _fields:
"ir.config_parameter"      sudo().get_param
'ir.attachment'      create
'mailing.contact.subscription'      search([
'res.partner'      _parse_partner_name
"ir.actions.actions"      _for_xml_id
'mailing.mailing'      search_count
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
'mailing.contact'      flush
'mailing.contact.subscription'      flush
'mailing.mailing'      read_group
'mailing.trace'      search(domain).mapped
'mailing.trace'      search
'res.partner'      
'res.partner'      sudo
'mail.message'      sudo
'mail.thread'      _routing_handle_bounce
'link.tracker.click'      sudo().add_click
'mailing.mailing'      create
'mailing.mailing'      create
'res.partner'      create
'mailing.mailing'      create
'ir.model'      _get
'mail.compose.message'      with_user(self.user_marketing).with_context
'mailing.mailing'      create
'ir.model'      _get
'ir.model'      _get
'ir.model'      _get
'mailing.mailing'      with_context
'ir.model'      _get
'mailing.mailing'      with_context
'ir.model'      _get
'res.partner'      create
'ir.model'      _get
'mailing.mailing'      create
'mailing.mailing'      create
'ir.model'      _get
'mail.message'      
'mail.message'      
'mail.message'      
'mail.message'      
'mail.message'      
'res.partner'      create
'res.partner'      create
'mail.blacklist'      create
'mailing.mailing'      create
'ir.model'      _get
'mailing.mailing'      create
'ir.model'      _get
'mailing.mailing'      create
'mailing.mailing.schedule.date'      with_context
'mailing.mailing'      search([
'ir.model'      sudo().search_count([('model', '=', self.model), 
'mailing.mailing'      create
'ir.model'      _get
'mailing.list'      create
'mail.mail'      sudo
mailing.mailing_model_real      search
'mail.render.mixin'      _replace_local_links
'mail.mail'      sudo().create
'crm.lead'      with_context(active_test=False).read_group
"ir.actions.actions"      _for_xml_id
'mailing.trace'      sudo().read_group
'sms.sms'      sudo().search
'iap.account'      get_credits_url
self.mailing_model_name       '_mailing_get_opt_out_list_sms'):
self.mailing_model_name      _mailing_get_opt_out_list_sms
'sms.composer'      with_context(active_id=False).create(mailing._send_sms_get_composer_values
self.mailing_model_name      _fields:
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
'mailing.mailing'      create
'ir.model'      _get
'ir.model'      _get
self.mailing_id.mailing_model_real      search
'mail.render.mixin'      _render_template
'sms.api'      _send_sms_batch
'sms.api'      _get_sms_api_error_messages
'membership.membership_line'      search
'membership.membership_line'      search
'membership.membership_line'      search
'account.move'      create
'account.move'      search([
'account.payment'      create
'account.payment.register'      
'res.partner'      browse(self._context.get('active_ids')).create_membership_invoice
"ir.config_parameter"      sudo().get_param
"ir.config_parameter"      sudo().get_param
'ir.config_parameter'      sudo
'res.config.settings'      get_config_warning
'ir.config_parameter'      sudo
'ir.config_parameter'      sudo
'res.config.settings'      get_config_warning
'calendar.event'      search(self._get_microsoft_sync_domain()).write
'ir.config_parameter'      sudo
'calendar.attendee'      search
'mail.thread'      _mail_find_partner_from_emails
'calendar.alarm'      search
'ir.config_parameter'      sudo().get_param
'calendar.event'      search_read
'ir.config_parameter'      sudo().get_param
'microsoft.service'      
'microsoft.service'      
'calendar.event'      create
'calendar.event'      _get_microsoft_synced_fields
'calendar.recurrence'      search(self._get_microsoft_sync_domain()).write
"calendar.event"      _microsoft_to_odoo_values
"calendar.event"      _get_time_fields
"calendar.event"      _get_recurrent_fields
'microsoft.service'      
'microsoft.service'      
'microsoft.service'      
'calendar.recurrence'      _microsoft_to_odoo_values(recurrent_master, 
'calendar.event'      _microsoft_to_odoo_values(recurrent_master, 
'calendar.event'      _microsoft_to_odoo_recurrence_values(recurrent_event, 
'calendar.event'      _microsoft_to_odoo_values(recurrent_event, 
'calendar.recurrence'      create
'calendar.recurrence'      search([
'calendar.event'      _microsoft_to_odoo_recurrence_values(recurrent_event, 
'calendar.event'      _microsoft_to_odoo_values(recurrent_event, 
'calendar.event'      _microsoft_to_odoo_recurrence_values(recurrent_event, 
'calendar.event'      _microsoft_to_odoo_values(recurrent_event, 
'calendar.event'      browse(recurrent_event.odoo_id(self.env)).with_context(no_mail_to_attendees=True, mail_create_nolog=True).write(dict
'calendar.event'      browse
'calendar.event'      browse(normal_events) - old_record).write
'calendar.recurrence'      search
'calendar.recurrence'      browse(mevent.odoo_id
'ir.config_parameter'      sudo
'microsoft.service'      _get_token_endpoint
'microsoft.service'      _do_request
'calendar.event'      _sync_microsoft2odoo(events, default_reminders=default_reminders) if events else 
'calendar.recurrence'      _get_microsoft_records_to_sync
'calendar.event'      _get_microsoft_records_to_sync
'res.users'      search([('microsoft_calendar_rtoken', '!=', False), 
'microsoft.service'      
'calendar.recurrence'      _restart_microsoft_sync
'calendar.event'      _restart_microsoft_sync
'calendar.event'      _sync_microsoft2odoo(MicrosoftEvent
'calendar.event'      _sync_microsoft2odoo
'calendar.recurrence'      search([
'calendar.event'      _sync_microsoft2odoo(MicrosoftEvent
'calendar.recurrence'      search([
'calendar.event'      search([
'calendar.event'      _sync_microsoft2odoo(MicrosoftEvent
'calendar.recurrence'      search([
'calendar.event'      search([
'calendar.event'      _sync_microsoft2odoo(MicrosoftEvent
'calendar.recurrence'      search([
'calendar.event'      search([
'calendar.event'      _sync_microsoft2odoo(MicrosoftEvent
'calendar.recurrence'      search([
'calendar.event'      search([
'calendar.event'      search([
'calendar.event'      _sync_microsoft2odoo(MicrosoftEvent
'calendar.recurrence'      search([
'calendar.event'      search([
'calendar.event'      _sync_microsoft2odoo(MicrosoftEvent
'calendar.event'      search([
'calendar.event'      _sync_microsoft2odoo(MicrosoftEvent
'calendar.event'      search([
'calendar.event'      _sync_microsoft2odoo(MicrosoftEvent
'calendar.recurrence'      search([
'calendar.recurrence'      search([
'calendar.event'      search([
'calendar.event'      search([
'calendar.recurrence'      search([
'calendar.event'      search([
'calendar.event'      _sync_microsoft2odoo(MicrosoftEvent
'calendar.recurrence'      search([
'calendar.event'      browse(event_ids).exists
'microsoft.service'      
'res.partner'      create
'calendar.event'      create
'calendar.event'      _sync_microsoft2odoo(MicrosoftEvent
'calendar.recurrence'      search([
'calendar.event'      _sync_microsoft2odoo(MicrosoftEvent
'microsoft.service'      
'calendar.event'      create
'res.partner'      create
'res.users'      create
'calendar.event'      with_user(user).create
'ir.config_parameter'      sudo().get_param
'uom.uom'      search
'mrp.bom'      search_count
'stock.warehouse.orderpoint'      search([
'mrp.production'      search([('bom_id', 'in', self.ids), 
'mrp.bom'      )
'mrp.bom'      
'product.product'      browse
'mrp.bom'      
'uom.uom'      search
'mrp.bom'      _bom_find
'mrp.document'      search_count
'product.product'      browse
'stock.picking.type'      search
'stock.picking.type'      browse
'stock.warehouse'      search([
'stock.picking.type'      browse
'stock.warehouse'      search([
'stock.move'      read_group([('id', 'in', self.move_raw_ids.ids), 
'stock.move'      read_group
'stock.picking'      search
"ir.actions.actions"      _for_xml_id
'stock.location'      read_group
'stock.scrap'      read_group([
'stock.move'      search([
'stock.picking.type'      search
'mrp.bom'      _bom_find
'stock.warehouse'      search([
'stock.quant'      _check_serial_number
'stock.picking.type'      browse
'ir.sequence'      next_by_code('mrp.production') or _
"procurement.group"      create
'stock.production.lot'      create
'ir.sequence'      next_by_code
'resource.calendar.leaves'      create
'product.product'      browse
'uom.uom'      browse
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
'stock.picking'      _log_activity_get_documents({move_raw_id: 
'stock.move'      create
"ir.actions.actions"      _for_xml_id
'stock.picking'      _log_activity_get_documents
'stock.picking'      _less_quantities_than_expected_add_documents
'stock.picking'      _log_activity
visited_objects[0]._name      concat
'stock.picking'      _log_activity
'stock.production.lot'      _get_next_serial
"ir.actions.actions"      _for_xml_id
'stock.move.line'      search_count
'stock.move.line'      search_count
'stock.move.line'      search_count
'stock.move.line'      search_count
'stock.move.line'      search_count
'stock.move.line'      search_count
'stock.move.line'      search_count
'decimal.precision'      precision_get
'stock.move'      create
'stock.production.lot'      create
'mrp.workorder'      search
'mrp.workorder'      read_group
'stock.warehouse'      search([
'mrp.bom'      _bom_find
'ir.sequence'      next_by_code('mrp.unbuild') or _
'stock.move.line'      create
'stock.move.line'      create
'stock.move'      create
'stock.move'      create
'decimal.precision'      precision_get
'stock.quant'      _get_available_quantity
'mrp.workcenter.productivity'      search
'mrp.workcenter.productivity'      read_group
'mrp.workcenter.productivity'      read_group
'mrp.workorder'      read_group
'mrp.workcenter.productivity'      search([('workcenter_id', '=', self.id), 
'ir.actions.actions'      _for_xml_id
"ir.actions.actions"      _for_xml_id
'mrp.workorder'      browse
'mrp.workcenter'      browse
'mrp.workorder'      read_group
'mrp.workcenter.productivity'      create
'stock.scrap'      read_group([
'mrp.workcenter'      browse
'mrp.workorder'      
'mrp.workorder'      
'mrp.workcenter'      browse
'mrp.workcenter.productivity'      create
'resource.calendar.leaves'      create
'mrp.workcenter.productivity.loss'      search([
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
'mrp.workcenter.productivity.loss'      search([
'mrp.workcenter.productivity.loss'      search([
'stock.move.line'      search_count
'mrp.bom'      search_count(['|', ('product_tmpl_id', '=', product.id), 
'mrp.bom'      search_read
'mrp.bom'      search_count
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
'mrp.bom'      search_count(['|', '|', ('byproduct_ids.product_id', '=', product.id), ('product_id', '=', product.id), '&', ('product_id', '=', False), 
'mrp.bom'      search_read
'mrp.bom'      search_count([
'mrp.bom'      _bom_find
"ir.actions.actions"      _for_xml_id
'mrp.production'      read_group
'mrp.bom'      _bom_find
"ir.actions.actions"      _for_xml_id
'mrp.bom'      _bom_find
'product.product'      concat(*list(bom_kits.keys
'product.product'      concat
'mrp.production'      browse(self.env.context.get('default_raw_material_production_id') or self.env.context.get
'mrp.bom'      sudo()._bom_find
'stock.move'      browse(moves_ids_to_unlink).sudo().unlink
'stock.move'      create
'stock.move'      browse
'mrp.production'      search
'stock.rule'      search_read([
'mrp.bom'      _bom_find
'mrp.bom'      _bom_find
'stock.rule'      search
'mrp.production'      sudo().search
'mrp.production'      browse
'mrp.production'      with_user(SUPERUSER_ID).sudo().with_company(company_id).create
'stock.move'      sudo().create(productions._get_moves_raw_values
'stock.move'      sudo().create(productions._get_moves_finished_values
'mrp.bom'      _bom_find
'product.product'      browse
'procurement.group'      Procurement
'product.product'      search
'product.template'      browse
'mrp.bom'      search([
'product.product'      browse
'product.product'      browse
'mrp.bom'      browse
'product.product'      browse
'mrp.workcenter'      browse(workcenters) for company_id, workcenters in workcenters_by_company.items
'mrp.workcenter'      
'res.company'      browse
'mrp.workcenter'      browse
'mrp.workcenter'      browse(workcenters) for company_id, workcenters in workcenters_by_company.items
'mrp.workcenter'      
'mrp.bom'      browse
'mrp.bom'      search([
'product.product'      browse
'product.product'      browse
'product.product'      browse
'stock.move'      create(productions_with_bom._get_moves_raw_values
'stock.move'      create(productions_with_bom._get_moves_finished_values
'mrp.production'      browse(random.sample(mo_ids, int(len
'product.product'      browse
'mrp.bom'      browse
'mrp.bom'      browse(boms) for company_id, boms in boms_by_company.items
'mrp.bom'      
'mrp.bom'      browse
'mrp.bom'      browse
'product.product'      browse
'stock.picking.type'      search([
'stock.picking.type'      browse
'stock.picking.type'      browse
'mrp.production'      browse(random.sample(mo_ids, int(len
'mrp.production'      browse
'mrp.production'      browse
'mrp.bom'      browse
'product.product'      browse
'mrp.bom'      browse
'product.product'      browse
'mrp.bom'      browse
'mrp.bom'      browse
'mrp.bom'      browse
'mrp.bom.line'      browse(int
'product.product'      browse(int
'mrp.document'      search(['|', '&', 
'mrp.document'      search([('res_model', '=', 'product.template'), 
'mrp.document'      search
'mrp.bom.line'      browse
'mrp.bom'      browse
'stock.warehouse'      
'stock.quant'      with_context(inventory_mode=True).create
'mrp.production.backorder'      with_context
'mrp.production.backorder'      with_context
'mrp.production.backorder'      with_context
'stock.production.lot'      create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'mrp.production.backorder'      with_context
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'mrp.production.backorder'      with_context
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
res_dict['res_model']].with_context(res_dict['context'      ).save
res_dict['res_model']      with_context
action['res_model']].with_context(action['context'      .browse
res_dict['res_model']].with_context(res_dict['context'      ).save
'stock.quant'      _get_available_quantity
'stock.production.lot'      search([
'mrp.production.backorder'      with_context
'mrp.production'      _get_default_picking_type
'stock.picking.type'      browse
'mrp.production.backorder'      with_context
'mrp.bom'      create
'mrp.production'      
'mrp.production'      
'product.product'       # Check form
'mrp.bom'       # Check form
'mrp.production'      
'stock.picking.type'      create
'ir.sequence'      create
'mrp.bom'      create
'mrp.bom.line'      create
'mrp.bom'      create
'mrp.bom.line'      create
'mrp.bom.line'      create
'mrp.bom.line'      create
'mrp.bom.line'      create
'mrp.bom'      create
'mrp.bom'      create
'mrp.bom.line'      create
'mrp.bom.line'      create
'product.template'      create
'mrp.bom'      create
'mrp.production'      
'mrp.bom'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'product.product'      create
'product.product'      create
'mrp.bom'      create
'stock.quant'      _update_available_quantity
'product.product'      create
'product.product'      create
'product.product'      create
'mrp.bom'      
'mrp.workcenter'      create
'report.mrp.report_bom_structure'      _get_report_data
'report.mrp.report_bom_structure'      _get_report_data
'report.mrp.report_bom_structure'      _get_report_data
'report.mrp.report_bom_structure'      _get_report_data
'report.mrp.report_bom_structure'      _get_report_data
'product.product'      create
'product.product'      create
'mrp.bom'      
'mrp.workcenter'      create
'report.mrp.report_bom_structure'      _get_report_data
'report.mrp.report_bom_structure'      _get_report_data
'product.template'      create
'product.attribute'      create
'product.attribute.value'      create
'product.attribute.value'      create
'product.template.attribute.line'      create
'product.attribute'      create
'product.attribute.value'      create
'product.attribute.value'      create
'product.template.attribute.line'      create
'product.template'      create
'product.template.attribute.line'      create
'product.template'      create
'product.template.attribute.line'      create
'product.template.attribute.line'      create
'product.product'      create
'mrp.bom'      
'mrp.bom'      
'report.mrp.report_bom_structure'      _get_report_data
'report.mrp.report_bom_structure'      _get_bom
'report.mrp.report_bom_structure'      _get_report_data
'product.product'      create
'product.product'      create
'product.product'      create
'product.product'      create
'mrp.bom'      
'mrp.bom'      
'mrp.bom'      
'report.mrp.report_bom_structure'      _get_report_data
'product.product'      create
'mrp.bom'      
'mrp.bom'      
'mrp.bom'      
'mrp.bom'      
'product.product'      create
'mrp.bom'      create
'stock.picking'      
'stock.warehouse.orderpoint'      _get_orderpoint_action
'stock.warehouse.orderpoint'      _get_orderpoint_action
'stock.warehouse.orderpoint'      search([
'stock.location.route'      search([
'product.product'      create
'mrp.production'      
'mrp.production'      
'res.company'      create
'res.company'      create
'stock.warehouse'      search([
'stock.warehouse'      search([
'res.users'      create
'res.users'      create
'product.product'      create
'mrp.bom'      create
'product.product'      create
'product.product'      create
'mrp.bom'      create
'product.product'      create
'mrp.production'      create
'product.product'      create
'product.product'      create
'mrp.bom'      create
'mrp.production'      with_user
'product.product'      create
'product.product'      create
'stock.production.lot'      create
'mrp.bom'      create
'mrp.production'      with_user
'product.product'      create
'product.product'      create
'stock.production.lot'      create
'mrp.bom'      create
'mrp.production'      with_user
'product.product'      create
'mrp.workcenter.productivity'      create
'mrp.production'      with_user
'mrp.production'      with_user
'stock.quant'      create
'stock.quant'      create
'mrp.production'      with_user
'mrp.production.backorder'      with_context
'mrp.production'      
'stock.quant'      with_context(inventory_mode=True).create
'stock.quant'      with_context(inventory_mode=True).create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'change.production.qty'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'change.production.qty'      create
'mrp.bom'      create
'mrp.production'      
'mrp.bom'      create
'mrp.production'      
'mrp.bom'      create
'mrp.production'      
'mrp.bom'      create
'mrp.production'      
'mrp.production'      
'mrp.bom'      create
'mrp.production'      
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'mrp.production.backorder'      with_context
'stock.production.lot'      create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'change.production.qty'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'mrp.consumption.warning'      with_context
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'mrp.consumption.warning'      with_context
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'product.product'      create
'product.product'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'product.product'      create
'stock.production.lot'      create
'stock.production.lot'      create
'product.product'      create
'stock.production.lot'      create
'stock.production.lot'      create
'product.product'      create
'mrp.production'      
'mrp.production.backorder'      with_context
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'mrp.production'      
'stock.production.lot'      create
'mrp.production'      
'product.product'      create
'product.product'      create
'product.product'      create
'mrp.bom'      create
'mrp.production'      
'stock.production.lot'      create
'mrp.production'      
'stock.production.lot'      create
'mrp.unbuild'      
'mrp.production'      
'product.product'      create
'mrp.production'      
'stock.move'      create
'product.product'      create
'mrp.production'      
'stock.move'      create
'product.product'      create
'product.product'      create
'mrp.bom'      create
'mrp.production'      
'stock.production.lot'      create
'product.product'      create
'product.product'      create
'mrp.bom'      create
'mrp.production'      
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
res_dict['res_model']].with_context(res_dict['context'      ).save
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
action['res_model']].with_context(action['context'      ).save
action['res_model']].with_context(action['context'      ).save
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
action['res_model']].with_context(action['context'      ).save
action['res_model']].with_context(action['context'      ).save
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'mrp.production'      
'mrp.production'      
res_dict['res_model']].with_context(res_dict['context'      ).save
'mrp.production'      
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
res_dict['res_model']].with_context(res_dict['context'      ).save
'product.product'      create
'product.product'      create
'mrp.bom'      create
'stock.quant'      _update_available_quantity
'mrp.production'      
res_dict['res_model']].with_context(res_dict['context'      ).save
'uom.uom'      create
'product.product'      create
'product.product'      create
'product.product'      create
'stock.quant'      _update_available_quantity(storable_component, self.env.ref
'mrp.bom'      create
'mrp.production'      
action['res_model']].with_context(action['context'      ).save
'uom.category'      create
'uom.uom'      create
'uom.uom'      create
'product.product'      create
'product.product'      create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'mrp.bom'      create
'mrp.production'      
res_dict['res_model']].with_context(res_dict['context'      ).save
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.scrap'      create
'mrp.production'      
'mrp.production'      
'mrp.production'      
res_dict['res_model']].with_context(res_dict['context'      ).save
'mrp.bom'      create
'mrp.production'      
'mrp.production.backorder'      with_context
'stock.move'      search
'stock.move'      search
'stock.move'      search
'stock.move'      search
'mrp.bom'      create
'stock.quant'      create
'mrp.production'      
res_dict['res_model']].with_context(res_dict['context'      ).save
'product.template'      create
'product.template'      create
'mrp.bom'      create
'mrp.production'      
'mrp.production'      browse
'mrp.production'      browse
'stock.move.line'      search([
'stock.move'      search([
'mrp.production'      
'mrp.production'      browse
'stock.move.line'      search([
'stock.move'      search([
'mrp.production'      
'mrp.production'      browse
'mrp.production'      browse
'stock.move.line'      search([
'stock.move'      search([
'mrp.workcenter'      create
'mrp.workcenter'      create
'mrp.workcenter'      create
'product.template'      create
'product.template'      create
'product.template'      create
'product.template'      create
'stock.quant'      create
'stock.quant'      create
'stock.quant'      create
'mrp.bom'      create
'mrp.production'      
'mrp.production.backorder'      create
'mrp.production'      browse
'product.product'      create
'product.product'      create
'mrp.production'      
'mrp.production'      browse
'mrp.production'      browse
'mrp.production'      
'mrp.production'      browse
'mrp.production'      browse
'mrp.production'      
'uom.uom'      browse(self.ref
'product.product'      create
'mrp.bom'      create
'mrp.bom'      create
'mrp.production'      
'mrp.production'      browse
'mrp.production'      browse
'mrp.production'      
'mrp.production'      
'mrp.production'      
'mrp.production'      
'mrp.production'      
'mrp.production'      
'mrp.production'      
'mrp.production'      
'mrp.production'      
'mrp.production'      search([
'stock.quant'      with_context(inventory_mode=True).create
'stock.quant'      with_context(inventory_mode=True).create
'product.category'      search([
'product.category'      search([
'mrp.production'      
'stock.warehouse'      search
'stock.location'      _parent_store_compute
'product.product'      create
'product.product'      create
'stock.quant'      _update_available_quantity
'mrp.bom'      create
'mrp.production'      
'stock.picking'      search([
'product.product'      create
'product.product'      create
'mrp.bom'      create
'stock.move'      create
'mrp.production'      search
'stock.move'      search
'product.product'      create
'product.product'      create
'mrp.bom'      create
'stock.move'      create
'mrp.production'      search
'product.product'      create
'mrp.bom'      create
'stock.move'      create
'mrp.production'      search([
'product.product'      create
'stock.move'      create
'product.product'      create
'product.product'      create
'product.product'      create
'mrp.bom'      create
'mrp.bom'      create
'product.product'      create
'product.product'      create
'mrp.bom'      create
'stock.warehouse.orderpoint'      create
'stock.warehouse.orderpoint'      create
'stock.warehouse.orderpoint'      create
'stock.picking'      create
'mrp.production'      search
'mrp.production'      search
'mrp.production'      search
'mrp.production'      
'procurement.group'      Procurement
'res.partner'      create
'stock.location.route'      browse(self.ref('stock.route_warehouse0_mto')).action_unarchive
'product.product'      create
'product.product'      create
'mrp.bom'      create
'procurement.group'      create
'stock.move'      search([
'mrp.production'      search([
'mrp.production'      search([
'stock.location'      create
"stock.putaway.rule"      create
'mrp.workcenter'      create
'stock.quant'      create
'mrp.bom'      create
'mrp.production'      
'stock.rule'      search
'stock.rule'      search
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      create
'stock.quant'      create
'mrp.production'      
'stock.scrap'      with_context(active_model='mrp.production', active_id=production_3.id).create
'stock.scrap'      with_context(active_model='mrp.production', active_id=production_3.id).create
'stock.production.lot'      create
'product.product'      
'mrp.bom'      create
'mrp.bom'      create
'mrp.bom'      create
'mrp.bom'      create
'res.partner'      create
'stock.location'      create
'stock.picking'      create
'stock.move'      create
'stock.picking'      create
'stock.move'      create
'product.product'      create
'product.product'      create
'product.product'      create
'mrp.bom'      create
'mrp.bom'      create
'mrp.production'      
'mrp.production'      
'product.product'      create
'product.product'      create
'mrp.bom'      create
'mrp.production'      
'mrp.production.backorder'      with_context
'product.product'      create
'product.product'      create
'mrp.production'      
'product.product'      create
'stock.quant'      create
'stock.quant'      create
'stock.quant'      create
'stock.quant'      create
'stock.quant'      create
'mrp.bom'      create
'mrp.production'      
'stock.production.lot'      create
'stock.traceability.report'      with_context(context).get_lines
'stock.traceability.report'      get_lines
'product.product'      create
'product.product'      create
'product.product'      create
'product.product'      create
'product.product'      create
'mrp.bom'      create
'mrp.production'      
'stock.production.lot'      create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.production.lot'      create
'mrp.production.backorder'      with_context
'stock.production.lot'      create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'mrp.unbuild'      
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'mrp.unbuild'      
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'mrp.unbuild'      
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'mrp.unbuild'      
'mrp.unbuild'      
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'mrp.unbuild'      
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'mrp.unbuild'      
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'mrp.unbuild'      
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'mrp.unbuild'      
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'mrp.unbuild'      
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'mrp.unbuild'      
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'mrp.unbuild'      
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'mrp.unbuild'      
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'mrp.unbuild'      
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'mrp.unbuild'      
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.production.lot'      create
action['res_model']      with_context
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.production.lot'      create
'stock.location'      create
'stock.location.route'      create
'mrp.bom'      create
'mrp.production'      
'mrp.unbuild'      
'stock.picking'      search([
'ir.model.data'      _xmlid_to_res_id
'stock.warehouse'      
'product.product'      
'product.product'      
'mrp.bom'      
'mrp.production'      
'stock.quant'      _update_available_quantity
'stock.picking'      create
'ir.model.data'      _xmlid_to_res_id
'stock.move'      create
'mrp.production'      search([
'stock.move'      search
'stock.move'      search
'stock.quant'      _gather(self.raw_product, self.warehouse.lot_stock_id).mapped
'stock.quant'      _gather
'stock.quant'      _gather(self.raw_product, self.warehouse.pbm_loc_id).mapped
'stock.move'      search
'stock.quant'      _update_available_quantity
'stock.picking'      create
'ir.model.data'      _xmlid_to_res_id
'stock.move'      create
'mrp.production'      search([
'stock.move'      search
'stock.move'      search
'mrp.production'      
'mrp.bom'      search
'product.product'      create
'mrp.production'      
'uom.uom'      create
'product.product'      create
'product.product'      create
'product.product'      create
'mrp.bom'      create
'stock.warehouse.orderpoint'      create
'procurement.group'      run_scheduler
'mrp.production'      search([
'stock.move'      search
'product.product'      
'mrp.bom'      
'stock.quant'      _update_available_quantity
'stock.warehouse.orderpoint'      
'stock.warehouse.orderpoint'      
'stock.warehouse.orderpoint'      
'procurement.group'      run_scheduler
'stock.picking'      search
'mrp.workorder'      browse(self.env.context.get('active_id')).do_finish
'mrp.production'      browse
"ir.actions.actions"      _for_xml_id
'account.analytic.line'      sudo().create
'mrp.workcenter'      
'stock.quant'      with_context(inventory_mode=True).create
'stock.quant'      with_context(inventory_mode=True).create
'stock.quant'      with_context(inventory_mode=True).create
'stock.quant'      create
'mrp.production'      
'mrp.production'      
'account.move.line'      search([('ref', 'ilike', 'MO%Product A'), 
'account.move.line'      search([('ref', 'ilike', 'MO%Product A'), 
'account.move.line'      search([('ref', 'ilike', 'MO%Product B'), 
'account.move.line'      search([('ref', 'ilike', 'MO%Product B'), 
res_dict['res_model']].with_context(res_dict['context'      ).save
'account.move.line'      search([('ref', 'ilike', 'UB%Product A'), 
'account.move.line'      search([('ref', 'ilike', 'UB%Product A'), 
'account.move.line'      search([('ref', 'ilike', 'UB%Product B'), 
'account.move.line'      search([('ref', 'ilike', 'UB%Product B'), 
'account.account'      create
'account.account'      create
'mrp.production'      
'account.move.line'      search([('ref', 'ilike', 'MO%Product A'), 
'account.move.line'      search([('ref', 'ilike', 'MO%Product A'), 
'account.move.line'      search([('ref', 'ilike', 'MO%Product B'), 
'account.move.line'      search([('ref', 'ilike', 'MO%Product B'), 
res_dict['res_model']].with_context(res_dict['context'      ).save
'account.move.line'      search([('ref', 'ilike', 'UB%Product A'), 
'account.move.line'      search([('ref', 'ilike', 'UB%Product A'), 
'account.move.line'      search([('ref', 'ilike', 'UB%Product B'), 
'account.move.line'      search([('ref', 'ilike', 'UB%Product B'), 
'mrp.production'      
'mrp.production'      
'product.product'      create
'stock.production.lot'      create
'product.product'      create
'stock.production.lot'      create
'mrp.production'      
'repair.order'       as ro_form:
'mrp.production'      
'stock.production.lot'      create
'res.company'      search
'stock.location'      create
'ir.property'      _set_default
'stock.picking'      concat(*list(subcontract_details_per_picking.keys())).action_assign
'mrp.bom'      sudo()._bom_subcontract_find
'change.production.qty'      with_context(skip_activity=True).create
'change.production.qty'      create
'procurement.group'      create
'mrp.production'      with_company(move.company_id).create(self._prepare_subcontract_mo_vals
'stock.move'      create(mo._get_moves_raw_values
'stock.move'      create(mo._get_moves_finished_values
'res.company'      create
'stock.warehouse'].search([      .with_context(active_test=False).mapped
'stock.picking'      
'mrp.production'      search([
'procurement.group'      create
'stock.warehouse.orderpoint'      create
'procurement.group'      run_scheduler
'stock.picking'      search([
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.return.picking'      with_context
'stock.picking'      browse
'stock.location.route'      search([
'stock.location'      create
'stock.picking'      
'mrp.production'      search([
'mrp.production'      search([
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.location.route'      search([
'stock.location.route'      search([
'stock.picking'      
'mrp.production'      search([
'mrp.production'      search([
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.location.route'      search([
'stock.warehouse.orderpoint'      
'stock.picking'      
'mrp.production'      search([
'stock.picking'      search([
'stock.move'      search
'mrp.production'      search([
'res.partner'      create
'res.partner'      create
'product.product'      create
'mrp.bom'      
'stock.picking'      
'stock.picking'      
'res.partner'      create
'res.partner'      create
'product.product'      create
'mrp.bom'      
'stock.picking'      
'stock.location.route'      search([
'stock.picking'      
backorder_wiz['res_model']].with_context(backorder_wiz['context'      ).save
'stock.picking'      search([
'stock.location.route'      search
'stock.picking'      
'stock.move'      search
'res.partner'      create
'stock.picking'      
'mrp.production'      search([
'stock.picking'      
'mrp.production'      browse
'stock.quant'      _get_available_quantity
'stock.picking'      
'mrp.production'      browse
'mrp.consumption.warning'      with_context
'mrp.consumption.warning'      with_context
'stock.quant'      _get_available_quantity
'product.supplierinfo'      create
'product.supplierinfo'      create
'report.mrp.report_bom_structure'      _get_report_data
'res.partner'      create
'res.partner'      create
'product.product'      create
'product.product'      create
'product.product'      create
'mrp.bom'      
'stock.picking'      
'mrp.production'      search([
'procurement.group'      create
'stock.warehouse.orderpoint'      create
'procurement.group'      run_scheduler
'stock.picking'      search([
'stock.production.lot'      create
'stock.production.lot'      create
'mrp.production'      browse
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.picking'      
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.picking'      
'mrp.production'      search([
'stock.production.lot'      create
'stock.production.lot'      create
'stock.production.lot'      create
'mrp.production'      browse
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.location.route'      search([
'product.product'      create
'mrp.bom'      
'stock.production.lot'      create
'stock.quant'      _update_available_quantity(component, self.env.ref
'stock.picking'      
'mrp.production'      search([
wizard_data['res_model']].with_context(wizard_data['context'      ).save
'stock.picking'      search([('partner_id', '=', self.subcontractor_partner1.id), 
'mrp.production'      browse
wizard_data['res_model']].with_context(wizard_data['context'      ).save
'stock.move'      create
'stock.move'      create
'stock.picking'      
'stock.picking'      
'stock.production.lot'      create
'stock.production.lot'      create
'stock.production.lot'      create
'mrp.production'      browse
'res.partner'      create
'product.supplierinfo'      create
'stock.picking.type'      search
'stock.rule'      create
'res.company'      search
'stock.rule'].search([('route_id', '=', route.id)      .mapped
'stock.location.route'      search([('name', '=', 'Replenish on Order 
'stock.location.route'      search([
'stock.location.route'      search([
'stock.location.route'      search([
'stock.warehouse'      create
'product.supplierinfo'      create
'res.partner'      create
'product.supplierinfo'      create
'sale.order'      
'purchase.order'      search([
'stock.move'      search
'purchase.order.line'      search
'stock.location.route'      search([
'res.partner'      create
'product.supplierinfo'      create
'purchase.order'      
'mrp.production'      search([
'stock.picking'      search([
'note.stage'      search([
'note.stage'      search([
'note.stage'      search([
'ir.model.data'      _xmlid_to_res_id
'note.note'      search_count([
'note.note'      _original_module),
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo().get_param
self.env.context["model"      
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo().get_param
'iap.account'      get
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo().get_param
'res.partner'      enrich_company
'res.partner'      _iap_replace_logo
'res.country'      search
'res.country'      search
'res.country.state'      search
'res.country.state'      search
'iap.autocomplete.api'      _request_partner_autocomplete
'iap.autocomplete.api'      _request_partner_autocomplete
'iap.autocomplete.api'      _request_partner_autocomplete
'res.country'      search([
"res.country.group"      search([
'res.partner.autocomplete.sync'      search([('partner_id', '=', self.id), 
'res.partner.autocomplete.sync'      sudo().add_to_queue
'res.company'      create
'res.company'      create
'payment.token'      sudo().search
'payment.acquirer']._fields['provider'      _description_selection
'account.payment'      read_group
'payment.acquirer']._fields['provider'      _description_selection
'payment.token'      sudo().search
'account.payment'      search
'payment.transaction'      create
'account.payment.method.line'      search
'account.payment.method.line'      search
'account.payment.method.line'      search
'account.payment.method.line'      create
'ir.model.fields'      _get
'res.partner'      browse
'payment.acquirer'      search
'res.lang'      get_installed
'payment.transaction'      read_group
'payment.acquirer'      browse
'res.partner'      browse
'res.currency'      browse(values.get('currency_id')).exists
'payment.transaction'      search
'account.move'      browse(invoice_ids).exists
'ir.model'      sudo().browse
model_sudo.model      browse(res_id).exists
'account.payment'      create
'ir.actions.actions'      _for_xml_id
'res.currency'      search
'res.currency'      search([
'account.account'      search([
'account.move'      create
'payment.token'      sudo().search
'payment.acquirer']._fields['provider'      _description_selection
'payment.acquirer']._fields['provider'      _description_selection
'payment.token'      sudo().search
'ir.module.module'      sudo().search
'ir.module.module'      sudo().search([
"ir.actions.actions"      _for_xml_id
'payment.transaction'      search_count
'payment.token'      create
'res.currency'      browse(currency_id).exists
'payment.token'      search([
'res.currency'      search([('name', 'in', res_content.get
'res.currency'      browse(currency_id).exists
'res.currency'      browse(currency_id).exists
'res.currency'      browse(currency_id).exists
'mail.render.mixin'      _replace_local_links
'mail.mail'      sudo().create(mail_values).send
'res.currency'      browse(currency_id).exists
'res.currency'      browse(currency_id).exists
'res.currency'      browse(currency_id).exists
'phone.blacklist'      browse(bl_entries.values
"phone.blacklist"      with_context(active_test=False).search([
"phone.blacklist"      with_context(active_test=False).search([
'pos.order'      search
'stock.warehouse'      search([
'stock.warehouse'      search([
'account.journal'      search([('type', 'in', ('sale', 'general')), ('company_id', '=', self.env.company.id), 
'account.journal'      search([('type', '=', 'sale'), 
'pos.payment.method'      search([('split_transactions', '=', False), 
'product.pricelist'      search([('company_id', 'in', (False, self.env.company.id)), 
'product.pricelist'      search
'ir.module.module'      sudo().search([('name', '=', 'account_accountant'), 
'pos.category'      search
"account.cash.rounding"]._fields["stategy"      _description_selection
'pos.payment.method'      search_count([('id', 'in', config.payment_method_ids.ids), 
'pos.session'      search([
'ir.sequence'      sudo
'ir.module.module'      sudo().search([
'res.groups'      concat(*(self.env.ref
'ir.config_parameter'      sudo().get_param
'pos.session'      create
'res.company'      search
'account.journal'      search([('company_id', '=', company.id), 
'account.journal'      search([('company_id', '=', company.id), 
'account.journal'      search([('company_id', '=', company.id), 
'account.journal'      create
'account.journal'      search([('type', '=', 'sale'), 
'product.product'      search_read([
'pos.order.line']._order_line_fields, session_id=ui_order['pos_session_id'      
'pos.session'      browse
'pos.session'      browse
'pos.payment'      search([
'decimal.precision'      precision_get
'res.currency'      _get_conversion_rate
'pos.payment'      read_group([
'pos.payment'      read_group(['&', ('pos_order_id', 'in', self.ids), 
'pos.order.line'      read_group([
'pos.session'      browse
'ir.actions.act_window'      _for_xml_id
'account.move'].sudo().with_company(self.company_id).with_context(default_move_type=move_vals['move_type'      .create
'account.move.line'      with_context(check_move_validity=False).create
"res.partner"      _find_accounting_partner
'pos.order'].search(['|', ('id', '=', order['data']['server_id'      , 
'pos.order'      search_read(domain = [
'stock.warehouse'      _get_partner_locations
'stock.picking'      _create_picking_from_pos_order_lines
'pos.payment'      create
'ir.attachment'      create
'ir.attachment'      create
'mail.mail'      sudo().create
'pos.session'      browse(session_id).exists
'ir.sequence'      next_by_code
'product.product'      browse
'pos.order.line'      _fields}
'pos.order'      browse
'ir.sequence'      next_by_code
'account.tax'      _fix_tax_included_price_company
'procurement.group'      create(line._prepare_procurement_group_vals
'procurement.group'      Procurement
'procurement.group'      run
'pos.order'      search
"pos.payment"      search([
'pos.config'      browse
'pos.session'      search([('config_id.rounding_method', 'in', self.ids), 
'pos.session'      search([('config_id', 'in', payment_method.config_ids.ids), 
'pos.payment'      read_group([('session_id', '=', session.id), 
'pos.payment'      read_group([
'pos.order'      read_group([
'stock.picking'      search_count([
'stock.picking'      search([('pos_session_id', '=', session.id), 
'ir.actions.act_window'      _for_xml_id
'pos.config'      browse
'ir.sequence'      with_context(ctx).next_by_code
'pos.session'      search([
'pos.session'].browse(last_sessions[1      .cash_register_id.balance_end_real if len
'pos.order'].search([('session_id', '=', self.id), ('state', '=', 'paid')      .write
'pos.close.session.wizard'      create
'account.move'      create
'pos.payment.method'      browse
'pos.payment.method'      browse(bank_payment_method_diffs.keys
'stock.warehouse'      _get_partner_locations
'stock.picking'      _create_picking_from_pos_order_lines
'ir.property'      _get
'account.move'      with_context(default_journal_id=journal.id).create
'account.move.line'      
'account.move.line'      
'stock.move'      sudo().search
'stock.move'      sudo().search
'account.move.line'      with_context
'account.payment'      create
'account.payment'      create
'account.move.line'      
'account.move.line'      
'stock.move'      search([
'account.move'].search([('stock_move_id', 'in', stock_moves.ids)      .mapped
'account.tax.repartition.line'      browse
"res.partner"      _find_accounting_partner
'account.tax'      browse
'account.tax'      browse
"res.partner"      _find_accounting_partner
'account.move.line'].search([('ref', 'in', diff_lines_ref)      .mapped
'mail.message'      create
'mail.activity'      search_count([('res_id', '=', session.id), 
'cash.box.out'      
'pos.session'      _alert_old_session
'pos.session'      sudo().search_count([
'pos.session'      sudo().search_count([
'pos.config'      browse
'stock.warehouse'      search
'pos.order'      read_group
'pos.session'      sudo().search([
'stock.picking'      create
'stock.picking'      create
'pos.order.line'      concat
'stock.move'      create
'stock.production.lot'      search
'stock.production.lot'      create
'stock.move.line'      create
'stock.move.line'      create
'stock.move.line'      create
'stock.move.line'      create
'stock.move.line'      create
'stock.warehouse'      search([
'pos.order'      create_from_ui
'stock.warehouse'      search([
'res.partner'      create
'account.account'      create
'account.account'      create
'account.account'      create
'account.account'      create
'account.account'      create
'account.journal'      create
'product.product'      create
'account.journal'      create
'account.journal'      create
'account.journal'      create
'pos.payment.method'      create
'stock.quant'      with_context(inventory_mode=True).create
'stock.quant'      with_context(inventory_mode=True).create
"product.pricelist"].search([      .write
"res.company"      create
"res.company"      create
"product.pricelist"      create
"product.pricelist"      create
"pos.config"      create
"product.pricelist"      create
"pos.config"      create
'product.product'      create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      with_context(inventory_mode=True).create
'stock.quant'      with_context(inventory_mode=True).create
'product.product'      create
'stock.location'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'account.move'      browse
'account.journal'      create
'res.currency.rate'].search([      .unlink
'res.currency.rate'      create
'account.journal'      create
'account.move'      browse
'account.tax'      create
'product.product'      create
'pos.close.session.wizard'      browse
'stock.warehouse'      create
'pos.order'      create_from_ui
'pos.order'      create_from_ui
'pos.order'      create_from_ui
'pos.order'      create_from_ui
'pos.order'      create_from_ui
'pos.order'      create_from_ui
'pos.order'      create_from_ui
'stock.move'      create
'stock.move'      create
'pos.order'      create_from_ui
'stock.move'      create
'stock.move'      create
'pos.order'      create_from_ui
'stock.quant'      with_context(inventory_mode=True).create
'pos.order'      create_from_ui
active_model      browse
active_model      browse
"pos.session"      browse
'pos.config'      search
'account.journal'      search([
'pos.order'      browse
'pos.order'      browse
'pos.order'      browse
'pos.order'      browse(self.env.context.get
"ir.config_parameter"      sudo().get_param
'res.users'      sudo().browse
"ir.actions.actions"      _for_xml_id
'res.partner'      create
'portal.wizard'].with_context(active_ids=[self.partner.id      .create
'portal.wizard'].with_context(active_ids=[self.partner.id      .with_user(self.user_employee).create
'portal.wizard'].with_context(active_ids=[self.partner.id      .create
'portal.wizard'].with_context(active_ids=[public_partner.id      .create
'portal.wizard'].with_context(active_ids=[internal_partner.id      .create
'portal.wizard'].with_context(active_ids=[self.portal_user.partner_id.id      .create
'portal.wizard'].with_context(active_ids=[self.internal_user.partner_id.id      .create
'res.company'      search
'res.company'      create
'res.partner'      with_company(company_2).create
'portal.wizard'].with_context(active_ids=[partner_company_2.id      .create
result['res_model']      browse
'ir.model'      sudo().search
'ir.config_parameter'      sudo().get_param
'res.partner'      sudo().browse
'res.users'      with_context(no_reset_password=True)._create_user_from_template
'res.users'      sudo().with_context(active_test=False).search
'pos.cache'].search([      .refresh_cache
'product.product'      with_user
'ir.config_parameter'      sudo().get_param
'pos.config'      search
"gift.card"      search
'ir.attachment'      create
'pos.config'].search([('module_pos_hr', '=', 'True')      .filtered
'pos.session'      search([('state', '=', 'opened'), 
'ir.config_parameter'      sudo().get_param
'pos.order'      search([
'restaurant.printer'      create
'pos.category'      create
'pos.config'      create
'restaurant.floor'      create
'restaurant.table'      create
'restaurant.table'      create
'restaurant.table'      create
'restaurant.floor'      create
'restaurant.table'      create
'restaurant.table'      create
'ir.property'      _set_default
'account.journal'      create
'account.journal'      create
'product.product'      create
'product.product'      create
'product.product'      create
'product.pricelist'      create
'pos.order'      search_count([('amount_total', '=', 4.4), 
'pos.order'      search_count([('amount_total', '=', 4.4), 
'pos.order'      search_count([('amount_total', '=', 4.4), 
'pos.order'      search_count([('amount_total', '=', 2.2), 
'pos.order'      search_count([('amount_total', '=', 4.4), 
'pos.order'      search([
'pos.order'      search([
'pos.order'      search([
'pos.order'      search([
'crm.team'      search(['|', ('company_id', '=', self.company_id.id), 
'uom.uom'      search([
'product.template'      read_group([
'product.pricelist'      name_search
'product.pricelist'      browse
'product.pricelist'      browse
'uom.uom'].browse(self._context['uom'      ._compute_price
'uom.uom'].browse(self._context['uom'      ._compute_price
'uom.uom'      browse
'product.pricelist.item'      search_count
'product.product'      search
'res.partner'      browse
'product.supplierinfo'      sudo().search
'product.supplierinfo'      _search
'product.category'      browse
'ir.actions.act_window'      _for_xml_id
'decimal.precision'      precision_get
'uom.uom'      browse
'res.currency'      browse
'product.template'      invalidate_cache
'product.pricelist.item'      flush
'product.pricelist.item'      browse
'uom.uom'].browse([self._context['uom']      ._compute_quantity
'uom.uom'      browse
'product.product'      browse
'res.partner'      with_context
'ir.property'      with_company
'product.pricelist.item'      sudo().with_context(active_test=False).search
'product.pricelist'      search
'decimal.precision'      precision_get
'res.company'      _get_main_company
'product.pricelist'      name_search
'product.pricelist'      browse
'product.pricelist'      browse
'uom.uom'].browse(self._context['uom'      ._compute_price
'product.product'      search([
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo().get_param
'product.template'      search
'uom.uom'      browse(vals.get
'uom.uom'      browse(vals.get
'product.product'      invalidate_cache
'ir.actions.act_window'      _for_xml_id
'uom.uom'      browse
'res.currency'      browse
'product.template.attribute.value'      concat
'product.product'      browse(self._get_variant_id_for_combination
'product.product'      sudo().with_context(active_test=False).search
'product.template.attribute.value'      
'product.template.attribute.value'      browse
'product.template.attribute.value'      browse
'product.template.attribute.value'      browse
'product.template.attribute.value'      
'ir.property'      _set_default
'res.currency'      browse
'ir.property'      _set_default
'product.pricelist'      _get_partner_pricelist_multi
'product.pricelist'      search
'ir.property'      _get
'ir.property'      _set_multi
'product.category'      
'product.product'      browse
'res.partner'      browse
'res.config.settings'      create
"res.currency"      search([
'res.config.settings'      create
'product.product'      browse
"product.attribute"      browse
"product.attribute"      browse
'product.product'      _populate_get_product_factories
"product.template"      search
'product.template.attribute.value'      browse
'product.pricelist'      browse(pricelist_id).exists
'product.pricelist'      search
'product.product'      create
'product.product'      create
'product.pricelist'      create
'product.product'      create
'product.pricelist.item'      create
'res.partner'      create
'res.partner'      create
'product.category'      create
'product.product'      create
'product.product'      create
'product.product'      create
'product.product'      create
'product.product'      create
'product.supplierinfo'      create
'product.product'      create
'product.product'      create
'product.product'      create
'product.product'      create
'product.product'      create
'res.partner'      create
'res.partner'      create
'res.company'      create
'product.attribute'      create
'product.attribute.value'      create
'product.attribute.value'      create
'product.attribute.value'      create
'product.template'      create
'product.template'      search
'product.template'      search
'product.template'      search
'product.template'      create
'product.product'      name_search
'product.attribute'      create
'product.attribute.value'      create
'product.attribute.value'      create
'product.attribute.value'      create
'product.template'      create
'product.template'      create
'product.template'      create
'product.product'      search
'product.template'      create
'product.product'      search
'product.template'      create
'product.template'      create
'res.company'      create({'name': 'CB', 'currency_id': self.env.ref
'product.template'      create
'product.template'      create
'product.attribute'      create
'product.template'      create
'product.template'      create
'product.template'      create
'product.template'      create
'product.template'      create
'product.template'      create
'product.template'      create
'product.template'      create
'product.template'      create
'product.template'      create
'product.template'      create
'product.template'      create
'product.template'      create
'product.template'      create
'product.template'      create
'product.template'      create
'product.attribute'      create
'product.template'      create
'product.attribute.value'      create
'product.template.attribute.line'      create
'product.attribute'      create
'product.attribute.value'      create
'product.attribute'      create
'product.attribute.value'      create
'product.template'      create
'product.attribute'      create
'product.template'      create
'product.template'      name_search
'product.template'      create
'product.template'      create
'product.template.attribute.value'      search
'product.product'      with_context(active_test=False).search
'ir.model'      _get_id
'res.partner'      create
'mail.message'      search
'account.move'      create
'mail.message'      search([('id', '>', id_max), 
'mail.message'      search
'account.move'      create
'res.users'      create
'mail.message'      search([('id', '>', id_max), 
'product.product'      browse
'stock.production.lot'      search
'stock.quant'      search
'stock.production.lot'      _alert_date_exceeded
'stock.production.lot'      _alert_date_exceeded
'mail.activity'      search_count
'stock.production.lot'      _alert_date_exceeded
'mail.activity'      search_count
'mail.activity'      search
'mail.activity'      search_count
'stock.production.lot'      _alert_date_exceeded
'mail.activity'      search_count
'stock.production.lot'      _alert_date_exceeded
'mail.activity'      search_count
'stock.production.lot'      _alert_date_exceeded
'mail.activity'      search_count
'res.partner'      create
'stock.picking'      
'stock.production.lot'      search
'res.partner'      create
'stock.picking'      
'stock.production.lot'      search
'res.partner'      create
'stock.picking'      
'stock.picking'      
'stock.picking'      
'stock.picking'      browse
'stock.picking'      browse(self.env.context.get
'ir.cron.trigger'      search_count
'ir.cron.trigger'      search_count
'product.template'      browse
'product.product'      browse
'ir.cron.trigger'      search_count
'product.product'      search
'account.move.line'      flush
'account.move'      flush
'product.template'      flush
'res.currency'      _select_companies_rates
'project.project'      read_group([
'project.project'      search([
'project.task'      search_count([
'project.task'      search_count
'project.task'].search([('stage_id', 'in', self.ids)      .write
'project.task'      read_group
'ir.actions.act_window'      _for_xml_id
'project.project.stage'      search
'project.project'      sudo
'project.project.stage'      search
'project.milestone'      read_group([
'project.collaborator'      read_group
'project.task'      with_context(active_test=False).search([
'project.task'      browse
'project.task'].search([('project_id', 'in', self.ids), ('recurring_task', '=', True)      .write
'project.project'      read_group
'account.analytic.account'      browse
'project.delete.wizard'      create
'mail.message.subtype'      browse
'ir.model'      _get
'ir.model.data'      _xmlid_to_res_id
'project.project'      sudo
'ir.actions.act_window'      _for_xml_id
'ir.actions.act_window'      _for_xml_id
'ir.actions.act_window'      _for_xml_id
'project.task'      search([
'account.analytic.account'      create
'account.analytic.account'      create
'ir.model.data'      _xmlid_to_res_id
'project.project'      browse
'project.task.stage.personal'      search([('user_id', '=', self.env.uid), 
'project.task.stage.personal'      sudo().search([('task_id', 'in', self.ids), 
'project.task.stage.personal'      
'project.task.type'      sudo().search([
'project.task.type'      sudo().with_context(lang=user_id.partner_id.lang, default_project_id=False).create
'project.task.recurrence'      _get_next_recurring_dates
'res.lang'      _lang_get
'project.task'      read_group([
'project.task'      read_group
'ir.attachment'      search([('res_id', '=', task.id), 
'project.project'      browse
'project.task.type'      search
'project.project'      browse
'project.task'      browse
"project.project"      browse
'project.task.recurrence'      create
'project.task.recurrence'      create
'project.task'      search
'project.task.type'      browse
'project.task'      search([
'ir.model.fields'      _get_ids
'ir.qweb'      _render
'ir.model.data'      _xmlid_to_res_id
'mail.thread'      _mail_find_partner_from_emails
'mail.thread'      _mail_find_partner_from_emails
'project.task'      with_context(active_test=False).search([
'project.collaborator'      search
'project.collaborator'      search
'project.task'      sudo().create
'project.task'      sudo().create
'project.task'      sudo().create
'project.project'      browse
'project.milestone'      search([('id', 'in', list(mapped_result.keys
"project.project"      search
'project.task'      read_group
'res.users'      with_context(no_reset_password=True)._create_user_from_template
'project.task'      
'project.task'      with_user(with_user or self.env.user).create
'res.users'      with_context({'no_reset_password': True, 'mail_create_nosubscribe': True}).create
'project.task'      with_context({'mail_create_nolog': True}).create
'project.task'      with_context({'mail_create_nolog': True}).create
'project.task'      with_context({'mail_create_nolog': True}).create
'project.task'      with_context({'mail_create_nolog': True}).create
'project.task'      with_user(self.user_projectuser).search([
'project.task'      with_user(self.user_projectuser).with_context({'mail_create_nolog': True}).create
'project.task'      with_user(self.user_projectuser).search([
'project.task'      with_user(self.user_projectuser).with_context({'mail_create_nolog': True}).create
'project.task'      with_user(self.user_projectuser).with_context
'project.task'      with_user(self.user_projectuser).with_context
'project.project'      create
'project.task'      create
'project.task'      create
'project.task.burndown.chart.report'      with_context(fill_temporal=True).read_group([('project_id', '=', project.id), 
'res.users'      sudo().search([
'project.project'      with_context({'tracking_disable': True}).create
'project.project'      with_context({'tracking_disable': True}).create
'project.project'      with_context({'tracking_disable': True}).create
'project.task'      with_context
'project.task'      with_context
'project.task'      with_context
'project.task'      with_context
'project.task'      with_context
'rating.rating'      create
'ir.model'      _get
'ir.model'      _get
'rating.rating'      create
'ir.model'      _get
'ir.model'      _get
'project.task'      with_context({'mail_create_nolog': True}).create
'project.task'       as form:
'project.task'      
'project.task'      search_count
'project.task.recurrence'      _cron_create_recurring_tasks
'project.task'      search_count
'project.task'      search_count
'project.task.recurrence'      _cron_create_recurring_tasks
'project.task'      search_count
'project.task.recurrence'      _cron_create_recurring_tasks
'project.task'      search_count
'project.task.recurrence'      _cron_create_recurring_tasks
'project.task'      search_count
'project.task'      search
'project.task.recurrence'      _get_recurring_fields
'project.task'      
'project.task'      search_count
'project.task.recurrence'      _cron_create_recurring_tasks
'project.task'      search_count
'project.task'      search_count
'project.task.recurrence'      _cron_create_recurring_tasks
'project.task'      search_count
'project.task.recurrence'      _cron_create_recurring_tasks
'project.task'      search_count
'project.task.recurrence'      _cron_create_recurring_tasks
'project.task'      search_count
'project.task'      search
'project.task.recurrence'      _get_recurring_fields
'project.task'      
'project.task'      search_count
'project.task.recurrence'      _cron_create_recurring_tasks
'project.task'      search_count
'project.task'      search_count
'project.task.recurrence'      _cron_create_recurring_tasks
'project.task'      search_count
'project.task.recurrence'      _cron_create_recurring_tasks
'project.task'      search_count
'project.task.recurrence'      _cron_create_recurring_tasks
'project.task'      search_count
'project.task.recurrence'      _cron_create_recurring_tasks
'project.task'      search_count
'project.task.recurrence'      _cron_create_recurring_tasks
'project.task'      search_count
'project.task.recurrence'      _cron_create_recurring_tasks
'project.task'      search_count
'project.task'      search
'project.task.recurrence'      _get_recurring_fields
'project.task'      create
'project.task.recurrence'      _cron_create_recurring_tasks
'project.task.recurrence'      _cron_create_recurring_tasks
'project.task'      search([
'project.task'      
'project.task'      create
'project.task.recurrence'      _get_next_recurring_dates
'project.task.recurrence'      _get_next_recurring_dates
'project.task.recurrence'      _get_next_recurring_dates
'project.task.recurrence'      _get_next_recurring_dates
'project.task.recurrence'      _get_next_recurring_dates
'project.task.recurrence'      _get_next_recurring_dates
'project.task'      search
'project.task'      create
'project.task.recurrence'      _cron_create_recurring_tasks
'project.task'      search_count
'project.task.recurrence'      _cron_create_recurring_tasks
'project.task.recurrence'      _cron_create_recurring_tasks
'project.task.recurrence'      _cron_create_recurring_tasks
'project.task'      search
'project.task.recurrence'      _get_recurring_fields
'project.share.wizard'      create
'project.task'      with_context
'project.task'      with_context
'project.share.wizard'      create
'project.share.wizard'      create
'project.milestone'      with_context
'project.update'      with_context
'project.update'      with_context
'project.milestone'      with_context
'project.milestone'      with_context
'project.milestone'      with_context
'project.update'      _get_template_values
'project.milestone'      with_context
'project.milestone'      with_context
'project.milestone'      with_context
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
'account.analytic.line'      sudo().create
'hr.leave.type'      create
'hr.leave.type'      create
'hr.leave.type'      create
'hr.leave'      with_context
'hr.leave.allocation'      with_context
'account.journal'      search
"ir.actions.actions"      _for_xml_id
'purchase.order.line'      read_group
"ir.actions.actions"      _for_xml_id
'decimal.precision'      precision_get
'res.currency'      _get_conversion_rate
'account.fiscal.position'      get_fiscal_position
'mail.template'      browse
'decimal.precision'      precision_get
'account.move'      with_context
'account.move'      with_context(default_move_type=move_type)._get_default_journal
'ir.actions.act_window'      _for_xml_id
'ir.model.data'      _xmlid_lookup
'mail.template'      browse
'mail.activity'      search
'account.tax'      _fix_tax_included_price_company
'account.tax'      _fix_tax_included_price_company
'account.tax'      _fix_tax_included_price_company
'res.partner'      browse
'res.partner'      concat(*partners_by_company.get
'res.partner'      concat(*partners) | partners_inter_company for com, partners in partners_by_company.items
'res.company'      browse
'product.product'      browse
'purchase.order'      browse
'res.currency'      _select_companies_rates
'res.currency'      _get_query_currency_table({'multi_company': True, 'date': {'date_to': fields.Date.today
'purchase.order'      with_user
'purchase.order'      with_user
'purchase.order'      with_user
'purchase.order'      
'purchase.order'      with_context
'ir.sequence'      search
'purchase.order'      
'purchase.order'      
'purchase.order'      
'mail.activity'      search
'product.packaging'      create
'product.packaging'      create
'purchase.order'      create
'uom.uom'      create
'product.product'      create
'product.product'      create
'purchase.order'      
'purchase.order'      with_context(tracking_disable=True).create
'purchase.order.line'      with_context
'purchase.order'      with_context(tracking_disable=True).create
'purchase.order.line'      with_context
'purchase.order'      with_context(tracking_disable=True).create
'purchase.order.line'      with_context
'purchase.order'      with_context(tracking_disable=True).create
'purchase.order.line'      with_context
'purchase.order'      with_context(tracking_disable=True).create
'account.move'      with_context
'purchase.order'      with_context(tracking_disable=True).create
'account.move'      with_context
'purchase.bill.union'      browse
'account.analytic.account'      create
'account.analytic.account'      create
'account.analytic.default'      create
'purchase.order'      with_context
'account.move.line'      search([
'purchase.order'      create
'account.move'      with_context
'purchase.report'      search
'purchase.report'      search
'product.product'      browse
'mrp.bom'      sudo()._bom_find
'uom.uom'      search([('category_id', '=', self.categ_kgm.id), 
'uom.uom'      search
'mrp.bom'      create
'mrp.bom'      create
'mrp.bom'      create
'mrp.bom'      create
'product.product'      
'stock.move'      
'res.partner'      create
'purchase.order'      
res['res_model']].with_context(res['context'      ).save().process
res['res_model']].with_context(res['context'      ).save().process
res['res_model']].with_context(res['context'      ).save().process
'stock.picking'      browse
wiz_act['res_model']].with_context(wiz_act['context'      ).save
'stock.picking'      browse
wiz_act['res_model']].with_context(wiz_act['context'      ).save
'res.partner'      create
'product.supplierinfo'      create
'product.product'      create
'product.product'      create
'stock.warehouse.orderpoint'      create
'stock.warehouse.orderpoint'      create
'mrp.bom'      create
'stock.picking'      
'purchase.order.line'      search
'purchase.order'      create
'ir.model.data'      _xmlid_to_res_id
'ir.model.data'      _xmlid_to_res_id
'purchase.requisition.type'      search
'purchase.requisition'      search
'ir.sequence'      next_by_code
'ir.sequence'      next_by_code
'product.supplierinfo'      search
'product.supplierinfo'      create
'stock.picking.type'      search
'stock.warehouse'      browse(self.ref
'procurement.group'      Procurement
'uom.uom'      browse(self.ref
'purchase.requisition.line'      search([('product_id', '=', self.product_13.id), 
'res.partner'      create
'res.partner'      create
'product.supplierinfo'      create
'product.product'      create
'stock.move'      create
'purchase.order'      search([
'purchase.requisition.type'      create
'purchase.requisition'      create
'stock.move'      create
'stock.move'      create
'purchase.order'      search([('partner_id', '=', vendor2.id), 
'res.partner'      create
'product.supplierinfo'      create
'product.product'      create
'product.product'      create
'purchase.requisition.type'      create
'purchase.requisition'      create
'purchase.requisition'      create
'stock.move'      create
'stock.move'      create
'purchase.order.line'      search([
'purchase.order.line'      search([
'purchase.order.line'      search
'product.product'      create
'res.partner'      create
'sale.order'      create
'purchase.requisition'      search([
'res.partner'      create
'purchase.order'      with_context
'purchase.order.line'      read_group
'stock.warehouse.orderpoint'      browse
'purchase.order'      browse
'product.product'      browse
'uom.uom'      browse
'purchase.order'      search
'stock.warehouse.orderpoint'      browse
'stock.warehouse.orderpoint'      browse
'stock.rule'      search([
"ir.actions.actions"      _for_xml_id
'purchase.order.line'      browse([order_line.id for order in order_exceptions.values
'stock.move'      concat(*rendering_context.keys
'stock.picking'      _log_activity_get_documents
'stock.picking'      _log_activity
'stock.picking.type'      search([('code', '=', 'incoming'), 
'stock.picking.type'      search([('code', '=', 'incoming'), 
"stock.location"      search
'stock.picking'      create
'decimal.precision'      precision_get
'stock.move'      create
'decimal.precision'      precision_get
'stock.rule'      search_read([
'ir.actions.act_window'      _for_xml_id
'purchase.order.line'      search([
'purchase.order.line'      search
'stock.rule'      search
'stock.move.line'      search
"ir.actions.actions"      _for_xml_id
'purchase.order'      sudo().search
'purchase.order'      with_company(company_id).with_user(SUPERUSER_ID).create
'purchase.order.line'      concat(*list
'purchase.order.line'      
'purchase.order.line'      _prepare_purchase_order_line_from_procurement
'purchase.order.line'      sudo().create
'procurement.group'      Procurement
'account.tax'      _fix_tax_included_price_company
'account.fiscal.position'      with_company(company_id).get_fiscal_position
'ir.config_parameter'      get_param
'purchase.order.line'      search
'product.product'      search_read
'procurement.group'      
'procurement.group'      Procurement
'purchase.order'      create
'account.move'      with_context
'stock.picking'      search([
'stock.picking'      search([
'stock.picking'      browse
'account.move.reversal'].with_context(active_model="account.move", active_ids=[invoice.id      .create
'account.move'      browse(refund_invoice_wiz.reverse_moves
'stock.picking'      search([
'stock.picking'      search([
"account.tax"      create
'stock.picking'      search([
'stock.picking'      search([
'res.partner'      create
'product.product'      create
'purchase.order'      create
res['res_model']].with_context(res['context'      ).save().process
'purchase.order'      create
'stock.immediate.transfer'].with_context(res['context'      ).save().process
'stock.picking'      create
'stock.immediate.transfer'].with_context(res['context'      ).save().process
'purchase.order'      create
res['res_model']].with_context(res['context'      ).save().process
'res.partner'      create
'product.product'      create
'product.product'      create
'purchase.order'      create
'purchase.order'      with_user(self.user_purchase_user).create
'res.partner'      create
'res.partner'      create
'product.supplierinfo'      create
'product.product'      create
'stock.move'      create
'purchase.order'      search([
'stock.quant'      _get_available_quantity
'purchase.order'      create
'ir.config_parameter'      sudo().set_param
'res.partner'      create
'product.supplierinfo'      create
'product.product'      create
'stock.picking'      create
'stock.move'      create
'purchase.order'      search([
'stock.move'      create
'purchase.order'      search([('partner_id', '=', partner.id), 
'purchase.order'      create
'purchase.order'      create
'ir.config_parameter'      sudo().set_param
'res.partner'      create
'product.supplierinfo'      create
'product.product'      create
'stock.picking'      create
'stock.move'      create
'purchase.order'      search([
'stock.warehouse'      search
'purchase.order'      
'stock.picking'      search([
'purchase.order'      create
backorder_wizard_dict['res_model']].with_context(backorder_wizard_dict['context'      ).save
'stock.return.picking'      with_context
'stock.picking'      browse
'procurement.group'      Procurement
'res.partner'      create
'product.supplierinfo'      create
'res.partner'      create
'stock.location.route'      browse(self.ref('stock.route_warehouse0_mto')).action_unarchive
'product.product'      create
'procurement.group'      create
'stock.move'      search([
'purchase.order'      search([
'purchase.order'      search([
'purchase.order'      search([
'res.partner'      create
'product.product'      create
'purchase.order'      create
res['res_model']].with_context(res['context'      ).save().process
'purchase.order'      create
res['res_model']].with_context(res['context'      ).save().process
'stock.picking'      create
res['res_model']].with_context(res['context'      ).save().process
'stock.picking'      create
res['res_model']].with_context(res['context'      ).save().process
'res.currency'      create
'purchase.order'      create
res['res_model']].with_context(res['context'      ).save().process
'stock.picking'      create
res['res_model']].with_context(res['context'      ).save().process
'stock.picking'      create
res['res_model']].with_context(res['context'      ).save().process
'product.product'      create
'stock.picking'      create
'stock.picking'      create
'purchase.order'      create
res['res_model']].with_context(res['context'      ).save().process
'purchase.order'      create
res['res_model']].with_context(res['context'      ).save().process
"account.tax"      create
'product.product'      create
'purchase.order'      create
res['res_model']].with_context(res['context'      ).save().process
'res.partner'      create
'product.product'      create
'purchase.order'      create
'purchase.order'      create
res['res_model']].with_context(res['context'      ).save().process
res['res_model']].with_context(res['context'      ).save().process
'stock.picking'      browse
'res.partner'      create
'procurement.group'      create
'product.supplierinfo'      create
'product.product'      create
'stock.picking'      create
'stock.move'      create
'purchase.order'      search([
'purchase.order'      search([
'purchase.order'      search([
'stock.picking'      search([
'purchase.order'      search([
'stock.picking'      search([
'purchase.order'      search([
'stock.picking'      search([
'purchase.order'      search([
'stock.picking'      search([
'res.partner'      create
'product.supplierinfo'      create
'product.product'      create
'stock.picking'      create
'stock.move'      create
'purchase.order'      search([
'purchase.order.line'      search([
'purchase.order.line'      search([
'purchase.order.line'      search([
'procurement.group'      Procurement
'purchase.order.line'      search([
'stock.picking'      search([('move_lines.product_id', 'in', (self.product_1.id, self.product_2.id)), ('picking_type_id', '=', self.warehouse_1.int_type_id.id), ('location_id', '=', self.warehouse_1.wh_input_stock_loc_id.id), 
'stock.picking'      search([('picking_type_id', '=', self.warehouse_1.int_type_id.id), ('location_id', '=', self.warehouse_1.wh_qc_stock_loc_id.id), 
'product.product'      create
'stock.move'      create
'purchase.order.line'      search
'stock.move'      create
'purchase.order.line'      search
'procurement.group'      Procurement
'purchase.order.line'      search([
'procurement.group'      Procurement
'procurement.group'      run_scheduler
'procurement.group'      Procurement
'res.company'      create
'res.partner'      create
'res.partner'      create
'product.product'      create
'stock.warehouse.orderpoint'      
'stock.warehouse.orderpoint'      with_company
'stock.warehouse'      search
'stock.move'      create
'procurement.group'      run_scheduler
'purchase.order.line'      search([
'procurement.group'      run_scheduler
'purchase.order.line'      search([
'stock.warehouse.orderpoint'].search([      .unlink
'stock.warehouse.orderpoint'      
'product.supplierinfo'].search([('product_tmpl_id', '=', self.product_1.product_tmpl_id.id)      .unlink
'product.supplierinfo'      create
'procurement.group'      run_scheduler
'purchase.order'      search([
'purchase.order'      create
'account.move'      with_context
'purchase.order'      create
'account.move'      with_context
'stock.picking'      browse
'account.move'      with_context
'stock.picking.type'].search([('code', '=', 'outgoing')      .write
'purchase.order'      create
wiz_act['res_model']].with_context(wiz_act['context'      ).save
'stock.return.picking'      with_context
'stock.picking'      browse
wiz_act['res_model']].with_context(wiz_act['context'      ).save
'purchase.order'      create
'mail.activity'      search
wiz_act['res_model']].with_context(wiz_act['context'      ).save
'res.company'      create
'res.currency'      with_context(active_test=False).search
'purchase.order'      create(dict
'res.company'      create
'res.currency'      with_context(active_test=False).search
'purchase.order'      create
'stock.backorder.confirmation'].with_context(res_dict['context'      .process_cancel_backorder
'purchase.order'      create
'stock.backorder.confirmation'].with_context(res_dict['context'      .process_cancel_backorder
'uom.uom'      create
'purchase.order'      create
'product.product'      create
'purchase.order'      create
backorder_wizard_dict['res_model']].with_context(backorder_wizard_dict['context'      ).save
backorder_wizard_dict['res_model']].with_context(backorder_wizard_dict['context'      ).save
backorder_wizard_dict['res_model']].with_context(backorder_wizard_dict['context'      ).save
'purchase.order'      
res_dict['res_model']].with_context(res_dict['context'      ).save
'purchase.order'      
res_dict['res_model']].with_context(res_dict['context'      ).save
'purchase.order'      
'stock.warehouse'      search([
'stock.warehouse'      create
'stock.warehouse.orderpoint'      
'stock.picking'      
'procurement.group'      run_scheduler
'purchase.order'      search([
'stock.warehouse'      search([
'stock.location'      create
'stock.location'      create
'stock.warehouse.orderpoint'      
'stock.warehouse.orderpoint'      
'stock.picking'      
'procurement.group'      run_scheduler
'purchase.order'      search([
'stock.warehouse'      search([
'stock.location'      create
'stock.location.route'      create
'res.partner'      create
'product.supplierinfo'      create
'product.product'      create
'stock.warehouse.orderpoint'      with_user
'stock.move'      create
'purchase.order.line'      search([
'res.partner'      create
'product.product'      
'product.product'      
'stock.picking'      
'stock.warehouse.orderpoint'      _get_orderpoint_action
'stock.warehouse.orderpoint'      _get_orderpoint_action
'stock.warehouse.orderpoint'      search
'stock.warehouse.orderpoint'      search
'purchase.order'      search([
'stock.warehouse.orderpoint'      _get_orderpoint_action
'stock.warehouse.orderpoint'      search
'stock.warehouse.orderpoint'      search
'stock.picking'      
'stock.warehouse.orderpoint'      flush
'stock.warehouse.orderpoint'      _get_orderpoint_action
'stock.warehouse.orderpoint'      search
'stock.warehouse.orderpoint'      search
'res.partner'      create
'stock.warehouse'      search
'product.product'      
'product.product'      
'stock.picking'      
'stock.warehouse.orderpoint'      _get_orderpoint_action
'stock.warehouse.orderpoint'      search
'stock.warehouse.orderpoint'      search
'purchase.order'      search([
'stock.warehouse.orderpoint'      flush
'stock.warehouse.orderpoint'      _get_orderpoint_action
'stock.warehouse.orderpoint'      search
'stock.warehouse.orderpoint'      search
'stock.picking'      
'stock.warehouse.orderpoint'      flush
'stock.warehouse.orderpoint'      _get_orderpoint_action
'stock.warehouse.orderpoint'      search
'stock.warehouse.orderpoint'      search
'stock.warehouse'      search
"product.product"      create
"res.partner"      create
"res.partner"      create
"product.supplierinfo"      create
"product.supplierinfo"      create
"purchase.order.line"      search
"procurement.group"      run
"procurement.group"      Procurement
"purchase.order.line"      search
"purchase.order.line"      search
"procurement.group"      run
"procurement.group"      Procurement
"purchase.order.line"      search
'stock.warehouse'      create
'stock.rule'      search
"stock.location.route"      create
"product.product"      create
'res.lang'      _activate_lang
'ir.translation'      _set_ids
'ir.translation'      _set_ids
"res.partner"      create
"product.supplierinfo"      create
"res.partner"      create
"procurement.group"      create
"procurement.group"      Procurement
"procurement.group"      run
"purchase.order.line"      search
'res.partner'      create(dict
'product.supplierinfo'      create
'product.product'      create
'stock.warehouse'      search([
'product.replenish'      create
'purchase.order'      search
'product.product'      create
'res.partner'      create
'product.supplierinfo'      create
'product.supplierinfo'      create
'product.replenish'      create
'purchase.order'      search
'product.product'      create
'res.partner'      create
'res.partner'      create
'product.supplierinfo'      create
'product.supplierinfo'      create
'product.supplierinfo'      create
'product.replenish'      create
'purchase.order'      search
'product.product'      create
'res.partner'      create
'res.partner'      create
'product.supplierinfo'      create
'product.supplierinfo'      create
'product.replenish'      create
'purchase.order'      search
'product.product'      create
'res.partner'      create
'product.supplierinfo'      create
'product.supplierinfo'      create
'product.supplierinfo'      create
'product.replenish'      create
'purchase.order'      search
'res.config.settings'      write
'stock.warehouse'      search([
'stock.location'      create
'stock.location'      create
'stock.picking.type'      create
'stock.picking.type'      create
'stock.location.route'      create
'res.partner'      create
'product.product'      create
'account.journal'      create
'purchase.order'      create
(res_dict.get('res_model'))].with_context(res_dict['context'      ).save
'purchase.order'      create
(res_dict.get('res_model'))].with_context(res_dict['context'      ).save
'purchase.order'      create
'purchase.order'      create
(res_dict.get('res_model'))      browse(res_dict.get('res_id')).with_context
'res.currency.rate'].search([      .unlink
'purchase.order'      create
'res.currency.rate'      create
(res_dict.get('res_model'))].with_context(res_dict['context'      ).save
'purchase.order'      create
'account.move'      with_context
'purchase.order'      create
'account.move'      with_context
'stock.picking'      browse
'account.move'      with_context
'account.move.line'      search([
'purchase.order'      
'account.move'      with_context
'account.move.line'      search([
'account.move.line'      search([
'account.tax'      create
'purchase.order'      create
'res.currency.rate'].search([      .unlink
'res.currency.rate'      create
'res.currency.rate'      create
'purchase.order'      create
'account.move'      with_context(default_move_type='in_invoice').create
'res.currency.rate'].search([      .unlink
'res.currency.rate'      create
'res.currency.rate'      create
'res.currency.rate'      create
'purchase.order'      create
'account.move'      with_context(default_move_type='in_invoice').create
'res.currency.rate'].search([      .unlink
'res.currency.rate'      create
'res.currency.rate'      create
'res.currency.rate'      create
'res.currency.rate'      create
'purchase.order'      create
'account.move'      with_context(default_move_type='in_invoice').create
'res.currency.rate'].search([      .unlink
'res.currency.rate'      create
'res.currency.rate'      create
'res.currency.rate'      create
'res.currency.rate'      create
'res.currency.rate'      create
'res.currency.rate'      create
'purchase.order'      create
'account.move'      with_context(default_move_type='in_invoice').create
'stock.picking'      search([
'account.move'      with_context(default_move_type='in_invoice').create
'purchase.order'      
'account.move'      with_context
'account.move.line'      search([
'account.move.line'      search([
'purchase.order'      
'account.move'      with_context
'account.move.line'      search([
'account.move.line'      search([
'purchase.order'      
'account.move'      with_context
'account.move.line'      search([
'account.move.line'      search([
'rating.rating'      sudo().create
'ir.model'      _get_id
'rating.rating'      read_group
'rating.rating'      search([('res_model', '=', self._name), ('res_id', '=', record.id), 
'rating.rating'      read_group
'rating.rating'      _fields['res_name']
'rating.rating'].sudo().search([('res_model', '=', self._name), ('res_id', 'in', record_ids)      .unlink
'rating.rating'      sudo().create
'ir.model'      _get_id
'ir.model.data'      _xmlid_to_res_id
'rating.rating'      search([
'rating.rating'      search([('res_model', '=', self._name), 
'rating.rating'      read_group
'product.pricelist'      search([
'product.pricelist'      search
'stock.warehouse'      search([
'ir.sequence'      next_by_code
'decimal.precision'      precision_get
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'account.fiscal.position'      get_fiscal_position
'account.move'      with_company(company_id).with_context(default_company_id=company_id, default_move_type='out_invoice').create
'decimal.precision'      precision_get
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.warehouse'      search
'stock.location'      search([('usage', '=', 'production'), 
'stock.location'      search([('usage', '=', 'production'), 
'stock.location'      search([('scrap_location', '=', True), 
'account.fiscal.position'      get_fiscal_position
'account.fiscal.position'      get_fiscal_position
'repair.order'      create
'repair.line'      create
'repair.fee'      create
'repair.order.make_invoice'      create
'res.company'      create
"account.tax"      create
"account.tax"      create
'product.template'      create
'repair.order'      
'repair.order'      browse
'res.company'      browse
'res.company'      browse
'resource.calendar.attendance'      get_week_type
'resource.resource'      if not resources else resources
'resource.resource'      
'resource.calendar.attendance'      search
'resource.calendar.attendance'      get_week_type
'resource.resource'      if not resources else resources
'resource.resource'      
'resource.calendar.leaves'      search
'resource.resource'      if not resources else resources
'resource.resource'      
'res.company'      browse
'res.company'      browse
'res.users'      browse(values.get
'resource.calendar'      browse(values.get
'resource.resource'      
'resource.calendar'      browse(values.get
'resource.resource'      create
'resource.resource'      
'resource.resource'      
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.attendance'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.attendance'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'resource.calendar.leaves'      create
'sale.order'      _where_calc
'sale.order'      _apply_ir_rules
'sale.order'      read_group
'sale.order'      read_group
"ir.actions.actions"      _for_xml_id
'product.product'      sudo().with_context(active_test=False).search_read([
'sale.order.line'      sudo().search_read([('product_id', 'in', product_ids), 
"ir.actions.actions"      _for_xml_id
'product.template.attribute.value'      \
"ir.actions.actions"      _for_xml_id
'sale.order'      search
'sale.order'      create
'product.product'      search
'product.product'      create
'sale.order.line'      create
'mail.compose.message'      with_context
"ir.actions.actions"      _for_xml_id
'ir.config_parameter'      set_param
'res.company'      default_get
'res.company'      default_get
'ir.config_parameter'      sudo().get_param
'sale.order.line'      read_group
'ir.config_parameter'      sudo().get_param
'crm.team'      _get_default_team_id
'res.currency'      _get_conversion_rate
'account.fiscal.position'      with_company(self.company_id).get_fiscal_position
'ir.config_parameter'      sudo().get_param
'crm.team'      with_context
'crm.team'      with_context
'account.tax'      _fix_tax_included_price_company
'ir.sequence'      next_by_code('sale.order', sequence_date=seq_date) or _
'res.partner'      browse(vals.get
'account.move'      with_context(default_move_type='out_invoice')._get_default_journal
"ir.actions.actions"      _for_xml_id
'account.move'].default_get(['invoice_payment_term_id'      .get
'decimal.precision'      precision_get
'sale.order.line'      browse
'account.move'      check_access_rights
'account.move'      sudo().with_context(default_move_type='out_invoice').create
'ir.config_parameter'      sudo().get_param
'mail.template'      search([
'ir.model.data'      _xmlid_to_res_id
'ir.model.data'      _xmlid_to_res_id
'mail.template'      browse
'account.analytic.account'      create(order._prepare_analytic_account_data
'decimal.precision'      precision_get
'decimal.precision'      precision_get
'ir.model.fields'      search
'account.analytic.line'      read_group
'uom.uom'      browse
'account.tax'      _fix_tax_included_price_company(self._get_display_price
'account.tax'      _fix_tax_included_price_company(self._get_display_price
'sale.order'      read_group
'account.move.line'      flush
'account.move'      flush
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
'account.move'      search([
"product.attribute"      search
recordset._name      concat(*x_by_company.get
recordset._name      concat(*x_records) | x_inter_company).ids for com, x_records in x_by_company.items
"res.partner"      browse
"product.pricelist"      browse
"res.users"      browse
'sale.order'      browse(random.sample(order_ids, int(len
"product.product"      search
'product.product'      browse(product_ids).read
'product.product'      browse
'sale.order'      browse
'sale.order'      with_context
'crm.team'      with_context(tracking_disable=True).create
'crm.team'      search
'crm.team'      search
'sale.order'].with_user(self.company_data['default_user_salesman_2'      .create
'sale.order'].with_user(self.company_data['default_user_portal'      .create
'sale.order'].with_user(self.company_data['default_user_employee'      .create
'sale.order'      with_context
'product.product'      create
'product.pricelist'      create
'sale.order'      with_context
'product.product'      create
'uom.uom'      create
'product.pricelist'      create
'sale.order'      create
'sale.order.line'      new
'product.product'      create
'product.pricelist'      create
'product.pricelist'      create
'sale.order'      create
'sale.order.line'      new
'product.product'      create
'res.currency'      create
'res.currency.rate'      create
'res.currency.rate'      search
'uom.uom'      create
'product.pricelist'      create
'sale.order'      create
'sale.order.line'      new
'res.partner'      create
'res.partner'      create
'sale.order'      create
'product.product'      create
'product.product'      create
'sale.order.line'      create
'sale.order.line'      _fields.values
'sale.order'].with_user(self.company_data['default_user_salesman'      .create
'mail.template'      browse(email_ctx.get('default_template_id')).copy
'ir.sequence'      search
'product.product'      create
'sale.order'      create
'account.move'      with_context(default_move_type='in_invoice').create
'account.tax'      create
'account.tax'      create
'product.template'      create
'sale.order'].with_user(self.company_data['default_user_salesman'      .create
'res.partner'      create
'product.pricelist'      create({'name': 'EUR', 'currency_id': self.env.ref
'product.pricelist'      create({'name': 'USD', 'currency_id': self.env.ref
'sale.advance.payment.inv'      with_context(active_ids=orders.ids, open_invoices=True).create
'sale.order.line'      create
"product.product"      search
"res.company"      create
"res.users"      create
'res.currency.rate'].search([      .unlink
'res.currency.rate'      create
"product.pricelist"      create
'res.partner'      create
'sale.order'      create
'res.partner'      create
'sale.order'      create
'sale.order'      create
'sale.order'      create
'res.partner'      create
'product.template'      create
'product.packaging'      create
'product.packaging'      create
'sale.order'      create
'sale.order'      create
'ir.config_parameter'      sudo().set_param
'ir.config_parameter'      sudo().set_param
'product.product'      invalidate_cache
'product.product'      invalidate_cache
'sale.order'      with_context
'sale.order'      create
'ir.config_parameter'      sudo().get_param
'product.product'      browse(int(product_id)).exists
'sale.order'      browse(self._context.get
'sale.order'      browse(self._context.get
'account.move'      sudo().create(invoice_vals).with_user
'sale.order'      browse(self._context.get
'product.product'      create
'ir.config_parameter'      sudo().set_param
'sale.order.line'      search_count([
'sale.order.line'].search([('product_id', '=', self.discount_line_product_id.id)      .mapped
'coupon.program'].search([('reward_type', '=', 'product')      .mapped
'coupon.program'].search([('reward_type', '=', 'product'), ('reward_product_id', 'in', program.discount_specific_product_ids.ids)      .mapped
'coupon.coupon'      search
'coupon.coupon'      sudo().create
'coupon.program'      with_context
'coupon.program'      with_context
'sale.order.line'      browse
'coupon.program'      search([
'coupon.program'      sudo
'res.company'      create(dict
'coupon.program'      create
"sale.order"      create
'sale.order'      browse(self.env.context.get
'coupon.program'      search([
'coupon.coupon'      search([
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
'res.partner'      
'res.partner'      search([
'res.partner'      
'crm.quotation.partner'      with_context
'res.partner'      
'res.partner'      search([
'crm.quotation.partner'      with_context
'res.partner'      
'res.partner'      search([
'res.partner'      
'res.partner'      search([
'res.partner'      
'crm.quotation.partner'      with_context
'crm.quotation.partner'      with_context
'res.partner'      
'res.partner'      search([
'res.partner'      
'res.partner'      
'hr.expense'      read_group([
'sale.order'      create
'hr.expense.sheet'      create
'hr.expense'      create
'product.product'      create
'hr.expense.sheet'      create
'hr.expense'      create
"sale.order.line"      create
'gift.card'      create
'sale.report'      read_group
"res.company"      browse
'res.users'      sudo().browse
'sale.order.line'      new
'sale.order.line'      create
'res.company'      sudo().search([
'res.lang'      search([
'ir.translation'      search([
'ir.translation'      create
"sale.order.line"      flush
'sale.order.line'      read_group
'product.product'      create
'res.partner'      create
'res.partner'      create
'stock.warehouse'      
'product.product'      
'product.product'      
'mrp.bom'      
'sale.order'      
'res.partner'      create
'mrp.production'      search
'product.product'      
'mrp.bom'      
'mrp.production'      search([
'mrp.production'      search([
'mail.activity'      search([
'product.product'      
'stock.move'      
'mrp.bom'       as f:
'mrp.bom'       as f:
'mrp.bom'       as f:
'sale.order'      
'res.partner'      create
'procurement.group'      run_scheduler
'mrp.production'      search([
'product.product'      create
'product.product'      create
'product.product'      create
'mrp.bom'      create
'res.partner'      create
'sale.order'      
wiz_act['res_model']].with_context(wiz_act['context'      ).save
'res.partner'      create
'account.account.type'      create
'account.account'      create
'account.account'      create
'account.account'      create
'account.account'      create
'account.journal'      create
'stock.quant'      sudo().create
'stock.quant'      sudo().create
'mrp.bom'      create
'sale.order'      create
wiz_act['res_model']].with_context(wiz_act['context'      ).save
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'res.partner'      create
'sale.order'      
'mrp.bom'      _bom_find
wiz_act['res_model']].with_context(wiz_act['context'      ).save().process
wiz_act['res_model']].with_context(wiz_act['context'      ).save().process
wiz_act['res_model']].with_context(wiz_act['context'      ).save().process
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'res.partner'      create
'sale.order'      
wiz_act['res_model']].with_context(wiz_act['context'      ).save().process
wiz_act['res_model']].with_context(wiz_act['context'      ).save().process
wiz_act['res_model']].with_context(wiz_act['context'      ).save().process
'stock.picking'      browse
wiz_act['res_model']].with_context(wiz_act['context'      ).save
'stock.picking'      browse
wiz_act['res_model']].with_context(wiz_act['context'      ).save().process
'stock.warehouse'      create
'stock.warehouse'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'sale.order'      
'res.partner'      create
'mrp.bom'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'res.partner'      create
'sale.order'      
res['res_model']].with_context(res['context'      ).save().process
'mrp.bom'      create
'mrp.bom'      create
'stock.warehouse'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'sale.order'      
'res.partner'      create
'stock.location'      create
'stock.location'      create
'mrp.bom'       as bom:
'stock.location.route'      create
'stock.location.route'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'sale.order'      
'res.partner'      create
'mrp.bom'       as bom:
'stock.warehouse'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'sale.order'      
'res.partner'      create
'product.product'      create
'product.product'      create
'mrp.bom'      create
'sale.order'      
'res.partner'      create
'mrp.production'      search([
'product.product'      create
'product.product'      create
'mrp.bom'      create
'sale.order'      
'res.partner'      create
'mrp.production'      search([
'mrp.production'      search([
'product.product'      create
'product.product'      create
'mrp.bom'      create
'sale.order'      
'res.partner'      create
'mrp.production'      search([
'mrp.production'      search([
'res.partner'      create
'account.account.type'      create
'account.account'      create
'account.account'      create
'account.account'      create
'account.account'      create
'account.journal'      create
'product.attribute'      create
'product.attribute.value'      create
'product.attribute.value'      create
'product.template'      create
'product.product'      create
'stock.quant'      sudo().create
'mrp.bom'      create
'mrp.bom.line'      create
'sale.order'      create
wiz_act['res_model']].with_context(wiz_act['context'      ).save
'product.product'      create
'product.product'      create
'product.product'      create
'mrp.bom'      create
'mrp.bom'      create
'sale.order'      
'stock.return.picking'      with_context
'stock.picking'      browse
'stock.quant'      _update_available_quantity
'mrp.bom'      create
'mrp.bom'      create
'sale.order'      
'res.partner'      create
wiz_act['res_model']].with_context(wiz_act['context'      ).save
'product.product'      create
'account.account'      create
'account.account'      create
'account.account'      create
'account.account'      create
'account.account'      create
'account.journal'      create
'account.account'      create
'account.account'      create
'res.partner'      create
'account.journal'      create
'mrp.bom'      
'mrp.bom'      
'sale.order'      create
'product.product'      create
'product.product'      create
'product.category'      create
'product.attribute'      create
'product.attribute.value'      create
'product.attribute.value'      create
'product.product'      create
'mrp.bom'      create
'mrp.bom'      create
'res.partner'      create
'sale.order'      create
'sale.order.line'      create
'res.partner'      create
'product.category'      create
'mrp.bom'      create
'mrp.bom.line'      create
'mrp.bom.line'      create
'sale.order'      create
'mrp.bom'      
'res.partner'      create
'sale.order'      create
'mrp.bom'       as bom:
'sale.order'      
'mrp.production'      search([('product_id', '=', self.product_1.id), 
'sale.order'      
'procurement.group'      run_scheduler
'mrp.production'      search([
'product.category'      
'product.template'      fields_get
'product.template'      
'product.product'      
'mrp.bom'       as bom:
'sale.order'      
'res.partner'      create
'mrp.production'      search([
'ir.model.data'      _xmlid_to_res_id
'stock.warehouse'      create
'product.product'      
'product.product'      
'product.product'      
'product.product'      
'mrp.bom'      
'mrp.bom'      
'sale.order'      
'res.partner'      create
'product.pricelist'      create
'product.attribute'      create
'product.attribute.value'      create
'product.template.attribute.line'      create
'product.attribute'      create
'product.attribute.value'      create
'product.template.attribute.line'      create
'account.tax'      create
'product.product'      create
'project.task'      search(['&', ('display_project_id', '!=', 'False'), '|', ('sale_line_id', 'in', order.order_line.ids), 
'ir.actions.actions'      _get_eval_context
"ir.actions.actions"      _for_xml_id
'project.project'      create
'project.task.type'      create({'name': _
'project.task'      sudo().create
'project.task'      read_group
'project.project'      read_group
'account.analytic.tag'      search
'purchase.order.line'      
'purchase.order.line'      search([('sale_line_id', 'in', self.mapped('order_line').ids), 
'sale.order.line'      
'purchase.order.line'      sudo().read_group([
'decimal.precision'      precision_get
'purchase.order.line'      search([
'sale.order.line'      
'purchase.order.line'      search([
'account.fiscal.position'      sudo().get_fiscal_position
'account.tax'      sudo()._fix_tax_included_price_company
'stock.warehouse'      search([
'stock.warehouse'      search([
'res.users'      browse(vals.get
'res.partner'      browse(values.get
'stock.picking'      _log_activity_get_documents
'ir.default'      get_model_defaults('sale.order').get
'stock.picking'      _log_activity_get_documents
"ir.actions.actions"      _for_xml_id
visited_moves[0]._name      concat
'sale.order.line'      browse([order_line.id for order in order_exceptions.values
'stock.picking'      _log_activity
'sale.order.line'      
'stock.warehouse'      _find_global_route('stock.route_warehouse0_mto', _
'decimal.precision'      precision_get
'procurement.group'      create(line._prepare_procurement_group_vals
'procurement.group'      Procurement
'procurement.group'      run
'decimal.precision'      precision_get
'sale.order.line'      create
'stock.move'      browse([move.id for move_orig in moves_information.values
'sale.order'      
'stock.move.line'      search([('lot_id', 'in', self.ids), 
"ir.actions.actions"      _for_xml_id
'sale.order.line'      search
'stock.quant'      with_context(inventory_mode=True).create
'sale.order'      create
'stock.move'      create
'stock.move'      create
wiz['res_model']].with_context(wiz['context'      ).save
wiz['res_model']].with_context(wiz['context'      ).save
wiz['res_model']].with_context(wiz['context'      ).save
wiz['res_model']].with_context(wiz['context'      ).save
wiz['res_model']].with_context(wiz['context'      ).save
'sale.order'      create
'stock.picking'      browse
'stock.picking'      create
'stock.move'      create
wiz['res_model']].with_context(wiz['context'      ).save
wiz['res_model']].with_context(wiz['context'      ).save
wiz['res_model']].with_context(wiz['context'      ).save
'stock.move'      create
'sale.order'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'sale.order'      create
'sale.order'      create
'stock.move'      create
'sale.order'      create
'stock.move'      create
'stock.move'      create
'stock.return.picking'      with_context
'stock.picking'      browse
'sale.order'      create
'stock.move'      create
'stock.return.picking'      with_context
'stock.picking'      browse
'uom.uom'      create
'sale.order'      create
'stock.move'      create
'sale.order'      create
'sale.order'      create
'account.move'      create
'stock.move'      create
'stock.picking'      search([
'stock.picking'      search([
'stock.picking'      browse
'account.move.reversal'].with_context(active_model='account.move', active_ids=[invoice.id      .create
'account.move'      browse(refund_invoice_wiz.reverse_moves
'stock.picking'      search([
'stock.picking'      search([
'sale.order'      create
'sale.order'      create
wiz_act['res_model']].with_context(wiz_act['context'      ).save
'sale.order.line'      _fields.values
'sale.order'      create
'product.product'      create
'sale.advance.payment.inv'].with_context(active_ids=[self.so.id      .create
'account.move'      browse
'sale.order'      create
'stock.picking'      browse
'sale.advance.payment.inv'].with_context(active_ids=[self.so.id      .create
'sale.order'      create
(res_dict.get('res_model'))].with_context(res_dict['context'      ).save
'sale.order'      create
(res_dict.get('res_model'))].with_context(res_dict['context'      ).save
(res_dict.get('res_model'))].with_context(res_dict['context'      ).save
'stock.quant'      _update_available_quantity
'sale.order'      create
(res_dict.get('res_model'))].with_context(res_dict['context'      ).save
'res.partner'      create
'sale.order'      create
'sale.order'      create
'ir.config_parameter'      sudo().set_param
'sale.order'      create
'stock.picking.type'].search([('code', '=', 'incoming')      .write
'sale.order'      create
wiz_act['res_model']].with_context(wiz_act['context'      ).save
'stock.return.picking'      with_context
'stock.picking'      browse
wiz_act['res_model']].with_context(wiz_act['context'      ).save
'stock.quant'      _update_available_quantity
'stock.quant'      _update_reserved_quantity
'stock.warehouse'      create
'stock.quant'      _update_available_quantity
'sale.order'      create
'stock.quant'      _update_available_quantity
'sale.order'      create
'stock.picking'      browse
'stock.picking'      browse
'product.product'      create
'product.product'      create
'sale.order'      create
wiz_act['res_model']].with_context(wiz_act['context'      ).save
'sale.order.cancel'      with_context({'order_id': so.id}).create
'stock.quant'      _update_available_quantity
'product.product'      create
'product.packaging'      create
'sale.order'      create
'sale.order'      create
'uom.uom'      create
'sale.order'      create
'stock.quant'      _update_available_quantity
'sale.order'      create
'sale.order'      create
'sale.order'      create
'sale.order'      create
'sale.order'      create
'sale.order.line'      create
'product.template'      create
res['res_model']].with_context(res['context'      ).save().process
res['res_model']].with_context(res['context'      ).save().process
'product.pricelist'      create
'res.company'      _get_main_company
'res.currency.rate'].search([      .unlink
'res.currency.rate'      create
'res.company'      create
'stock.picking.type'      search([('company_id', '=', new_company.id), 
'stock.location'      search([('company_id', '=', new_company.id), 
'stock.picking'      create
'stock.move'      create
(res_dict.get('res_model'))].with_context(res_dict['context'      ).save
'res.partner'      create
'sale.order'      create
'account.analytic.line'      read_group([
'account.analytic.line'      read_group([
'sale.order.line'      search
'account.move'      search
"ir.actions.actions"      _for_xml_id
'sale.order.line'      search([('order_id', 'in', sale_orders.ids), 
'project.profitability.report'      read_group
'sale.order.line'      search
'account.analytic.line'      sudo().read_group
'account.analytic.line'      browse
'account.analytic.line'      sudo().read_group
'decimal.precision'      precision_get
"ir.actions.actions"      _for_xml_id
self._name        # key: 
'project.create.sale.order'].with_context(allowed_company_ids=[self.company_data_2['company'].id, self.env.company.id], company_id=self.company_data_2['company'      id, active_id=self.project_non_billable.id, active_model='project.project').create
'sale.order'      browse
'sale.order.line'      create
'sale.order.line'      create
'account.analytic.line'      create
'sale.order.line'      create
'sale.order.line'      create
'account.analytic.line'      create
'sale.order.line'      create
'account.analytic.line'      create
'product.product'      create
'sale.order'      
'res.partner'      create
'account.analytic.line'      create
'sale.advance.payment.inv'      with_context(context).create
'account.move'      browse
'account.move.reversal'      with_context(wiz_context).create
'account.move'      browse(refund_invoice_wiz.reverse_moves
'sale.advance.payment.inv'      with_context(context).create
'project.profitability.report'].search([('project_id', '=', self.project_global.id)      .read
'project.profitability.report'      flush
'project.profitability.report'      read_group([
'project.profitability.report'      read_group([
'project.profitability.report'      read_group([
'project.profitability.report'      read_group([
'project.profitability.report'      flush
'project.profitability.report'      read_group([
'project.profitability.report'      read_group([
'project.profitability.report'      read_group([
'project.profitability.report'      read_group([
'project.profitability.report'      flush
'project.profitability.report'      read_group([
'project.profitability.report'      read_group([
'project.profitability.report'      read_group([
'project.profitability.report'      read_group([
'sale.advance.payment.inv'      with_context
'account.move'      browse
'project.profitability.report'      flush
'project.profitability.report'      read_group([
'project.profitability.report'      read_group([
'project.profitability.report'      read_group([
'project.profitability.report'      read_group([
'account.move'      browse
'project.profitability.report'      flush
'project.profitability.report'      read_group([
'project.profitability.report'      read_group([
'project.profitability.report'      read_group([
'project.profitability.report'      read_group([
'account.move'      browse
'project.profitability.report'      flush
'project.profitability.report'      read_group([
'project.profitability.report'      read_group([
'project.profitability.report'      read_group([
'project.profitability.report'      read_group([
'sale.order.line'      create
'project.profitability.report'      flush
'project.profitability.report'      read_group([
'project.profitability.report'      read_group([
'project.profitability.report'      read_group([
'sale.advance.payment.inv'      with_context(context).create
'account.move'      browse
'sale.advance.payment.inv'      with_context(context).create
'account.move'].search(expression.AND([action_invoice['domain'       [
'account.move.reversal'      with_context
'account.move'      browse
'project.profitability.report'      flush
'project.profitability.report'      read_group
'sale.order.line'      create
'account.analytic.line'      create
'project.profitability.report'      flush
'project.profitability.report'      read_group
'sale.advance.payment.inv'      with_context(mail_notrack=True).create
'account.move'].search(expression.AND([action_invoice['domain'       [
'project.profitability.report'      flush
'project.profitability.report'      read_group
'account.move.reversal'      with_context
'account.move'      browse
'project.profitability.report'      flush
'project.profitability.report'      read_group
'sale.order.line'      create
'project.profitability.report'      flush
'project.profitability.report'      read_group
'project.task'      create
'project.profitability.report'      flush
'project.profitability.report'      read_group
'project.profitability.report'      flush
'project.profitability.report'      read_group
'sale.advance.payment.inv'      with_context(mail_notrack=True).create
'account.move'      browse
'project.profitability.report'      flush
'project.profitability.report'      read_group
'sale.order.line'      create
'account.analytic.line'      create
'product.product'      create
'sale.order.line'      create
'sale.order.line'      create
'project.task'      search([
'account.analytic.line'      create
'account.analytic.line'      create
'sale.order.line'      create
'project.task'      search([
'account.analytic.line'      create
'account.analytic.line'      create
'sale.order.line'      create
'project.task'      search([
'account.analytic.line'      create
'account.analytic.line'      create
'account.analytic.line'      create
'sale.order.line'      create
'project.project'      create
'project.task.type'      with_context
'product.product'      create
'sale.order.line'      create
'sale.order.line'      create
'sale.order.line'      create
'sale.order.line'      create
'sale.order.line'      create
'sale.order.line'      create
'sale.order.line'      create
'sale.order.line'      create
'sale.order.line'      create
'sale.order.line'      create
'sale.order.line'      create
'project.task'      create
'project.task'      create
'sale.order.line'      create
'sale.order.line'      create
'project.task'      search([
'project.task'      create
'account.analytic.line'      create
'account.analytic.line'      new
'sale.order'      create
'sale.order.line'      create
'sale.order.line'      create
'project.task'      search([
'project.project'      search([
'account.analytic.line'      create
'account.analytic.line'      create
'account.analytic.line'      create
'account.analytic.line'      create
'sale.order.line'      create
'sale.order'      create
'sale.order.line'      create
'sale.order.line'      create
'project.task'      search([
'project.task'      search([
'project.project'      search([
'account.analytic.line'      create
'account.analytic.line'      create
'sale.order.line'      create
'account.analytic.line'      create
'account.analytic.line'      create
'sale.order'      create
'sale.order.line'      create
'sale.order.line'      create
'account.analytic.line'      create
'account.analytic.line'      create
'sale.order'      create
'sale.order.line'      create
'sale.order.line'      create
'sale.order.line'      create
'project.task'      search([
'project.task'      search([
'project.project'      search([
'account.analytic.line'      create
'account.analytic.line'      create
'account.analytic.line'      create
'account.analytic.line'      create
'sale.advance.payment.inv'      with_context(self.context).create
'sale.advance.payment.inv'      with_context(context).create
'sale.order'      create
'sale.order'      create
'sale.order.line'      create
'sale.order.line'      create
'project.task'      search([
'project.task'      search([
'account.analytic.line'      create
'account.analytic.line'      create
'project.project'      browse
'sale.order.line'      _timesheet_compute_delivered_quantity_domain
'account.analytic.line'      read_group(domain + [('task_id', 'in', line.project_id.tasks.ids), ('so_line', '=', False), 
'account.analytic.line'].search([('task_id', 'in', self.project_id.tasks.ids)      .mapped
'account.analytic.line'      search_count([('task_id', 'in', self.project_id.tasks.ids), 
"ir.actions.actions"      _for_xml_id
'sale.order'      create
'sale.order.line'      create
'account.analytic.line'      search(search_domain).write
'project.task'      search([
'project.sale.line.employee.map'      sudo
'sale.order.line'      create
'account.analytic.line'      search(search_domain).write
'res.users'      sudo().browse
'crm.team'      search
'crm.team'      browse(self.env.context.get
'crm.team'      search([
'ir.config_parameter'      sudo().get_param
'crm.team.member'      create
'crm.team.member'      search
'res.company'      search
'crm.team.member'      search
'crm.team.member'      search([
'crm.team.member'      search
'crm.team'      browse
'res.company'      search
'ir.config_parameter'      sudo().get_param
'crm.team.member'      search([
'crm.team'      
'crm.team'      
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo().get_param
'crm.team.member'      
'crm.team.member'      .filtered
'crm.team'      _get_default_team_id
'crm.team'      _get_default_team_id
'crm.team'      _get_default_team_id
'crm.team'      _get_default_team_id
'crm.team'      _get_default_team_id
'crm.team'      browse
'res.users'      
'res.users'      
'crm.team'      browse
'res.users'      
'res.users'      
'crm.team'      create
'crm.team.member'      create
'crm.team.member'      create
'crm.team.member'      search
'crm.team.member'      create
'crm.team.member'      create
'ir.config_parameter'      sudo().set_param
'ir.config_parameter'      sudo().set_param
'res.users'      
'res.users'      search([
'crm.team.member'      with_context(active_test=False).search([
'crm.team.member'      create
'res.users'      
'res.users'      search([
'crm.team.member'      create
'ir.config_parameter'      sudo().set_param
'crm.team'      browse
'crm.team'      browse
'res.users'      
'crm.team.member'      with_context(active_test=False).search([
'crm.team.member'      with_context(active_test=False).search([
'crm.team'      browse
'crm.team'      browse
'res.users'      
'crm.team.member'      with_context(active_test=False).search([
'crm.team.member'      with_context(active_test=False).search([
'crm.team'      browse
'crm.team'      browse
'crm.team.member'      
'crm.team.member'      
'res.users'      
'crm.team.member'      create
'crm.team.member'      search([('crm_team_id', '=', new_team.id), 
'crm.team.member'      search
'crm.team.member'      create
'res.partner'      
'res.partner'      _sms_get_number_fields
'res.partner'      
'sms.composer'      with_context(**composer_context).create
'sms.template'      _render_template
'ir.model.data'      _xmlid_to_res_id
'sms.sms'      sudo
'res.partner'      sudo().browse
'sms.sms'      sudo().create
'mail.notification'      sudo().search
'mail.notification'      sudo().create
'ir.model'      _get
'sms.sms'      sudo
'sms.sms'].sudo().search([('state', '=', 'outgoing')      .unlink
'sms.sms'      sudo().search
'mail.notification'      search
'res.partner'].concat(*list(p['partner'      for p in recipients_info if p.get
'mail.notification'      search
'res.partner'      
'sms.template'      browse
'sms.template'      create
'sms.template'      browse
'sms.template'      create
'sms.template'      with_user(admin).browse
'ir.config_parameter'      sudo().set_param
'sms.composer'      create
'ir.config_parameter'      sudo().set_param
'sms.composer'      create
'mail.notification'      browse(notif_ids).sudo().write
'mail.message'      browse(message_ids)._notify_message_notification_update
composer.res_model      search_count(literal_eval
'sms.api'      _send_sms_batch
'ir.model.data'      _xmlid_to_res_id
'sms.sms'      sudo().search([
'phone.blacklist'].sudo().search([      .mapped
'mail.render.mixin'      _render_template
'sms.sms'      sudo().create
'sms.template'      browse
'sms.template'      browse
'sms.template'      browse
self.res_model      search
self.res_model      browse(literal_eval
self.res_model      browse
'ir.model'      sudo().search
'res.lang'      get_installed
'sms.template'      browse
sms_template.model_id.model      search
preview.model_id.model      search_count
'snailmail.letter'      search
vals['model']].browse(vals['res_id'      .message_post
'res.partner'      browse
'mail.notification'      sudo().create
self.model      browse
'ir.actions.report'      _get_report_from_name
'ir.attachment'      create
'iap.account'      get
'ir.config_parameter'      sudo().get_param
'iap.account'      get_credits_url
'iap.account'      get_credits_url
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo().set_param
'ir.config_parameter'      sudo().set_param
'snailmail.letter'      search
'snailmail.letter'      search
'snailmail.letter'      create
'account.move'      with_context(default_move_type='out_invoice').create
'snailmail.letter'      _is_valid_address
'snailmail.letter'      create
'snailmail.confirm.invoice'      show_warning
'snailmail.confirm.invoice'      create({'model_name': _
'bus.bus'      _sendone
'stock.move'      with_context
'stock.quant'      with_context
'stock.move.line'      read_group
'stock.move.line'      read_group
model      search
'stock.location'      browse
'stock.quant'      read_group
'product.product'      search
'stock.warehouse.orderpoint'      read_group
'stock.location'      browse
'stock.location'      browse
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
'product.template'      _get_action_view_related_putaway_rules
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
'stock.warehouse'      search
'stock.quant'      action_view_inventory
"ir.actions.actions"      _for_xml_id
'product.product'      browse
'stock.location'      browse
'stock.production.lot'      browse
'stock.quant.package'      browse
'res.partner'      browse
'uom.uom'      browse
'stock.quant'      _gather
'procurement.group'      _get_rule
'stock.quant'      read_group
'stock.production.lot'      read_group
'stock.location.route'      search_count([
'stock.location.route'      search_count([
'stock.move.line'      read_group
'stock.move.line'      read_group
'product.product'      browse
'product.product'      browse
'product.product'      _search
'product.product'      _search
'product.product'      _search
'product.product'      _search
'stock.warehouse.orderpoint'      read_group([
'product.product'      browse
'stock.move.line'      sudo().search_count
'uom.uom'      browse
'stock.move'      search([('product_id', 'in', updated.with_context(active_test=False).mapped
'stock.move.line'      search
'stock.storage.category.capacity'      create
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
'product.product'      browse
'product.template'      browse
'stock.warehouse'      search([
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
'stock.move'      sudo().search_count
'stock.move.line'      sudo().search_count
'stock.quant'      sudo().search_count
'ir.config_parameter'      sudo
'stock.warehouse'      search([
'product.template'      browse(self.env.context.get
active_model      browse(self.env.context.get
'stock.location'      search_count
'stock.location'      create
'stock.location'      create
'ir.property'      _set_default
'stock.location'      create
'ir.property'      _set_default
'stock.location'      create
'ir.sequence'      create
'res.company'      search
'stock.warehouse'].with_context(active_test=False).search([      .mapped
'stock.warehouse'      create
'res.company'      search([
'res.company'      search
'ir.model.fields'      _get
'ir.property'].sudo().search([('fields_id', '=', inventory_loss_product_template_field.id), ('res_id', '=', False)      .mapped
'res.company'      search
'ir.model.fields'      _get
'ir.property'].sudo().search([('fields_id', '=', production_product_template_field.id), ('res_id', '=', False)      .mapped
'res.company'      search
'stock.location'].search([('scrap_location', '=', True)      .mapped
'res.company'      search
'ir.sequence'].search([('code', '=', 'stock.scrap')      .mapped
'stock.warehouse'      sudo().create
'stock.picking.type'      with_context(active_test=False).search
'stock.warehouse'      search([
'stock.move.line'      search_count
'stock.warehouse'      search([('active', '=', True), '|', ('lot_stock_id', '=', location.id), 
'stock.location'      with_context(active_test=False).search([
'stock.quant'      search(['&', '|', ('quantity', '!=', 0), ('reserved_quantity', '!=', 0), 
'stock.move.line'      read_group
'stock.quant'      read_group
'uom.uom'      browse
'stock.warehouse'      search
'stock.picking'      browse
'stock.move.line'      read_group
'uom.uom'      browse(line_uom_id)._compute_quantity
'stock.move.line'      create(dict(move._prepare_move_line_vals
'stock.move.line'      read_group([
'stock.quant'      _get_available_quantity
'product.product'].browse(product_ids).with_context(warehouse=key_context[0], to_date=key_context[1      .read
'stock.move.line'      read_group
'stock.picking'      browse
'stock.move.line'      _log_message
'ir.model.data'      _xmlid_to_res_id
'stock.production.lot'      _get_next_serial
"ir.actions.actions"      _for_xml_id
'stock.move'      browse
'stock.move.line'      browse
'stock.move'      browse
'stock.production.lot'      generate_lot_names
'procurement.group'      _search_rule
'stock.move'      concat
'stock.move'      
'stock.move'      concat
'stock.quant'      search([
'stock.production.lot'      search
'stock.picking'      search
'stock.move'      concat(*list
'procurement.group'      Procurement
'procurement.group'      run(procurement_requests, raise_user_error=not self.env.context.get
'decimal.precision'      precision_get
'decimal.precision'      precision_get
'stock.quant'      _update_reserved_quantity
'stock.move.line'      create([self._prepare_move_line_vals(quantity=1, reserved_quant=reserved_quant) for i in range(int
'stock.move.line'      create(self._prepare_move_line_vals
'stock.quant'      _get_available_quantity
'stock.move.line'      concat(*list(g)).mapped
'stock.move.line'      create
'decimal.precision'      precision_get
'stock.move'      create
'stock.move'      
'decimal.precision'      precision_get
'decimal.precision'      precision_get
'procurement.group'      _search_rule
'product.product'      browse(product_ids).with_context
'ir.config_parameter'      sudo().get_param
'stock.warehouse.orderpoint'      
'stock.warehouse.orderpoint'      search
'ir.config_parameter'      sudo().get_param
'stock.move'      search(expression.AND([static_domain, expression.OR
'stock.location'      _search([
'report.stock.report_product_product_replenishment'      _move_confirmed_domain
'stock.move'      search
'stock.move'      search
'stock.move'      search
'decimal.precision'      precision_get
'stock.production.lot'      search([
'stock.quant'      _check_serial_number
'stock.move'      browse
'stock.picking'      browse
'stock.move'      create
'decimal.precision'      precision_get
model      browse
'decimal.precision'      precision_get
'stock.quant'      _update_reserved_quantity
'stock.quant'      _update_reserved_quantity
'decimal.precision'      precision_get
'stock.production.lot'      search
'stock.move.line'      browse
'stock.move.line'      browse
'stock.move.line'      browse
'stock.move.line'        # key to all mls
'stock.production.lot'      create
'stock.production.lot'      browse(vals.get
'stock.location'      browse(vals.get
'stock.location'      browse(vals.get
'stock.quant.package'      browse(vals.get
'stock.quant.package'      browse(vals.get
'res.partner'      browse(vals.get
'stock.quant'      _get_available_quantity
'stock.move.line'      search(outdated_move_lines_domain).sorted
'stock.move.line'      browse(to_unlink_candidate_ids).unlink
'stock.warehouse'      search([
'ir.sequence'      next_by_code
'stock.warehouse'      search([
'stock.location'      search
'stock.warehouse'      search
'ir.actions.actions'      _for_xml_id
'stock.replenishment.info'      create
'stock.warehouse.orderpoint'      
'stock.rule'      read_group
"ir.actions.actions"      _for_xml_id
'stock.warehouse.orderpoint'      with_context(active_test=False).search
'report.stock.quantity'      read_group
'product.product'      browse(product).with_prefetch
'stock.warehouse'      browse(warehouse).with_prefetch
'product.product'      browse
'product.product'      browse(product_ids)._get_quantity_in_progress
'decimal.precision'      precision_get
'stock.warehouse.orderpoint'      read_group
'stock.warehouse'      search_read
'stock.warehouse.orderpoint'      with_context(active_test=False).read_group
'stock.warehouse.orderpoint'      browse
'stock.warehouse.orderpoint'      _get_orderpoint_values
'stock.warehouse'      browse
'stock.warehouse.orderpoint'      with_user(SUPERUSER_ID).create
'stock.warehouse.orderpoint'      with_context(active_test=False).search
'stock.warehouse.orderpoint'      browse
'procurement.group'      Procurement
'procurement.group'      with_context(from_orderpoint=True).run
'stock.warehouse.orderpoint'      concat
'mail.activity'      search
'stock.move.line'      create
'stock.move'      create
'stock.quant'      concat(*list(g)).mapped
'stock.move.line'      concat(*list(g)).mapped
'stock.warehouse'      browse
'ir.sequence'      sudo().create
'ir.sequence'      sudo().create
'stock.picking'      read_group
'stock.warehouse'      search([
'stock.warehouse'      search([
"ir.actions.actions"      _for_xml_id
'ir.config_parameter'      sudo().get_param
'stock.picking.type'      browse(self._context.get
'stock.picking.type'      browse(self._context.get
'stock.move'      read_group([('id', 'in', self.move_lines.ids), 
'stock.move'      search([
'stock.move'].browse(picking_move_lines[picking.id      ._get_relevant_state_among_moves
'stock.move'      search_count([('picking_id', '=', picking.id), 
'stock.move.line'      read_group
'stock.location'      _search([('id', 'child_of', picking_type_id.warehouse_id.view_location_id.id), 
'stock.move'      search
'stock.move'      search([
'stock.move'      search([
'stock.warehouse'      _get_partner_locations
'stock.warehouse'      _get_partner_locations
'stock.picking.type'      browse(vals.get('picking_type_id', defaults.get
'decimal.precision'      precision_get
'stock.quant'      concat(*list(g)).mapped
'stock.move.line'      concat(*list(g)).mapped
'stock.package_level'      create
'decimal.precision'      precision_get
'stock.location'      _search([('id', 'child_of', self.picking_type_id.warehouse_id.view_location_id.id), 
'stock.move'      search
"decimal.precision"      precision_get
'decimal.precision'      precision_get
list(orig_obj_changes.keys())[0]._name      concat(*list(orig_obj_changes.keys
visited_move._name      :
moves[0]._name      concat
'stock.move'      browse([move.id for move_orig in rendering_context.values
'stock.move'      concat(*rendering_context.keys
'stock.move'       moves)
'stock.package.destination'      create
'stock.quant.package'      create
'decimal.precision'      precision_get
'stock.package_level'      create
"ir.actions.actions"      _for_xml_id
'stock.scrap'      search([
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
'ir.sequence'      next_by_code
'stock.production.lot'      search
'stock.production.lot'      generate_lot_names
'product.product'      browse
'stock.picking'      browse
'stock.move.line'      search([('lot_id', 'in', self.ids), 
'stock.quant'      _get_quants_action
'stock.move.line'      search
'product.template'      browse(self.env.context.get
'product.product'      _get_domain_locations
'stock.quant'      _search
'product.product'      browse
'stock.location'      browse
'stock.production.lot'      browse(vals.get
'stock.quant.package'      browse(vals.get
'res.partner'      browse(vals.get
'stock.warehouse'      search([
"ir.actions.actions"      _for_xml_id
'stock.quant'      _check_serial_number
'stock.quant'      search
'stock.warehouse'      search
'stock.move'      with_context(inventory_mode=False).create
'stock.quant'].browse([quant['id'      for quant in self.env.cr.dictfetchall
'stock.warehouse'      search([
'stock.quant'      search([
'ir.sequence'      next_by_code('stock.quant.package') or _
'stock.move.line'      search
'stock.quant'      _quant_tasks
"ir.actions.actions"      _for_xml_id
'stock.move.line'      search(domain).mapped
'stock.quant'      search([
'product.product'      browse(product_ids).with_context
'stock.move'      with_user(SUPERUSER_ID).sudo().with_company(company_id).create
'ir.sequence'      next_by_code
'stock.rule'       '_run_%s' % action):
'stock.rule'       '_run_%s' % action)
'stock.warehouse.orderpoint'      search
'stock.move'      search
'stock.move'      browse(moves_chunk).sudo()._action_assign
'stock.quant'      _quant_tasks
'stock.location'      search([('scrap_location', '=', True), 
'stock.warehouse'      search([
'stock.warehouse'      search([
'stock.location'      search
'stock.quant'      _check_serial_number
'ir.sequence'      next_by_code('stock.scrap') or _
'stock.move'      create(scrap._prepare_move_values
'ir.actions.act_window'      _for_xml_id
'ir.actions.act_window'      _for_xml_id
'decimal.precision'      precision_get
'stock.quant'      _gather
'stock.warehouse'      with_context(active_test=False).search_count([
'stock.location'      create
'stock.location'      with_context(active_test=False).create
'stock.picking.type'      with_context(active_test=False).search([
'stock.move'      search
'stock.location'      with_context(active_test=False).search([
'stock.picking.type'      search
'stock.rule'      with_context(active_test=False).search([
'stock.warehouse'      sudo().read_group([
'res.partner'      browse(partner_id).with_company(company_id).write
'res.partner'      browse(partner_id).write
'ir.sequence'      sudo
'stock.picking.type'      search_read([
'stock.rule'      create
'stock.location.route'      search([
'stock.location.route'      create
'stock.rule'      search
'stock.rule'      create
'stock.location'      with_context(active_test=False).search
'stock.location'      create
'stock.location.route'      search([
'stock.location.route'      search([
'stock.rule'      search
"stock.location.route"      search([
'res.config.settings'      create
'res.config.settings'      create
'stock.warehouse'      browse
'stock.location'      concat
'product.removal'      search
'product.product'].browse(self.env.registry.populated_models['product.product'      .filtered
'stock.location'].browse(self.env.registry.populated_models['stock.location'      .filtered
'stock.location'      search
'stock.location'      browse
'stock.warehouse'      browse
'stock.location'      search([
'product.supplierinfo'      browse
'stock.warehouse'      browse
'product.product'      search
'stock.location'      search
'stock.warehouse'      browse
'stock.location'      search([('company_id', 'in', company_ids), 
'stock.location'      search([
'stock.location'      concat(*locations) for company_id, locations in locations_by_company.items
'stock.picking.type'      browse
'stock.location'      search([
'stock.location'      search([
'res.partner'      browse
'res.partner'      concat(*partners_by_company.get
'res.partner'      concat(*partners) | partners_inter_company for com, partners in partners_by_company.items
'stock.picking.type'      browse
'stock.picking.type'      browse
'stock.location'      concat(*locs) for com, locs in locations_by_company.items
'stock.picking.type'      browse
'stock.picking'      browse(random.sample(picking_ids, int(len
'stock.picking'      browse(random.sample(picking_ids, int(len
"stock.production.lot"      create
"stock.quant.package"      create
'stock.move.line'      create
'stock.picking'      browse
'product.product'].browse(self.env.registry.populated_models['product.product'      .filtered(lambda p: p.type in 
'product.product'      browse
'stock.picking'      browse
'stock.move'      read_group
'stock.move'      read_group
'decimal.precision'      precision_get
'stock.warehouse'      browse(self.env.context.get
'stock.warehouse'      browse(self.get_warehouses
'stock.location'      search_read
'product.template'      browse
'product.product'      browse
'stock.move'      search
'stock.move'      search
'stock.move'      search
'stock.warehouse'      search_read
'decimal.precision'      precision_get
'stock.picking'      search([('id', 'in', docids), ('picking_type_code', '!=', 'outgoing'), 
'stock.location'      _search([('id', 'child_of', warehouse.view_location_id.id), 
'stock.move'      search
'stock.move'      browse
'stock.move'      browse
'decimal.precision'      precision_get
'stock.move'      browse
'stock.move'      create
'stock.move'      browse
'stock.move'      browse(move_ids)._action_assign
'stock.move'      browse
'stock.move'      browse
'stock.move'      create
'stock.move.line'      search
model      browse
model      browse
'ir.qweb.field.float'      value_to_html
model      browse
line['model_name']      browse
'ir.config_parameter'      sudo().get_param
context.get('active_model')      browse(int(context.get
'ir.ui.view'      with_context(context)._render_template
'ir.actions.report'      _render_template
'ir.actions.report'      _render_template("web.minimal_layout", values=dict
'ir.actions.report'      _run_wkhtmltopdf
'stock.move'      create
'stock.assign.serial'      with_context
'stock.assign.serial'      with_context
'stock.assign.serial'      with_context
'stock.assign.serial'      with_context
'stock.assign.serial'      with_context
'stock.assign.serial'      with_context
'stock.assign.serial'      with_context
'stock.location'      create
'stock.assign.serial'      with_context
'stock.putaway.rule'      create
'stock.assign.serial'      with_context
'stock.picking.type'      search
'stock.picking.type'      search
'stock.quant'      _update_available_quantity
'stock.quant'      _gather
'stock.quant'      _get_available_quantity
'stock.quant'      search
'stock.quant'      _get_available_quantity
'stock.quant'      _gather(self.product1, self.stock_location).mapped
'stock.quant'      search
'stock.production.lot'      create
'stock.quant'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _gather
'stock.quant'      search
'stock.production.lot'      create
'stock.quant'      create
'stock.quant'      search
'stock.production.lot'      create
'stock.quant'      create
'stock.quant'      search
'stock.quant'      create
'stock.quant'      search
'stock.track.confirmation'      with_context
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _gather
'stock.quant'      _gather
'stock.quant'      _gather
'res.partner'      create
'stock.quant'      create
'stock.quant'      _gather
'stock.quant'      create
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.move'      create
'stock.quant'      _gather
'stock.quant'      _get_available_quantity
'stock.quant'      search
'stock.quant'      _gather
'stock.quant'      _get_available_quantity
'stock.quant'      search
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'res.partner'      create
'stock.quant'      create
'stock.quant'      create(dict
'stock.quant'      _gather
'stock.quant'      _get_available_quantity
'stock.quant'      _quant_tasks
'stock.quant'      search
'stock.quant'      create
'stock.quant'      _update_available_quantity
'stock.quant'      search
'stock.move'      create
'stock.inventory.conflict'      with_context
'stock.quant'      create
'stock.move'      create
'stock.quant'      create
'stock.quant'      create
'product.product'      create
'stock.quant'      create
'stock.location'      create
'stock.location'      create
'stock.location'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      search([
'stock.quant'      search([
'stock.quant'      search([
'stock.quant'      _gather
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _update_available_quantity
'stock.production.lot'      create
'stock.production.lot'      create
'stock.move.line'      create
'stock.move.line'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.production.lot'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _update_available_quantity
'stock.production.lot'      create
'stock.move.line'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.quant'      _update_available_quantity
'stock.production.lot'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.location'      create
'stock.putaway.rule'      create
'stock.move'      create
'stock.location'      create
'stock.putaway.rule'      create
'stock.move'      create
'stock.location'      create
'stock.location'      create
'stock.putaway.rule'      create
'stock.putaway.rule'      create
'stock.move'      create
'stock.location'      create
'stock.location'      create
'stock.putaway.rule'      create
'stock.putaway.rule'      create
'stock.move'      create
'stock.location'      create
'stock.putaway.rule'      create
'stock.move'      create
'product.category'      create
'stock.location'      create
'stock.location'      create
'stock.putaway.rule'      create
'stock.putaway.rule'      create
'stock.move'      create
'stock.storage.category'      create
'stock.location'      create
'stock.location'      create
'stock.putaway.rule'      create
'stock.move'      create
'stock.storage.category'      create
'stock.location'      create
'stock.putaway.rule'      create
'stock.move'      create
'stock.move'      create
'stock.storage.category'      create
'stock.location'      create
'stock.putaway.rule'      create
'stock.move'      create
'stock.move'      create
'stock.storage.category'      create
'stock.location'      create
'stock.putaway.rule'      create
'product.product'      create
'stock.quant'      create
'stock.move'      create
'stock.storage.category'      create
'stock.package.type'      create
'stock.location'      create
'stock.location'      create
'stock.putaway.rule'      create
'stock.quant.package'      create
'stock.move'      create
'stock.storage.category'      create
'stock.package.type'      create
'stock.location'      create
'stock.location'      create
'stock.putaway.rule'      create
'stock.quant.package'      create
'stock.move'      create
'stock.quant.package'      create
'stock.move'      create
'stock.storage.category'      create
'stock.package.type'      create
'stock.location'      create
'stock.location'      create
'stock.putaway.rule'      create
'stock.quant.package'      create
'stock.move'      create
'stock.quant.package'      create
'stock.move'      create
'stock.storage.category'      create
'stock.package.type'      create
'stock.location'      create
'stock.location'      create
'stock.putaway.rule'      create
'stock.quant.package'      create
'stock.move'      create
'stock.quant.package'      create
'product.product'      create
'stock.move'      create
'stock.storage.category'      create
'stock.location'      create
'stock.putaway.rule'      create
'stock.move'      create
'stock.move'      create
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.move'      create
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.move'      create
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant.package'      create
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      create
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      create
'stock.quant'      create
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'product.product'      create
'stock.production.lot'      create
'stock.quant'      create
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.move'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.move'      create
'stock.picking'      create
'stock.move'      create
backorder_wizard_dict['res_model']].with_context(backorder_wizard_dict['context'      ).save
'stock.picking'      search([
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.move'      create
'stock.picking'      create
'stock.move'      create
'uom.uom'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.move'      create
'stock.picking'      create
'stock.move'      create
(res_dict_for_back_order.get('res_model'))      browse(res_dict_for_back_order.get('res_id')).with_context
'stock.picking'      search([
'stock.production.lot'      search([
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.quant'      _gather
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.quant'      _gather
'stock.move'      create
'stock.quant'      _gather
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'product.product'      create
'product.product'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'res.partner'      create
'stock.picking'      create
'stock.move'      create
'stock.move'      create
'stock.location'      create
'stock.location'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant.package'      create
'stock.quant.package'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'res.partner'      create
'res.partner'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant.package'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.location'      create
'stock.location'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.location'      create
'stock.location'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant.package'      create
'stock.quant.package'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'res.partner'      create
'res.partner'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant.package'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.location'      create
'stock.location'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.location'      create
'stock.location'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.location'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.location'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'res.partner'      create
'stock.picking'      create
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.move.line'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant.package'      create
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant.package'      create
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'res.partner'      create
'stock.picking'      create
'stock.move'      create
res_dict['res_model']].with_context(res_dict['context'      ).save
'stock.quant'      _get_available_quantity
'res.partner'      create
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.move'      create
res_dict['res_model']].with_context(res_dict['context'      ).save
(res_dict_for_back_order.get('res_model'))      browse(res_dict_for_back_order.get('res_id')).with_context
'stock.quant'      _get_available_quantity
'stock.picking'      search([
'product.product'      create
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.move'      create
'stock.move'      create
action['res_model']].with_context(action['context'      ).save
(action.get('res_model'))      browse(action.get('res_id')).with_context(action.get
'stock.picking'      search([
'res.partner'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.move'      create
immediate_trans_wiz_dict['res_model']].with_context(immediate_trans_wiz_dict['context'      ).save
'stock.quant'      _get_available_quantity
'stock.picking'      create
'stock.move'      create
'stock.picking'      create
'stock.move'      create
'stock.move'      create
'res.partner'      create
'stock.picking'      create
'stock.move'      create
'stock.scrap'      create
'res.partner'      create
'stock.picking'      create
'stock.move'      create
'stock.picking'      create
'stock.move'      create
'stock.picking'      create
'stock.move'      create
immediate_trans_wiz_dict['res_model']].with_context(immediate_trans_wiz_dict['context'      ).save
immediate_trans_wiz_dict['res_model']].with_context(immediate_trans_wiz_dict['context'      ).save
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.quant'      _update_available_quantity
'stock.scrap'      create
'stock.quant'      _get_available_quantity
'stock.scrap'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.scrap'      create
'stock.quant'      _update_available_quantity
'res.partner'      create
'stock.picking'      create
'stock.move'      create
'stock.scrap'      create
'stock.quant'      _update_available_quantity
'res.partner'      create
'stock.picking'      create
'stock.move'      create
'stock.scrap'      create
'stock.quant'      _update_available_quantity
'stock.scrap'      create
'stock.warn.insufficient.qty.scrap'      create
'stock.quant'      _gather
'stock.location'      create
'stock.location'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.scrap'      create
'stock.move'      create
'stock.move'      create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.move'      create
'stock.move'      create
'stock.quant'      search
'stock.quant'      search
'stock.move'      create
'stock.quant'      search
'stock.quant'      search
'stock.quant'      search
'stock.production.lot'      create
'stock.production.lot'      create
'stock.move'      create
'stock.move'      create
'stock.quant'      search
'stock.quant'      search
'stock.move'      create
'stock.move.line'      create
'stock.quant'      search
'stock.move'      create
'stock.move'      create
'stock.picking'      create
'stock.move'      create
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.move'      create
'stock.move'      create
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.move'      create
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.move'      create
'stock.move.line'      create
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'product.product'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.move'      create
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'product.product'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.move'      create
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'product.product'      create
'product.product'      create
'stock.quant'      with_context(inventory_mode=True).create
'stock.picking'      
backorder_wizard_dict['res_model']      with_context
'stock.picking'      search([
backorder_wizard_dict['res_model']      with_context
'stock.picking'      search([
backorder_wizard_dict['res_model']      with_context
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.move.line'      create
'product.product'      create
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.move'      create
'stock.picking'      create
'stock.picking'      create
'stock.picking'      create
'stock.picking'      create
'stock.picking'      create
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.picking'      search([
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.quant'      _gather
'stock.quant'      _gather
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _gather(self.productA, stock_location).mapped
'stock.quant'      _gather
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.picking'      browse
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.picking'      browse
'stock.location'      browse
'stock.warehouse'      search([
'stock.warehouse'      create
'stock.location.route'      search([('supplier_wh_id', '=', warehouse_2.id), 
'stock.quant'      _update_available_quantity
'procurement.group'      run_scheduler
'mail.activity'      search([('res_model', '=', 'product.template'), 
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.picking'      search([
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.production.lot'      create
'stock.production.lot'      create
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.picking'      create
'stock.location'      browse
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _gather
'stock.quant'      _get_available_quantity
'stock.location'      browse
'stock.location'      browse
'stock.location'      browse
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.picking'      browse
'stock.picking'      browse
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.location'      browse
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.picking'      browse
'stock.picking'      browse
'stock.picking'      browse
'stock.location'      browse
'stock.quant'      _update_available_quantity
(backorder_wizard_values.get('res_model'))      browse(backorder_wizard_values.get('res_id')).with_context
'stock.picking'      search([
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.location'      browse
'stock.warehouse'      create
'stock.location'      create
'stock.quant'      _update_available_quantity
'stock.picking'      browse
'stock.picking'      browse
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      search([('product_id', '=', self.productA.id), 
'stock.production.lot'      create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.return.picking'      with_context
'stock.picking'      browse(stock_return_picking.create_returns
'stock.picking'      create
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.picking'      search([
'stock.quant'      _get_available_quantity
'stock.picking'      create
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.picking'      search([
'stock.picking'      create
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.picking'      search([
'stock.picking'      create
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.backorder.confirmation'].with_context(res_dict['context'      ).save
'stock.picking'      search([
'stock.picking'      create
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.picking'      create
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.picking'      create
'stock.location'      browse
'stock.quant'      _get_available_quantity
'stock.picking'      create
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.picking'      search([
'stock.location'      browse
'stock.picking'      create
'stock.quant'      create
'stock.production.lot'      create
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.quant'      create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.quant'      create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.quant'      create
'stock.picking.type'      
'stock.picking'      create
'stock.picking.type'      
'stock.picking'      create
'stock.picking.type'      
'stock.picking'      create
'stock.picking.type'      
'stock.picking'      create
'stock.production.lot'      
'stock.production.lot'      create
'stock.picking'      create
'stock.picking'      create
'stock.picking'      create
'stock.warehouse'      create
'stock.picking'      create
'stock.picking'      create
'stock.warehouse'      create
'stock.picking'      create
'stock.picking'      create
'stock.picking'      create
'stock.picking'      create
'stock.picking'      search([
'stock.picking'      
'stock.picking.type'      browse
'stock.picking'      create
'stock.picking'      create
'stock.location'      browse
'stock.quant'      _gather
'stock.quant'      _gather
'stock.picking'      create
'res.partner'      create
'stock.picking'      create
'stock.move'      create
'stock.immediate.transfer'].with_context(wiz['context'      ).save
'stock.location'      browse
'stock.location'      browse
'stock.quant'      _gather
'stock.quant'      _gather
'res.partner'      create
'stock.location'      browse
'stock.location'      create
'stock.location'      create
'stock.putaway.rule'      create
'stock.picking.type'      browse
'stock.picking'      with_context
'stock.picking'      create
'stock.picking'      create
'uom.category'      create
'uom.uom'      create
'uom.uom'      create
'product.product'      create
'stock.picking'      create
'stock.move'      create
'stock.production.lot'      create
'stock.move.line'      create
'stock.picking'      search([
'product.product'      create
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.move'      create
'product.product'      create
'product.product'      create
'stock.location'      browse
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.move'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
"stock.move.line"      search
"stock.move.line"      search
'product.product'      create
'res.partner'      create
'stock.warehouse'      search([
'procurement.group'      create
'res.partner'      search
'procurement.group'      create
'procurement.group'      create
'stock.move'      create
'stock.move'      create
'stock.warehouse'      search([
'stock.warehouse'      create
'stock.location.route'      search([('supplier_wh_id', '=', warehouse_2.id), 
'product.replenish'      create
'stock.picking'      search([
'stock.location'      create
'stock.location.route'      create
'stock.move'      create
'stock.warehouse'      search([
'stock.location'      create
'stock.picking.type'      create
'stock.location.route'      create
'product.product'      create
'stock.move'      create
'stock.warehouse'      search([
'product.product'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'procurement.group'      _get_rule
'procurement.group'      create
'procurement.group'      run
'stock.quant'      _get_available_quantity
'stock.picking'      search([
'stock.warehouse'      search([
'product.product'      create
'stock.quant'      _update_available_quantity
'procurement.group'      _get_rule
'procurement.group'      create
'procurement.group'      run
'stock.picking'      search([
'stock.warehouse'      search([
'product.product'      create
'stock.quant'      _update_available_quantity
'procurement.group'      _get_rule
'procurement.group'      create
'procurement.group'      create
'procurement.group'      create
'procurement.group'      run
'stock.picking'      search([
'stock.picking'      search([
'stock.picking'      search([
'stock.warehouse'      search([
'product.product'      create
'product.product'      create
'procurement.group'      _get_rule
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.move'      create
'stock.warehouse'      search([
'product.product'      create
'product.product'      create
'procurement.group'      _get_rule
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.warehouse'      search([
'product.product'      create
'procurement.group'      _get_rule
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.move'      create
'stock.warehouse'      search([
'product.product'      create
'procurement.group'      create
'procurement.group'      run
'stock.move'      search([
'stock.location'      create
'stock.location'      create
'stock.location.route'      create
'stock.location.route'      create
'product.product'      create
'product.packaging'      create
'stock.move'      create
'stock.picking'      create
'stock.picking'      create
'stock.location'      browse
'stock.location'      browse
'stock.picking.type'      browse
'stock.picking'      create
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.picking'      create
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.location'      browse
'stock.location'      browse
'stock.picking.type'      browse
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.quant'      _get_available_quantity
'stock.location'      browse
'stock.quant'      _get_available_quantity
'stock.picking.type'      browse(self.picking_type_out).copy
'stock.picking'      create
'stock.picking'      create
'stock.move'      create
'stock.quant'      _get_available_quantity
'product.product'      create
'stock.move'      create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.move'      create
'product.product'      create
'stock.picking'      
'stock.picking.type'      search
'stock.picking.type'      search
'stock.location'      with_user(self.user_a).create
'stock.putaway.rule'      
'stock.location'      with_user(self.user_a).create
'stock.putaway.rule'      with_user(self.user_a).create
'res.partner'      create
'product.product'      create
'stock.quant'      with_user(self.user_a).with_context(inventory_mode=True).create
'stock.move'      search([
'product.product'      create
'stock.quant'      with_user(self.user_a).with_context(inventory_mode=True).create
'stock.picking.type'      search([
'stock.picking'      with_user
'product.product'      create
'stock.production.lot'      create
'stock.production.lot'      create
'product.product'      create
'stock.picking'      with_user(self.user_a).create
'stock.move'      create
'stock.production.lot'      search
'product.product'      create
'stock.warehouse.orderpoint'      with_user
'product.product'      create
'stock.warehouse.orderpoint'      with_user
'product.template'      with_user
'product.template'      with_user
'product.template'      with_user
'product.product'      create
'stock.picking.type'      search
'stock.move'      create
'product.product'      create
'stock.picking.type'      search
'stock.move'      create
'product.product'      create
'stock.picking.type'      search
'stock.move'      create
'product.product'      create
'stock.picking.type'      create
'ir.sequence'      create
'stock.location.route'      create
'stock.move'      create
'stock.move'      create
'stock.move'      search([
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'res.partner'      create
'stock.location.route'      search([
'product.product'      create
'stock.move'      create
'stock.picking'      create
'stock.move'      create
'stock.move'      search([
'stock.move'      search([
res_dict['res_model']].with_context(res_dict['context'      ).save
'stock.quant'      _get_available_quantity
res_dict['res_model']].with_context(res_dict['context'      ).save
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.move'      create
'stock.quant.package'      create
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.package_level'      create
'stock.quant.package'      create
'stock.location'      create
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.package_level'      create
'stock.package_level'      create
'stock.location'      create
'stock.location'      create
'stock.picking'      create
'stock.move'      create
'stock.quant.package'      search
(wizard_values.get('res_model'))      browse(wizard_values.get
'stock.quant.package'      search
'stock.quant'      create
'stock.quant.package'      create
'stock.move'      create
'stock.picking'      create
'stock.location'      create
'stock.location'      create
'stock.quant.package'      create
'stock.picking'      create
'stock.move.line'      create
'stock.move.line'      create
'stock.location'      
'stock.putaway.rule'      create
'stock.putaway.rule'      create
'stock.picking'      
'stock.picking'      search
'stock.picking'      
'stock.location'      
'stock.location'      
'stock.putaway.rule'      create
'stock.putaway.rule'      create
'stock.picking'      
'stock.picking'      search
'stock.picking'      
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.move'      create
"stock.quant.package"      create
"stock.quant.package"      create
'stock.picking'      
'stock.quant'      _update_available_quantity
"stock.quant.package"      create
'stock.quant'      _update_available_quantity
"stock.quant.package"      create
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.picking'      search([
"stock.quant.package"      create
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.picking'      with_context
'stock.picking'      with_context
'res.partner'      create
'res.partner'      create
'product.product'      create
'stock.picking'      create
'stock.production.lot'      create
'stock.quant.package'      create
'stock.quant.package'      create
'stock.quant.package'      create
'stock.move.line'      create
'stock.move.line'      create
'stock.picking'      create
'stock.quant'      search([('product_id', '=', product_neg.id), 
'stock.picking'      create
"stock.production.lot"      search
"stock.quant.package"      search([
'stock.quant'      search
'product.product'      create
'res.partner'      create
'stock.location.route'      create
'stock.picking'      create
'procurement.group'      run_scheduler
'stock.move'      search
'stock.move'      create
'stock.move'      create
'stock.warehouse'      search
'stock.warehouse.orderpoint'      
'stock.rule'      search
'stock.move'      create
'procurement.group'      run_scheduler
'stock.move'      search
'product.product'      create
'product.product'      create
'stock.warehouse'      search
'stock.warehouse.orderpoint'      
'stock.warehouse.orderpoint'      create
'stock.rule'      create
'stock.picking'      create
'stock.move'      create
'stock.move'      search
'stock.move'      search
'res.partner'      create
'stock.warehouse'      search([
'product.product'      create
'stock.quant'      _update_available_quantity
'procurement.group'      create
'stock.location.route'      create
'procurement.group'      create
'procurement.group'      run
'stock.picking'      search([
'stock.picking'      search([
'procurement.group'      create
'procurement.group'      run
'stock.picking'      search([
'stock.warehouse'      create
'stock.location'      create
'stock.location'      create
'product.product'      create([{'name': i, 'type': 'product'} for i in range
'stock.warehouse.orderpoint'      create
'stock.rule'      create
'stock.rule'      create
'stock.rule'      create
'stock.location.route'      create
'stock.rule'      create
'procurement.group'      run_scheduler
'stock.move'      search([
'mail.activity'      search
'stock.picking.type'      browse(self.ref
'stock.quant'      create
'stock.quant'      create
'stock.picking'      create
'stock.move'      create
'stock.picking'      create
'stock.move'      create
'stock.warehouse.orderpoint'      
'product.product'      create
'product.product'      search
'stock.quant'      _gather
'stock.quant'      create
'stock.quant'      _get_available_quantity
'stock.quant'      create
'stock.quant'      _get_available_quantity
'stock.quant'      create
'stock.quant'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      create
'stock.quant'      create
'stock.quant'      _get_available_quantity
'stock.quant'      create
'stock.quant'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.quant'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      search([
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'product.product'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.location'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      search([
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      create
'stock.quant'      _update_available_quantity
'stock.quant'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _update_reserved_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _update_reserved_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      create
'stock.quant'      create
'stock.quant'      create
'stock.quant'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _update_reserved_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      create
'stock.quant'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _update_reserved_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_reserved_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      create
'stock.quant'      _get_available_quantity
'stock.quant'      _update_reserved_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_reserved_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_reserved_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_reserved_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_reserved_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_reserved_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_reserved_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _update_reserved_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      _get_available_quantity
'stock.quant'      create
'stock.quant'      create
'stock.quant'      create
'stock.quant'      _update_available_quantity
'stock.quant'      create
'stock.quant'      _update_available_quantity
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_reserved_quantity
'product.removal'      search([
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_reserved_quantity
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      search
'stock.quant'      _update_available_quantity
'stock.quant'      search
'product.removal'      search([
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _update_reserved_quantity
'product.removal'      search([
'stock.quant'      create
'stock.quant'      create
'stock.quant'      _update_reserved_quantity
'stock.quant'      search([
'stock.quant'      search
'stock.move'      search
'stock.quant'      search
'stock.quant'      search
'stock.move'      search
'stock.quant'      create
'stock.quant'      create
'stock.quant'      with_context(inventory_mode=True).create
'stock.quant'      with_context(inventory_mode=True).create
'stock.quant'      with_context(inventory_mode=True).create
'stock.move'      search
'stock.move'      search
'stock.production.lot'      create
'product.product'      create
'stock.production.lot'      create
'product.product'      
'stock.warehouse'      search
'stock.location'      create
'stock.quant'      with_context(inventory_mode=True).create
'stock.move'      flush
'report.stock.quantity'      read_group
'report.stock.quantity'      read_group
'report.stock.quantity'      read_group
'stock.move'      create
'stock.move'      flush
'report.stock.quantity'      read_group
'stock.move'      flush
'report.stock.quantity'      read_group
'report.stock.quantity'      read_group
'stock.move'      create
'stock.move'      flush
'report.stock.quantity'      read_group
'report.stock.quantity'      read_group
'stock.move'      create
'stock.move'      flush
'report.stock.quantity'      read_group
'report.stock.quantity'      read_group
'report.stock.quantity'      read_group
'product.product'      
'stock.warehouse'      search
'stock.location'      create
'stock.location'      create
'stock.quant'      with_context(inventory_mode=True).create
'stock.quant'      with_context(inventory_mode=True).create
'stock.move'      create
'stock.move'      flush
'report.stock.quantity'      read_group
'report.stock.quantity'      read_group
'stock.move'      create
'stock.move'      flush
'report.stock.quantity'      read_group
'product.product'      
'stock.warehouse'      search
'stock.location'      create
'stock.location'      create
'stock.move'      flush
'report.stock.quantity'      read_group
'stock.move'      create
'stock.move'      flush
'report.stock.quantity'      read_group
'stock.move'      create
'stock.move'      flush
'report.stock.quantity'      read_group
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'procurement.group'      create
'stock.warehouse.orderpoint'      create
'stock.picking'      search([
'stock.warehouse'      create
'stock.picking.type'      search
'stock.picking'      with_context
'stock.picking'      with_context
'res.company'      create
'stock.warehouse'      search([
'stock.picking'      with_context
'stock.picking'      with_context
'product.attribute'      create
'product.attribute.value'      create
'product.attribute.value'      create
'product.attribute'      create
'product.attribute.value'      create
'product.attribute.value'      create
'product.template'      create
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      
'stock.picking'      
'stock.picking'      
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      
'product.product'      create
'product.product'      create
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.picking'      with_context
'stock.warehouse'      create
'stock.picking.type'      search
'stock.picking'      with_context
'stock.picking'      with_context
'stock.warehouse'      search([
'stock.move'      create
'stock.picking'      with_context
'stock.quant'      with_context(inventory_mode=True).create
'stock.picking'      with_context
'stock.picking'      with_context
'product.product'      create
'stock.warehouse'      create
'uom.uom'      search([('category_id', '=', self.categ_unit.id), 
'stock.move'      create
'stock.quant'      create
'stock.move'      create
'base'      flush
'report.stock.quantity'      read_group
'stock.warehouse'      create
'stock.move'      create
'stock.move'      create
'base'      flush
'report.stock.quantity'      read_group
'report.stock.quantity'      read_group
'product.product'      create
'stock.rule'      create
'stock.picking'      create
'stock.move'      create
'stock.move'      flush
'stock.warehouse.orderpoint'      action_open_orderpoints
'stock.warehouse.orderpoint'      search
'stock.warehouse.orderpoint'      action_open_orderpoints
'stock.move'      search
'stock.warehouse.orderpoint'      search
'stock.warehouse.orderpoint'      
'stock.warehouse.orderpoint'      action_open_orderpoints
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.quant'      _gather
'stock.location'      create
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.quant'      _gather
'stock.quant.package'      create
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.quant.package'      
'stock.quant'      _gather
'stock.quant'      _gather
'stock.quant'      _gather
'product.product'      create
'product.product'      create
'stock.production.lot'      create
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.move'      create
'stock.move'      create
(res_dict.get('res_model'))].with_context(res_dict['context'      ).save
res_dict.get('res_model')].with_context(res_dict['context'      ).save
(res_dict_for_back_order.get('res_model'))      browse(res_dict_for_back_order.get('res_id')).with_context
(res_dict.get('res_model'))].with_context(res_dict['context'      ).save
(res_dict.get('res_model'))].with_context(res_dict['context'      ).save
(res_dict.get('res_model'))].with_context(res_dict['context'      ).save
(res_dict.get('res_model'))].with_context(res_dict['context'      ).save
(res_dict.get('res_model'))].with_context(res_dict['context'      ).save
(res_dict_for_back_order.get('res_model'))      browse(res_dict_for_back_order.get('res_id')).with_context
(res_dict.get('res_model'))].with_context(res_dict['context'      ).save
(res_dict_for_back_order.get('res_model'))      browse(res_dict_for_back_order.get('res_id')).with_context
(res_dict.get('res_model'))].with_context(res_dict['context'      ).save
(res_dict_for_back_order.get('res_model'))      browse(res_dict_for_back_order.get('res_id')).with_context
(res_dict.get('res_model'))].with_context(res_dict['context'      ).save
(res_dict.get('res_model'))].with_context(res_dict['context'      ).save
'stock.quant'      with_context
'stock.picking.type'      browse
(res_dict.get('res_model'))      browse(res_dict.get
'stock.picking.type'      browse
'stock.location'      browse
'stock.quant'      search([('product_id', '=', self.productE.id), 
'stock.location'      browse
'stock.location'      browse
'stock.quant'      search([('product_id', '=', self.productE.id), 
'stock.location'      browse
'stock.quant'      create
'stock.quant'      create
'stock.backorder.confirmation'].with_context(res_dict['context'      ).save
'stock.warehouse'      search([
'stock.location.route'      
'stock.warehouse'      search([
'stock.location.route'      
'product.product'      create
'product.replenish'      create
'stock.picking'      search([('product_id', '=', product.id), 
'stock.picking'      search([('product_id', '=', product.id), 
'stock.warehouse'      search([
'stock.location.route'      
'stock.warehouse'      search([
'stock.location.route'      
'res.company'      create
'stock.warehouse'      search([
'stock.location.route'      
'product.product'      create
'product.product'      create
'stock.picking'       view='stock.view_picking_form')
'stock.picking'      search([('product_id', '=', product_from_company_2.id), 
'stock.picking'      search([('product_id', '=', product_from_company_2.id), 
'stock.picking'      search([('product_id', '=', product_from_company_3.id), 
'stock.picking'      search([('product_id', '=', product_from_company_3.id), 
'res.partner'      create
'product.product'      create
'stock.warehouse'      search([
'stock.picking'       view='stock.view_picking_form')
'stock.picking'      with_context
'stock.picking'      with_context
'product.product'      create
'product.product'      create
'stock.picking.type'      browse
'stock.picking'      
'stock.picking'      
'stock.production.lot'      search([
'stock.picking.type'      browse
'stock.picking'      
'stock.picking'      
(res_dict.get('res_model'))].with_context(res_dict['context'      ).save
'stock.location'      create
'res.partner'      create
'stock.quant'      with_context(inventory_mode=True).create
'stock.move'      search([('is_inventory', '=', True), 
'stock.move'      search([('is_inventory', '=', True), 
'stock.quant'      _gather
'stock.quant'      _gather
'stock.quant'      _gather
'stock.quant'      _gather
'stock.quant'      _gather
'stock.quant'      _gather(self.product_1, self.env.ref
'stock.change.product.qty'      with_user
'stock.quant'      search([
'stock.change.product.qty'      with_user
'stock.picking'      create
'stock.move'      create
'product.product'      create
'stock.picking'      create
'stock.move'      create
'stock.quant'      search([('product_id', '=', productA.id), 
'stock.picking'      browse
'stock.quant'      search([('product_id', '=', productA.id), 
'product.product'      create
'stock.picking'      create
'stock.move'      create
'stock.quant'      search([('product_id', '=', productA.id), 
'stock.move'      search([('product_id', '=', productA.id), 
'stock.quant'      _quant_tasks
'stock.quant'      search([('product_id', '=', productA.id), 
'stock.quant'      search([('product_id', '=', productA.id), 
'stock.warehouse'      create
'stock.warehouse'      create
'stock.warehouse'      create
'product.product'      create
'stock.picking'      create
'stock.move'      create
'stock.move'      search([
'stock.move'      search([
'stock.move'      search([
'stock.move'      search([
'stock.move'      search([
'stock.move'      search([
'stock.warehouse'      create
'stock.warehouse'      create
'stock.warehouse'      create
'stock.warehouse'      create
'product.product'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.picking'      create
'stock.move'      create
'stock.picking'      search([
'stock.picking'      search([
'stock.quant'      _gather
'stock.quant'      _gather(product, warehouse_distribution_namur.lot_stock_id).mapped
'stock.picking'      create
'stock.move'      create
'stock.picking'      search([
'stock.picking'      search([
'stock.quant'      _gather
'stock.quant'      _gather(product, warehouse_distribution_wavre.lot_stock_id).mapped
'res.partner'      create
'res.company'      create
'stock.warehouse'      create
"stock.warehouse"      search
'stock.warehouse'      
'stock.location'      
'stock.warehouse'      
'stock.location'      
'stock.location.route'      
'stock.warehouse'      
'product.product'      create
'res.partner'      create
'stock.warehouse'      search([
'stock.location'      create
'stock.location'      create
'res.partner'      create
'stock.picking'      create
'stock.quant.package'      create
'stock.move.line'      create
'stock.quant'      search([
'stock.picking'      create
'stock.picking'      create
'stock.quant'      search
'stock.quant'      search
'product.product'      browse
'product.template'      browse
'stock.warehouse'      search([
'procurement.group'      with_context(clean_context(self.env.context)).run
'procurement.group'      Procurement
'procurement.group'      create
'stock.move'      browse(self.env.context.get
'stock.picking'      browse(pickings_to_validate).with_context
'stock.picking'      
'stock.warehouse'      search
'stock.quant'      with_context(inventory_mode=True).create
'stock.picking'      browse
'stock.quant'      browse
'stock.picking'      browse(self.env.context.get
'stock.return.picking.line'      _fields.keys
'stock.return.picking.line'      default_get
'product.product'      browse
'product.template'      browse
'stock.warehouse'      search([
'procurement.group'      with_context(allowed_company_ids=cids).run_scheduler
'stock.quant'      search
'product.category'      browse(vals.get
'stock.valuation.layer'      check_access_rights
'account.move'      sudo().create
'stock.valuation.layer'      read_group
'stock.valuation.layer'      check_access_rights
'stock.valuation.layer'      sudo().create
'account.move'      sudo().create
'stock.valuation.layer'      sudo().search
'stock.valuation.layer'      sudo().search
'stock.valuation.layer'      sudo().search
'stock.valuation.layer'      sudo().create
'stock.valuation.layer'].browse(x[0      id for x in as_svls)._validate_accounting_entries
'account.move'      sudo
'product.product'      search_read
'product.product'      browse
'stock.valuation.layer'      check_access_rights
'account.move'      sudo().create
'ir.actions.act_window'      _for_xml_id
'decimal.precision'      precision_get
'stock.move.line'      browse
'stock.valuation.layer'      sudo().create
'stock.valuation.layer'      sudo().create
'stock.valuation.layer'      sudo().create
'stock.move'      for valued_type in self._get_valued_types
'stock.valuation.layer'      sudo
'res.partner'      _find_accounting_partner
'account.analytic.line'      sudo().create
'stock.move'      browse
'stock.scrap'      search([
"ir.actions.actions"      _for_xml_id
'stock.location'      browse
'stock.valuation.layer'      search(domain + [
'stock.valuation.layer.revaluation'      with_context(context)).save
'stock.valuation.layer'      search([
'stock.valuation.layer.revaluation'      with_context
'stock.valuation.layer'      search([
'stock.valuation.layer.revaluation'      with_context(context)).save
'stock.valuation.layer'      search([
'stock.valuation.layer.revaluation'      with_context
'stock.valuation.layer'      search([
'stock.valuation.layer.revaluation'      with_context(context)).save
'stock.valuation.layer'      search([
'stock.valuation.layer.revaluation'      with_context
'stock.valuation.layer'      search([
'account.move.line'      search
'account.move.line'      search
'account.move.line'      search
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.location'      search
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.picking'      create
'res.partner'      search
'stock.move'      create
'stock.move'      create
'stock.picking'      browse
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.picking'      create
'stock.move'      create
'stock.move'      create
'stock.picking'      create
'stock.move'      create
'stock.move'      create
'stock.move'      _run_fifo_vacuum
'stock.move'      create
'stock.move'      _run_fifo_vacuum
'stock.move'      create
'stock.move.line'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'product.product'      create
'product.product'      create
'product.product'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.quant'      _get_available_quantity
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      with_user(self.inventory_user).create
'stock.move'      with_user(self.inventory_user).create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.location'      create
'stock.location'      create
'stock.location'      create
'stock.move'      create
'stock.move'      create
'stock.location'      create
'stock.move'      create
'stock.location'      create
'stock.location'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'stock.move'      create
'res.currency'      create
'res.currency'      create
'res.company'      
'res.company'      
'stock.warehouse'      search([
'stock.warehouse'      search([
'stock.move'      with_company(company_1).create
'stock.move'      with_company(company_2).create
"ir.actions.actions"      _for_xml_id
'product.product'      browse
'stock.valuation.layer'      search
'stock.valuation.layer'      create
'account.move'      create
'ir.sequence'      create
'res.company'      search
'ir.sequence'].search([('code', '=', 'stock.dropshipping')      .mapped
'ir.sequence'      search
'stock.picking.type'      create
'res.company'      search
'stock.picking.type'      search
'stock.rule'      create
'res.company'      search
'stock.rule'].search([('route_id', '=', dropship_route.id)      .mapped
'res.partner'      create
'stock.warehouse'      create
'product.template'      
'sale.order'      
'res.partner'      create
'procurement.group'      run_scheduler
'purchase.order'      search
'product.product'      create
'res.partner'      create
'product.supplierinfo'      create
'res.partner'      create
'sale.order'      create
'purchase.order'      search([
'sale.order.line'      create
'res.partner'      create
'product.product'      create
'sale.order'      
'res.partner'      create
'purchase.order'      search([
'stock.move.line'      search
'product.category'      create
'res.partner'      create
'product.product'      
'purchase.order'      
'purchase.order'      
'stock.picking'      
'res.partner'      create
'res.partner'      create
'product.product'      
'sale.order'      
'purchase.order.line'      search
'res.partner'      create
'product.supplierinfo'      create
'res.partner'      create
'sale.order'      create
'purchase.order'      search([
wizard['res_model']].with_context(wizard['context'      ).save
'account.move'      with_context
'stock.picking'      browse
'stock.landed.cost'      create
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
'ir.property'      _get
'ir.sequence'      next_by_code
'stock.valuation.layer'      create
'product.product'      browse(p.id for p in cost_to_add_byproduct.keys
'stock.valuation.adjustment.lines'      create
"ir.actions.actions"      _for_xml_id
'product.product'      create
'product.product'      create
'stock.picking'      fields_get
'stock.picking'      new
'stock.picking'      create
'stock.picking'      new
'stock.picking'      create
'stock.landed.cost'      fields_get
'product.product'      create
'stock.landed.cost'      new
'stock.landed.cost'      create
'account.move.line'      read_group
'account.move.line'      read_group
(res_dict.get('res_model'))      with_context(res_dict.get('context'))).save
(res_dict.get('res_model'))].with_context(res_dict['context'      ).save
'account.account'      create
'purchase.order'      
'res.partner'      create
'stock.valuation.layer'      search([
'account.move.line'      search([
'stock.landed.cost'      create(dict
'stock.valuation.layer'      search([
'account.move.line'      search([
'account.move'      with_context
'account.move.line'      search([('account_id','=', self.price_diff_account.id), 
'product.product'      create
'product.product'      create
'stock.picking'      fields_get
'stock.picking'      new
'stock.picking'      create
'stock.picking'      new
'stock.picking'      create
'product.product'      create
'stock.landed.cost'      fields_get
'stock.landed.cost'      new
'stock.landed.cost'      create
'stock.landed.cost'      fields_get
'stock.landed.cost'      new
'stock.landed.cost'      create
'product.category'      create
'purchase.order'      create
(res_dict.get('res_model'))      with_context(res_dict.get('context'))).save
'account.move.line'      search
'account.move.line'      search
'account.move.line'      search
'account.move.line'      search
'account.move.line'      search
'stock.landed.cost'      
'stock.move'      create
'stock.picking'      create
'stock.move'      create
'stock.picking'      create
'stock.move.line'      create
'purchase.order'      
'stock.immediate.transfer'].with_context(wiz['context'      ).save().process
'account.move'      browse
'account.move'      with_context
action['res_model']      browse
'purchase.order'      
'stock.immediate.transfer'].with_context(wiz['context'      ).save
'account.move'      with_context
action['res_model']      browse
'purchase.order'      
'stock.immediate.transfer'].with_context(wiz['context'      ).save().process
'account.move'      browse
'account.move'      with_context
action['res_model']      browse
'stock.picking.batch'      browse(self.env.context.get
'stock.picking.batch'      create
'stock.move.line'      
'stock.move.line'      
'stock.picking'      create
'stock.picking.batch'      read_group
'stock.picking'      search
'ir.sequence'      next_by_code
'ir.sequence'      next_by_code
'ir.model.data'      _xmlid_to_res_id
'stock.picking.type'      browse
'product.product'      create
'product.product'      create
'stock.picking'      create
'stock.move'      create
'stock.picking'      create
'stock.move'      create
'stock.picking'      create
'stock.move'      create
'stock.picking.batch'      create
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
'stock.quant'      _gather
'stock.quant'      _gather
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
(immediate_transfer_wizard_dict.get('res_model'))].with_context(immediate_transfer_wizard_dict['context'      ).save
'stock.quant'      _gather
'stock.quant'      _gather
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
(back_order_wizard_dict.get('res_model'))].with_context(back_order_wizard_dict['context'      ).save
'stock.picking'      search([
'stock.quant'      _gather
'stock.quant'      _gather
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
(immediate_transfer_wizard_dict.get('res_model'))].with_context(immediate_transfer_wizard_dict['context'      ).save
(back_order_wizard_dict.get('res_model'))].with_context(back_order_wizard_dict['context'      ).save
'stock.picking'      search([
'stock.quant'      _gather
'stock.quant'      _gather
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
(back_order_wizard_dict.get('res_model'))].with_context(back_order_wizard_dict['context'      ).save
'stock.quant'      _update_available_quantity
'stock.quant'      _update_available_quantity
(wizard_values.get('res_model'))      browse(wizard_values.get
(back_order_wizard_dict.get('res_model'))].with_context(back_order_wizard_dict['context'      ).save
res_dict['res_model']      with_context
'stock.picking.batch'      search
'ir.actions.actions'      _for_xml_id
action['res_model']      with_context
res_dict['res_model']      with_context
'stock.picking.batch'      search
res_dict['res_model']      with_context
'stock.picking.batch'      search
res_dict['res_model']      with_context
'stock.picking.batch'      search
'ir.actions.actions'      _for_xml_id
action['res_model']      with_context
'stock.picking'      search
res_dict['res_model']      with_context
'stock.picking.batch'      search
'stock.picking'      search
'stock.picking'      search
res_dict['res_model']      with_context
'stock.picking.batch'      search
'stock.picking'      search
'stock.production.lot'      create
'stock.quant'      _update_available_quantity
'stock.move'      create
res_dict['res_model']      with_context
'stock.picking.batch'      search
res_dict['res_model']      
'res.company'      search
res_dict['res_model']      with_context
'stock.move.line'      browse(self.env.context.get
'stock.picking'      browse(self.env.context.get
'stock.picking'      browse
'stock.picking'      browse
'stock.picking'      browse(self.env.context.get
'stock.picking.batch'      create
'confirm.stock.sms'      create({'pick_ids': [
'stock.picking'      browse(self.env.context.get
'stock.picking'      browse(self.env.context.get
'res.users'      sudo()._get_signup_invitation_scope
'survey.user_input'      read_group
'survey.user_input.line'      read_group
'survey.user_input'      _generate_invite_token
'survey.user_input'      search_count
'survey.question'      sudo().search([('survey_id', '=', self.id), 
'survey.question'      sudo().browse
'survey.user_input'      new
'survey.user_input.line'      new
'survey.user_input'      search_read
'survey.user_input.line'      search_read
'ir.actions.act_window'      _for_xml_id
'ir.actions.act_window'      _for_xml_id
'ir.actions.act_window'      _for_xml_id
'bus.bus'      _sendone
'survey.user_input'      sudo().read_group
'gamification.goal.definition'      create
'gamification.challenge'      create
'gamification.challenge.line'      create
'gamification.challenge'      search([
'survey.survey'      browse
'gamification.challenge'      sudo
'survey.user_input.line'      search
'survey.user_input.line'      create
'survey.user_input.line'      create
'survey.user_input.line'      create
'survey.question'      browse(int
'survey.question.answer'      browse(int
'survey.user_input'      browse
'survey.survey'      create
'survey.user_input'      search([
'mail.mail'      sudo().search
'survey.survey'      create
'survey.user_input'      search([
'survey.survey'      create
'survey.question'      create
'survey.question'      create
'survey.survey'      search([
'survey.survey'      create
'survey.question'      create
'survey.question'      create
'survey.survey'      search([
'survey.survey'      create
'survey.question'      create
'survey.question'      create
'survey.survey'      search([
'survey.survey'      create
'survey.question'      create
'survey.question'      create
'survey.survey'      search([
'survey.survey'      create
'survey.question'      create
'survey.question'      create
'survey.survey'      search([
'survey.user_input'      create
'survey.user_input.line'      create
'survey.user_input'      search([
'survey.user_input.line'      search([
'survey.user_input'      browse(self.answer_0.ids).read
'survey.user_input.line'      browse(self.answer_0_0.ids).read
'survey.user_input'      create
'survey.user_input.line'      create
'survey.user_input'      search([
'survey.user_input.line'      search([
'survey.user_input'      browse(self.answer_0.ids).read
'survey.user_input.line'      browse(self.answer_0_0.ids).read
'survey.user_input'      create
'survey.user_input.line'      create
'survey.user_input'      search([
'survey.user_input.line'      search([
'survey.user_input'      browse(self.answer_0.ids).read
'survey.user_input.line'      browse(self.answer_0_0.ids).read
'survey.survey'      create
'survey.question'      create
'survey.question'      create
'survey.user_input'      create
'survey.user_input.line'      create
'survey.user_input'      search([
'survey.user_input.line'      search([
'survey.user_input'      browse(answer_own.ids).read
'survey.user_input'      browse(self.answer_0.ids).read
'survey.user_input.line'      browse(answer_line_own.ids).read
'survey.user_input.line'      browse(self.answer_0_0.ids).read
'survey.user_input'      create
'survey.user_input.line'      create
'survey.survey'      create
'survey.question'      create
'survey.question'      create
'survey.user_input'      create
'survey.user_input'      create
'survey.user_input.line'      create
'survey.user_input.line'      create
'survey.user_input'      search([
'survey.user_input.line'      search([
'survey.user_input'      browse(answer_own.ids).read
'survey.user_input'      browse(self.answer_0.ids).read
'survey.user_input.line'      browse(answer_line_own.ids).read
'survey.user_input.line'      browse(self.answer_0_0.ids).read
'survey.survey'      search
'survey.survey'      create
'res.partner'      search
'mail.template'      browse
'survey.user_input'      search
'mail.message'      sudo().new(dict
'ir.model'      _get
'mail.render.mixin'      _replace_local_links
'mail.mail'      sudo().create
'mail.template'      create
'res.partner'      create
'base.automation'      create
'base.automation'      _unregister_hook
'base.automation.lead.test'      create
'base.automation'      search([
'base.automation.line.test'      create
'base.automation'      search([
'res.partner'      create
'res.groups'      create
'base.automation'      create
'ir.model'      _get_id
'base.automation'      create
'ir.model'      _get_id
'res.partner'      create
'res.partner'      create
'res.partner'      create
'base.automation'      create
'base.automation'      create
'res.users'      create
'hr.employee'      create
'hr.leave.type'      create
'hr.leave'      create
'mail.channel'].search([('id', '!=', channel_general.id)      .unlink
'mail.channel'      channel_create
'mail.channel'      channel_create
'mail.channel'      channel_create
'mail.channel'      channel_create
'mail.channel'      channel_create
'mail.channel'      channel_create
'mail.channel'      channel_get(
'mail.channel'      channel_get(
'mail.channel'      channel_get(
'mail.channel'      channel_get(
'mail.channel'      create_group(
'im_livechat.channel'      sudo().create({'name': 'support', 'user_ids': [Command.link
'mail.channel'].browse(im_livechat_channel._open_livechat_mail_channel(anonymous_name='anon 1', previous_operator_id=self.users[0].partner_id.id, user_id=self.users[1      id, country_id=self.env.ref
'mail.channel'].browse(im_livechat_channel.with_user(self.env.ref('base.public_user'))._open_livechat_mail_channel(anonymous_name='anon 2', previous_operator_id=self.users[0      partner_id.id, country_id=self.env.ref
'ir.model.data'      _xmlid_to_res_id
'res.users.settings'      _find_or_create_for_user
'crm.lead'      sudo().search
'product.product'      create
'event.tag.category'      create
'event.tag'      create
'event.event'      search
'event.event'      create
'res.partner'      create
'res.partner'      create
'event.question'      create
'event.question'      create
'event.track'      create
'event.track'      create
'event.track'      create
'event.meeting.room'      create
'sale.order'      browse
'event.registration'      create
'crm.lead'      
'crm.lead'        # this one still not triggered
'sale.order'      create
'sale.order'      browse
'event.registration'      create
'sale.order'      browse
'event.registration'      create
'event.event'      create
'event.stage'      create
'event.registration'      search
'event.registration'      create
'event.event'      create
'event.type'      create
'ir.model.data'      _xmlid_to_res_id
'event.type'      create
'ir.model.data'      _xmlid_to_res_id
'event.event'      create
'event.stage'      create
'event.registration'      create
'res.config.settings'      with_user(self.user_eventmanager).create
'res.company'      create
'event.event'      create
'event.registration'      create
'event.event'      with_user(user_company_1).search
'event.registration'      with_user(user_company_1).search
'ir.model'      _get
'mail.mail'      sudo().search([
'res.partner'      create
'mail.activity'      search_count
'mail.activity'      search_count
'mail.activity'      search_count([
'mail.activity'      with_user(self.user_admin).create
'mail.activity'      with_user(self.user_employee)._search
'mail.activity'      with_user(self.user_employee)._search
'mail.activity'      with_user(self.user_employee).read_group
'mail.activity'      with_user(self.user_employee).read_group
'mail.activity'      with_user(self.user_employee).search
'mail.activity'      with_user(self.user_employee).search_read
'mail.activity'      create
'mail.test.activity'      browse
'mail.activity'      
'mail.activity'      create
'ir.model'      _get
'mail.activity'      
'mail.activity'      with_context(default_res_model_id=self.env.ref
'mail.test.activity'      browse
'mail.activity'      
'mail.activity'      
'mail.activity'      
'mail.test.activity'      browse
'mail.activity'      create
'ir.model'      _get_id
'ir.attachment'      create
'mail.test.activity'      browse
'mail.activity'      create
'ir.model'      _get_id
'mail.test.activity'      browse
'mail.activity'      create
'ir.model'      _get_id
'mail.test.activity'      create
'mail.activity'      create
'mail.test.activity'      create
'mail.test.activity'      search
'mail.activity'      create
'mail.activity'      create
'mail.test.activity'      search
'mail.test.activity'      search([
'mail.test.activity'      search([('activity_state', 'in', 
'mail.test.activity'      search([('activity_state', 'not in', 
'mail.test.activity'      search([
'mail.test.activity'      search([('activity_state', 'not in', 
'mail.test.activity'      search([('activity_state', 'not in', 
'mail.test.activity'      search([('activity_state', 'in', 
'mail.test.activity'      create
'mail.test.activity'      search
'mail.activity'      create
'mail.test.activity'      search([
'mail.test.activity'      with_context(self._test_context).create
'mail.test.activity'      search([
'mail.test.activity'      with_context
'mail.compose.message'      with_context(self._get_web_context
'mail.compose.message'      with_context
'ir.attachment'      
'mail.compose.message'      with_context(self._get_web_context
'mail.compose.message'      with_context
'ir.attachment'      search([
'mail.compose.message'      with_context
'mail.compose.message'      with_context(ctx).create
'mail.compose.message'      with_context(ctx).create
'mail.compose.message'      with_context(ctx).create
'mail.compose.message'      with_context(ctx).create
'mail.compose.message'      with_context(ctx).create
'mail.compose.message'      with_context
'mail.compose.message'      with_user(portal_user).with_context
'mail.compose.message'      with_user(portal_user).with_context
'mail.compose.message'      with_context
'mail.template'      search
'ir.model'      _get
'mail.compose.message'      with_context
'mail.mail'       'Should have deleted mail.mail records')
'mail.compose.message'      with_context
'mail.compose.message'      with_context
'ir.attachment'      search([
'mail.compose.message'      with_context
'res.partner'      search
'mail.compose.message'      with_context
'mail.message.subtype'      
'res.partner'      
'ir.attachment'      search([
'res.users'      
'res.partner'      
'mail.compose.message'      with_context
'res.partner'      search
'mail.compose.message'      with_context
'mail.mail'       'Should have deleted mail.mail records')
'mail.message.subtype'      
'res.partner'      
'mail.compose.message'      with_context
'mail.mail'       'Should have deleted mail.mail records')
'mail.message'       'Should have deleted mail.message records')
'mail.compose.message'      with_context
'mail.compose.message'      with_context
'mail.compose.message'      with_context
'mail.compose.message'      with_context
'mail.test.composer.mixin'      create
'mail.test.composer.mixin'      create
'mail.followers'      search
'mail.followers'      search
'mail.followers'      search
'mail.followers'      search
'mail.followers'      search
'res.partner'      create
'mail.test.simple'      browse
'res.partner'      
'res.partner'      sudo().create
'mail.test.simple'      browse
'mail.test.track'      with_user(self.user_employee).create
'mail.test.container'      with_context(self._test_context).create
'mail.test.track'      with_user(self.user_employee).create
'mail.test.track'      with_user(self.user_employee).create
'res.partner'      create
'res.users'      create
'mail.test.track'      with_user(self.user_employee).with_context
'mail.message'      search
'res.partner'      create
'res.users'      create
'res.users'      create
'mail.test.track'      create
'mail.message'      search
'mail.notification'      search
'mail.followers'      _get_recipient_data
'res.partner'      create
'res.users'      create
'mail.test.track'      create
'mail.message'      search
'mail.message'      search
'mail.thread'      message_parse(self.from_string
'mail.thread'      message_parse(self.from_string
'mail.thread'      message_parse(self.from_string
'mail.thread'      message_parse(self.from_string
'mail.thread'      message_parse(self.from_string
'mail.thread'      message_parse(self.from_string
'mail.thread'      message_parse(self.from_string
'mail.thread'      message_parse(self.from_string
'mail.thread'      message_parse(self.from_string
'mail.thread'      message_parse(self.from_string
'mail.thread'      message_parse(self.from_string
'mail.thread'      message_parse(self.from_string
'mail.test.container'      create
'ir.model'      _get
'ir.model'      _get
'ir.model'      _get
'mail.alias'      create
'ir.model'      _get
'mail.alias'      create
'ir.model'      _get
'ir.model'      _get
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo().get_param
'mail.alias'      create
'mail.alias'      create
'mail.alias'      create
'ir.config_parameter'      sudo().set_param
'ir.config_parameter'      sudo().set_param
'mail.test.container'      create
'res.partner'      
'res.partner'      
'res.partner'      
'res.partner'      
'res.partner'      
'res.partner'      
'res.partner'      
'res.partner'      
'res.partner'      create
'res.partner'      create
'res.partner'      create
'mail.alias'      create
'ir.model'      _get
'ir.model'      _get
'ir.model'      _get
'ir.config_parameter'      set_param
'mail.alias'      create
'ir.model'      _get
'mail.test.simple'      search([
'mail.alias'      create
'ir.model'      _get
'mail.test.simple'      search([
'mail.alias'      create
'ir.model'      _get
'mail.test.gateway'      search([
'mail.alias'      create
'ir.model'      _get
'mail.test.gateway'      search([
'mail.test.gateway'      create
'mail.test.gateway'      create
'mail.channel'      create
'mail.alias'      create
'ir.model'      _get
'mail.alias'      create
'ir.model'      _get
'mail.alias'      create
'ir.model'      _get
'mail.test.simple'      with_user(self.user_employee).create
'mail.message'      search([
'mail.message'      search([
"mail.alias"      create
"ir.model"      _get
"mail.alias"      create
"ir.model"      _get
'mail.message'      search_count([
'mail.test.cc'      create
'mail.test.cc'      create
'mail.mail'      sudo().create
'mail.mail'      create
'mail.mail'      create(dict
'ir.mail_server'      _get_default_from_address
'mail.mail'      create
'mail.mail'      create
'mail.mail'      create
'mail.mail'      create
'mail.mail'      create
'res.partner'      create
'mail.mail'      sudo().create
'mail.message'      create
'mail.notification'      search([
'ir.mail_server'      _patch_method
'ir.mail_server'      _revert_method
'mail.test.simple'      create
'mail.message'      create
'res.company'      create
'mail.test.multi.company'      create
'ir.config_parameter'].search([('key', '=', 'mail.catchall.domain')      .unlink
'ir.config_parameter'      set_param
'ir.config_parameter'].search([('key', '=', 'mail.catchall.alias')      .unlink
'ir.config_parameter'].search([('key', '=', 'mail.catchall.domain')      .unlink
'ir.config_parameter'      set_param
'ir.config_parameter'].search([('key', '=', 'mail.catchall.alias')      .unlink
'mail.test.simple'      create
'mail.test.simple'      create
'mail.alias'      create
'ir.model'      _get
'ir.model'      _get
'mail.message'      with_user(self.user_employee).create
'mail.message'      create
'mail.message'      create
'mail.message'      create
'mail.message'      create
'mail.message'      create
'mail.message'      create
'mail.message'      with_user(self.user_employee).create
'mail.message'      with_user(self.user_employee).create
'mail.message'      with_user(self.user_public).search([
'mail.message'      with_user(self.user_employee).search([('subject', 'like', '_ZTest'), 
'mail.message'      with_user(self.user_employee).search([
'mail.message'      search([
'mail.message'      with_user(self.user_portal).search([
'mail.message'      with_user(self.user_portal).search([
'ir.attachment'      create
'mail.message'      with_user(self.user_public).create
'mail.message'      with_user(self.user_public).create
'mail.message'      with_user(self.user_employee).create
'mail.message'      with_user
'mail.message'      with_user(self.user_employee).create
'ir.config_parameter'      set_param
'mail.message'      with_user(self.user_employee).create
'mail.test.simple'      with_context(self._test_context).create
'res.partner'      create
'mail.mail'      sudo().search
'mail.resend.message'      with_context({'mail_message_to_resend': message.id}).create
'mail.resend.message'      with_context({'mail_message_to_resend': message.id}).create({}).resend_mail_action
'mail.resend.message'      with_context({'mail_message_to_resend': message.id}).create({}).resend_mail_action
'mail.resend.message'      with_context({'mail_message_to_resend': message.id}).create
'mail.resend.message'      with_context({'mail_message_to_resend': message.id}).create
'mail.test.simple'      browse
'mail.message'      browse
'res.company'      with_user(self.user_admin).create
'mail.test.multi.company'      with_user(self.user_admin).create
'mail.test.multi.company'      browse
'mail.test.multi.company'      browse
self.test_record._name      _notify_classify_recipients
'mail.mail'      sudo().search([
'mail.mail'      sudo().search([
'ir.attachment'      with_user(self.user_employee).create
'ir.attachment'      with_user(self.user_employee).create
'res.partner'      
'res.partner'      
'res.partner'      
'res.partner'      
'res.partner'      
'res.partner'      
'res.partner'      
'mail.test.simple'      with_context(self._test_context).create
'res.partner'      search([
'mail.test.simple'      with_context(self._test_context).create
'res.partner'      search([
'mail.test.simple'      browse
'mail.test.simple'      
'mail.test.ticket'      with_user(self.user_employee).with_context(self._test_context).create
'mail.message'      
'res.partner'      create
'res.partner'      
'res.partner'      
'mail.test.container'      with_context(mail_create_nosubscribe=True).create
'res.partner'      
'mail.message'      
'mail.test.ticket'      with_user(self.user_employee).with_context
'res.company'      create
'mail.template'      create
'ir.model'      _get
'mail.test.track'      create
'mail.message.subtype'      create
'ir.model.data'      create
'mail.template'      create
'mail.test.container'      
'mail.test.container'      create
'mail.test.container'      with_context(mail_create_nosubscribe=True).create
'mail.test.track.compute'      create
'res.partner'      create
'mail.test.track.monetary'      with_user(self.user_employee).with_context(self._test_context).create
'mail.test.ticket'      with_user(self.user_employee).with_context(self._test_context).create
'mail.test.container'      with_context(mail_create_nosubscribe=True).create
'mail.tracking.value'      search([
'ir.model.fields'      search
'res.users'      with_context(self._quick_create_ctx).create
'ir.config_parameter'      set_param
'ir.config_parameter'      set_param
'ir.config_parameter'      set_param
'ir.config_parameter'      set_param
'res.partner'      create
'res.partner'      create
'res.partner'      create
'res.partner'      create
'mail.performance.thread'      create
'mail.performance.thread'      search
'mail.performance.thread'      search
'mail.performance.thread'      search
'mail.performance.thread'      create
'mail.performance.thread'      create
'mail.test.simple'      create
'mail.test.simple'      create
'res.partner'      with_context(self._quick_create_ctx).create
'res.users'      with_context(self._quick_create_ctx).create
'mail.test.ticket'      with_context(self._quick_create_ctx).create
'mail.template'      create
'ir.model'      _get
'mail.test.activity'      create
'mail.activity'      with_context
'mail.test.activity'      create
'mail.activity'      
'mail.test.ticket'      browse
'mail.compose.message'      with_context
'mail.test.ticket'      browse
'mail.compose.message'      with_context
'mail.test.ticket'      browse
'mail.template'      browse
'mail.compose.message'      with_context
'res.partner'].sudo().search([('email', '=', 'nopartner.test@example.com')      .unlink
'mail.test.track'      create
'mail.test.track'      create
'mail.test.simple'      create
'mail.test.simple'      create
'mail.test.simple'      create
'mail.test.simple'      create
'mail.test.simple'      create
'mail.test.simple'      create
'mail.test.simple'      create
'mail.performance.tracking'      create
'mail.test.container'      sudo().create
'mail.test.container'      browse
'res.users'      with_context(self._quick_create_ctx).create
'res.partner'      with_context(self._quick_create_ctx).create
'mail.test.container'      with_context(mail_create_nosubscribe=True).create
'res.partner'      with_context
'mail.message'      sudo().create
'mail.mail'      sudo().create
'mail.mail'      sudo().browse(mail_ids).send
'mail.test.ticket'      create
'mail.test.ticket'      create
'res.partner'      
'mail.test.ticket'      create
'mail.test.ticket'      create
'res.partner'      
'mail.test.container'      with_context(mail_create_nosubscribe=True).create
'mail.test.ticket'      create
'mail.test.ticket'      create
'mail.message.subtype'      
'res.partner'      
'ir.model.fields'      _get
'ir.model.fields'      _get
'mail.message'      sudo().create
'ir.model.data'      _xmlid_to_res_id
'ir.model.data'      _xmlid_to_res_id
'mail.test.simple'      create
'mail.test.track'      create
'mail.message'      create
'res.partner'      with_context(self._quick_create_ctx).create
'mail.test.container'      with_context(mail_create_nosubscribe=True).create
'res.users'      with_context(self._quick_create_ctx).create
'res.users'      with_context(self._quick_create_ctx).create
'res.partner'      with_context(self._quick_create_ctx).create
'res.users'      with_context(self._quick_create_ctx).create
'res.users'      with_context(self._quick_create_ctx).create
'res.partner'      with_context(self._quick_create_ctx).create
'ir.attachment'      with_user(self.env.user).create
'mailing.mailing'      create
'ir.model'      _get
'mailing.mailing'      create
'ir.model'      _get
'mailing.mailing'      create
'ir.model'      _get
'mail.test.sms'      create
'mail.test.sms'      create
'mail.test.sms'      create
'mail.test.sms'      create
'mail.test.sms'      create
'phone.blacklist'      create
'res.partner'      create
'mail.test.sms'      create
'res.partner'       'number': phone_validation.phone_format
'res.partner'       'number': False,
'res.partner'       'number': record.phone_nbr,
'mailing.trace'      search([
'mailing.mailing'      create
'ir.model'      _get
'mailing.sms.test'      with_user(self.user_marketing).create
'mailing.mailing'      browse
'mailing.mailing'      browse
'ir.model'      _get
'mail.test.sms.partner'      create
'mail.test.sms.partner'      create
'mailing.mailing'      browse
'ir.model'      _get
'mail.test.sms.partner.2many'      create
'mailing.mailing'      browse
'phone.blacklist'      sudo().create
'ir.model'      _get
'mail.channel'      with_user(self.user_employee).init_odoobot
'mail.channel'      channel_fetch_listeners
'mail.channel'      with_user(self.user_employee).init_odoobot
'ir.model.data'      _xmlid_to_res_id
'ir.attachment'      with_user(self.user_employee).create
'mail.message'      search([
'res.partner'      with_context(self._quick_create_ctx).create
'mail.test.sms'      with_context(self._quick_create_ctx).create
'res.partner'      with_context
'res.partner'      with_context(**self._quick_create_ctx).create
'mail.test.sms'      with_context(**self._quick_create_ctx).create
'sms.template'      create
'ir.model'      _get
'sms.composer'      with_context
'sms.composer'      with_context
'mail.test.sms'      browse
'mail.test.sms'      browse
'mail.test.sms'      browse
'mail.test.sms'      browse
'mail.test.sms'      browse
'mail.test.sms'      browse
'mail.test.sms.partner'      create
'mail.test.sms.partner'      create
'res.partner'], 'number': False, 'state': 'exception', 'failure_type': 'sms_number_missing'}       self._test_body, messages)
'mail.test.sms.partner.2many'      create({'customer_ids': [
'mail.test.sms.partner.2many'      create({'customer_ids': [(4, self.partner_1.id), 
'mail.test.sms'      browse
'mail.test.sms'      browse
'mail.test.sms'      browse
'res.partner'], 'number': False, 'state': 'exception', 'failure_type': 'sms_number_missing'}       self._test_body, messages)
'mail.test.sms'      browse
'mail.test.sms'      browse
'mail.test.sms'      browse
'mail.test.sms'      browse
'mail.test.sms'      browse
'mail.test.sms'      browse
'mail.test.sms'      browse
'sms.template'      create
'ir.model'      _get
'mail.test.sms'      browse
'mail.test.sms'      browse
'sms.template'      create
'ir.model'      _get
'ir.model.data'      create
'mail.test.sms'      browse
'mail.test.sms'      browse
'mail.test.sms'      browse
'mail.test.sms'      browse
'mail.test.sms'      browse
'mail.test.sms'      browse
'mail.test.sms'      browse
'mail.test.sms'      browse
'mail.test.sms'      browse
'mail.test.sms'      browse
'mail.test.sms'      browse
'mail.test.sms'      browse(self.records.ids)._message_sms_schedule_mass
'mail.test.sms'      browse(self.records.ids)._message_sms_schedule_mass
'mail.test.sms'      browse(self.records.ids)._message_sms_schedule_mass
'mail.test.sms'      browse(self.records.ids)._message_sms_schedule_mass
'res.partner'], self.test_numbers_san[0       content='Dear %s this is an SMS.' % self.test_record_2.display_name)
'res.partner'], self.test_numbers_san[0       content='Dear %s this is an SMS.' % self.test_record_2.display_name)
'mail.blacklist'      create
'mail.blacklist'      create
'mail.blacklist'      create
'mail.blacklist'      create
'mail.blacklist'      search
'mail.blacklist'      sudo
'mail.blacklist'      _add
'mail.blacklist'      sudo
'mail.blacklist'      _remove
'mail.blacklist'      sudo
'mail.blacklist'      create
'mail.blacklist'      sudo
'mail.blacklist'      create
'mail.blacklist'      search([
'mail.blacklist'      search([
'mail.blacklist'      search([
'mail.blacklist'      search([
'mail.blacklist'      search([
'mail.blacklist'      search([
'mail.blacklist'      search([
'mail.blacklist'      search([
'link.tracker'      search_or_create
'link.tracker.click'      create
'link.tracker.click'      sudo().add_click
'link.tracker.click'      sudo().add_click
'mailing.test.blacklist'      create
'mailing.trace'      create
'link.tracker.click'      sudo().add_click
'ir.config_parameter'      set_param
'ir.config_parameter'      set_param
'ir.config_parameter'      set_param
'ir.config_parameter'      set_param
'mailing.performance'      create
'mailing.mailing'      create
'mailing.performance.blacklist'      create
'mail.blacklist'      create
'mailing.performance.blacklist'      flush
'mailing.mailing'      create
'website'      search
'website'      browse
'res.country'      create
'ir.translation'      create
'ir.translation'      create
'res.company'      create
'res.users'      with_context({'no_reset_password': True}).create
'website.rewrite'      create
'website.rewrite'      create
'test.model'      create
'test.model'      create
'account.journal'      create
'payment.acquirer'].search([('provider', '=', 'test')      .write
'account.account'      create
'account.account'      create
'product.product'      create
'survey.survey'      create
'slide.channel'      create
'uom.category'      with_context
'ir.model.data'      search
'uom.uom'      create
'uom.uom'      create
'uom.category'      create
'uom.uom'      create
'uom.uom'      create
'uom.uom'      create
'uom.uom'      create
'utm.stage'      search
'utm.mixin'      tracking_fields
'utm.mixin'      tracking_fields
"ir.actions.actions"      _for_xml_id
res["res_model"]      check_access_rights
'ir.config_parameter'      sudo
model      _get_placeholder_filename
'ir.qweb'      _render
'ir.ui.view'      _prepare_qcontext
"ir.model.fields"]._fields["ttype"      _description_selection
field.comodel_name      with_context
'base.document.layout'      extract_image_primary_secondary_colors
'ir.ui.view'      create
'ir.model.data'      create
'report.layout'      create
'ir.ui.view'      create
'ir.model.data'      create
'report.layout'      create
'base.document.layout'       as doc_layout:
'base.document.layout'       as doc_layout:
'base.document.layout'       as doc_layout:
'base.document.layout'       as doc_layout:
'base.document.layout'       as doc_layout:
'base.document.layout'       as doc_layout:
'base.document.layout'       as doc_layout:
'ir.ui.menu'      load_menus
'ir.ui.menu'      with_user(user_demo.id).load_menus
'ir.qweb'      _get_asset_content
'ir.ui.view'      sudo
'ir.module.module'      search([('name', '=', el.attrib.get
'res.partner'      search([
'ir.qweb.field.datetime'      attributes
'res.lang'      _lang_get(self.env.user.lang) or get_lang
'res.lang'      _lang_get(self.env.user.lang) or get_lang
'res.lang'      _lang_get(self.env.user.lang) or get_lang
'res.lang'      _lang_get(self.env.user.lang) or get_lang
model      browse(int
model      if model in self.env else self.env['ir.qweb.field']
'ir.ui.view'      create
'website'      browse(self._context.get
model      create
'ir.qweb'      _render
model      if model in self.env else self.env['ir.qweb.field']
'web_editor.converter.test.sub'      create
'web_editor.converter.test.sub'      create
'web_editor.converter.test'      create
'ir.qweb'      _render
model      if model in self.env else self.env['ir.qweb.field']
'website'      get_current_website
'website'      get_current_website
'website'      get_current_website
theme_model_name      with_context(active_test=False).browse
'ir.model.data'      search([('model', '=', find._name), 
model_name      create
'theme.utils'      with_context(website_id=website.id)._post_copy
'theme.utils'      with_context(website_id=website.id)._reset_default_config
'website'      get_current_website
'ir.actions.todo'      search([
'website'      get_current_website
'website'      get_current_website
'ir.module.module'      with_context(active_test=False).search
'ir.model.data'      _xmlid_to_res_id
'website'      get_current_website
'website'      browse
'website.page'      search([
'website'      search([
'website'      get_current_website
'website'      viewref
'website'      browse(self._context.get
'website'      browse(self._context.get
'ir.model.data'      _xmlid_to_res_id
'website'      browse
'website'      get_current_website
'website'      get_current_website
'ir.ui.view'      search
'website'      search([
"ir.actions.actions"      _for_xml_id
'website'      search([
"ir.actions.actions"      _for_xml_id
'ir.config_parameter'      sudo().get_param
"ir.actions.actions"      _for_xml_id
'website'      get_current_website
'website'      get_current_website
'website'      get_current_website
'website'      get_current_website
'ir.ui.view'      with_context(active_test=False).search
'web_editor.assets'      make_scss_customization
'theme.ir.asset'      sudo().with_context
'website'      get_current_website
'ir.asset'      sudo().with_context
'website'      get_current_website
'ir.ui.view'      with_context
'res.lang'      search
'ir.default'      get
'res.lang'      _lang_get_id
'website.menu'      browse(website._get_menu_ids
'website.menu'      search([
'res.company'      browse(vals.get
'res.groups'      concat(*(self.env.ref(it) for it in all_user_groups.split
'res.company'      browse
'ir.qweb'      clear_caches
'website.page'      search
'website.page'      create
'ir.attachment'      search
'ir.config_parameter'      sudo
'website.menu'      search([('url', 'in', list(module_data.keys())), 
'website.configurator.feature'      search
'website.configurator.feature'      _process_svg
'web_editor.assets'      make_scss_customization
'web_editor.assets'      make_scss_customization
'website.configurator.feature'      browse
'website.menu'      create
'website'      new_page
'website'      browse(website.id).configurator_set_menu_links
'ir.ui.view'      browse
'website'      with_context(website_id=website.id).viewref
'ir.attachment'      create
'ir.model.data'      create
'ir.module.module'      search([
'ir.attachment'      browse
'website'      with_context(website_id=website.id).viewref
'ir.ui.view'      create
'website'      viewref
'website'      browse
'website'      viewref
'website.menu'      search([('website_id', '=', self.id), 
'website.page'      create
'website.menu'      create
'website.page'      with_context(active_test=False).sudo().search([
'website.page'      with_context(active_test=False).sudo().search([
'website.page'      browse(int
'website'      browse(self._context.get
'website.page'      search
'ir.ui.view'      search
'website.menu'      search
'website.page'      browse(int
'website'      browse(self._context.get
'website.page'      search
'ir.ui.view'      search
'res.country'      search([
'ir.model.access'      check
'ir.model.access'      check
'ir.ui.view'      sudo
'website'      website_domain(self._context.get
'ir.ui.view'      with_context(active_test=False).sudo().search([
converter.model      _fields and 
converter.model      _rec_name)
'website.page'      sudo().search
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
model      _table
'website.page'      _search_get_detail
search_detail['model'      
'ir.ui.view'      if field == 'arch_db' or 
'ir.ui.view'      _table),
'ir.ui.view'      _name, field) for field in fields]
'ir.model.fields'      sudo().search
'res.users'      has_group
'ir.ui.view'      _render_template
'website'      search
'website.menu'      search([
'website'      browse
'website'      browse
"website"      website_domain
"website.page"      search
'ir.http'      _match
'website'      get_current_website
'website'      get_current_website
'res.groups'].browse(res['groups_id'      .name_get
'website'      browse
'website'      get_unique_path
'website'      get_unique_key(slugify
'website.menu'      search([('page_id', '=', int
'website.menu'      create
'website.rewrite'      create
'ir.ui.view'      browse
'website'      get_unique_path
'website'      get_current_website
'website'      get_unique_path
'website.menu'      search([
'res.partner'      search_read
'website.track'      read_group
'website.track'      read_group([
'website.visitor'      sudo
'website.track'      sudo().search
'website.track'      create
'ir.config_parameter'      sudo().get_param
'website.visitor'      sudo().search([
'website'      create
'res.lang'      _activate_lang
'ir.attachment'      create
'res.partner'      create
'ir.config_parameter'      sudo().get_param
'res.company'      create
'res.company'      create
'website'      create
'ir.attachment'      create
'website'      create
'ir.config_parameter'      sudo().get_param
'res.country'      create
'res.country'      create
'res.country'      create
'res.country'      create
'res.country'      create
'res.country.group'      create
'res.country.group'      create
'res.users'      create
'res.lang'      _activate_lang
'website.page'      create
'website'      search_count
'website'      get_current_website
'website'      create
'website'      get_current_website
'website'      get_current_website
'ir.ui.view'      create
'ir.qweb'      _render
'res.users'      search([
'res.lang'      _activate_lang
'ir.qweb'      _post_processing_att
'website'      create
'res.users'      create
'website'      search
'website.menu'      create
'website'      search
'website'      create
'ir.attachment'      create
'ir.asset'      create
'website'      search
'ir.ui.view'      create
'ir.attachment'      create
'res.lang'      _activate_lang
'website'      browse(1).write({'language_ids': [
'website'      search
'ir.ui.view'      create
'ir.ui.view'      create
'ir.ui.view'      create
'website.page'      create
'res.users'      search([
'ir.config_parameter'      sudo().set_param
'res.partner'      create
'res.users'      create
'website.visitor'      search
'website.visitor'      
'website.visitor'      search
'website.track'      search
'website.visitor'      search([
'website.track'      search([
'website.visitor'      search([('id', 'not in', 
'website.visitor'      search([
'website.visitor'      search([
'website.visitor'      with_context(active_test=False).search([
'website.visitor'      search([
'website.visitor'      search([
'website.visitor'      search([
'website.visitor'      search([
'ir.config_parameter'      sudo().set_param
'website.visitor'      create
'website.visitor'      _cron_archive_visitors
'website.visitor'      search([
'blog.post'      with_context(active_test=False).search
'mail.message'      sudo().browse
'ir.model.data'      _xmlid_to_res_id
'res.users'      sudo().browse
'res.users'      with_context({'no_reset_password': True}).create
'ir.attachment'      sudo().create
'mail.message'      sudo().search
'ir.attachment'      sudo().create
'mail.message'      sudo().search
"ir.actions.actions"      _for_xml_id
'crm.team'      search
'res.partner'      create
'website.visitor'      sudo().create
'crm.lead'      create
'crm.lead'      create
'crm.lead'      read_group
'bus.bus'      _sendone
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
'crm.reveal.view'      _clean_reveal_views
'ir.config_parameter'      sudo().get_param
'crm.lead'      with_context(active_test=False).search
'crm.reveal.view'].search([('reveal_ip', 'in', [lead.reveal_ip for lead in leads])      .unlink
'iap.account'      get
'crm.reveal.view'].search([('reveal_ip', '=', res['ip'])      .unlink
'crm.reveal.view'      search([
'crm.iap.lead.helpers'      notify_no_more_credit
'crm.reveal.view'      search
'ir.config_parameter'      sudo().set_param
'ir.config_parameter'      sudo().get_param
'crm.lead'      search([
'crm.lead'      create
'crm.iap.lead.helpers'      lead_vals_from_response
'ir.config_parameter'      sudo().get_param
'crm.reveal.rule'      _match_url
'res.partner'      browse
'res.partner'      _geo_localize
'res.partner'      search
'mail.activity'      sudo().create
'res.users'      sudo().browse
'res.partner'      create
'crm.lead'      create
'res.partner'      create
'res.partner'      create
'crm.lead.forward.to.partner'      with_context(context).create
'res.partner.grade'      create
'crm.lead'      with_context(mail_notrack=True).create
'res.users'      with_context({'no_reset_password': True, 'mail_notrack': True}).create
'crm.lead'      with_user(self.user_portal).create_opp_portal
'crm.lead'      browse
'crm.team'      _get_default_team_id
'crm.lead'      browse
'res.partner'      browse
'crm.lead'      message_subscribe
'ir.config_parameter'      sudo().get_param
'website.visitor'      _get_visitor_from_request
'event.registration'      sudo().search
'event.registration'      sudo().search
'website.menu'      sudo().create
'website'      sudo().new_page
'website.menu'      sudo().create
'website.event.menu'      create
'event.tag'      search([
'ir.qweb.field.date'      record_to_html
'ir.qweb.field.date'      record_to_html
'event.registration'      read_group
'event.registration'      sudo().search
'website.visitor'      with_context
'website.visitor'      sudo
'website.visitor'      sudo().with_context(active_test=False).search
'event.sponsor.type'      search
'website'      image_url
'website'      image_url
'chat.room'      _default_name
'res.partner'      browse
'event.event'      create
'event.event'      create
'sale.order.line'      sudo().search
'sale.order'      sudo().browse
'product.product'      browse
'event.event.ticket'      browse
'event.event.ticket'      search([
'event.registration'      search
'event.event'      create
'event.event.ticket'      create
'account.journal'      create
'event.track.stage'      search
'website'      image_url
'website.visitor'      _get_visitor_from_request
'event.track.visitor'      sudo().search_read
'event.track.visitor'      read_group
'event.track.visitor'      sudo().search
'res.partner'      _clean_website
'res.partner'      _clean_website
'event.track.stage'      browse
'ir.model.data'      _xmlid_to_res_id
'website.visitor'      _get_visitor_from_request
'event.track.visitor'      sudo().search
'event.track.visitor'      sudo().create
'website.visitor'      _get_visitor_from_request
'event.track.visitor'      sudo().search_read
'forum.post'      read_group
'forum.post'      search_count
'forum.post'      search_count
'ir.ui.view'      _render_template
'forum.post'].with_context(active_test=False).search([('forum_id', 'in', self.ids)      .write
'forum.tag'      search([('forum_id', '=', self.id), 
'website'      sudo().search
'forum.forum'      sudo().search_count(website.website_domain
'forum.post.vote'      search_read([('post_id', 'in', self._ids), 
'forum.post.vote'      read_group([
'forum.forum'      browse
'website'      image_url
'forum.post'      with_context(active_test=False).search([
'ir.model.data'      _xmlid_to_res_id
'ir.model.data'      _xmlid_to_res_id
'ir.model.data'      _xmlid_to_res_id
'mail.message'      sudo().browse
'mail.message'      sudo().browse
'mail.followers'      sudo().search
'ir.qweb.field.date'      record_to_html
'forum.post'      browse(vals.get
'forum.forum'      browse(vals.get
'hr.job'      sudo().search([
'hr.recruitment.stage'      sudo().search
"res.lang"      search([
'ir.config_parameter'      sudo().get_param
'mail.channel'      search_read
'mail.channel'      search([
'mail.channel'      search_count([('livechat_visitor_id', 'in', self.ids), 
'mail.channel'      create
'mail.channel.partner'      sudo().search
'bus.bus'      _sendmany
'res.users'      create
'im_livechat.channel'      create
'website.visitor'      create
'im_livechat.channel'      , '_get_available_users', get_available_users)
'website.visitor'      , '_get_visitor_from_request', get_visitor_from_request)
'ir.model'      sudo().search([
'rating.rating'      search([('res_id', '=', channel.id), 
'website.track'      create
'mail.channel'      _get_visitor_history
'mail.channel'      search([('livechat_visitor_id', '=', self.visitor.id), 
'mail.channel'      search([('livechat_visitor_id', '=', self.visitor.id), 
'mail.channel'      search([('livechat_visitor_id', '=', self.visitor.id), 
'res.users'      create
'mail.channel'      search([('livechat_visitor_id', '=', self.visitor.id), 
'mail.channel'      search([
'mail.channel'      search([('livechat_visitor_id', '=', self.visitor.id), 
'mail.channel'      search([('livechat_visitor_id', '=', self.visitor.id), 
'website.visitor'      create
'mail.channel'      search([
'mail.channel'      search([
'mail.channel'      search([('livechat_visitor_id', '=', self.visitor_tour.id), 
'mail.channel'      search([('livechat_visitor_id', '=', self.visitor_tour.id), 
'mail.channel'      search([('livechat_visitor_id', '=', self.visitor_tour.id), 
'mail.channel'      search([('livechat_visitor_id', '=', self.visitor_tour.id), 
'mail.channel'      search([
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo().set_param
'sale.order'      read_group
'sale.order'      search
'website'      search
'website'      search
"website"      browse
"website"      browse
'product.public.category'      browse([int(p) for p in category.parent_path.split
'website'      sale_product_domain
'website'      sale_product_domain
'website'      get_current_website
'product.product'].browse(combination_info['product_id'       or self).with_context
'account.fiscal.position'      sudo().get_fiscal_position
'account.tax'      _fix_tax_included_price_company
'account.tax'      _fix_tax_included_price_company
'product.product'      browse(self._get_first_possible_variant_id
'website'      image_url
'ir.qweb.field.monetary'      value_to_html
'ir.qweb.field.monetary'      value_to_html
'product.product'      browse
"ir.actions.actions"      _for_xml_id
'website'      get_current_website
'website'      search_read
'product.product'      browse
'sale.order.line'      sudo().search
'product.product'      with_context(product_context).with_company(order.company_id.id).browse
'account.tax'      _fix_tax_included_price_company
'account.tax'      _fix_tax_included_price_company
'account.tax'      _fix_tax_included_price_company
'sale.order.line'      sudo().with_context
'product.product'      with_context
'product.product'      with_context(product_context).with_company
'res.country.group'      search([
'product.pricelist'      browse
'product.pricelist'      browse
'account.payment.term'      sudo().search([
'res.users'      sudo().browse(affiliate_id).exists
'sale.order'      sudo().search([
'ir.config_parameter'      sudo().get_param
'sale.order'      with_company(request.website.company_id.id).sudo().browse(sale_order_id).exists
'account.fiscal.position'      sudo
'product.pricelist'      browse(force_pricelist).exists
'product.pricelist'      browse(pricelist_id).sudo
'sale.order'      with_company(request.website.company_id.id).with_user(SUPERUSER_ID).create
'product.pricelist'      sudo().search([
"ir.actions.actions"      _for_xml_id
'product.public.category'      _search_get_detail
'product.template'      _search_get_detail
'website.track'      read_group
'product.product'      browse(product_id)._is_variant_possible
'product.template'      create
'account.tax'      create
'product.attribute'      create
'product.attribute.value'      create
'product.attribute.value'      create
'product.template.attribute.line'      create
'product.template.attribute.value'      \
'product.attribute'      create
'product.attribute.value'      create
'product.attribute.value'      create
'product.attribute'      create
'product.attribute.value'      create
'product.attribute.value'      create
'product.template'      create
'product.template.attribute.line'      create
'product.attribute.value'      create
'product.template'      create
'product.template.attribute.line'      create
'product.template'      create
'website'      get_current_website().get_current_pricelist() | self.env.ref
'product.pricelist.item'      create
'product.attribute'      create
'product.attribute.value'      create
'product.template'      create
'product.template.attribute.line'      create
'product.template.attribute.value'      \
'product.attribute'      create
'product.attribute.value'      create
'product.template'      create
'product.template.attribute.line'      create
'product.template.attribute.value'      \
'product.attribute'      create
'product.attribute.value'      create
'product.template'      create
'product.template.attribute.line'      create
'res.config.settings'      create
'product.product'      create
'product.attribute'      create
'product.attribute.value'      create
'product.attribute.value'      create
'product.template'      create
'product.template.attribute.line'      create
'product.template'      create
'account.journal'      create
'account.tax.group'      create
'account.tax'      create
'product.product'      create
'res.config.settings'      create
'website'      browse(1).write
'sale.order'      create
'product.product'      create
'res.company'      create
'res.company'      create
'res.company'      create
'product.pricelist'      create
'product.product'      create
'res.partner'      create
'website'      create
'website'      create
'website'      create
'sale.order'      create
'sale.order'      create
'sale.order'      create
"mail.mail"      search
'product.attribute'      create
'product.attribute.value'      create
'product.template'      with_context(create_product_product=True).create
'product.template.attribute.line'      create
'product.template.attribute.value'      search([
'product.product'      create
'product.product'      create
'product.image'      with_context(**additionnal_context).create
'product.attribute'      create
'product.attribute.value'      create
'product.template'      with_context(create_product_product=True).create
'product.template.attribute.line'      create
'product.pricelist'].search([       - self.env.ref('product.list0')).write
'res.country.group'      create
'product.pricelist'      create
'product.pricelist.item'      create
'product.pricelist'      create
'product.pricelist.item'      create
'product.pricelist'      create
'product.pricelist.item'      create
'res.country.group'      create
'product.pricelist'      create
'product.pricelist'      browse
'product.product'      create
'website'      get_current_website
'product.pricelist'      create
'sale.order'      create
'product.product'      create
'website'      get_current_website
'sale.order'      create
'website'      browse
'website'      browse
'website'      _get_pricelist_available
'ir.property'].search([('res_id', '=', 'res.partner,%s' % self.env.user.partner_id.id)      .unlink
'res.country.group'      create
'res.country.group'      create({'name': 'Belgium', 'country_ids': [
'res.country.group'      create({'name': 'Netherlands', 'country_ids': [
'res.company'      create
'product.pricelist'      create
'res.company'      create
'product.pricelist'      create
'product.pricelist'      create
'ir.property'      with_company(self.company1)._get
'ir.property'      with_company(self.company2)._get
'website'      get_current_website
'product.pricelist.item'      create
'account.tax'      create
'website'      get_current_website
'product.pricelist'].search([       - pricelist).write
'product.template'      create
'product.pricelist.item'      create
'account.tax'      create
'account.tax'      create
'account.fiscal.position'      create
'account.fiscal.position.tax'      create
'website'      get_current_website
'product.pricelist'].search([       - pricelist).write
'account.tax'      create
'account.tax'      create
'product.template'      create
'product.pricelist.item'      create
'account.fiscal.position'      create
'account.fiscal.position.tax'      create
'sale.order'      create
'sale.order.line'      create
'website.visitor'      search
'website.track'      search
'product.product'      create
'website.visitor'      search([
'website.track'      search([
'website.visitor'      search([
'website.track'      search([
'product.product'      create
'website.visitor'      search([
'website.track'      search([
'sale.coupon.apply.code'      with_context(active_id=self.id).create
'sale.order.line'      new
'coupon.coupon'      search
'product.public.category'      create
'product.product'      create
'product.product'      create
'product.product'      create
'coupon.program'].search([      .write
'coupon.program'      create
'coupon.program'      create
'coupon.program'      create
'coupon.generate.wizard'      with_context(active_id=program.id).create({}).generate_coupon
'res.partner'      create
'sale.order'      create
'website'      browse
'sale.order.line'      create
'product.product'      create
'sale.coupon.apply.code'      with_context(active_id=order.id).create
'coupon.program'      browse(self.env.context.get
'link.tracker'      search([
'link.tracker'      create
'delivery.carrier'].sudo().search([('website_published', '=', True)      .available_carriers
'product.product'      create
'product.product'      create
'delivery.carrier'      create
'delivery.price.rule'      create
'account.journal'      create
'sale.order.line'      sudo().search_read
'website'      get_current_website().get_current_pricelist() | self.env.ref
'product.product'      sudo().browse
'website'      get_current_website
'res.company'      create
'website'      create
'stock.warehouse'      search([
'stock.warehouse'      create
'product.product'      create
'product.product'      create
'stock.quant'      with_context(inventory_mode=True).create
'stock.quant'      with_context(inventory_mode=True).create
'sale.order'      create
'product.product'      sudo().browse
'product.wishlist'      search([
"mail.message"      sudo().new(dict
"mail.render.mixin"      _render_encapsulate
"mail.mail"      sudo().create
'product.wishlist'      create
'product.wishlist'      current().mapped
'product.wishlist'      current().mapped
'product.template'].search([      .write
'product.attribute'      create
'product.attribute.value'      create
'product.attribute.value'      create
'product.attribute'      create
'product.attribute.value'      create
'product.attribute.value'      create
'product.template'      create
'product.template.attribute.line'      create
'slide.slide.partner'      sudo().read_group
'slide.slide.partner'      search(removed_slide_partner_domain).unlink
'res.users'      sudo().search([('partner_id', 'in', list(partner_karma.keys
'slide.channel.partner'      
'mail.message'      sudo().new(dict
'mail.mail'      sudo().create
'ir.model.data'      _xmlid_to_res_id
'ir.model.data'      _xmlid_to_res_id
'ir.model.data'      _xmlid_to_res_id
'slide.channel.partner'      sudo().read_group([
'slide.channel.partner'      sudo().read_group(['&', ('channel_id', 'in', self.ids), 
'slide.channel.partner'      sudo().search
'slide.slide']._fields['slide_type'      get_values
'slide.slide'      read_group
'slide.slide']._fields['slide_type'      get_values
'slide.channel.partner'      sudo().search
'slide.slide'      sudo().search
'slide.slide.partner'      sudo().search
'res.users'      sudo().browse
'mail.message'      sudo().browse
"ir.actions.actions"      _for_xml_id
'slide.channel.partner'      sudo().search
'slide.channel.partner'      sudo().create
'slide.channel.partner'      sudo
'slide.slide.partner'      sudo().search
'slide.channel.partner'      sudo().search
'res.users'      sudo().search
'slide.channel.partner'      sudo().search(removed_channel_partner_domain).unlink
"ir.actions.actions"      _for_xml_id
"ir.actions.actions"      _for_xml_id
'res.partner'      browse(partner_id).exists
'res.partner'      browse(partner_id).exists
'slide.slide'      sudo().search([('channel_id', '=', self.id), 
'slide.slide'      sudo().search
'slide.slide'      browse
'slide.slide'      browse
'slide.slide'      browse
'slide.channel.partner'      search
'slide.slide.partner'      sudo().search
'slide.slide.partner'      sudo().read_group
'slide.slide']._fields['slide_type'      get_values
'slide.slide'      read_group
'slide.slide']._fields['slide_type'      get_values
'slide.slide.partner'      sudo().search
'slide.channel'      browse
'slide.slide.partner'      sudo
'slide.slide.partner'      sudo
'slide.slide.partner'      sudo
'slide.slide.partner'      sudo().search
'website'      get_current_website
'google.drive.config'      get_access_token
'website'      get_current_website
'website'      image_url
'slide.channel'      with_user(self.user_officer).create
'slide.slide'      with_user(self.user_officer).create
'slide.slide'      with_user(self.user_officer).create
'slide.channel.partner'      create
'slide.channel.partner'      create
'slide.channel.partner'      create
'slide.slide.partner'      create
'slide.channel.partner'      search([
'slide.slide.partner'      search([
'res.users'      search([('groups_id', 'in', self.ref
'slide.channel'      with_user(self.user_officer).create
'res.users'      create
'res.users'      create
'res.users'      create
'slide.slide'      with_user(self.user_officer).create
'slide.channel'      create
'res.users'      sudo()._get_signup_invitation_scope
'res.partner'      search
'mail.template'      browse
'mail.mail'      sudo().create
'mail.message'      sudo().new(dict
'ir.model'      _get
'mail.render.mixin'      _replace_local_links
"ir.actions.actions"      _for_xml_id
'survey.user_input'      sudo().search
'survey.user_input'      _generate_invite_token
'res.lang'      _lang_get
'ir.qweb'      clear_caches
'ir.attachment'      sudo().browse
'bus.bus'      _sendone
'ir.attachment'      sudo().search
'ir.actions.todo'      search([
action_model      sudo().browse
record._name       type
act.res_model      fields_view_get
vals['res_model']      _description
self.model_id.model      browse(self._context.get('active_id')).write
self.crud_model_id.model      create
self.model_id.model      browse(self._context.get
action.model_name      check_access_rights
'ir.model'      sudo().search
line.col1.relation      browse(value).exists
line.col1.relation      _search
line.col1.relation      _search
action_type      browse
'ir.model'      _get
'ir.model'      name_search
'ir.model'      browse
'ir.model'      _get
'ir.attachment'      search
'ir.attachment'      create
'ir.config_parameter'      sudo
'ir.ui.view'      get_view_id
'res.users'      context_get
'res.users'      browse
'ir.ui.view'      sudo().with_context
'ir.config_parameter'      sudo().get_param
self.model      browse
self.model      sudo(False).browse
"ir.actions.actions"      _for_xml_id
attachment.res_model      browse
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo
'ir.attachment'      flush
res_model      browse(res_ids).exists
res_model      check_access_rights
res_model      with_context(active_test=False).search([
'ir.actions.act_window'      _for_xml_id
'ir.actions.server'      browse(server_action_id).run
model      search_count
'ir.cron.trigger'      sudo().create
'ir.model.fields'      _get
'ir.model.fields'      _get
'ir.model.fields'      _get
field.comodel_name]._fields[f      string
field.comodel_name      
'ir.model.data'      _update_xmlids
model      browse(int
'ir.attachment'      sudo().search_read(domain=[('res_model', '=', model), ('res_id', '=', record.id), 
'ir.config_parameter'      sudo
'ir.config_parameter'      sudo
model.model      _inherits)
'ir.module.module'      search([
'ir.ui.view'      search([
'ir.model.fields'].search([('relation', 'in', self.mapped('model'))      .unlink
model_name      
'ir.model.data'      _update_xmlids
'ir.model.fields.selection'      _get_selection
'ir.model.fields.selection'      _update_selection
'ir.module.module'      search([
model_name      _table
comodel_name      _table
record.model      _pop_field
'ir.ui.view'      search
'ir.model'      browse
'ir.model'      search([
'ir.model'      _get_id
model_name      _fields.values
parent      _fields
'ir.model.data'      _update_xmlids
'ir.model.fields.selection'      _get_selection_data
field_data['relation']      _fields or
model_name      _fields.items
'ir.model.data'      _update_xmlids
'ir.model.fields'      _get_ids
'ir.model.fields'      browse
selection.field_id.model      _table,
data.model.model      _table    
model_name      
'ir.model.data'      _update_xmlids
'ir.model'      _get
model       method)
model      browse(id_name).name_get
model      search([
'ir.model.fields'      browse
f.model      _log_access
model      browse
'ir.module.module'      search([
'ir.model.constraint'      browse(unique
'ir.model.constraint'      search([
'ir.model.fields.selection'      browse(unique(selection_ids)).exists
'ir.model.fields'      browse(unique
'ir.model.relation'      search([
'ir.model'      browse(unique
data.model      browse
m      for m in Model._inherits_children):
'ir.ui.view'      _create_all_specific_views
model      browse
'ir.model'      browse(self._context.get
'ir.actions.act_window'      create
'ir.ui.menu'      create
'ir.model.data'      sudo().search_read
'ir.model.data'      with_context
model].browse(imd_models[model      .exists
'ir.module.category'      search([
'ir.model.data'      _module_data_uninstall
'ir.ui.view'      with_context(**{'active_test': False, MODULE_UNINSTALL_FLAG: True}).search
'ir.module.module'      next
'ir.ui.menu'      search([
'ir.model.data'      create
'res.lang'      get_installed
'ir.translation'      _load_module_terms
'ir.module.category'      search_read
'ir.module.module'      search_count
'ir.module.module'      search([
'ir.module.module'      browse(set
'ir.module.module'      search([
'ir.module.module'      browse(set
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      set_param
'ir.model.fields'      browse
model      browse(int(resource_id)).exists
'ir.model.fields'      _get
model]._fields[name      type,
v[0]      browse
'ir.model.fields'      _get
model      _fields[name]
'ir.model.fields'      _get
'ir.model.fields'      _get
model]._fields[name      type,
model      _fields[name]
'ir.ui.view'      get_view_id
'ir.ui.view'      get_view_id
'ir.ui.view'      sudo().browse
'ir.asset'      _get_asset_paths
model      if model in self.env else self.env['ir.qweb.field']
model      if model in self.env else self.env['ir.qweb.field']
'decimal.precision'      precision_get
'res.company'      browse
'ir.actions.report'      barcode
'ir.qweb'      _render
model_name      sudo()._where_calc
model_name      _table]
'ir.model'      _get
'ir.sequence.date_range'      search
'ir.sequence.date_range'      search([('sequence_id', '=', self.id), ('date_from', '>=', date), 
'ir.sequence.date_range'      search([('sequence_id', '=', self.id), ('date_to', '>=', date_from), 
'ir.sequence.date_range'      sudo().create
'ir.sequence.date_range'      search([('sequence_id', '=', self.id), ('date_from', '<=', dt), 
'res.lang'      get_installed
'ir.model.fields'      sudo().search([
'ir.model.fields'      sudo().search([
'ir.model.fields'      _get
mname      browse
model]._fields[field      translate for model, ids in self.env.all.towrite.items() for record_id, fields in ids.items
'res.lang'      search_count([
model      with_context(lang=main_lang).browse
'ir.model.fields'      search([
'ir.module.module'      sudo().search_read
'res.lang'      _lang_get
'ir.translation'      sudo().search_read
'res.lang'      sudo().get_installed
'ir.model.data'      sudo().search
'ir.model.data'      _xmlid_to_res_id
'ir.model.data'      sudo().search_read
'ir.model.data'      sudo().search
'ir.model.data'      sudo().search_read
'ir.ui.view.custom'      search([
'ir.ui.view'      
field.comodel_name      sudo
model_name      with_context
'ir.model.data'      _xmlid_to_res_model_res_id
'ir.actions.actions'      browse(action_id).exists
'ir.model.data'      _xmlid_to_res_id(group.strip
'ir.model.data'      _xmlid_to_res_id
'ir.model.data'      sudo().search_read
engine      _render
"res.users"      browse
'ir.translation'      translate_fields
'res.partner'      create
'res.currency'      browse
'res.currency'      browse
'res.config.settings'      open_company
active_model      browse
'ir.actions.report'      search([
"ir.actions.actions"      _for_xml_id
'res.company'      sudo().search
'ir.module.module'      search([
'ir.module.module'      check_access_rights
'ir.module.module'      sudo
'ir.config_parameter'      sudo
field.comodel_name      browse(int(value)).exists
'ir.default'      sudo
'ir.config_parameter'      sudo
'res.config'      next
'ir.actions.act_window'      search([
'ir.actions.act_window'      search([
model_name      fields_get
'res.partner'      _formatting_address_fields
'res.currency.rate'      flush
'res.company'      browse(self._context.get
'res.currency.rate'      _get_last_rates_for_companies
'res.company'      browse(self._context.get
'res.company'      browse(self._context.get
'res.company'      browse(self._context.get
'res.currency.rate'      _get_last_rates_for_companies
'res.currency.rate'      _get_last_rates_for_companies
'res.lang'      _search([
'res.company'      browse(self._context.get
'res.currency'      browse(self._context.get
'ir.module.module'      search([
'res.users'      search_count([
'res.partner'      search_count([
'ir.default'      discard_values
'ir.translation'].search([('lang', '=', language.code)      .unlink
'res.lang'      get_installed
'res.partner'      with_context
'ir.ui.view'      postprocess_and_fields
'res.partner.category'      browse(self._context.get
'res.lang'      get_installed
'res.users'      browse
'res.partner'      search_count([
'res.users'      sudo().search([
'res.users'      sudo(False).check_access_rights
'res.company'      browse
'res.users'      check_access_rights
'res.users'      sudo().search([
'res.users'      sudo(False).check_access_rights
'res.partner.category'      browse
'ir.model.access'      call_cache_clearing_methods
'res.users'      has_group.clear_cache
'ir.model.data'      _xmlid_to_res_id
'res.users'      browse(default_user_id).sudo
'ir.model.data'      _xmlid_to_res_id
'res.company'      sudo().search_count
'res.groups'      search
'ir.model.access'      call_cache_clearing_methods
'res.users.log'      create
'ir.config_parameter'      sudo
'ir.actions.actions'      clear_caches
'ir.actions.actions'      clear_caches
'ir.actions.actions'      clear_caches
'ir.module.category'       'boolean', others, 
"res.groups"      _update_user_groups_view
"res.groups"      _update_user_groups_view
'ir.model.data'      _xmlid_to_res_id
'res.groups'      sudo().browse(get_selection_groups
'res.groups'      sudo().get_groups_by_application
'res.users'      browse
'res.users.apikeys'      _check_credentials
'res.users.apikeys'      _generate(None, self.sudo
'res.currency'      browse
'res.currency'      search([
'res.currency'      browse
'res.company'      search
'res.currency'      search([
'res.country'      search
'res.country.state'      search
'res.partner.title'      search
'res.partner']._fields['tz'      get_values
'res.partner'      
'res.partner'      _populate_factories
'res.users'      search([
'ir.config_parameter'      sudo().set_param
'res.partner'      create
'res.users'      create
'res.users'      search([
'ir.config_parameter'      sudo().set_param
'res.partner'      create
'res.users'      create
'res.users'      search([
'ir.config_parameter'      sudo().set_param
'res.partner'      create
'res.users'      with_context(no_reset_password=True).create
'res.currency'      with_user
"ir.ui.view"      create
'res.partner'      browse(1).with_user
'res.partner'      with_user
'res.company'      with_user
'res.company'      with_user
'res.company'      with_user
'res.company'      with_user
'ir.rule'      create
'res.partner'      with_user
'ir.rule'      create
'ir.rule'      create
'res.groups'      create
'ir.rule'].search([('groups', '=', False)      .unlink
'res.partner'      search
'res.partner'      search([
'res.partner'      search([
'res.partner'      search([
'res.partner'      search([
'res.partner'      search([
'res.partner'      search([
'res.partner'      search
'res.partner'      search
'res.partner'      search
'res.partner'      search([('parent_id', '=', False), 
'res.partner'      search([('name', 'ilike', 'g'), 
'res.partner'      search([('name', 'ilike', 'g'), 
'res.partner'      search([('name', 'ilike', 'j'), 
'res.users'      create
'res.partner'].search([('name', '=', 'Landon Roberts')      .with_user
'res.partner'      search([
'res.partner'      search([
'res.partner'      search([('name', 'ilike', 'a'), 
'res.partner'      browse
'res.partner'].search([('name', 'ilike', 'a'), ('id', 'in', self.partners.ids)       limit=1).ensure_one
'res.partner'      search([('name', 'ilike', 'a'), 
'res.partner'      search([('name', 'ilike', 'a'), 
'res.partner'      search([('name', 'ilike', 'b'), 
'ir.ui.menu'      search
'res.partner'      search([
'res.partner'      find_or_create
'res.partner'      browse
'res.partner'      with_context
'res.partner'      browse
'res.partner'      with_context
'res.partner.title'      create
'res.partner.title'      create
'res.partner'      create
'res.users'      create
'res.groups'      search
'res.groups'      create
'res.groups'      create
'res.groups'      create({'name': 'G', 'implied_ids': [Command.set(
'res.groups'      create({'name': 'D', 'implied_ids': [Command.set
'res.groups'      with_context(lang='en_US').create
'res.users'      browse
'res.partner'      create
'res.partner'      search([
'res.partner'      search([
'res.partner'      name_create
'ir.model.data'      create
'res.partner'      search([
'res.partner'      create
'res.partner'      search([
'res.partner'      search([
'res.partner'      name_create
'ir.model.data'      create
'res.partner'      create
'res.partner'      with_user
'ir.rule'].search([      .unlink
'ir.rule'      create
'ir.model'      _get
'res.partner.bank'      with_user
'res.currency'      search
'res.company'      create
'res.company'      search
'res.partner.category'      search
'res.lang'      _activate_lang
'res.partner'].search([('name', '=', 'Pepper Street')      .country_id = self.env.ref
'res.country'      with_context
'res.country'      search
'res.users'      search([
'res.bank'      create
'res.bank'      create
'res.bank'      create
'res.bank'      create
'res.bank'      search
'res.bank'      search
'res.lang'      _activate_lang
'res.partner.title'      with_context
'res.users'      with_user(self.env.ref
'ir.rule'].search([      .unlink
'ir.rule'      create
'ir.model'      _get
'ir.model'      _get
'res.partner'      with_context
'res.users'      with_context
'res.company'      browse
'res.partner'      with_context
'res.users'      with_context
'res.company'      browse
'res.partner'      
'res.partner'       'property_account_payable_id'):
'account.account'      create
'account.account'      create
'res.users'      
'res.company'      
'res.groups'      
'res.bank'      
'res.country'      
'res.lang'      
'res.country'      create
'res.partner'      create
'ir.actions.server'      create
'res.partner.category'      search([
'res.groups'      create
'ir.actions.todo'      create
'ir.model'      search([
'ir.model.fields'      create
self.MODEL      _fields)
'ir.ui.view'      create
self.MODEL      _fields)
self.MODEL      _fields)
'ir.model'      _get
'ir.model'      _get
'ir.model.fields'      create
'ir.model.fields'      create
'ir.model'      search([
'ir.model.fields'      create
self.MODEL      _fields['x_image']
'res.country'      search([
'res.partner'      create
'ir.model.fields'      create
'ir.model'      _get_id
'ir.model.fields'      create
'ir.model'      _get_id
'ir.model'      search([
'ir.model.fields'      create
'ir.config_parameter'      set_param
'ir.rule'      create
'ir.config_parameter'      set_param
'ir.config_parameter'      set_param
'ir.config_parameter'      set_param
'ir.config_parameter'      set_param
'ir.config_parameter'      set_param
'ir.config_parameter'].search([('key', 'ilike', 'base.image_autoresize%')      .unlink
'ir.config_parameter'      set_param
'ir.config_parameter'      set_param
'ir.config_parameter'      set_param
'ir.config_parameter'      set_param
'ir.cron.trigger'      sudo
'ir.cron'      create
'res.partner'      create
'res.partner'      create
'res.partner.title'      create
"res.company"      create
"res.company"      create
'res.users'      create
"ir.default"      with_user
'ir.attachment'      create
'ir.http'      binary_content
'ir.attachment'      create
'ir.http'      binary_content
'res.partner'      create
'ir.http'      binary_content
'ir.property'      create
'ir.model.fields'      search
'ir.http'      binary_content
'ir.attachment'      create
'ir.http'      with_user(public_user).binary_content
'ir.model.data'      search
'res.users'      _load_records
'ir.model'      create
'ir.model'      create
'x_bananas'      _order, order)
'x_bananas'      search
'x_bananas'      read_group
'x_bananas'      create
'ir.model.fields'      _get('x_bananas', 'x_name').unlink
'x_bananas'      browse
'ir.model.fields'      create
'ir.model'      search([
'res.partner'      create
'res.partner.category'      create
'res.partner.category'      create
'res.users'      create
'res.partner'      create
'res.partner'      create
'res.users'      create
'ir.model'      search([
'ir.rule'      create
'res.partner'      with_user(user).search
'res.partner'      create
'res.partner'      create
'res.users'      create
'res.users'      create
'res.partner'      with_user(user).create
'ir.property'      with_user(user)._set_multi
'ir.property'      with_user(user)._get
'ir.property'      with_user(user)._get
'res.bank'      create
'res.bank'      create
'res.bank'      create
'res.country'      create
'res.users'      default_get
'res.partner'      search
'res.users'      create
'res.partner'      create
'res.partner'      search
'res.users'      create
'res.partner'      search
'res.users'      create
'res.users'      create
'res.users'      create
'res.partner'      create
'res.partner'      search
'res.partner'      search
'ir.profile'      search([
'ir.profile'      search
'ir.ui.view'      create
'ir.ui.view'      create
'ir.qweb'      _render
'ir.qweb'      _render
'ir.qweb'      _render
'res.partner'      create
'res.partner'      flush
'res.partner'      create
'res.company'      create
'res.company'      create
'ir.ui.view'      create
'ir.ui.view'      create
'ir.ui.view'      create
'ir.ui.view'      create
'ir.ui.view'      create
'ir.ui.view'      create
'ir.ui.view'      create
'ir.ui.view'      create
'ir.ui.view'      create
'ir.ui.view'      create
'ir.ui.view'      create
'ir.ui.view'      create
'ir.ui.view'      create
'ir.ui.view'      create
'ir.ui.view'      create
'ir.ui.view'      create
'ir.ui.view'      create
'ir.ui.view'      create
'ir.ui.view'      create
'ir.ui.view'      create
'res.lang'      _activate_lang
'ir.ui.view'      create
'ir.model.data'      create
'ir.ui.view'      create
'res.partner'      create
'ir.ui.view'      create
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
'ir.ui.view'      create
'ir.qweb'      _render
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
'ir.qweb'      _render
'ir.ui.view'      create
model_name      fields_get
'ir.model'      search([
config_settings.name      create({}).execute
'res.users'       view='base.view_users_form')
'ir.module.category'      create
'res.groups'      create
'res.users'      fields_get
'res.users'      create
'ir.model.fields'      create
'ir.model.fields'      create
'ir.translation'      search
'ir.translation'      search
'res.partner.category'      create
'res.partner.category'      create
'ir.translation'      create
'ir.translation'      create
'ir.translation'      translate_fields
'ir.translation'      search
'res.partner.category'      create
'ir.translation'      translate_fields
'ir.translation'      search([('name', '=', 'res.partner.category,name'), 
'ir.translation'      search
'res.lang'      get_installed
'ir.translation'      search
'res.lang'      get_installed
'ir.translation'      create
'res.lang'      _activate_lang
'res.partner'].with_context(active_test=False).search([      .write
'res.lang'      get_installed
'ir.translation'      search
'res.lang'      _activate_lang
'res.lang'      get_installed
'ir.translation'      create
'ir.translation'      search
'res.lang'      _activate_lang
'res.lang'      _activate_lang
'res.partner'].with_context(active_test=False).search([      .write
'res.lang'      get_installed
'ir.translation'      search
'res.lang'      _activate_lang
'res.lang'      get_installed
'ir.translation'      search
'ir.translation'      search
'ir.translation'      translate_fields
'ir.translation'      search
'ir.model'      _fields['state']
'ir.model.fields'      _get
'ir.model'      fields_get
'ir.model'      with_context(lang='fr_FR').fields_get
'res.lang'      _activate_lang
'ir.model.fields'      _get
'ir.translation'      create
'ir.model'      with_context
'ir.ui.view'      create
'ir.translation'      create
'ir.ui.view'      .arch_db, 'translate', html_translate)
'ir.translation'      search
'ir.translation'      search
"ir.ui.view"      create
'res.groups'      _load_records
'res.users'      create
'res.partner'      create
'res.users'      with_user
'res.groups'      _load_records
'res.groups'      _load_records
'res.groups'      _load_records
'res.users'      create
'res.users'      create
"res.groups"      create
'res.users'      create
"res.groups"      create
'res.groups'      _load_records
'res.users'      create
'res.users'      create
"res.groups"      create
'res.users'      create
"res.groups"      create({"name": "U", "implied_ids": [Command.set
'ir.ui.view'      locate_node
'ir.ui.view'      locate_node
'ir.ui.view'      locate_node
'ir.ui.view'      locate_node
'ir.ui.view'      locate_node
'ir.ui.view'      locate_node
'ir.ui.view'      locate_node
'ir.ui.view'      locate_node
'ir.ui.view'      locate_node
'ir.ui.view'      locate_node
'res.lang'      _activate_lang
'ir.translation'      _upsert_translations
'res.lang'      _activate_lang
'ir.translation'      create
'ir.ui.view'      _fields['inherit_id']
'ir.ui.view'      _fields['inherit_id']
'ir.ui.view'      _fields['inherit_id']
'ir.ui.view'      _fields['inherit_id']
'ir.ui.view'      _fields['inherit_id']
'ir.ui.view'      _fields['inherit_id']
'res.partner'      fields_view_get
'res.partner'      fields_view_get
'ir.ui.view'      create
'ir.translation'      create
'ir.translation'      search
'ir.translation'      search
"ir.ui.view"      create
'ir.qweb'].with_context(check_view_ids=[view1.id, view2.id      ._render
'ir.qweb'].with_context(check_view_ids=[view1.id, view2.id      ._render
'ir.qweb'].with_context(check_view_ids=[view1.id, view2.id      ._render
'ir.qweb'].with_context(check_view_ids=[view1.id, view2.id      ._render
'ir.qweb'].with_context(check_view_ids=[view1.id, view2.id, view3.id      ._render
'ir.qweb'].with_context(check_view_ids=[view1.id, view2.id, view3.id      ._render
'ir.qweb'].with_context(check_view_ids=[view1.id, view2.id, view3.id      ._render
'ir.qweb'].with_context(check_view_ids=[view1.id, view2.id, view3.id      ._render
'ir.ui.view'      search([("model", '=', "res.partner"), 
'res.partner'      fields_view_get
'ir.ui.view'      fields_view_get
'ir.ui.view'      with_context(lang=None).search
'res.users'      create
'ir.attachment'      create
'res.users'      create
'res.lang'      browse(self._context.get
'res.lang'      get_available
'ir.module.module'      search([
'res.lang'      _activate_lang
model      if model in self.env else None
'ir.model.fields'      search([
'account.move.line'      sudo().search([
model      search_count([
'res.partner'      browse(partner_ids).sorted
'res.partner'      search([
'base.partner.merge.line'      create
'res.users'      create
'res.partner'      create
'test_access_right.ticket'      create
'res.users'      create
'test_access_right.ticket'      with_user
'res.groups'      create
'res.groups'      create
'res.groups'      create
'res.users'      create
'test_access_right.some_obj'      create
'res.partner'      create
'res.users'      create
'ir.model'      search([
'test_access_right.some_obj'      create
'ir.model'      search([
'test_access_right.some_obj'      create
'ir.rule'      create
'test_access_right.parent'      create
'test_access_right.parent'      create
'test_access_right.some_obj'      create
'ir.rule'      create
'ir.rule'      create
'ir.rule'      create
'test_access_right.container'      create({'some_ids': [Command.set
'ir.actions.report'      search([
'ir.model'      _get
'res.lang'      _activate_lang
'res.lang'      _lang_get
'ir.attachment'      search
'ir.asset'      create
'ir.asset'      create
'ir.attachment'      search
'ir.attachment'      search
'ir.attachment'      search
'ir.asset'      create
'ir.attachment'      search
'ir.attachment'      search
'ir.ui.view'      _render_template
'ir.attachment'      search([
'ir.ui.view'      _render_template
'ir.attachment'      search([
'ir.ui.view'      create
'ir.attachment'      create
'ir.asset'      create
'ir.qweb'      _get_asset_content
'ir.attachment'      flush
'ir.attachment'      invalidate_cache
'ir.ui.view'      create
'ir.attachment'      search([
'ir.attachment'      search([
'ir.attachment'      search([
'ir.asset'      create
'ir.attachment'      search([
'ir.asset'      create
'ir.attachment'      search([
'ir.asset'      create
'ir.attachment'      search([
'ir.asset'      create
'ir.attachment'      search([
'ir.asset'      create
'ir.asset'      create
'ir.attachment'      search([
'ir.asset'      create
'ir.attachment'      search([
'ir.asset'      create
'ir.asset'      create
'ir.asset'      create
'ir.attachment'      search([
'ir.asset'      create
'ir.attachment'      search([
'ir.asset'      create
'ir.attachment'      search([
'ir.attachment'      search([
'ir.asset'      create
'ir.asset'      create
'ir.asset'      create
'ir.asset'      create
'ir.asset'      create
'ir.asset'      create
'ir.asset'      create
'ir.attachment'      search([
'ir.attachment'      search([
'ir.attachment'      search([
'ir.attachment'      search([
'ir.attachment'      search([
'ir.attachment'      search([
'ir.attachment'      search([
'ir.asset'      create
'ir.asset'      create
'ir.attachment'      search([
'ir.asset'      create
'ir.asset'      create
'ir.attachment'      search([
'ir.attachment'      search([
'ir.attachment'      search([
'ir.attachment'      search([
'ir.attachment'      search([
'ir.asset'      create
'ir.attachment'      search([
'ir.asset'      create
'ir.attachment'      search([
'ir.asset'      create
'ir.asset'      create
'ir.attachment'      search([
'ir.asset'      create
'ir.asset'      create
'ir.asset'      create
'ir.attachment'      search([
'ir.asset'      create
'ir.attachment'      search([
'ir.asset'      create
'ir.attachment'      search([
'ir.asset'      create
'ir.asset'      _get_asset_paths
'ir.asset'      create
'ir.asset'      create
'ir.attachment'      search([
'ir.asset'      create
'ir.attachment'      search([
'ir.asset'      create
'ir.asset'      _get_asset_paths
'ir.asset'      create
'ir.asset'      _get_asset_paths
'ir.attachment'      create
'ir.asset'      create
'ir.attachment'      search([
'test_convert.usered'      search
'test_convert.usered'      search
'test_convert.usered'      search
'test_convert.usered'      search
'test_convert.usered'      search
'test_convert.usered'      search
'res.lang'      browse(1).write
'res.lang'      _activate_lang
'res.lang'      _activate_lang
'ir.model.data'      create
'res.lang'      _activate_lang
'ir.model.fields'      _get
'export.integer'      create
'export.integer'      create
'export.integer'      create
'export.integer'      create
'export.one2many.child'      search
'ir.model.data'      create
'ir.model.data'      create
'export.integer'      create
'ir.model.data'      clear_caches
'res.lang'      _activate_lang
'export.integer'      create
'export.integer'      create
'export.integer'      create
'export.integer'      create
'export.integer'      create
'export.integer'      create
'export.integer'      create
'export.integer'      create
'export.many2many.other'      create
'export.many2many.other'      create
'export.many2many.other'      create
'export.many2many.other'      create
'export.many2many.other'      create
'export.many2many.other'      create
'export.many2many.other'      create
'export.many2many.other'      create
'export.many2many.other'      create
'export.many2many.other'      create
'export.many2many.other'      create
'export.many2many.other'      create
'export.many2many.other'      create
'export.many2many.other'      create
'export.many2many.other'      create
'export.many2many.other'      create
'export.many2many.other'      create
'export.one2many.child'      create
'export.one2many.child'      create
'export.one2many.child'      create
'export.one2many.child'      create
'export.one2many.child'      create
'export.one2many.child'      create
'res.partner'      load
'res.partner'      load
'ir.model.data'      clear_caches
'ir.model.data'      clear_caches
self.model_name      browse
'export.inherits.parent'      create
self.model_name      browse
'export.inherits.parent'      create
'ir.model.data'      create
self.model_name      browse
'export.inherits.parent'      create
'ir.model.data'      create
self.model_name      browse
'export.inherits.parent'      create
self.model_name      create
'ir.model.data'      create
'export.inherits.parent'      create
self.model_name      create
'ir.model.data'      create
'test.inherit.daughter'      create
'res.partner'      search([
'res.partner'      search([
'res.partner'      search([
'res.partner'      search([
'test.inherit.property'      create
'test.inherit.property'      create
'test_new_api.selection'      _fields['state']
'ir.model.fields'      _get
'test.pallet'      create
'test.unit'      create
'test.pallet'      with_context(ctx).create
'test.box']._fields['readonly_name'      
'res.lang'      _activate_lang
'test.pallet'      create
'test.unit'      
'test.box'      
'test.pallet'      
'test.unit'      create
'test.box'      create
'test.unit'      create
'account.account'      create
'account.account'      create
'account.account'      create
'account.account'      create
'account.account'      create
'account.journal'      create
'account.journal'      create
'account.journal'      create
'res.lang'      get_installed
'ir.model'      sudo().search([
'test_new_api.foo'      search([
'test_new_api.foo'      browse
'ir.config_parameter'      get_param
rec.res_model      browse
'res.partner'      sudo().create
'res.company'      create
'res.company'      create
'test_new_api.model_parent'      create
'test_new_api.model_parent'      create
'res.company'      create
'res.users'      create
'test_new_api.model_child'      create
'test_new_api.model_child'      create
'test_new_api.model_child'      create
'test_new_api.model_child_nocheck'      create
'test_new_api.model_child'      create
'res.company'], []      
'res.users'      create
'test_new_api.model_private_address_onchange'      with_user
'res.users'      with_context
'ir.model.fields'      create
'test_new_api.message'      search
'test_new_api.message'      search
'test_new_api.category'      create
'test_new_api.message'      _fields['size']
'test_new_api.message'      _fields['name']
'test_new_api.compute.onchange'      _fields['baz']
'test_new_api.compute.onchange'      _fields['line_ids']
'test_new_api.compute.onchange'      _fields['tag_ids']
'ir.model.fields'      create
'test_new_api.message'      _fields['x_bool_false_computed']
"ir.model.fields"      , "_check_depends", lambda self: True)
"ir.model.fields"      create
"ir.model.fields"      create
"ir.model.fields"      create
"ir.model.fields"      create
"test_new_api.foo"      _fields
"ir.model"      create
'test_new_api.discussion'      .display_name
'test_new_api.category'      _fields['dummy']
'test_new_api.message'      search
'test_new_api.message'      create
'test_new_api.mixed'      create
'test_new_api.discussion'      create
'ir.rule'      create
'ir.model'      search([
'test_new_api.recursive'      create
'test_new_api.recursive'      create
'test_new_api.recursive'      create
'test_new_api.recursive'      create
'test_new_api.recursive.tree'      create
'test_new_api.cascade'      create
'ir.config_parameter'      set_param
'base'      flush
'test_new_api.compute.inverse'      with_context
'test_new_api.multi_compute_inverse'      with_context
'test_new_api.category'      create
'res.users'      create
'res.country'      create
'res.country'      create
'res.company'      create
'test_new_api.message'      search
'test_new_api.message'      browse
'test_new_api.message'      create
'test_new_api.message'      create
'test_new_api.compute.inverse'      with_context
'test_new_api.compute.unassigned'      create
'test_new_api.mixed'      create
'test_new_api.mixed'      fields_get
'res.currency'      with_context
'test_new_api.multi.tag'      create
'test_new_api.mixed'      create
'test_new_api.mixed'      create
'test_new_api.mixed'      create
'res.lang'      search
'test_new_api.mixed'      create
'ir.model'      search
'test_new_api.message'      search([
'test_new_api.message'      search([
'test_new_api.related'      create
'test_new_api.foo'      create
'test_new_api.foo'      create
'test_new_api.bar'      create
'test_new_api.trigger.left'      create
'test_new_api.trigger.right'      create
'test_new_api.trigger.middle'      create
'res.users'      search
'res.company'      create
'res.company'      create
'res.users'      create
'res.users'      create
'res.users'      create
'test_new_api.multi.tag'      create
'test_new_api.multi.tag'      create
'test_new_api.multi.tag'      create
'ir.property'      _set_default
'ir.property'      _set_default
'ir.property'      _set_default
'ir.model.access'      search([
'test_new_api.company'      create
'ir.rule'      create
'ir.model'      _get_id
'test_new_api.company'      create
'test_new_api.company.attr'      create
'test_new_api.company'      search([
'test_new_api.message'      new
'test_new_api.category'      create
'test_new_api.category'      create
'test_new_api.message'      create
'test_new_api.message'      create
'test_new_api.category'      create
'test_new_api.category'      create
'test_new_api.discussion'      new
'test_new_api.emailmessage'      new
'test_new_api.emailmessage'      new
'test_new_api.emailmessage'      new
'test_new_api.multi.tag'      create
'test_new_api.multi'      create
'test_new_api.move'      create
'test_new_api.move'      create
'test_new_api.move_line'      create
'res.partner'      create
'test_new_api.multi'      new
'test_new_api.message'      default_get
'test_new_api.mixed'      default_get
'test_new_api.message'      search
'test_new_api.multi.tag'      create
'test_new_api.multi'      create
'test_new_api.move'      create
'test_new_api.move'      create
'test_new_api.move_line'      create
'test_new_api.move'      create
'test_new_api.move'      create
'test_new_api.move_line'      create
'test_new_api.move'      search([
'test_new_api.move'      search([
'res.lang'      _activate_lang
'test_new_api.binary_svg'      with_user
'test_new_api.binary_svg'      with_user
'test_new_api.binary_svg'      create
'test_new_api.binary_svg'      with_user
'test_new_api.binary_svg'      create
'ir.attachment'      search
'test_new_api.binary_svg'      with_user
'ir.attachment'      search
'ir.attachment'      search
'test_new_api.model_image'      create
'test_new_api.model_image'      create
'test_new_api.model_image'      create
'test_new_api.model_image'      with_context(image_no_postprocess=True).create
'test_new_api.model_binary'      create
'test_new_api.model_binary'      with_context(bin_size=False).create
'test_new_api.model_binary'      browse
'test_new_api.model_binary'      with_context(bin_size=True).create
'test_new_api.model_binary'      browse
'test_new_api.model_binary'      create
'test_new_api.model_binary'      create
'test_new_api.country'      create
'test_new_api.city'      create
'test_new_api.multi.tag'      create
'test_new_api.multi.line'      create
'res.users'      create
'ir.rule'      create
'ir.model'      _get
'ir.rule'      create
'ir.model'      _get
'test_new_api.multi.line'      _fields['tags']
'test_new_api.multi.line2'      _fields['tags']
'test_new_api.model_a'      create
'test_new_api.model_b'      create
'test_new_api.model_a'      create
'test_new_api.model_b'      create
'test_new_api.multi.line'      create
'ir.model'      _get_id
'ir.model.fields'      create
'test_new_api.discussion'      create
'test_new_api.req_m2o'      _fields['foo']
'test_new_api.req_m2o'      _fields['bar']
'test_new_api.req_m2o_transient'      _fields['foo']
'test_new_api.req_m2o_transient'      _fields['bar']
'ir.model.fields.selection'      search
'ir.model.fields.selection'      search
self.MODEL_REQUIRED      create
self.MODEL_REQUIRED      create
self.MODEL_REQUIRED      create
self.MODEL_BASE      create
self.MODEL_BASE      create
self.MODEL_BASE      create
self.MODEL_BASE      create
self.MODEL_BASE      create
self.MODEL_BASE      create
self.MODEL_REQUIRED      create
self.MODEL_REQUIRED      create
self.MODEL_REQUIRED      create
self.MODEL_REQUIRED      create
self.MODEL_REQUIRED      create
self.MODEL_REQUIRED      create
self.MODEL_REQUIRED      create
self.MODEL_REQUIRED      create
self.MODEL_REQUIRED      create
self.MODEL_REQUIRED      create
self.MODEL_NONSTORED      create
self.MODEL_REQUIRED      create
self.MODEL_WRITE_OVERRIDE      create
'test_new_api.model_shared_cache_compute_parent'      create
'test_new_api.model_shared_cache_compute_line'      create
'base'      flush
'res.partner'      create
'test_new_api.multi'      create
'res.partner'      create
'ir.default'      set
'res.partner'      create
'test_new_api.multi'       as form:
'test_new_api.multi.tag'      create
'ir.ui.view'      create
'test_new_api.payment'       view)
'test_new_api.multi.tag'      create
'test_new_api.compute.onchange'      
'test_new_api.compute.onchange'      with_context
'test_new_api.compute.onchange'      with_context
'test_new_api.model_parent_m2o'      create
'test_new_api.compute_editable'      create({'line_ids': [
'test_new_api.one2many'      create
"test_new_api.multi"      create
'ir.model'      search([
'ir.model'      search([
"test_new_api.multi"      new
"test_new_api.multi"      new
'base.partner.merge.automatic.wizard'      _merge(
'test_new_api.attachment.host'      create
'test_new_api.attachment'      create
'test_new_api.attachment.host'      create
'test_new_api.model_parent_m2o'      create
'test_new_api.model_parent_m2o'      create
'test_new_api.model_child_m2o'      create
'test_new_api.compute.container'      create
'test_new_api.compute.member'      create
'test_new_api.order'      create
'decimal.precision.test']._fields[name      get_digits(self.env) or 
'decimal.precision.test'      new
'decimal.precision'      create
'decimal.precision'      create
'ir.model'      search([('model', 'in', list
'ir.model.relation'      search([
'res.lang'      _activate_lang
'test_performance.base'      search
'test_performance.base'      search
'test_performance.base'      search
'test_performance.base'      search
'test_performance.base'      create
'test_performance.base'      create
'test_performance.base'      create
'test_performance.base'      create
'test_performance.base'      create
'test_performance.base'      create
'test_performance.base'      create
'test_performance.base'      create
'test_performance.base'      create
'test_performance.tag'      create([{'name': val} for val in range
'test_performance.base'      create
'test_performance.base'      create
'test_performance.base'      create
'test_performance.base'      search
'test_performance.base'      search
'test_performance.base'      search
'res.partner'      search([('id', 'in', all_records.mapped
'ir.property'      _get
'ir.property'      _set_default
'ir.property'      _get
'test_performance.base'      create
'test.populate']._fields['state'      get_values
model      browse
'ir.model'      search([
'test_testing_utilities.a'      
'test_testing_utilities.a'      
'test_testing_utilities.req_bool'      
'test_testing_utilities.req_bool'      
'test_testing_utilities.readonly'      
'test_testing_utilities.a'       view='test_testing_utilities.non_normalized_attrs')
'test_testing_utilities.a'       view='test_testing_utilities.non_normalized_attrs')
'test_testing_utilities.d'      
'test_testing_utilities.m2o'      create
'test_testing_utilities.m2o'      create
'test_testing_utilities.c'      
'test_testing_utilities.readonly'      create
'test_testing_utilities.e'      
'test_testing_utilities.e'      
'test_testing_utilities.e'      
'test_testing_utilities.e'      
'test_testing_utilities.m2o'      create
'test_testing_utilities.m2o'      create
'test_testing_utilities.f'      
'test_testing_utilities.g'      create
'test_testing_utilities.e'       view='test_testing_utilities.attrs_using_m2m')
'test_testing_utilities.sub2'      create
'test_testing_utilities.parent'       view='test_testing_utilities.o2m_parent')
'test_testing_utilities.parent'       view='test_testing_utilities.o2m_parent_ed')
'test_testing_utilities.parent'       view='test_testing_utilities.o2m_parent_inline')
'test_testing_utilities.default'      
'test_testing_utilities.default'      
'test_testing_utilities.parent'      
'test_testing_utilities.parent'      
'test_testing_utilities.parent'      
'test_testing_utilities.parent'      create
'o2m_readonly_subfield_parent'      
'test_testing_utilities.onchange_parent'       view='test_testing_utilities.m2o_onchange_view')
'test_testing_utilities.onchange_count'      
'test_testing_utilities.recursive'       view='test_testing_utilities.o2m_recursive_relation_view')
'test_testing_utilities.parent'      with_context
'test_testing_utilities.sub'      create
'test_testing_utilities.parent'       view='test_testing_utilities.o2m_widget_m2m')
'o2m_changes_children'      
'ttu.product'      create
'ttu.product'      create
'ttu.product'      create
'ttu.root'      create
'ttu.product'      create
'ttu.product'      create
'ttu.product'      create
'ttu.product'      create
'ttu.root'      create
'o2m_changes_parent'      create
'test_testing_utilities.a'      create
'test_testing_utilities.d'      create
'test_testing_utilities.sub2'      create
'test_testing_utilities.f'      create
'test_testing_utilities.f'      create
'ir.attachment'      create
'res.lang'      _activate_lang
'ir.translation'      search
'ir.model.fields'      search([('model', '=', 'test.translation.import'), 
'res.lang'      _activate_lang
'ir.translation'      search
'res.lang'      _activate_lang
'res.lang'      _activate_lang
'ir.translation'      search
'ir.translation'      search
'ir.translation'      search
'res.lang'      _activate_lang
'ir.translation'      search
'ir.translation'      search
'ir.translation'      search
'res.lang'      _activate_lang
'ir.translation'      search_count([('src', '=', 'Efgh'), 
'ir.translation'      search_count([('src', '=', 'Efgh'), 
"base.language.import"      create
'res.lang'      _lang_get
'ir.translation'      search_count([
"base.language.import"      create
"base.language.import"      create
'res.lang'      _lang_get
'ir.translation'      search_count([
"base.language.import"      create
'ir.translation'      create
"base.language.export"      create
'ir.translation'      create
'ir.translation'      create
"base.language.install"      create({'lang': 'fr_FR', 'overwrite': True}).lang_install
"base.update.translations"      create({'lang': 'fr_FR'}).act_update
"ir.translation"      search
"base.language.export"      create
"base.language.import"      create
"ir.translation"      search
"base.language.export"      create
"ir.translation"      search
"base.language.import"      create
'ir.config_parameter'      sudo().get_param
'ir.config_parameter'      sudo().get_param
'ir.default'      get_model_defaults
'ir.model.data'      invalidate_cache
model      browse(ids).__ensure_xml_id
comodel      _fields
fields[relfield      comodel_name]
'ir.translation'      get_field_string
'ir.fields.converter'      for_model
'ir.default'      get_model_defaults
model      default_get
'ir.filters'      get_filters(self._name, options.get
'ir.ui.view'      sudo
'ir.ui.view'      sudo().browse
'ir.actions.actions'      get_bindings
parent_mname      
field.comodel_name      browse
self._fields[field].comodel_name      browse
parent_model_name      _fields.items
'ir.model.fields'      _add_manual_fields
parent      _setup_base
'ir.model'      _get
'ir.rule'      _make_access_error
'ir.model.data'      sudo
'ir.config_parameter'      sudo().get_param
field.comodel_name      
'ir.model.fields'      _get
'ir.model.access'      check
'ir.rule'      _make_access_error
'ir.rule'      _compute_domain
'ir.model.data'      sudo().with_context
'ir.default'      sudo
'ir.property'      sudo
'ir.attachment'      sudo
'ir.model'      _get
'ir.property'      _get
model_name      browse
model_name      create
'ir.model.data'      sudo
'ir.rule'      _compute_domain
model_name      _fields.get
'stock.picking'      search([
field.comodel_name      _flush_search
model_name      
model_name      flush
parent_model      _fields) - whitelist)
parent_model      
'ir.model.data'      sudo().search_read
model_name       id_vals)
model_name       id_vals)
field.comodel_name      flush
'res.users'      sudo().search([
'base'      flush
'res.users'      with_context
'base'      flush
'base'      flush
'sale.order'      
'ir.module.module'      search_count([('name', '=', module), 
'ir.actions.report'      _load_records
'ir.model'      _get
'ir.actions.act_window'      _load_records
'ir.ui.menu'      _load_records
'ir.model.data'      _load_xmlid
'ir.model.data'      _xmlid_to_res_model_res_id
'ir.translation'      _get_source if you can
'ir.module.module'      search_read([
"_unknown"      browse
model      _translate:
model      browse
model      browse(res_ids).exists
