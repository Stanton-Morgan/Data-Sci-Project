Module(
    body=[
        Expr(
            value=Constant(value=" Which - locate a command\n\n    * adapted from Brian Curtin's http://bugs.python.org/file15381/shutil_which.patch\n    * see http://bugs.python.org/issue444582\n    * uses ``PATHEXT`` on Windows\n    * searches current directory before ``PATH`` on Windows,\n      but not before an explicitly passed path\n    * accepts both string or iterable for an explicitly passed path, or pathext\n    * accepts an explicitly passed empty path, or pathext (either '' or [])\n    * does not search ``PATH`` for files that have a path specified in their name already\n    * moved defpath and defpathext lists initialization to module level,\n      instead of initializing them on each function call\n    * changed interface: which_files() returns generator, which() returns first match,\n      or raises IOError(errno.ENOENT)\n\n    .. function:: which_files(file [, mode=os.F_OK | os.X_OK[, path=None[, pathext=None]]])\n\n       Return a generator which yields full paths in which the *file* name exists\n       in a directory that is part of the file name, or on *path*,\n       and has the given *mode*.\n       By default, *mode* matches an inclusive OR of os.F_OK and os.X_OK - an \n       existing executable file.\n       The *path* is, by default, the ``PATH`` variable on the platform,\n       or the string/iterable passed in as *path*.\n       In the event that a ``PATH`` variable is not found, :const:`os.defpath` is used.\n       On Windows, a current directory is searched before using the ``PATH`` variable,\n       but not before an explicitly passed *path*.\n       The *pathext* is only used on Windows to match files with given extensions appended as well.\n       It defaults to the ``PATHEXT`` variable, or the string/iterable passed in as *pathext*.\n       In the event that a ``PATHEXT`` variable is not found,\n       default value for Windows XP/Vista is used.\n       The command is always searched without extension first,\n       even when *pathext* is explicitly passed.\n\n    .. function:: which(file [, mode=os.F_OK | os.X_OK[, path=None[, pathext=None]]])\n       Return first match generated by which_files(file, mode, path, pathext),\n       or raise IOError(errno.ENOENT).\n\n", kind=None),
        ),
        Assign(
            targets=[Name(id='__docformat__', ctx=Store())],
            value=Constant(value='restructuredtext en', kind=None),
            type_comment=None,
        ),
        Assign(
            targets=[Name(id='__all__', ctx=Store())],
            value=Call(
                func=Attribute(
                    value=Constant(value='which which_files pathsep defpath defpathext F_OK R_OK W_OK X_OK', kind=None),
                    attr='split',
                    ctx=Load(),
                ),
                args=[],
                keywords=[],
            ),
            type_comment=None,
        ),
        Import(
            names=[alias(name='sys', asname=None)],
        ),
        ImportFrom(
            module='os',
            names=[
                alias(name='access', asname=None),
                alias(name='defpath', asname=None),
                alias(name='pathsep', asname=None),
                alias(name='environ', asname=None),
                alias(name='F_OK', asname=None),
                alias(name='R_OK', asname=None),
                alias(name='W_OK', asname=None),
                alias(name='X_OK', asname=None),
            ],
            level=0,
        ),
        ImportFrom(
            module='os.path',
            names=[
                alias(name='exists', asname=None),
                alias(name='dirname', asname=None),
                alias(name='split', asname=None),
                alias(name='join', asname=None),
            ],
            level=0,
        ),
        Assign(
            targets=[Name(id='ENOENT', ctx=Store())],
            value=Constant(value=2, kind=None),
            type_comment=None,
        ),
        Assign(
            targets=[Name(id='windows', ctx=Store())],
            value=Call(
                func=Attribute(
                    value=Attribute(
                        value=Name(id='sys', ctx=Load()),
                        attr='platform',
                        ctx=Load(),
                    ),
                    attr='startswith',
                    ctx=Load(),
                ),
                args=[Constant(value='win', kind=None)],
                keywords=[],
            ),
            type_comment=None,
        ),
        Assign(
            targets=[Name(id='defpath', ctx=Store())],
            value=Call(
                func=Attribute(
                    value=Call(
                        func=Attribute(
                            value=Name(id='environ', ctx=Load()),
                            attr='get',
                            ctx=Load(),
                        ),
                        args=[
                            Constant(value='PATH', kind=None),
                            Name(id='defpath', ctx=Load()),
                        ],
                        keywords=[],
                    ),
                    attr='split',
                    ctx=Load(),
                ),
                args=[Name(id='pathsep', ctx=Load())],
                keywords=[],
            ),
            type_comment=None,
        ),
        If(
            test=Name(id='windows', ctx=Load()),
            body=[
                Expr(
                    value=Call(
                        func=Attribute(
                            value=Name(id='defpath', ctx=Load()),
                            attr='insert',
                            ctx=Load(),
                        ),
                        args=[
                            Constant(value=0, kind=None),
                            Constant(value='.', kind=None),
                        ],
                        keywords=[],
                    ),
                ),
                Assign(
                    targets=[Name(id='seen', ctx=Store())],
                    value=Call(
                        func=Name(id='set', ctx=Load()),
                        args=[],
                        keywords=[],
                    ),
                    type_comment=None,
                ),
                Assign(
                    targets=[Name(id='defpath', ctx=Store())],
                    value=ListComp(
                        elt=Name(id='dir', ctx=Load()),
                        generators=[
                            comprehension(
                                target=Name(id='dir', ctx=Store()),
                                iter=Name(id='defpath', ctx=Load()),
                                ifs=[
                                    BoolOp(
                                        op=And(),
                                        values=[
                                            Compare(
                                                left=Call(
                                                    func=Attribute(
                                                        value=Name(id='dir', ctx=Load()),
                                                        attr='lower',
                                                        ctx=Load(),
                                                    ),
                                                    args=[],
                                                    keywords=[],
                                                ),
                                                ops=[NotIn()],
                                                comparators=[Name(id='seen', ctx=Load())],
                                            ),
                                            UnaryOp(
                                                op=Not(),
                                                operand=Call(
                                                    func=Attribute(
                                                        value=Name(id='seen', ctx=Load()),
                                                        attr='add',
                                                        ctx=Load(),
                                                    ),
                                                    args=[
                                                        Call(
                                                            func=Attribute(
                                                                value=Name(id='dir', ctx=Load()),
                                                                attr='lower',
                                                                ctx=Load(),
                                                            ),
                                                            args=[],
                                                            keywords=[],
                                                        ),
                                                    ],
                                                    keywords=[],
                                                ),
                                            ),
                                        ],
                                    ),
                                ],
                                is_async=0,
                            ),
                        ],
                    ),
                    type_comment=None,
                ),
                Delete(
                    targets=[Name(id='seen', ctx=Del())],
                ),
                Assign(
                    targets=[Name(id='defpathext', ctx=Store())],
                    value=BinOp(
                        left=List(
                            elts=[Constant(value='', kind=None)],
                            ctx=Load(),
                        ),
                        op=Add(),
                        right=Call(
                            func=Attribute(
                                value=Call(
                                    func=Attribute(
                                        value=Call(
                                            func=Attribute(
                                                value=Name(id='environ', ctx=Load()),
                                                attr='get',
                                                ctx=Load(),
                                            ),
                                            args=[
                                                Constant(value='PATHEXT', kind=None),
                                                Constant(value='.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', kind=None),
                                            ],
                                            keywords=[],
                                        ),
                                        attr='lower',
                                        ctx=Load(),
                                    ),
                                    args=[],
                                    keywords=[],
                                ),
                                attr='split',
                                ctx=Load(),
                            ),
                            args=[Name(id='pathsep', ctx=Load())],
                            keywords=[],
                        ),
                    ),
                    type_comment=None,
                ),
            ],
            orelse=[
                Assign(
                    targets=[Name(id='defpathext', ctx=Store())],
                    value=List(
                        elts=[Constant(value='', kind=None)],
                        ctx=Load(),
                    ),
                    type_comment=None,
                ),
            ],
        ),
        FunctionDef(
            name='which_files',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='file', annotation=None, type_comment=None),
                    arg(arg='mode', annotation=None, type_comment=None),
                    arg(arg='path', annotation=None, type_comment=None),
                    arg(arg='pathext', annotation=None, type_comment=None),
                ],
                vararg=None,
                kwonlyargs=[],
                kw_defaults=[],
                kwarg=None,
                defaults=[
                    BinOp(
                        left=Name(id='F_OK', ctx=Load()),
                        op=BitOr(),
                        right=Name(id='X_OK', ctx=Load()),
                    ),
                    Constant(value=None, kind=None),
                    Constant(value=None, kind=None),
                ],
            ),
            body=[
                Expr(
                    value=Constant(value=" Locate a file in a path supplied as a part of the file name,\n        or the user's path, or a supplied path.\n        The function yields full paths (not necessarily absolute paths),\n        in which the given file name matches an existing file in a directory on the path.\n\n        >>> def test_which(expected, *args, **argd):\n        ...     result = list(which_files(*args, **argd))\n        ...     assert result == expected, 'which_files: %s != %s' % (result, expected)\n        ...\n        ...     try:\n        ...         result = [ which(*args, **argd) ]\n        ...     except IOError:\n        ...         result = []\n        ...     assert result[:1] == expected[:1], 'which: %s != %s' % (result[:1], expected[:1])\n\n        >>> if windows: cmd = environ['COMSPEC']\n        >>> if windows: test_which([cmd], 'cmd')\n        >>> if windows: test_which([cmd], 'cmd.exe')\n        >>> if windows: test_which([cmd], 'cmd', path=dirname(cmd))\n        >>> if windows: test_which([cmd], 'cmd', pathext='.exe')\n        >>> if windows: test_which([cmd], cmd)\n        >>> if windows: test_which([cmd], cmd, path='<nonexistent>')\n        >>> if windows: test_which([cmd], cmd, pathext='<nonexistent>')\n        >>> if windows: test_which([cmd], cmd[:-4])\n        >>> if windows: test_which([cmd], cmd[:-4], path='<nonexistent>')\n\n        >>> if windows: test_which([], 'cmd', path='<nonexistent>')\n        >>> if windows: test_which([], 'cmd', pathext='<nonexistent>')\n        >>> if windows: test_which([], '<nonexistent>/cmd')\n        >>> if windows: test_which([], cmd[:-4], pathext='<nonexistent>')\n\n        >>> if not windows: sh = '/bin/sh'\n        >>> if not windows: test_which([sh], 'sh')\n        >>> if not windows: test_which([sh], 'sh', path=dirname(sh))\n        >>> if not windows: test_which([sh], 'sh', pathext='<nonexistent>')\n        >>> if not windows: test_which([sh], sh)\n        >>> if not windows: test_which([sh], sh, path='<nonexistent>')\n        >>> if not windows: test_which([sh], sh, pathext='<nonexistent>')\n\n        >>> if not windows: test_which([], 'sh', mode=W_OK)  # not running as root, are you?\n        >>> if not windows: test_which([], 'sh', path='<nonexistent>')\n        >>> if not windows: test_which([], '<nonexistent>/sh')\n    ", kind=None),
                ),
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Name(id='filepath', ctx=Store()),
                                Name(id='file', ctx=Store()),
                            ],
                            ctx=Store(),
                        ),
                    ],
                    value=Call(
                        func=Name(id='split', ctx=Load()),
                        args=[Name(id='file', ctx=Load())],
                        keywords=[],
                    ),
                    type_comment=None,
                ),
                If(
                    test=Name(id='filepath', ctx=Load()),
                    body=[
                        Assign(
                            targets=[Name(id='path', ctx=Store())],
                            value=Tuple(
                                elts=[Name(id='filepath', ctx=Load())],
                                ctx=Load(),
                            ),
                            type_comment=None,
                        ),
                    ],
                    orelse=[
                        If(
                            test=Compare(
                                left=Name(id='path', ctx=Load()),
                                ops=[Is()],
                                comparators=[Constant(value=None, kind=None)],
                            ),
                            body=[
                                Assign(
                                    targets=[Name(id='path', ctx=Store())],
                                    value=Name(id='defpath', ctx=Load()),
                                    type_comment=None,
                                ),
                            ],
                            orelse=[
                                If(
                                    test=Call(
                                        func=Name(id='isinstance', ctx=Load()),
                                        args=[
                                            Name(id='path', ctx=Load()),
                                            Name(id='str', ctx=Load()),
                                        ],
                                        keywords=[],
                                    ),
                                    body=[
                                        Assign(
                                            targets=[Name(id='path', ctx=Store())],
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='path', ctx=Load()),
                                                    attr='split',
                                                    ctx=Load(),
                                                ),
                                                args=[Name(id='pathsep', ctx=Load())],
                                                keywords=[],
                                            ),
                                            type_comment=None,
                                        ),
                                    ],
                                    orelse=[],
                                ),
                            ],
                        ),
                    ],
                ),
                If(
                    test=Compare(
                        left=Name(id='pathext', ctx=Load()),
                        ops=[Is()],
                        comparators=[Constant(value=None, kind=None)],
                    ),
                    body=[
                        Assign(
                            targets=[Name(id='pathext', ctx=Store())],
                            value=Name(id='defpathext', ctx=Load()),
                            type_comment=None,
                        ),
                    ],
                    orelse=[
                        If(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='pathext', ctx=Load()),
                                    Name(id='str', ctx=Load()),
                                ],
                                keywords=[],
                            ),
                            body=[
                                Assign(
                                    targets=[Name(id='pathext', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='pathext', ctx=Load()),
                                            attr='split',
                                            ctx=Load(),
                                        ),
                                        args=[Name(id='pathsep', ctx=Load())],
                                        keywords=[],
                                    ),
                                    type_comment=None,
                                ),
                            ],
                            orelse=[],
                        ),
                    ],
                ),
                If(
                    test=UnaryOp(
                        op=Not(),
                        operand=Compare(
                            left=Constant(value='', kind=None),
                            ops=[In()],
                            comparators=[Name(id='pathext', ctx=Load())],
                        ),
                    ),
                    body=[
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='pathext', ctx=Load()),
                                    attr='insert',
                                    ctx=Load(),
                                ),
                                args=[
                                    Constant(value=0, kind=None),
                                    Constant(value='', kind=None),
                                ],
                                keywords=[],
                            ),
                        ),
                    ],
                    orelse=[],
                ),
                For(
                    target=Name(id='dir', ctx=Store()),
                    iter=Name(id='path', ctx=Load()),
                    body=[
                        Assign(
                            targets=[Name(id='basepath', ctx=Store())],
                            value=Call(
                                func=Name(id='join', ctx=Load()),
                                args=[
                                    Name(id='dir', ctx=Load()),
                                    Name(id='file', ctx=Load()),
                                ],
                                keywords=[],
                            ),
                            type_comment=None,
                        ),
                        For(
                            target=Name(id='ext', ctx=Store()),
                            iter=Name(id='pathext', ctx=Load()),
                            body=[
                                Assign(
                                    targets=[Name(id='fullpath', ctx=Store())],
                                    value=BinOp(
                                        left=Name(id='basepath', ctx=Load()),
                                        op=Add(),
                                        right=Name(id='ext', ctx=Load()),
                                    ),
                                    type_comment=None,
                                ),
                                If(
                                    test=BoolOp(
                                        op=And(),
                                        values=[
                                            Call(
                                                func=Name(id='exists', ctx=Load()),
                                                args=[Name(id='fullpath', ctx=Load())],
                                                keywords=[],
                                            ),
                                            Call(
                                                func=Name(id='access', ctx=Load()),
                                                args=[
                                                    Name(id='fullpath', ctx=Load()),
                                                    Name(id='mode', ctx=Load()),
                                                ],
                                                keywords=[],
                                            ),
                                        ],
                                    ),
                                    body=[
                                        Expr(
                                            value=Yield(
                                                value=Name(id='fullpath', ctx=Load()),
                                            ),
                                        ),
                                    ],
                                    orelse=[],
                                ),
                            ],
                            orelse=[],
                            type_comment=None,
                        ),
                    ],
                    orelse=[],
                    type_comment=None,
                ),
            ],
            decorator_list=[],
            returns=None,
            type_comment=None,
        ),
        FunctionDef(
            name='which',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='file', annotation=None, type_comment=None),
                    arg(arg='mode', annotation=None, type_comment=None),
                    arg(arg='path', annotation=None, type_comment=None),
                    arg(arg='pathext', annotation=None, type_comment=None),
                ],
                vararg=None,
                kwonlyargs=[],
                kw_defaults=[],
                kwarg=None,
                defaults=[
                    BinOp(
                        left=Name(id='F_OK', ctx=Load()),
                        op=BitOr(),
                        right=Name(id='X_OK', ctx=Load()),
                    ),
                    Constant(value=None, kind=None),
                    Constant(value=None, kind=None),
                ],
            ),
            body=[
                Expr(
                    value=Constant(value=" Locate a file in a path supplied as a part of the file name,\n        or the user's path, or a supplied path.\n        The function returns full path (not necessarily absolute path),\n        in which the given file name matches an existing file in a directory on the path,\n        or raises IOError(errno.ENOENT).\n\n        >>> # for doctest see which_files()\n    ", kind=None),
                ),
                Assign(
                    targets=[Name(id='path', ctx=Store())],
                    value=Call(
                        func=Name(id='next', ctx=Load()),
                        args=[
                            Call(
                                func=Name(id='which_files', ctx=Load()),
                                args=[
                                    Name(id='file', ctx=Load()),
                                    Name(id='mode', ctx=Load()),
                                    Name(id='path', ctx=Load()),
                                    Name(id='pathext', ctx=Load()),
                                ],
                                keywords=[],
                            ),
                            Constant(value=None, kind=None),
                        ],
                        keywords=[],
                    ),
                    type_comment=None,
                ),
                If(
                    test=Compare(
                        left=Name(id='path', ctx=Load()),
                        ops=[Is()],
                        comparators=[Constant(value=None, kind=None)],
                    ),
                    body=[
                        Raise(
                            exc=Call(
                                func=Name(id='IOError', ctx=Load()),
                                args=[
                                    Name(id='ENOENT', ctx=Load()),
                                    BinOp(
                                        left=Constant(value='%s not found', kind=None),
                                        op=Mod(),
                                        right=BoolOp(
                                            op=Or(),
                                            values=[
                                                BoolOp(
                                                    op=And(),
                                                    values=[
                                                        BinOp(
                                                            left=Name(id='mode', ctx=Load()),
                                                            op=BitAnd(),
                                                            right=Name(id='X_OK', ctx=Load()),
                                                        ),
                                                        Constant(value='command', kind=None),
                                                    ],
                                                ),
                                                Constant(value='file', kind=None),
                                            ],
                                        ),
                                    ),
                                    Name(id='file', ctx=Load()),
                                ],
                                keywords=[],
                            ),
                            cause=None,
                        ),
                    ],
                    orelse=[],
                ),
                Return(
                    value=Name(id='path', ctx=Load()),
                ),
            ],
            decorator_list=[],
            returns=None,
            type_comment=None,
        ),
        If(
            test=Compare(
                left=Name(id='__name__', ctx=Load()),
                ops=[Eq()],
                comparators=[Constant(value='__main__', kind=None)],
            ),
            body=[
                Import(
                    names=[alias(name='doctest', asname=None)],
                ),
                Expr(
                    value=Call(
                        func=Attribute(
                            value=Name(id='doctest', ctx=Load()),
                            attr='testmod',
                            ctx=Load(),
                        ),
                        args=[],
                        keywords=[],
                    ),
                ),
            ],
            orelse=[],
        ),
    ],
    type_ignores=[],
)
